<?xml version='1.0' encoding='utf-8'?>
<!-- Filter title: Module: Vendor Cleanup Templates -->
<!--
================================================================

Module: Vendor Cleanup Templates

BZIssue::4752
BZIssue::4629 - Vendor filter changes for GenProf
BZIssue::5254 - [Glossary] Modify vendor filter to suppress Related
                External Ref without definition
OCECDR-3528: Ability to put links to other Dictionary terms in More
             Information block on Cancer.gov
OCECDR-3869: Support for linking to blocked trials
OCECTS-116 - Add nct_id attribute to ProtocolRef element

================================================================ -->
<xsl:transform               xmlns:xsl = 'http://www.w3.org/1999/XSL/Transform'
                             xmlns:cdr = 'cips.nci.nih.gov/cdr'
                               version = '1.0'
               exclude-result-prefixes = 'cdr'>

 <xsl:output                    method = 'xml'
                  omit-xml-declaration = 'no'
                              encoding = 'utf-8'/>

 <xsl:variable                    name = "protNum"
                                select = "translate(/Protocol/
                                                     ProtocolIDs/
                                                     PrimaryID/
                                                     IDString, ', ', '__')"/>

 <!-- *
 ====================================================================
 Assemble the PersonNameInformation for a person.
 (Eliminating the StandardProfessionalSuffix element)
 ==================================================================== -->
 <xsl:template               match = "PersonNameInformation">
   <PersonNameInformation>
    <xsl:apply-templates    select = "GivenName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "MiddleInitial"
                              mode = "copy"/>
    <xsl:apply-templates    select = "SurName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Prefix"
                              mode = "copy"/>
    <xsl:apply-templates    select = "GenerationSuffix"
                              mode = "copy"/>

    <!--
    If the ProfessionalSuffix element is prepared for the vendor output
    it's created from the Standard/Custom-ProfessionalSuffix elements
    (when clause).
    However, if the ProfessionalSuffic element is only to be copied -
    because it's the second pass of this filter module - the element
    only needs to be copied as is (otherwise clause).
    ==================================================================== -->
    <xsl:choose>
     <xsl:when                test = "ProfessionalSuffix/
                                        StandardProfessionalSuffix |
                                      ProfessionalSuffix/
                                        CustomProfessionalSuffix">
      <ProfessionalSuffix>
       <xsl:for-each        select = "ProfessionalSuffix/
                                        StandardProfessionalSuffix |
                                      ProfessionalSuffix/
                                        CustomProfessionalSuffix">
        <!-- Clean up the periods of the Custom Prof Suffix  -->
        <xsl:choose>
         <xsl:when            test = "name() = 'CustomProfessionalSuffix'">
          <xsl:value-of     select = "translate(node(), '.', '')"/>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of     select = "."/>
         </xsl:otherwise>
        </xsl:choose>
        <xsl:if               test = "position() != last()">
         <xsl:text>, </xsl:text>
        </xsl:if>
       </xsl:for-each>
      </ProfessionalSuffix>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates  select = "ProfessionalSuffix"
                              mode = "copy"/>
     </xsl:otherwise>
    </xsl:choose>

    <xsl:apply-templates    select = "NameFormat"
                              mode = "copy"/>
   </PersonNameInformation>
 </xsl:template>


 <!--
 ====================================================================
 Template to check the ALT attribute for the MediaLink and report a
 warning if it is empty.
 ==================================================================== -->
 <xsl:template                   match = "MediaLink[@alt]"
                                  mode = "copy">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates         select = "node() | @*"
                                  mode = "copy"/>
  </xsl:element>

  <xsl:variable                   name = "docID"
                                select = "@ref"/>

  <xsl:if                         test = "@alt = ''
                                          and
                                          substring-before(@type, '/') =
                                                                   'image'">
   <xsl:message              terminate = "no">
    <xsl:text>ALT attribute of MediaLink to CDR</xsl:text>
    <xsl:value-of               select = "number(
                                            substring-after($docID, 'CDR'))"/>
    <xsl:text> is empty.</xsl:text>
   </xsl:message>
  </xsl:if>
 </xsl:template>


 <!--
 ====================================================================
 Update the ProtocolSite elements containing the attribute
 SuppressContactInformation="Yes" to suppress Street, Phone, and Email
 elements.
 Since the OrgSite and PrivatePracticeSite elements are already
 converted to a ProtocolSite element at this point this is taking
 care of both address types.
 Two templates are needed:
 a) Template to remove the SuppressContactInformation attribute itself
 b) Template to remove the elements not to be displayed if attribute
    exists.
 ==================================================================== -->
 <!-- a) Template to remove SuppressContactInformation attribute -->
 <xsl:template                   match = "ProtocolSite
                                            [@SuppressContactInformation]"
                                  mode = "copy">
  <xsl:copy>
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "@ref"/>
   </xsl:attribute>
   <xsl:attribute                 name = "sitetype">
    <xsl:value-of               select = "@sitetype"/>
   </xsl:attribute>
   <xsl:apply-templates           mode = "copy"/>
  </xsl:copy>
 </xsl:template>

 <!-- b) Template to remove elements not to be displayed if (a) matches -->
 <xsl:template                   match = "ProtocolSite
                                            [@SuppressContactInformation]/
                                            ProtPerson/
                                            Contact/
                                            ContactDetail/
                                            PostalAddress/
                                            Street             |
                                          ProtocolSite
                                            [@SuppressContactInformation]/
                                            ProtPerson/
                                            Contact/
                                            ContactDetail/
                                            Phone              |
                                          ProtocolSite
                                            [@SuppressContactInformation]/
                                            ProtPerson/
                                            Contact/
                                            ContactDetail/
                                            TollFreePhone      |
                                          ProtocolSite
                                            [@SuppressContactInformation]/
                                            ProtPerson/
                                            Contact/
                                            ContactDetail/
                                            WebSite            |
                                          ProtocolSite
                                            [@SuppressContactInformation]/
                                            ProtPerson/
                                            Contact/
                                            ContactDetail/
                                            Email"
                                  mode = "copy"/>


 <!-- *
 ====================================================================
 Update the ClinicalTrialsOffice elements containing the attribute
 ctOffice="Yes" to suppress Street element.
 Two templates are needed:
 a) Template to remove the ctOffice attribute itself
 b) Template to remove the Street element not to be displayed if attribute
    exists.
 ==================================================================== -->
 <!-- a) Template to remove ctOffice attribute -->
 <xsl:template                   match = "Contact
                                            [@ctOffice]"
                                  mode = "copy">
  <xsl:copy>
   <xsl:apply-templates           mode = "copy"/>
  </xsl:copy>
 </xsl:template>

 <!-- b) Template to remove Street element if (a) matches -->
 <xsl:template                   match = "Contact
                                            [@ctOffice]/
                                            ContactDetail/
                                            PostalAddress/
                                            Street"
                                  mode = "copy"/>


 <!--
 =================================================================
 Template to remove empty SummarySections
 Note: This template must be placed _before_ the template to
       alter the id attributes for the misc. docs to allow that
       one to be processesed first, if appropriate.  The server is
       using the template it sees last first, if they have the
       same name.
 This template will _not_ check if a summary section created from
 a misc. document is possibly empty (since it's processed with the
 other template) which will mean the summary will fail to load on
 Cancer.gov.  However, we shouldn't silently load summaries
 without proper misc. information anyway.
 ================================================================= -->
 <xsl:template                 match = "//SummarySection"
                                mode = "copy">
   <xsl:if                      test = "normalize-space(.)">
    <SummarySection>
     <xsl:for-each            select = "@*">
      <xsl:attribute           name  = "{name()}">
       <xsl:value-of          select = "."/>
      </xsl:attribute>
     </xsl:for-each>
    <xsl:apply-templates      select = "*"
                                mode = "copy"/>
   </SummarySection>
   </xsl:if>
 </xsl:template>


 <!--
 ====================================================================
 Template to drop the Changes to this summary section for patient
 summaries.
 ==================================================================== -->
 <xsl:template                   match = "SummarySection
                                            [SectMetaData/SectionType =
                                              'Changes to summary']"
                                  mode = "copy">
  <xsl:if                         test = "/Summary/
                                           SummaryMetaData/
                                           SummaryAudience =
                                                      'Health professionals'">
   <!-- We need to copy the Changes Section back to the output tree without
        including the namespace declaration. -->
   <xsl:element                   name = "{name()}">
    <xsl:for-each               select = "@*">
     <xsl:attribute              name  = "{name()}">
      <xsl:value-of             select = "."/>
     </xsl:attribute>
    </xsl:for-each>

    <xsl:apply-templates          mode = "copy"/>
   </xsl:element>
  </xsl:if>
 </xsl:template>


 <!--
 ====================================================================
 Template to drop the Unusual Cancers Special Consideration section
 if this section is part of an imported modul summary
 ==================================================================== -->
 <xsl:template                   match = "SummarySection
                                            [SectMetaData/SectionType =
                                    'Unusual Cancers Special Considerations']"
                                  mode = "copy">
  <xsl:if                         test = "not(starts-with(@id, '_sm'))">
   <!-- We need to copy the Special Considerations Section back to the
        output tree without including the namespace declaration if the
        section did not come from a module (identified by the id
        attribute. -->
   <xsl:element                   name = "{name()}">
    <xsl:for-each               select = "@*">
     <xsl:attribute              name  = "{name()}">
      <xsl:value-of             select = "."/>
     </xsl:attribute>
    </xsl:for-each>

    <xsl:apply-templates          mode = "copy"/>
   </xsl:element>
  </xsl:if>
 </xsl:template>


 <!--
 ====================================================================
 Template to modify SummarySection id attributes containing text from
 misc. documents.
 This code will need to be changed if the id attribute values for the
 documents are being changed.
 Treatment, HP Summaries, English - _ForMoreInfo_14
 Treatment, HP Summaries, Spanish - _ForMoreInfo_7
 CAM Summaries                    - _ForMoreInfo_2
 ==================================================================== -->
 <xsl:template                   match = "SummarySection
                                            [@id='_ForMoreInfo_14'] |
                                          SummarySection
                                            [@id='_ForMoreInfo_7']  |
                                          SummarySection
                                            [@id='_ForMoreInfo_2']"
                                  mode = "copy">
  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "@*">
    <xsl:attribute                name = "{name()}">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:for-each>
   <xsl:apply-templates           mode = "misc"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Template to copy all nodes as is but change the id attribute values
 by appending a text value '_ForMoreInfo'.
 ==================================================================== -->
 <xsl:template                   match = "@* | *"
                                  mode = "misc">
  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "@*">
    <xsl:attribute                name = "{name()}">
     <xsl:choose>
      <xsl:when                   test = "name() = 'id'">
       <!--
       The CAM summaries already contain the '_ForMoreInfo' value on
       the first level nodes.  Don't append again.
       =============================================================== -->
       <xsl:choose>
        <xsl:when                 test = "contains(., 'ForMoreInfo')">
         <xsl:value-of          select = "."/>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>_ForMoreInfo</xsl:text>
         <xsl:value-of          select = "."/>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
       <xsl:value-of              select = "."/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:attribute>
   </xsl:for-each>
   <xsl:apply-templates           mode = "misc"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:id with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:id"
                              mode = "copy">
   <xsl:attribute             name = "id">
    <xsl:value-of           select = "."/>
   </xsl:attribute>
 </xsl:template>

 <!--
 ====================================================================
 Drop the cdr namespace in cdr:ref with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:ref"
                              mode = "copy">
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "."/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:xref with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:xref"
                              mode = "copy">
   <xsl:attribute             name = "xref">
    <xsl:value-of           select = "."/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:href with/without mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:href"
                              mode = "copy">
   <xsl:attribute             name = "href">
    <xsl:value-of           select = "."/>
   </xsl:attribute>
 </xsl:template>
 <xsl:template               match = "@cdr:href">
   <xsl:attribute             name = "href">
    <xsl:value-of           select = "."/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:ref with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@PreviousLocation"
                              mode = "copy">
   <xsl:attribute             name = "status">
    <xsl:value-of           select = "'Inactive--Contact information may not be current'"/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the PdqKey attribute with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@PdqKey"
                              mode = "copy">
 </xsl:template>


 <!--
 ====================================================================
 Drop the MailAbstractTo attribute which is needed for mailers only
 ==================================================================== -->
 <xsl:template               match = "@MailAbstractTo"
                              mode = "copy"/>

 <!--
 ====================================================================
 Drop the AddressType attribute which was introduced for QC reports.
 ==================================================================== -->
 <xsl:template               match = "@AddressType"
                              mode = "copy">
 </xsl:template>


 <!--
 ====================================================================
 Drop the CIPSContact attribute which is needed for mailers only.
 Ditto for UsedFor, MailAbstractTo.
 Note: This template only handles the English version of the
       SourceTitle.  The Spanish version is handled specially in a
       different template, so the removal of the SourceTitle has to
       be handled within that template.
 ==================================================================== -->
 <xsl:template               match = "@UsedFor        |
                                      @CIPSContact    |
                                      @MailAbstractTo |
                                      @SourceTitle"
                              mode = "copy"/>


 <!--
 Drop ref attribute for the PublishedResult element.  This attribute
 is included for the QC reports only.
 ===================================================================== -->
 <xsl:template               match = "PublishedResults/@ref |
                                      RelatedPublications/@ref"
                              mode = "copy"/>
 <xsl:template               match = "OverallContactBackup/@ref"
                              mode = "copy"/>
 <xsl:template               match = "OverallContactBackup/@ref"/>


 <!--
 Drop native attribute for the TollFreePhone element.  This attribute
 is included for the QC reports only.
 ===================================================================== -->
 <xsl:template               match = "TollFreePhone/@native |
                                      PostalAddress/@native"
                              mode = "copy"/>


 <!--
 =====================================================================
 Suppress nodes with or without copy mode that are not to be displayed
 in vendor output.
 ===================================================================== -->
 <xsl:template               match = "Fax |
                                      DocId |
                                      PdqKey |
                                      Comment |
                                      CdrDocCtl |
                                      CIPSContact |
                                      ProtocolDesign |
                                      StandardWording |
                                      OrganizationDetails |
                                      AdministrativeInformation |
                                      PRACTICELOCATIONS/WebSite |
                                      PRACTICELOCATIONS[@UsedFor='GPMailer']"
                                      />

 <xsl:template               match = "Fax |
                                      DocId |
                                      PdqKey |
                                      Comment |
                                      CdrDocCtl |
                                      CIPSContact |
                                      ProtocolDesign |
                                      StandardWording |
                                      OrganizationDetails |
                                      AdministrativeInformation |
                                      PRACTICELOCATIONS/WebSite |
                                      PRACTICELOCATIONS[@UsedFor='GPMailer']"
                              mode = "copy"/>


 <!--
 =====================================================================
 Suppress PoliticalUnitShortName nodes with or without copy mode.
 However, keep the element for the PoliticalSubUnit document type.
 ===================================================================== -->
 <xsl:template               match = "PoliticalSubUnitShortName">
  <xsl:if                     test = "name(..) = 'PoliticalSubUnit'">
   <xsl:copy>
    <xsl:apply-templates/>
   </xsl:copy>
  </xsl:if>
 </xsl:template>

 <xsl:template               match = "PoliticalSubUnitShortName"
                              mode = "copy">
  <xsl:if                     test = "name(..) = 'PoliticalSubUnit'">
   <xsl:copy>
    <xsl:apply-templates      mode = "copy"/>
   </xsl:copy>
  </xsl:if>
 </xsl:template>


 <!--
 =====================================================================
 Don't export protocol lead organizations with status of "Withdrawn."
 ===================================================================== -->
 <xsl:template               match = "ProtocolLeadOrg
                                      [LeadOrgProtocolStatus/
                                       StatusName = 'Withdrawn']"/>
 <xsl:template               match = "ProtocolLeadOrg
                                      [LeadOrgProtocolStatus/
                                       StatusName = 'Withdrawn']"
                              mode = "copy"/>

 <!--
 =====================================================================
 Don't display LeadOrgPersonnel with Public="No" attribute.
 ===================================================================== -->
 <xsl:template               match = "LeadOrgPersonnel/
                                      ProtPerson[@Public = 'No']"
                              mode = "copy">
 </xsl:template>


 <!--
 =====================================================================
 Don't keep LeadOrgPersonnel whose only role is 'Update person'
 and ensure that the Public="No" attribute does not exist.

 NOTE: We don't have business rules from the users for what to do
       if more than one PersonRole with values other than 'Update
       person' are present, so we just pass them all through, making
       the resulting output invalid (since the DTD only allows one
       occurrence here).
 ===================================================================== -->
 <xsl:template               match = "LeadOrgPersonnel/
                                      ProtPerson[not(@Public)]"
                              mode = "copy">
  <xsl:if                     test = "(PersonRole != 'Update person') or
                                      (PersonRole = 'Update person' and
                                       count(PersonRole) &gt; 1)">
   <ProtPerson>
    <xsl:if                   test = "@ref">
     <xsl:copy-of           select = "@ref"/>
    </xsl:if>
    <xsl:if                   test = "@status">
     <xsl:copy-of           select = "@status"/>
    </xsl:if>
    <xsl:apply-templates    select = "PersonNameInformation"
                              mode = "copy"/>
    <xsl:for-each           select = "PersonRole">
     <xsl:if                  test = ". != 'Update person'">
      <xsl:apply-templates  select = "."
                              mode = "copy"/>
     </xsl:if>
    </xsl:for-each>
    <xsl:apply-templates    select = "Contact"
                              mode = "copy"/>
   </ProtPerson>
  </xsl:if>
 </xsl:template>

 <!--
 ====================================================================
 Drop the Email and Phone elements with attribute Public = 'No'.
 Note:  Since the QC report needs these displayed it is being
        filtered out at the last step creating the vendor output.
 ==================================================================== -->
 <xsl:template               match = "Email |
                                      Phone"
                              mode = "copy">
  <xsl:if                     test = "not(@Public)">
   <xsl:element               name = "{name()}">
    <xsl:value-of           select = "."/>
   </xsl:element>
  </xsl:if>
 </xsl:template>

 <xsl:template               match = "Email |
                                      Phone">
  <xsl:if                     test = "not(@Public)">
   <xsl:element               name = "{name()}">
    <xsl:value-of           select = "."/>
   </xsl:element>
  </xsl:if>
 </xsl:template>


 <!--
 ====================================================================
 Drop the WebSite element with attribute native = 'no'.
 Note:  Since the QC report needs this displayed it is being
        filtered out at the last step creating the vendor output.
 ==================================================================== -->
 <xsl:template               match = "WebSite"
                              mode = "copy">
  <xsl:if                     test = "not(@native)">
   <xsl:element               name = "{name()}">
    <xsl:attribute            name = "xref">
     <xsl:value-of          select = "@xref"/>
    </xsl:attribute>
    <xsl:value-of           select = "."/>
   </xsl:element>
  </xsl:if>
 </xsl:template>
 <xsl:template               match = "WebSite">
  <xsl:if                     test = "not(@native)">
   <xsl:element               name = "{name()}">
    <xsl:attribute            name = "xref">
     <xsl:value-of          select = "@xref"/>
    </xsl:attribute>
    <xsl:value-of           select = "."/>
   </xsl:element>
  </xsl:if>
 </xsl:template>


 <!--
 =====================================================================
 Suppress the ProtocolIDs/OtherID node from vendor output but only
 if the IDType is "CTEP ID".
 ===================================================================== -->
 <!--
 With the implementation of Bug 3552 we don't need to drop the
 CTEP IDs anymore
 ===============================================================
 <xsl:template               match = "ProtocolIDs/
                                      OtherID[IDType = 'CTEP ID']"
                              mode = "copy"/>
 -->

 <!--
 =========================================================================
 Drop ProtocolRef markup when an NCT ID is not present.
 ========================================================================= -->
 <xsl:template               match = "ProtocolRef"
                              mode = "copy">
  <xsl:choose>
   <xsl:when                  test = "@nct_id != ''">
    <ProtocolRef>
     <xsl:attribute           name = "nct_id">
      <xsl:value-of         select = "@nct_id"/>
     </xsl:attribute>
     <xsl:apply-templates     mode = "copy"/>
    </ProtocolRef>
   </xsl:when>
   <xsl:otherwise>
    <xsl:apply-templates      mode = "copy"/>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

 <!--
 =========================================================================
 Identify if an element with an href attribute points to a non-publishable
 document.  If it does remove the element tags and display a warning
 message.
 ========================================================================= -->
 <xsl:template               match = "LOERef | SummaryRef | GlossaryTermRef"
                              mode = "copy">
  <xsl:variable               name = "docID"
                            select = "@cdr:href | @href"/>
  <xsl:variable               name = "pubVersion"
                            select = "document(concat('cdrutil:/get-pv-num/',
                                                       @cdr:href | @href))"/>

  <xsl:choose>
   <xsl:when                  test = "$pubVersion = 0">
    <xsl:message         terminate = "no">
     <xsl:value-of          select = "name()"/>
     <xsl:text> (</xsl:text>
     <xsl:value-of          select = "concat('CDR', number(
                                        substring-after($docID, 'CDR')))"/>
     <xsl:text>) Publishable Version of linked Document </xsl:text>
     <xsl:text>does not exist.</xsl:text>
    </xsl:message>
    <xsl:value-of           select = "concat(' ', .)"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element              name = "{name()}">
     <xsl:for-each             select = "@*">
      <xsl:choose>
       <xsl:when                 test = "starts-with(name(), 'cdr:')">
        <xsl:attribute             name = "{substring-after(name(),':')}">
         <xsl:value-of           select = "."/>
        </xsl:attribute>
       </xsl:when>
       <xsl:otherwise>
        <xsl:attribute             name = "{name()}">
         <xsl:value-of           select = "."/>
        </xsl:attribute>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:for-each>
     <!-- xsl:attribute           name = "href">
      <xsl:value-of         select = "@cdr:href | @href"/>
     </xsl:attribute -->
     <xsl:apply-templates     mode = "copy"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =====================================================================
 Identify if a RelatedInformation element has been specified for the
 Spanish language without an existing Spanish definition.
 If this happens Gatekeeper complains and fails the document.
 Drop the element if the translation doesn't exist and leave as is
 otherwise.
 ===================================================================== -->
 <xsl:template                   match = "RelatedExternalRef[@UseWith = 'es'] |
                                          RelatedSummaryRef[@UseWith = 'es']"
                                  mode = "copy">
  <xsl:choose>
   <xsl:when                      test = "not(/GlossaryTerm/
                                           SpanishTermDefinition)">
    <xsl:message             terminate = "no">
     <xsl:value-of              select = "name()"/>
     <xsl:text>[UseWith='es'] Spanish RelatedExternalRef element </xsl:text>
     <xsl:text>exists but Spanish Term Definition missing.</xsl:text>
    </xsl:message>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                  name = "{name()}">

     <xsl:for-each              select = "@*[name(.) != 'SourceTitle']">
      <xsl:choose>
       <xsl:when                  test = "starts-with(name(), 'cdr:')">
        <xsl:attribute            name = "{substring-after(name(),':')}">
         <xsl:value-of          select = "."/>
        </xsl:attribute>
       </xsl:when>
       <xsl:otherwise>
        <xsl:attribute            name = "{name()}">
         <xsl:value-of          select = "."/>
        </xsl:attribute>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:for-each>

     <xsl:apply-templates         mode = "copy"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =====================================================================
 Identify if a MediaLink element has been specified for the
 Spanish language without an existing Spanish definition (possibly the
 definition status is not approved yet).
 If this happens Gatekeeper complains and fails the document.
 Drop the element if the translation doesn't exist and leave as is
 otherwise.
 ===================================================================== -->
 <xsl:template               match = "MediaLink[@language = 'es']"
                              mode = "copy">
  <xsl:choose>
   <xsl:when                   test = "/GlossaryTerm
                                      and
                                      not(/GlossaryTerm/
                                           SpanishTermDefinition)">
    <xsl:message          terminate = "no">
     <xsl:text>Spanish MediaLink element exists but Spanish Term </xsl:text>
     <xsl:text>Definition missing.</xsl:text>
    </xsl:message>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                name = "{name()}">
    <xsl:for-each            select = "@*">
     <xsl:choose>
      <xsl:when                test = "starts-with(name(), 'cdr:')">
       <xsl:attribute          name = "{substring-after(name(),':')}">
        <xsl:value-of        select = "."/>
       </xsl:attribute>
      </xsl:when>
      <xsl:otherwise>
       <xsl:attribute          name = "{name()}">
        <xsl:value-of        select = "."/>
       </xsl:attribute>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:for-each>
    <xsl:apply-templates        mode = "copy"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =====================================================================
 Template to remove the Summary denormalized data from the SummaryRef
 element which is needed to create the links for the QC reports
 properly.
 ===================================================================== -->
 <xsl:template               match = "SummaryRef/Summary"
                              mode = "copy"/>


 <!--
 =====================================================================
 Add a bullet to the Eligibility Criteria list of InScopeProtocols
 The new ListItem element is being added to each top level Itemized
 list as the last element.

 This template is not needed anymore with the switch to CTRP.  No
 changes to fix URL.
 ===================================================================== -->
 <!--
 <xsl:template               match = "Protocol/
                                      ProtocolAbstract/
                                      Patient/
                                      EligibilityText/
                                      ItemizedList"
                              mode = "copy">
  <xsl:copy>
   <xsl:for-each             select = "@*">
    <xsl:attribute             name = "{name()}">
     <xsl:value-of           select = "."/>
    </xsl:attribute>
   </xsl:for-each>
   <xsl:apply-templates        mode = "copy"/>
   <ListItem>
    <xsl:text>For more information about the eligibility criteria </xsl:text>
    <xsl:text>for this trial, refer to the </xsl:text>
    <xsl:element              name = "ExternalRef">
     <xsl:attribute           name = "xref">
      <xsl:text>https://</xsl:text>
      <xsl:text>www.cancer.gov</xsl:text>
      <xsl:text>/clinicaltrials/</xsl:text>
      <xsl:value-of         select = "$protNum"/>
      <xsl:text>#EntryCriteria_</xsl:text>
      <xsl:value-of         select = "/Protocol/@id"/>
     </xsl:attribute>
     <xsl:text>Health Professional version.</xsl:text>
    </xsl:element>
   </ListItem>
  </xsl:copy>
 </xsl:template>
 -->


 <!--
 =====================================================================
 Suppress the ArmsOrGroups element and replace with a comment.
 This is neccessary in order to allow submission of the documents to
 ClinicalTrials.gov using the CTGovExport utility.
 (The template can be removed after Bug 4123 is in production, VE.)
 ===================================================================== -->
 <xsl:template                   match = "ArmsOrGroupsXXX"
                                  mode = "copy">
  <xsl:comment>
   <xsl:text>ArmsOrGroups comment needed for CTGovExport </xsl:text>
   <xsl:text>submission - (</xsl:text>
   <xsl:value-of                select = "document('cdrutil:/date/%25B %25#d, %25Y %25#I:%25M% 25p')"/>
   <xsl:text>)</xsl:text>
  </xsl:comment>
 </xsl:template>

 <!--
 =====================================================================
 Suppress the new Safety attribute and add a comment.
 This is neccessary in order to allow submission of the documents to
 ClinicalTrials.gov using the CTGovExport utility.

 Note:  This is not needed anymore.  We now display the Safety
        attribute.
 ===================================================================== -->
 <xsl:template                   match = "XXXOutcome[@Safety]"
                                  mode = "copy">

  <xsl:comment>Safety comment needed for CTGovExport submission</xsl:comment>

  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "@*">
    <xsl:if                       test = "not(name() = 'Safety')">
     <xsl:attribute               name = "{name()}">
      <xsl:value-of             select = "."/>
     </xsl:attribute>
    </xsl:if>
   </xsl:for-each>

   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>

</xsl:transform>
