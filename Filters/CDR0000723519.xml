<?xml version='1.0' encoding='utf-8'?>
<!-- $Id$ -->
<!-- Filter title: Denormalization Filter: Summary Resolve Table and Figure Number -->
<!--
=====================================================================
$Id: 10264 2011-11-18 18:34:20Z volker $

Filter to replace the ReferencedTableNumber and ReferencedFigureNumber
elements with the associated numbers for automated numbering of
tables and figures.
Written by Volker Englisch, 2003-08-12

BZIssue::5097 - [Summaries] Modifications to Publishing Filter to 
                include Module content
===================================================================== -->
<xsl:transform               xmlns:xsl = 'http://www.w3.org/1999/XSL/Transform'
                             xmlns:cdr = 'cips.nci.nih.gov/cdr'
                               version = '1.0'>

 <xsl:output                    method = 'xml'
                  omit-xml-declaration = "no"
                              encoding = 'utf-8'/>

 <!--
 ==============================================================
 ============================================================== -->
 <xsl:template                   match = "*">
  <xsl:copy-of                  select = "*"/>
  <xsl:apply-templates/>
 </xsl:template>


 <!--
 ==============================================================
 Template to populate the Table number
 Details are the same as for ReferencedFigureNumber
 ============================================================== -->
 <xsl:template                   match = "ReferencedTableNumber">
  <xsl:variable                   name = 'moduleID'
                                select = "ancestor::SummaryFragmentRef
                                                            /@cdr:href"/>
  <!-- xsl:text> [</xsl:text -->
  <!-- Display a number but don't create a link -->
  <xsl:choose>
   <xsl:when                      test = "@Target">
    <xsl:choose>
     <xsl:when                    test = "substring-before(@Target, '#')
                                                            = /Summary/DocId">
      <xsl:variable               name = "refTableFrag"
                                select = "substring-after(@Target, '#')"/>
      <xsl:value-of             select = "//Table[@cdr:id = $refTableFrag]
                                          /Title/TableNumber/@tableNumber"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable               name = "refTableFrag"
                                select = "concat('_sm_', 
                                            translate(@Target, '#', ''))"/>
      <xsl:value-of             select = "//Table[@cdr:id = $refTableFrag]
                                          /Title/TableNumber/@tableNumber"/>
     </xsl:otherwise>
   </xsl:choose>
   </xsl:when>
   <!-- Display the number as part of the fragment link -->
   <xsl:otherwise>
    <xsl:choose>
     <!-- Linking to table not within a module (but within main) -->
     <xsl:when                    test = "substring-before($moduleID, '#')
                                                            = /Summary/DocId">
      <xsl:variable               name = "refTableFrag"
                                select = "substring-after(../../@cdr:href, 
                                                         '#')"/>
      <xsl:value-of             select = "//Table[@cdr:id = $refTableFrag]
                                          /Title/TableNumber/@tableNumber"/>
      <!-- xsl:value-of             select = "$refTableFrag"/ -->
     </xsl:when>
     <!-- Linking from module to table within the module -->
     <xsl:otherwise>
      <!--xsl:variable               name = "refTableFrag"
                                select = "substring-after(../../@cdr:href, 
                                                         '#')"/-->
      <xsl:variable               name = "refTableFrag"
                                select = "concat('_sm_', 
                                            translate($moduleID, '#', ''))"/>
      <xsl:value-of             select = "//Table[@cdr:id = $refTableFrag]
                                          /Title/TableNumber/@tableNumber"/>
      <!-- xsl:value-of             select = "$refTableFrag"/ -->
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>

  <!-- xsl:text>] </xsl:text -->
 </xsl:template>


 <!--
 ==============================================================
 Template to populate the figure numbers.
 Typically the ReferencedFigureNumber element is embeded within
 a SummaryFragmentRef.  We will populate the Figure number 
 based on the Figure the SummaryFragmentRef is pointing to.
 If the ReferencedFigureNumber is not embedded within a 
 SummaryFragmentRef (because we don't want to create a link to 
 that figure) the Target attribute must be specified in order 
 to select the appropriate number.
 ============================================================== -->
 <xsl:template                   match = "ReferencedFigureNumber">
  <xsl:variable                   name = 'moduleID'
                                select = "ancestor::SummaryFragmentRef
                                                             /@cdr:href"/>
  <!-- xsl:text> [</xsl:text -->
  <!-- Display a number but don't create a link -->
  <xsl:choose>
   <xsl:when                      test = "@Target">
    <xsl:choose>
     <xsl:when                    test = "substring-before(@Target, '#')
                                                            = /Summary/DocId">
      <xsl:variable               name = "refFigureFrag"
                                select = "substring-after(@Target, '#')"/>
      <xsl:value-of             select = "//MediaLink[@cdr:id = $refFigureFrag]
                                          /Caption/FigureNumber/@figureNumber"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable               name = "refFigureFrag"
                                select = "concat('_sm_', 
                                               translate(@Target, '#', ''))"/>
      <xsl:value-of             select = "//MediaLink[@cdr:id = $refFigureFrag]
                                          /Caption/FigureNumber/@figureNumber"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <!-- Display the number as part of the fragment link -->
   <xsl:otherwise>
    <xsl:choose>
     <!-- Linking to figure not within a module (but within main) -->
     <xsl:when                    test = "substring-before($moduleID, '#')
                                                            = /Summary/DocId">
      <xsl:variable               name = "refFigureFrag"
                                select = "substring-after(../../@cdr:href, 
                                                         '#')"/>
      <xsl:value-of             select = "//MediaLink[@cdr:id = $refFigureFrag]
                                          /Caption/FigureNumber/@figureNumber"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable               name = "refFigureFrag"
                                select = "concat('_sm_', 
                                               translate($moduleID, '#', ''))"/>
      <xsl:value-of             select = "//MediaLink[@cdr:id = $refFigureFrag]
                                          /Caption/FigureNumber/@figureNumber"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>

  <!-- xsl:text>] </xsl:text -->
 </xsl:template>


 <!--
 ==============================================================
 ============================================================== -->
 <xsl:template                   match = "TableNumber">
    <xsl:value-of               select = "@tableNumber"/>
 </xsl:template>


 <!--
 ==============================================================
 ============================================================== -->
 <xsl:template                   match = "FigureNumber">
    <xsl:value-of               select = "@figureNumber"/>
 </xsl:template>


 <!-- 
 ===================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of of something 
 ==================================================================== -->
 <xsl:template                   match = "@*|node()">
  <xsl:copy>
   <xsl:apply-templates         select = "@*"/>
   <xsl:apply-templates/>
  </xsl:copy> 
 </xsl:template>

</xsl:transform>
