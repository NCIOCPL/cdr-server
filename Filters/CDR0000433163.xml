<?xml version="1.0" ?>
<!-- Filter title: Media QC Report Filter -->
<!--
 ================================================================
 Filter to create a Media Content QC Report
 Written by Volker Englisch

 OCECDR-3728: [Media] Add Permission Info to QC Report
 ================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr">

 <xsl:output                    method = "html"/>

 <xsl:include  href = "cdr:name:Module: Attribute Sets"/>
 <xsl:include  href = "cdr:name:Module: QC Filter Templates"/>

 <xsl:variable                    name = "docID"
                                select = "document('cdrutil:/docid')"/>
 <xsl:variable                    name = "whoAmI"
                                select = "'MediaQc'"/>
 <xsl:variable                    name = "dateTime"
                                select = "document('cdrutil:/date')"/>

 <xsl:attribute-set               name = "left-column">
  <xsl:attribute                  name = "width">
   <xsl:text>15%</xsl:text>
  </xsl:attribute>
  <xsl:attribute                  name = "valign">
   <xsl:text>top</xsl:text>
  </xsl:attribute>
  <xsl:attribute                  name = "align">
   <xsl:text>center</xsl:text>
  </xsl:attribute>
 </xsl:attribute-set>

 <xsl:attribute-set               name = "right-column">
  <xsl:attribute                  name = "width">
   <xsl:text>85%</xsl:text>
  </xsl:attribute>
  <xsl:attribute                  name = "valign">
   <xsl:text>top</xsl:text>
  </xsl:attribute>
 </xsl:attribute-set>

 <!--
 ===============================================================
 Main Template
 =============================================================== -->
 <xsl:template                   match = "/">
  <!-- <!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML//EN' /> -->
  <xsl:element                    name = "html">
   <xsl:element                   name = "head">
    <xsl:variable                 name = "cdrdocs"
                                select = "document('cdrx:/*/CdrCtl')"/>

    <xsl:element                  name = "title">
     <xsl:value-of              select = "concat('CDR',
                                           number(
                                           substring-after($docID, 'CDR')))"/>
     <xsl:text>: </xsl:text>
     <xsl:value-of              select = "substring-before(
                                           concat($cdrdocs/CdrDocCtl/
                                                  DocTitle, ';'), ';')"/>
    </xsl:element>

    <xsl:element                  name = "style">
     <xsl:attribute               name = "type">
      <xsl:text>text/css</xsl:text>
     </xsl:attribute>
     .label-big    { font-size: 1.1em;     /* Using 1.2m appears to big on IE */
                     font-weight: bold; 
                     margin-top: 1.0em; }  /* Using medium to small on FireFx */
     .label-small  { font-weight: bold; }
     ul            { margin: 0 0 0 16 ;
                     padding-left: 0;}
     /* Clear floats after the columns */
     .row:after    { content: "";
                     display: table;
                     clear: both; }
     .column       { float: left; }
     .left         { width: 30%; }
     .right        { width: 70%; }
     .image-center { text-align: center; 
                     margin-top: 1.0em; }
     .big          { font-size: 14pt;
                     font-weight: bold; }
     .center       { text-align: center; }
     .date-header  { text-align: center;
                     font-weight: bold;
                     margin-bottom: 14px; }
     table         { width: 100%; }
     table, tr, td, th { border: 1px solid black; 
                         border-collapse: collapse; }
     .language     { font-weight: bold; }
     .label
    </xsl:element>
   </xsl:element>
   <xsl:element                   name = "basefont">
    <xsl:attribute                name = "face">
     <xsl:text>Arial, Helvetica, sans-serif</xsl:text>
    </xsl:attribute>
   </xsl:element>

   <xsl:apply-templates         select = "Media"/>

  </xsl:element>
 </xsl:template>


 <!--
 ===================================================================
 Generate the HTML for the Media (image) QC Report
 =================================================================== -->
 <xsl:template                   match = "Media">
  <xsl:element                    name = "body">

   <!--
   ==================================================================
   Display Report Name
   ================================================================== -->
   <xsl:call-template             name = "qcReportHeader">
    <xsl:with-param               name = "reportName"
                                select = "'Media'"/>
   </xsl:call-template>

   <!--
   ====================================================================
   Display date as subheading
   ==================================================================== -->
   <xsl:call-template             name = "blockTitle">
    <xsl:with-param               name = "label"
                                select = "concat('CDR',
                                           number(
                                           substring-after($docID, 'CDR')))"/>
   </xsl:call-template>

   <!--
   ======================================================================
   Display media title and image
   ===================================================================== -->
   <!-- Adding a spacer -->
   <xsl:call-template             name = "blockTitle">
    <xsl:with-param               name = "label"
                                select = "''"/>
   </xsl:call-template>

   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Media Title'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-big'"/>
    <xsl:with-param               name = "text"
                                select = "MediaTitle"/>
   </xsl:call-template>

   <!-- Display the image -->
   <xsl:choose>
    <xsl:when                     test = "PhysicalMedia/ImageData">
     <xsl:element                 name = "div">
      <xsl:attribute              name = "class">
       <xsl:text>image-center</xsl:text>
      </xsl:attribute>

      <xsl:element                name = "img">
       <xsl:attribute             name = "src">
        <xsl:text>/cgi-bin/cdr/GetCdrImage.py?id=</xsl:text>
        <xsl:value-of           select = "$docID"/>
        <xsl:text>-400.jpg</xsl:text>
       </xsl:attribute>
      </xsl:element>
     </xsl:element>
    </xsl:when>
   </xsl:choose>

   <!-- Display the data -->
   <xsl:apply-templates         select = "PhysicalMedia"/>
   <xsl:apply-templates         select = "MediaSource"/>
   <xsl:apply-templates         select = "PermissionInformation"/>
   <xsl:apply-templates         select = "MediaContent"/>
   <xsl:apply-templates         select = "ProposedUse"/>
   <xsl:apply-templates         select = "ProcessingStatuses"/>
   <p/>

   <xsl:if                        test = "RelatedDocuments">
   <table       xsl:use-attribute-sets = "table">
    <tr>
     <td        xsl:use-attribute-sets = "cell1of2">
      <span class="label-big">Related Documents</span>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:for-each             select = "RelatedDocuments/
                                          SupplementaryInfoLink">
       <li>
        <xsl:value-of            select = "."/>
        <xsl:text> (</xsl:text>
        <xsl:value-of            select = "concat('CDR',
                                           number(
                                            substring-after(
                                             substring-before(
                                              concat(@cdr:ref, '#'), '#'),
                                                     'CDR')))"/>
        <xsl:text>)</xsl:text>
       </li>
      </xsl:for-each>
     </td>
    </tr>
   </table>
   <p/>
   </xsl:if>

   <xsl:if                        test = "Comment">
    <p/>
    <span class="label-big">Comment</span>
    <br/>
    <xsl:value-of               select = "Comment"/>
   </xsl:if>
   <p/>

   <!---
   ===================================================================
   Display Date Last Modified
   =================================================================== -->
  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "'Record Information'"/>
  </xsl:call-template>

   <table       xsl:use-attribute-sets = "table">
    <xsl:for-each               select = "CdrDocCtl">
     <tr>
      <td       xsl:use-attribute-sets = "cell1of2">
       <b>Created By</b>
      </td>
      <td       xsl:use-attribute-sets = "cell2of2">
       <xsl:value-of            select = "Create/User"/>
      </td>
     </tr>
     <tr>
      <td       xsl:use-attribute-sets = "cell1of2">
       <b>Date</b>
      </td>
      <td       xsl:use-attribute-sets = "cell2of2">
       <xsl:value-of            select = "substring-before(Create/Date,'T')"/>
      </td>
     </tr>
     <tr>
      <td       xsl:use-attribute-sets = "cell1of2">
       <b>Updated By</b>
      </td>
      <td       xsl:use-attribute-sets = "cell2of2">
       <xsl:value-of            select = "Modify/User"/><br />
      </td>
     </tr>
     <tr>
      <td       xsl:use-attribute-sets = "cell1of2">
       <b>Date</b>
      </td>
      <td       xsl:use-attribute-sets = "cell2of2">
       <xsl:value-of            select = "substring-before(Modify/Date,'T')"/>
      </td>
     </tr>
    </xsl:for-each>
   </table>
  </xsl:element>
 </xsl:template>


 <!--
 =======================================================================
 Template to display Physical Media Information
 ======================================================================= -->
 <xsl:template                   match = "PhysicalMedia">
  <xsl:apply-templates          select = "ImageData |
                                          VideoData |
                                          SoundData"/>
 </xsl:template>


 <!--
 =======================================================================
 Template to display Physical Media Information
 ======================================================================= -->
 <xsl:template                   match = "MediaSource">
   <!-- Adding a spacer -->
   <xsl:call-template             name = "blockTitle">
    <xsl:with-param               name = "label"
                                select = "''"/>
   </xsl:call-template>

  <xsl:call-template              name = "spanBlockTitle">
   <xsl:with-param                name = "label"
                                select = "'Media Source'"/>
  </xsl:call-template>
 
  <xsl:apply-templates          select = "OriginalSource |
                                          DerivedFrom"/>
 </xsl:template>


 <!--
 =======================================================================
 Template to display Permission information
 ======================================================================= -->
 <xsl:template                   match = "PermissionInformation">
  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "'Permission Information'"/>
  </xsl:call-template>

  <xsl:call-template              name = "labelTextRow">
   <xsl:with-param                name = "label"
                                select = "'Permission Requested'"/>
   <xsl:with-param                name = "labelSize"
                                select = "'label-small'"/>
   <xsl:with-param                name = "text"
                                select = "PermissionRequested"/>
  </xsl:call-template>

  <xsl:if                         test = "PermissionRequestDate">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Request Date'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "PermissionRequestDate"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                         test = "PermissionResponse">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Response'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "PermissionResponse"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                         test = "PermissionResponseDate">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Response Date'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "PermissionResponseDate"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                         test = "PermissionExpirationDate">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Expiration'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "PermissionExpirationDate"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                         test = "PublisherPermissionText">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Publisher Text'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "PublisherPermissionText"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:apply-templates         select = "ApprovedUse"/>

  <!-- Adding a spacer -->
  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "''"/>
  </xsl:call-template>

  <xsl:if                         test = "SpanishTranslationPermissionRequested">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Spanish Permission Requested'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "SpanishTranslationPermissionRequested"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                         test = "SpanishTranslationPermissionResponse">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Spanish Permission Response'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "SpanishTranslationPermissionResponse"/>
   </xsl:call-template>
  </xsl:if>

  <!-- Adding a spacer -->
  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "''"/>
  </xsl:call-template>

  <xsl:call-template              name = "approvedUseRow">
   <xsl:with-param                name = "label"
                                select = "'Citation(s)'"/>
   <xsl:with-param                name = "labelSize"
                                select = "'label-small'"/>
  </xsl:call-template>

  <!-- Adding a spacer -->
  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "''"/>
  </xsl:call-template>

  <xsl:if                         test = "Comment">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Comment(s)'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "Comment"/>
   </xsl:call-template>
  </xsl:if>
 </xsl:template>


 <!--
 =======================================================================
 Template to create the citation link
 ======================================================================= -->
 <xsl:template                    name = "createCitationQcLink">
  <xsl:variable                   name = "docRef"
                                select = "@cdr:ref"/>
  <xsl:variable                   name = "cdrId"
                                select = "concat('CDR',
                                           number(
                                            substring-after(
                                             substring-before(
                                              concat($docRef, '#'), '#'),
                                                                   'CDR')))"/>
  <xsl:text> (</xsl:text>
   <xsl:element                   name = "a">
    <xsl:attribute                name = "href">
     <xsl:value-of              select = "concat('/cgi-bin/cdr/',
                                                 'QcReport.py?Session=guest',
                                                 '&amp;DocId=',
                                                 $cdrId)"/>

    </xsl:attribute>
    <xsl:attribute                name = "target">
     <xsl:text>new</xsl:text>
    </xsl:attribute>
    <xsl:value-of               select = "$cdrId"/>
   </xsl:element>
  <xsl:text>)</xsl:text>
 </xsl:template>


 <!--
 =======================================================================
 Template to display Physical Media Information
 ======================================================================= -->
 <xsl:template                   match = "MediaContent">
  <p/>
  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "'Media Content'"/>
  </xsl:call-template>

   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Categories'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "Categories/
                                            Category"/>
   </xsl:call-template>

   <xsl:if                        test = "Diagnoses">
    <xsl:call-template            name = "labelTextRow">
     <xsl:with-param              name = "label"
                                select = "'Diagnoses'"/>
     <xsl:with-param              name = "labelSize"
                                select = "'label-small'"/>
     <xsl:with-param              name = "text"
                                select = "Diagnoses/
                                            Diagnosis/
                                            Term/
                                            PreferredName"/>
    </xsl:call-template>
   </xsl:if>

   <xsl:if                        test = "Topics">
    <xsl:call-template            name = "labelTextRow">
     <xsl:with-param              name = "label"
                                select = "'Topics'"/>
     <xsl:with-param              name = "labelSize"
                                select = "'label-small'"/>
     <xsl:with-param              name = "text"
                                select = "Topics/
                                            Topic/
                                            Term/
                                            PreferredName"/>
    </xsl:call-template>
   </xsl:if>

  <p/>

  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "'Content Description'"/>
  </xsl:call-template>

  <table        xsl:use-attribute-sets = "table">
   <tr>
    <table      xsl:use-attribute-sets = "table">
     <xsl:attribute               name = "border">1</xsl:attribute>
     <tr>
      <th>Language</th>
      <th>Patients</th>
     </tr>
     <tr>
      <td width="15%"  valign="top" align="center">
       <b>en</b>
      </td>
      <td width="85%" valign="top">
       <xsl:value-of            select = "ContentDescriptions/
                                          ContentDescription
                                           [@audience='Patients'
                                            and
                                            @language='en']"/>
      </td>
     </tr>
     <xsl:if                      test = "ContentDescriptions/
                                          ContentDescription
                                            [@audience='Patients'
                                             and
                                             @language='es']">
      <tr>
       <td width="15%"  valign="top" align="center">
        <b>es</b>
       </td>
       <td width="85%" valign="top">
        <xsl:value-of           select = "ContentDescriptions/
                                          ContentDescription
                                            [@audience='Patients'
                                             and
                                             @language='es']"/>
       </td>
      </tr>
     </xsl:if>
    </table>
   </tr>
   <xsl:if                        test = "ContentDescriptions/
                                          ContentDescription
                                          [@audience='Health_professionals']">
    <tr>
     <table     xsl:use-attribute-sets = "table">
      <xsl:attribute              name = "border">1</xsl:attribute>
      <tr>
       <th>Language</th>
       <th>Health Professional</th>
      </tr>
      <tr>
       <td width="15%"  valign="top" align="center">
        <b>en</b>
       </td>
       <td width="85%" valign="top">
        <xsl:value-of           select = "ContentDescriptions/
                                          ContentDescription
                                            [@audience='Health_professionals'
                                             and
                                             @language='en']"/>
       </td>
      </tr>
      <xsl:if                     test = "ContentDescriptions/
                                          ContentDescription
                                            [@audience='Health_professionals'
                                             and
                                             @language='es']">
       <tr>
        <td width="15%"  valign="top" align="center">
         <b>es</b>
        </td>
        <td width="85%" valign="top">
         <xsl:value-of          select = "ContentDescriptions/
                                          ContentDescription
                                            [@audience='Health_professionals'
                                             and
                                             @language='es']"/>
        </td>
       </tr>
      </xsl:if>
     </table>
    </tr>
   </xsl:if>
  </table>
  <p/>

  <xsl:if                         test = "Captions">
   <xsl:call-template             name = "blockTitle">
    <xsl:with-param               name = "label"
                                select = "'Caption'"/>
   </xsl:call-template>

   <table       xsl:use-attribute-sets = "table">
    <tr>
     <table     xsl:use-attribute-sets = "table">
      <xsl:attribute              name = "border">1</xsl:attribute>
      <tr>
       <th>Language</th>
       <th>Patients</th>
      </tr>
      <tr>
       <td width="15%"  valign="top" align="center">
        <b>en</b>
       </td>
       <td width="85%" valign="top">
        <xsl:value-of           select = "Captions/
                                          MediaCaption
                                            [@audience='Patients'
                                             and
                                             @language='en']"/>
       </td>
      </tr>
      <xsl:if                    test = "Captions/
                                         MediaCaption
                                           [@audience='Patients'
                                            and
                                            @language='es']">
       <tr>
        <td width="15%" valign="top" align="center">
         <b>es</b>
        </td>
        <td width="85%" valign="top">
         <xsl:value-of          select = "Captions/
                                          MediaCaption
                                            [@audience='Patients'
                                             and
                                             @language='es']"/>
        </td>
       </tr>
      </xsl:if>
     </table>
    </tr>
    <xsl:if                       test = "Captions/
                                          MediaCaption
                                            [@audience='Health_professionals']">
     <tr>
      <table    xsl:use-attribute-sets = "table">
       <xsl:attribute             name = "border">1</xsl:attribute>
       <tr>
        <th>Language</th>
        <th>Health Professional</th>
       </tr>
       <tr>
        <td width="15%"  valign="top" align="center">
         <b>en</b>
        </td>
        <td width="85%" valign="top">
         <xsl:value-of          select = "Captions/
                                          MediaCaption
                                            [@audience='Health_professionals'
                                             and
                                             @language='en']"/>
        </td>
       </tr>
       <tr>
        <td width="15%"  valign="top" align="center">
         <b>es</b>
        </td>
        <td width="85%" valign="top">
         <xsl:value-of          select = "Captions/
                                          MediaCaption
                                            [@audience='Health_professionals'
                                             and
                                             @language='es']"/>
        </td>
       </tr>
      </table>
     </tr>
    </xsl:if>
   </table>
  </xsl:if>

  <xsl:if                         test = "Comment">
   <p/>
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Comment'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "Comment"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                         test = "MediaLanguage">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Media Language'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "MediaLanguage"/>
   </xsl:call-template>
  </xsl:if>
 </xsl:template>


 <!--
 =======================================================================
 Template to display the general image information (Image)
 ======================================================================= -->
 <xsl:template                   match = "ImageData">
  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "'Image Data'"/>
  </xsl:call-template>

   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Image Type'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "ImageType"/>
   </xsl:call-template>
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Image Encoding'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "ImageEncoding"/>
   </xsl:call-template>
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Color'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "Color"/>
   </xsl:call-template>
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Labeled'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "Labeled"/>
   </xsl:call-template>

   <xsl:if                        test = "LabelName">
    <xsl:call-template            name = "blockTitle">
     <xsl:with-param              name = "label"
                                select = "'Label Name'"/>
    </xsl:call-template>

    <xsl:element                  name = "table"
                 xsl:use-attribute-set = "table">
     <xsl:attribute               name = "class">
      <xsl:text>table-border</xsl:text>
     </xsl:attribute>
     <xsl:element                 name = "tr">
      <xsl:element                name = "th">
       <xsl:text>Language</xsl:text>
      </xsl:element>
      <xsl:element                name = "th">
       <xsl:text>Label</xsl:text>
      </xsl:element>
     </xsl:element>

     <xsl:for-each              select = "LabelName">
      <xsl:sort                 select = "@language"/>
      <xsl:element                name = "tr">
       <xsl:element               name = "td">
        <xsl:attribute            name = "class">
         <xsl:text>language center</xsl:text>
        </xsl:attribute>
        <xsl:value-of           select = "@language"/>
       </xsl:element>
       <xsl:element               name = "td"
                    use-attribute-sets = "right-column">
        <xsl:value-of           select = "."/>
       </xsl:element>
      </xsl:element>
     </xsl:for-each>
    </xsl:element>
   </xsl:if>

  <xsl:if                         test = "ImageDimensions/
                                          HeightPixels">
   <xsl:call-template             name = "blockTitle">
    <xsl:with-param               name = "label"
                                select = "'Image Dimensions'"/>
   </xsl:call-template>

   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Height'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "ImageDimensions/
                                            HeightPixels"/>
   </xsl:call-template>
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Width'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "ImageDimensions/
                                            WidthPixels"/>
   </xsl:call-template>

   <xsl:if                        test = "MinWidthPixels">
    <xsl:call-template            name = "labelTextRow">
     <xsl:with-param              name = "label"
                                select = "'Width'"/>
     <xsl:with-param              name = "labelSize"
                                select = "'label-small'"/>
     <xsl:with-param              name = "text"
                                select = "ImageDimensions/
                                            MinWidthPixels"/>
    </xsl:call-template>
   </xsl:if>
   <xsl:if                        test = "Inlined">
    <xsl:call-template            name = "labelTextRow">
     <xsl:with-param              name = "label"
                                select = "'Inlined'"/>
     <xsl:with-param              name = "labelSize"
                                select = "'label-small'"/>
     <xsl:with-param              name = "text"
                                select = "Inlined"/>
    </xsl:call-template>
   </xsl:if>
  </xsl:if>

 </xsl:template>


 <!--
 =======================================================================
 Template to display Physical Media Information (Video)
 ======================================================================= -->
 <xsl:template                   match = "VideoData">
  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "'Video Data'"/>
  </xsl:call-template>

  <xsl:call-template              name = "labelTextRow">
   <xsl:with-param                name = "label"
                                select = "'Video Type'"/>
   <xsl:with-param                name = "labelSize"
                                select = "'label-small'"/>
   <xsl:with-param                name = "text"
                                select = "VideoType"/>
  </xsl:call-template>

  <xsl:call-template              name = "labelTextRow">
   <xsl:with-param                name = "label"
                                select = "'Video Encoding'"/>
   <xsl:with-param                name = "labelSize"
                                select = "'label-small'"/>
   <xsl:with-param                name = "text"
                                select = "VideoEncoding"/>
  </xsl:call-template>

  <xsl:call-template              name = "labelTextRow">
   <xsl:with-param                name = "label"
                                select = "'Color'"/>
   <xsl:with-param                name = "labelSize"
                                select = "'label-small'"/>
   <xsl:with-param                name = "text"
                                select = "Color"/>
  </xsl:call-template>

  <xsl:if                         test = "RunSeconds">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Labeled'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "RunSeconds"/>
   </xsl:call-template>
  </xsl:if>

 </xsl:template>


 <!--
 =======================================================================
 Template to display Physical Media Information (Audio)
 ======================================================================= -->
 <xsl:template                   match = "SoundData">
  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "'Sound Data'"/>
  </xsl:call-template>

  <xsl:call-template              name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Sound Type'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "SoundType"/>
  </xsl:call-template>   

  <xsl:call-template              name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Sound Encoding'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "SoundEncoding"/>
  </xsl:call-template>

  <xsl:if                         test = "RunSeconds">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Labeled'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "RunSeconds"/>
   </xsl:call-template>
  </xsl:if>

 </xsl:template>


 <!--
 =======================================================================
 Template to display Physical Media Information
 ======================================================================= -->
 <xsl:template                   match = "OriginalSource">
  <xsl:call-template              name = "spanBlockTitle">
   <xsl:with-param                name = "label"
                                select = "' (Original)'"/>
  </xsl:call-template>

  <xsl:if                         test = "Creator">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Creator'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "Creator"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                        test = "SourcePublication">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Source Publication'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "SourcePublication"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                        test = "DateCreated">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Date Created'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "DateCreated"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                        test = "TextDateCreated">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Text Date Created'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "TextDateCreated"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                        test = "Acknowledgement">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Acknowledgement'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "Acknowledgement"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                        test = "SourceFilename">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Source Filename'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "SourceFilename"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                        test = "Comment">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Comment'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "Comment"/>
   </xsl:call-template>
  </xsl:if>

 </xsl:template>


 <!--
 =======================================================================
 Template to display Physical Media Information
 ======================================================================= -->
 <xsl:template                   match = "DerivedFrom">
  <xsl:call-template              name = "spanBlockTitle">
   <xsl:with-param                name = "label"
                                select = "' (Derived)'"/>
  </xsl:call-template>

  <xsl:choose>
   <xsl:when                      test = "FromObject/FromCdrMedia">
    <xsl:call-template            name = "labelTextRow">
     <xsl:with-param              name = "label"
                                select = "'From CDR Media'"/>
     <xsl:with-param              name = "labelSize"
                                select = "'label-small'"/>
     <xsl:with-param              name = "text"
                                select = "FromObject/
                                            FromCdrMedia/
                                            MediaID/
                                            Media/
                                            MediaTitle"/>
     <xsl:with-param              name = "addThis"
                                select = "FromObject/
                                            FromCdrMedia/
                                            MediaID/
                                            Media/@cdr:ref"/>
    </xsl:call-template>
   </xsl:when>
   <xsl:otherwise>
    <xsl:call-template            name = "labelTextRow">
     <xsl:with-param              name = "label"
                                select = "'From External File'"/>
     <xsl:with-param              name = "labelSize"
                                select = "'label-small'"/>
     <xsl:with-param              name = "text"
                                select = "FromObject/
                                          FromExternalFile"/>
    </xsl:call-template>
   </xsl:otherwise>
  </xsl:choose>

  <xsl:if                         test = "FromObject/
                                          FromMethod">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'From Method File'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "FromObject/
                                             FromMethod"/>
   </xsl:call-template>
  </xsl:if>

  <xsl:if                         test = "Comment">
   <xsl:call-template             name = "labelTextRow">
    <xsl:with-param               name = "label"
                                select = "'Comment'"/>
    <xsl:with-param               name = "labelSize"
                                select = "'label-small'"/>
    <xsl:with-param               name = "text"
                                select = "Comment"/>
   </xsl:call-template>
  </xsl:if>

 </xsl:template>


 <!--
 =======================================================================
 Template to display the Approved/Proposed Use Information
 ======================================================================= -->
 <xsl:template                   match = "ProposedUse | ApprovedUse">
  <xsl:choose>
   <xsl:when                      test = "name() = 'ProposedUse'">
    <xsl:call-template            name = "blockTitle">
     <xsl:with-param              name = "label"
                                select = "'Proposed Use'"/>
    </xsl:call-template>
   </xsl:when>
   <xsl:otherwise>
    <xsl:call-template            name = "blockTitle">
     <xsl:with-param              name = "label"
                                select = "'Approved Use'"/>
    </xsl:call-template>
   </xsl:otherwise>
  </xsl:choose>

  <xsl:call-template              name = "approvedUseRow">
   <xsl:with-param                name = "label"
                                select = "'Summary'"/>
   <xsl:with-param                name = "labelSize"
                                select = "'label-small'"/>
  </xsl:call-template>

  <!-- Adding a spacer -->
  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "''"/>
  </xsl:call-template>

  <xsl:call-template              name = "approvedUseRow">
   <xsl:with-param                name = "label"
                                select = "'Glossary'"/>
   <xsl:with-param                name = "labelSize"
                                select = "'label-small'"/>
  </xsl:call-template>

 </xsl:template>


 <!--
 =======================================================================
 Template to display the Processing Statuses
 ======================================================================= -->
 <xsl:template                   match = "ProcessingStatuses">

  <xsl:call-template              name = "blockTitle">
   <xsl:with-param                name = "label"
                                select = "'Processing Statuses'"/>
  </xsl:call-template>

  <table xsl:use-attribute-sets = "table">
   <xsl:attribute name="border">1</xsl:attribute>
   <tr>
    <th width="15%" valign="top" align="left">
     <b>Status Date</b>
    </th>
    <th width="60%" valign="top" align="left">
     <b>Status Value</b>
    </th>
    <th valign="top" align="left">
     <b>Entered By</b>
    </th>
   </tr>
  <xsl:apply-templates          select = "ProcessingStatus"/>
  </table>
 </xsl:template>

 <!--
 =======================================================================
 Template to display the Proposed Use Information
 ======================================================================= -->
 <xsl:template                   match = "ProcessingStatus">
   <tr>
    <td >
     <xsl:value-of              select = "ProcessingStatusDate"/>
    </td>
    <td>
     <xsl:value-of              select = "ProcessingStatusValue"/>
    </td>
    <td>
     <xsl:value-of              select = "EnteredBy"/>
    </td>
   </tr>
   <xsl:if                        test = "Comment">
    <tr>
     <td> </td>
     <td valign="top" align="left" colspan="2">
      <table    xsl:use-attribute-sets = "table">
       <tr>
        <td width="15%" valign="top" align="left">
         <i>Comments</i>
         <xsl:text>: </xsl:text>
        </td>
        <td valign="top" align="left">
         <xsl:value-of          select = "Comment"/>
        </td>
       </tr>
      </table>
     </td>
    </tr>
   </xsl:if>
 </xsl:template>


 <!--
 ======================================================================
 Template to add the proposed use and the CDR-ID to the report.
 ====================================================================== -->
 <xsl:template                   match = "Summary |
                                          Glossary|
                                          CitationLink">

  <xsl:element                    name = "li">
   <xsl:choose>
    <xsl:when                     test = "name() = 'Summary'">
     <xsl:value-of              select = "Summary/SummaryTitle"/>
     <xsl:apply-templates       select = "@cdr:ref"/>
    </xsl:when>
    <xsl:when                     test = "name() = 'CitationLink'">
     <xsl:value-of              select = "."/>
      <xsl:call-template          name = "createCitationQcLink"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of              select = "GlossaryTermName/
                                          TermName/
                                          TermNameString"/>
     <xsl:for-each              select = "GlossaryTermName">
      <xsl:call-template          name = "createGlossaryQcLink"/>
     </xsl:for-each>
    </xsl:otherwise>
   </xsl:choose>


  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Template to add CDR-ID and fragment ID to the display
 The CDR-ID should be displayed without leading zeros.
 ====================================================================== -->
 <xsl:template                   match = "@cdr:ref">
  <xsl:variable                   name = "cdrId"
                                select = "concat('CDR',
                                           number(
                                            substring-after(
                                             substring-before(
                                              concat(., '#'), '#'), 'CDR')))"/>
  <xsl:text> (</xsl:text>
  <xsl:element                    name = "a">
   <xsl:attribute                 name = "href">
    <xsl:choose>
    <xsl:when                     test = "../Summary/KeyPoints = 'Yes'">
    <!-- Create QC Report for Reformatted Patient Summaries
    ======================================================= -->
    <xsl:value-of               select = "concat('/cgi-bin/cdr/QcReport.py',
                                                 '?Session=guest',
                                                 '&amp;ReportType=pat',
                                                 '&amp;DocId=',
                                                 $cdrId)"/>
    </xsl:when>
    <xsl:otherwise>
    <!-- Create QC Report for all other document types
    ======================================================= -->
    <xsl:value-of               select = "concat('/cgi-bin/cdr/QcReport.py',
                                                 '?Session=guest',
                                                 '&amp;ReportType=rs',
                                                 '&amp;DocId=',
                                                 $cdrId)"/>
    </xsl:otherwise>
   </xsl:choose>
   </xsl:attribute>
   <xsl:value-of                select = "$cdrId"/>
  </xsl:element>
  <xsl:if                         test = "contains( . , '#')">
   <xsl:text> - </xsl:text>
   <xsl:value-of                select = "substring-after(., '#')"/>
  </xsl:if>
  <xsl:text>)</xsl:text>
 </xsl:template>

 <!--
 ======================================================================
 Template to create a block title
 ====================================================================== -->
 <xsl:template                    name = "blockTitle">
  <xsl:param                      name = "label"/>

  <xsl:element                    name = "div">
   <xsl:attribute                 name = "class">
    <xsl:text>label-big</xsl:text>
   </xsl:attribute>
   <xsl:value-of                select = "$label"/>
  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Template to create a block title
 ====================================================================== -->
 <xsl:template                    name = "spanBlockTitle">
  <xsl:param                      name = "label"/>

  <xsl:element                    name = "span">
   <xsl:attribute                 name = "class">
    <xsl:text>label-big</xsl:text>
   </xsl:attribute>
   <xsl:value-of                select = "$label"/>
  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Template to create a two column row display of label/text pair.
 ====================================================================== -->
 <xsl:template                    name = "labelTextRow">
  <xsl:param                      name = "label"/>
  <xsl:param                      name = "labelSize"/>
  <xsl:param                      name = "text"/>
  <xsl:param                      name = "addThis"/>

   <xsl:element                   name = "div">
    <xsl:attribute                name = "class">
     <xsl:text>row</xsl:text>
    </xsl:attribute>
    <xsl:element                  name = "div">
    <xsl:attribute                name = "class">
     <xsl:text>column left</xsl:text>
    </xsl:attribute>
     <xsl:element                 name = "span">
      <xsl:attribute              name = "class">
       <xsl:value-of            select = "$labelSize"/>
      </xsl:attribute>
      <xsl:value-of             select = "$label"/>
     </xsl:element>
    </xsl:element>
    <xsl:element                  name = "div">
     <xsl:attribute               name = "class">
      <xsl:text>column right</xsl:text>
     </xsl:attribute>

     <!-- Multiple entries should always be displayed as a bulleted list -->
     <xsl:choose>
      <xsl:when                   test = "count($text) = 1">
       <xsl:value-of            select = "$text"/>
       <xsl:if                   test = "$addThis">
        <xsl:value-of          select = "concat(' (CDR',
                                            number(
                                              substring-after($addThis, 'CDR')), ')')"/>
        <xsl:apply-templates   select = "@cdr:ref"/>
       </xsl:if>
      </xsl:when>
      <xsl:otherwise>
       <xsl:element               name = "ul">
        <xsl:for-each              select = "$text">
         <xsl:element             name = "li">
          <xsl:value-of             select = "."/>
          <!--
          <xsl:if                 test = "not(position() = last())">
           <xsl:element               name = "br"/>
          </xsl:if>
          -->
         </xsl:element>
        </xsl:for-each>
       </xsl:element>
      </xsl:otherwise>
     </xsl:choose>

     <!--
     <xsl:for-each              select = "$text">
      <xsl:value-of             select = "."/>
      <xsl:if                     test = "count($text) > 1">
       <xsl:element               name = "br"/>
      </xsl:if>
     </xsl:for-each>
     -->

    </xsl:element>
   </xsl:element>
 </xsl:template>

 <!--
 ======================================================================
 Template to create a two column row display of label/text pair.
 ====================================================================== -->
 <xsl:template                    name = "approvedUseRow">
  <xsl:param                      name = "label"/>
  <xsl:param                      name = "labelSize"/>

   <xsl:element                   name = "div">
    <xsl:attribute                name = "class">
     <xsl:text>row</xsl:text>
    </xsl:attribute>
    <xsl:element                  name = "div">
    <xsl:attribute                name = "class">
     <xsl:text>column left</xsl:text>
    </xsl:attribute>
     <xsl:element                 name = "span">
      <xsl:attribute              name = "class">
       <xsl:value-of            select = "$labelSize"/>
      </xsl:attribute>
      <xsl:value-of             select = "$label"/>
     </xsl:element>
    </xsl:element>
    <xsl:element                  name = "div">
     <xsl:attribute               name = "class">
      <xsl:text>column right</xsl:text>
     </xsl:attribute>

     <!-- Multiple entries should always be displayed as a bulleted list -->
     <xsl:element                 name = "ul">
      <xsl:choose>
       <xsl:when                  test = "$label = 'Summary'">
        <xsl:apply-templates    select = "Summary"/>
       </xsl:when>
       <xsl:when                  test = "$label = 'Glossary'">
        <xsl:apply-templates    select = "Glossary"/>
       </xsl:when>
       <xsl:when                  test = "$label = 'Citation(s)'">
        <xsl:apply-templates    select = "CitationLink"/>
       </xsl:when>
      </xsl:choose>
     </xsl:element>

    </xsl:element>
   </xsl:element>
 </xsl:template>
</xsl:transform>
