<CdrDoc Type='Filter' Id='CDR0000257554'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">[DEBUG] Fast Denormalization Filter</DocTitle>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<!--
=======================================================================
Filter to denormalize by replacing contents of elements with
cdr:ref attributes with title of linked document.
======================================================================= -->

<xsl:transform                 version = "1.0" 
                             xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr">

  <!--
  =======================================================================
  Just copy most nodes.
  ======================================================================= -->
  <xsl:template                  match = "@*|node()|comment()|
                                          processing-instruction()">
    <xsl:copy>
      <xsl:apply-templates      select = "@*"/>
      <xsl:apply-templates/>
    </xsl:copy>
  </xsl:template>

  <!-- 
  =======================================================================
  If an element has a cdr:href attribute, replace its content with the 
  linked documents title (from the document table).  If the document 
  does not exist or its title is empty, just copy the node and its 
  contents.
  ======================================================================= -->
  <xsl:template                  match = "*[@cdr:ref]">
    <xsl:variable                 name = "link"
                                select = "@cdr:ref"/>
    <xsl:variable                 name = "fragId"
                                select = "substring-after($link, '#')"/>
    <xsl:variable                 name = "id">
      <xsl:choose>
        <xsl:when                 test = "contains($link, '#')">
          <xsl:value-of         select = "substring-before($link, '#')"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of         select = "$link"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable                 name = "uri"
                                select = "concat('cdrx:', $id, '/DocTitle')"/>
<!--
<xsl:message terminate='yes'>
<xsl:value-of select="concat('[[',$uri,']]')"/></xsl:message>
 -->
    <xsl:variable                 name = "cdrtmpvalue">
      <xsl:value-of             select = "document($uri)/CdrDocTitle"/>
<!--
                                          //CdrDocTitle"/>
-->
    </xsl:variable>
<!--
<xsl:message terminate='yes'>
<xsl:value-of select="concat('[[',$cdrtmpvalue,']]')"/></xsl:message>
-->
    <xsl:variable                 name = "cdrvalue">
     <xsl:choose>
      <xsl:when                   test = "contains($cdrtmpvalue, ';')">
       <xsl:value-of            select = "substring-before($cdrtmpvalue, ';')"/>
      </xsl:when>
      <xsl:otherwise>
       <xsl:value-of            select = "$cdrtmpvalue"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:variable>
    <xsl:element                  name = "{name()}">
      <xsl:apply-templates      select = "@*"/>
      <xsl:choose>
        <xsl:when                 test = "$cdrvalue=''">
          <xsl:apply-templates/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when             test = "$fragId=''">
              <xsl:value-of     select = "$cdrvalue"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of     select = "concat($cdrvalue, 
                                                 ' [', 
                                                 $fragId, 
                                                 ']')"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:element>
  </xsl:template>

</xsl:transform>]]>
</CdrDocXml>
</CdrDoc>