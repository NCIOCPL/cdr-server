<?xml version="1.0"?>
<!-- $Id$ -->
<!-- Filter title: Denormalization Filter: Summary Reference De-Dup -->

<!-- Written by Volker Englisch, 2003-08-12 -->
<!-- 
 =====================================================================
 Filter to format the summary citation data.
 ===================================================================== -->
<xsl:transform                xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                                version = "1.0"
                              xmlns:cdr = "cips.nci.nih.gov/cdr">

 <xsl:output                     method = "xml" 
                   omit-xml-declaration = "no"/>

 <!-- 
 =================================================================
 Copy control information and generate current date
 ================================================================= -->
 <xsl:template                    match = "Summary">
  <xsl:copy>

   <xsl:apply-templates/>

  </xsl:copy>
 </xsl:template>


 <!-- 
 =================================================================
 De-dup ReferenceList
 Note:  References need to be displayed unique.
        If a reference has been moved, display as regular ref.
 ================================================================= -->
 <xsl:template                    match = "ReferenceList">
  <xsl:copy>

   <!--
   Process all Citation within a Reference Section
   =============================================== -->
   <xsl:for-each                 select = "Citation">
    <xsl:variable                  name = "thisCitation" 
                                 select = "@cdr:ref"/>

    <!-- 
    Make a decision if this citation is unique or appears more then
    once (regardless of its markup)
    ================================================================== -->
    <xsl:choose>
     <xsl:when                     test = "preceding-sibling::
                                                    Citation[@cdr:ref = 
                                                             $thisCitation]
                                           or
                                           following-sibling::
                                                    Citation[@cdr:ref = 
                                                             $thisCitation]">
      <!-- MoreThanOne/ -->

      <!-- 
      We need to ensure that a group of citations is only processed once.
      Testing that this is the very first element of a citation (regardless
      of its markup).
      ===================================================================== -->
      <xsl:if                      test = "not(
                                             boolean(preceding-sibling::
                                                    Citation[@cdr:ref = 
                                                             $thisCitation]))">
       <!--
       Now Process the entire group of citations with the same cdr:ref ID 
       (regardless of the markup).
       ==================================================================== -->
       <xsl:for-each             select = "../
                                            Citation[@cdr:ref = $thisCitation]">
        <xsl:choose>
         <!-- 
         Checking if this citation within this group of citations is listed
         without markup and that no other citation without markup has been
         encountered yet.  
         This essentially picks up the very first citation encountered 
         without markup and any following citations without markup are 
         being ignored.  
         No matter how many inserted/deleted citations we find for a given
         citation, if one exists without markup that's the one we pick.
         ================================================================= -->
         <xsl:when                 test = "not(@InsertionOrDeletion)
                                           and 
                                           not(preceding-sibling::Citation
                                              [@cdr:ref = $thisCitation
                                               and
                                               not(@InsertionOrDeletion)])">
          <!-- NoMarkUp/ -->
          <xsl:apply-templates   select = "."/>
         </xsl:when>
         <!--
         We come here because the citation has markup.
         ================================================================ -->
         <xsl:otherwise>
          <xsl:choose>
           <!--
           We now have to deal with several different combinations of markup.
           A true deletion: - it is the first occurence of a deletion
                            - and no citation without markup exists
                            - and no citation with insertion exists.
           ================================================================ -->
           <xsl:when               test = "@InsertionOrDeletion = 'Deletion'
                                           and 
                                           not(preceding-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              @InsertionOrDeletion = 
                                                 'Deletion'])
                                           and
                                           not(preceding-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              not(@InsertionOrDeletion)])
                                           and 
                                           not(following-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              not(@InsertionOrDeletion)])
                                           and 
                                           not(preceding-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              @InsertionOrDeletion = 
                                                 'Insertion'])
                                           and
                                           not(following-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              @InsertionOrDeletion = 
                                                 'Insertion'])">
            <!-- ATrueDeletion/ -->
            <xsl:apply-templates select = "."/>
           </xsl:when>
           <!--
           A true insertion: - it is the first occurence of a insertion
                             - and no citation without markup exists
                             - and no citation with deletion exists.
           ============================================================== -->
           <xsl:when               test = "@InsertionOrDeletion = 'Insertion'
                                           and 
                                           not(preceding-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              @InsertionOrDeletion = 
                                                 'Insertion'])
                                           and
                                           not(preceding-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              not(@InsertionOrDeletion)])
                                           and 
                                           not(following-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              not(@InsertionOrDeletion)])
                                           and 
                                           not(preceding-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              @InsertionOrDeletion = 
                                                 'Deletion'])
                                           and
                                           not(following-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              @InsertionOrDeletion = 
                                                 'Deletion'])">
            <!-- ATrueInsertion/ -->
            <xsl:apply-templates select = "."/>
           </xsl:when>
           <!--
           A false deletion: - it is the first occurence of a deletion
                             - and no citation without markup exists
                             - but a citation with insertion follows
                             - and now citation with insertion had been
                               encountered so far.
           This citation will have to be displayed without markup and is 
           therefore displayed with the additional existing="Y" attribute
           ============================================================== -->
           <xsl:when               test = "@InsertionOrDeletion = 'Deletion'
                                           and
                                           not(preceding-sibling::
                                                Citation[
                                                @cdr:ref = $thisCitation 
                                                and
                                                @InsertionOrDeletion = 
                                                                  'Deletion'])
                                           and
                                           not(preceding-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              not(@InsertionOrDeletion)])
                                           and 
                                           not(following-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              not(@InsertionOrDeletion)])
                                           and 
                                           following-sibling::
                                                Citation[
                                                @cdr:ref = $thisCitation 
                                                and
                                                @InsertionOrDeletion = 
                                                                  'Insertion']
                                           and
                                           not(preceding-sibling::
                                                Citation[
                                                @cdr:ref = $thisCitation 
                                                and
                                                @InsertionOrDeletion = 
                                                                 'Insertion'])">
            <!-- DeletionInsertion/ -->
            <xsl:call-template     name = "existingCitation"/>
           </xsl:when>
           <!--
           A false insertion: - it is the first occurence of an insertion
                              - and no citation without markup exists
                              - but a citation with deletion follows
                              - and now citation with deletion had been
                                encountered so far.
           This citation will have to be displayed without markup and is 
           therefore displayed with the additional existing="Y" attribute
           This citation will have to be displayed without markup and is 
           therefore displayed with the additional existing="Y" attribute
           ============================================================== -->
           <xsl:when               test = "@InsertionOrDeletion = 'Insertion'
                                           and
                                           not(preceding-sibling::
                                                Citation[
                                                @cdr:ref = $thisCitation 
                                                and
                                                @InsertionOrDeletion = 
                                                                  'Insertion'])
                                           and
                                           not(preceding-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              not(@InsertionOrDeletion)])
                                           and 
                                           not(following-sibling::Citation
                                             [@cdr:ref = $thisCitation
                                              and
                                              not(@InsertionOrDeletion)])
                                           and 
                                           following-sibling::
                                                Citation[
                                                @cdr:ref = $thisCitation 
                                                and
                                                @InsertionOrDeletion = 
                                                                  'Deletion']
                                           and
                                           not(preceding-sibling::
                                                Citation[
                                                @cdr:ref = $thisCitation 
                                                and
                                                @InsertionOrDeletion = 
                                                                  'Deletion'])">
            <!-- InsertionDeletion/ -->
            <xsl:call-template     name = "existingCitation"/>
           </xsl:when>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:for-each>
      </xsl:if>    <!-- Only apply on first occurrence -->
     </xsl:when>
     <!-- 
     The citation has been identified as being unique.  
     Display as is including insertion/deletion markup
     ================================================= -->
     <xsl:otherwise>
      <!-- UniqueCitation/ -->
      <xsl:apply-templates       select = "."/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:for-each>

  </xsl:copy>
 </xsl:template>


 <!-- *
 ==============================================================
 Template to add an attribute to a citation with markup 
 indicating that the markup can be ignored
 (An insertion plus a deletion negate each other in terms of 
  displaying the citation with markup in the reference section)
 ============================================================== -->
 <xsl:template                     name = "existingCitation">
  <Citation>
   <xsl:for-each                 select = "@*">
    <xsl:attribute                 name = "{name()}">
     <xsl:value-of               select = "."/>
    </xsl:attribute>
   </xsl:for-each>

   <xsl:attribute                  name = "existing">
    <xsl:text>Y</xsl:text>
   </xsl:attribute>

   <xsl:apply-templates/>
  </Citation>
 </xsl:template>


 <!-- *
 ===============================================================
 Template to display the citations within each reference section
 =============================================================== -->
 <xsl:template                    match = "ReferenceList/Citation">
  <xsl:copy>
   <xsl:for-each                 select = "@*">
    <xsl:attribute                 name = "{name()}">
     <xsl:value-of               select = "."/>
    </xsl:attribute>
   </xsl:for-each>

   <xsl:apply-templates/>
  </xsl:copy>
 </xsl:template>


 <!-- 
 ==================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of of something 
 ================================================================== -->
 <xsl:template                    match = "@*|node()">
  <xsl:copy>
   <xsl:apply-templates          select = "@*|node()"/>
  </xsl:copy> 
 </xsl:template>

</xsl:transform>
