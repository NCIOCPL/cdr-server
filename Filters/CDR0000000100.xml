<?xml version="1.0"?>
 <!-- 
 ===============================================================
 Filter to Denormalize Organization Documents 
 =============================================================== -->
<xsl:transform                xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                                version = "1.0"
                              xmlns:cdr = "cips.nci.nih.gov/cdr">

 <xsl:output                     method = "xml" 
                   omit-xml-declaration = "no"/>

 <xsl:include href = "cdr:name:Module: PersonLocations Denormalization"/>

 <!-- 
 =================================================================
 Copy control information and generate current date
 ================================================================= -->
 <xsl:template                    match = "Organization">
  <xsl:copy>
   <xsl:apply-templates          select = "document('cdrutil:/docid')"/>
   <xsl:apply-templates          select = "document('cdrx:/*/CdrCtl')"/>

   <xsl:apply-templates/>

  </xsl:copy>
 </xsl:template>


 <!-- 
 ==================================================================
 Template to remove the OrganizationParent wrapper element which 
 only contains ParentOrganization elements and Comment.
 This allows the first ParentOrganization fragment to be called 
 by the same template (named filter getParentName of the "Vendor
 Address Templates" module) as the grandparent elements.
 However, it may cause problems with the Comment element since it 
 is now a direct child of the root element.  
 This may need to be addressed at a later point.   VE, 06/03/2003
 ================================================================== -->
 <xsl:template                    match = "OrganizationParent">
  <xsl:apply-templates/>

  <!-- OrganizationParent>
   <xsl:apply-templates          select = "Comment"/>
  </OrganizationParent -->
 </xsl:template>


 <!-- 
 ==================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of of something 
 ================================================================== -->
 <xsl:template                    match = "@*|node()">
  <xsl:copy>
   <xsl:apply-templates          select = "@*|node()"/>
  </xsl:copy> 
 </xsl:template>

</xsl:transform>
