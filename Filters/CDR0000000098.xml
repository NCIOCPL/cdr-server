<?xml version="1.0"?>
<xsl:transform              xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                              version = "1.0"
                            xmlns:cdr = "cips.nci.nih.gov/cdr">

 <!--
 ==========================================================================
 Tells us which of the lead organizations we a dealing with.
 ========================================================================== -->
 <xsl:param                      name = "leadOrgId"/>
 <!-- Used for testing only................
                               select = "'CDR0000036412'"/>
 -->
 <!--
 ==========================================================================
 Rule for the root of the document.
 ========================================================================== -->
 <xsl:template                  match = "/">
  <SPSCheck>
   <xsl:apply-templates        select = "InScopeProtocol"/>
  </SPSCheck>
 </xsl:template>

 <!--
 ==========================================================================
 Gather some additional parameter values and jump to the admin info.
 ========================================================================== -->
 <xsl:template                  match = "InScopeProtocol">
  <xsl:variable                  name = "title">
   <xsl:choose>
    <xsl:when                    test = "ProtocolTitle[@Type = 'Original']">
     <xsl:value-of             select = "ProtocolTitle[@Type = 'Original']"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of             select = "ProtocolTitle
                                         [@Type = 'Professional']"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <xsl:apply-templates         select = "ProtocolAdminInfo">
   <xsl:with-param               name = "title"
                               select = "$title"/>
  </xsl:apply-templates>
 </xsl:template>

 <!--
 ==========================================================================
 Grab the protocol status and descend to the lead org of interest.
 ========================================================================== -->
 <xsl:template                  match = "ProtocolAdminInfo">
  <xsl:param                     name = "title"/>
  <xsl:apply-templates         select = "ProtocolLeadOrg
                                        [LeadOrganizationID/
                                        @cdr:ref = $leadOrgId]">
   <xsl:with-param               name = "title"
                               select = "$title"/>
  </xsl:apply-templates>
 </xsl:template>

 <!--
 ==========================================================================
 This is the main work horse; invoked once for the lead organization
 whose CDR document ID matches the ID passed in by the caller.
 ========================================================================== -->
 <xsl:template                  match = "ProtocolLeadOrg">
  <xsl:param                     name = "title"/>
  <xsl:variable                  name = "uri"
                               select = "concat('cdrx:', $leadOrgId)"/>
  <xsl:variable                  name = "org"
                               select = "document($uri)"/>
  <xsl:variable                  name = "orgName"
                               select = "$org/Organization/
                                         OrganizationNameInformation/
                                         OfficialName/Name"/>
  <xsl:if                        test = "not($orgName)">
   <xsl:message             terminate = "yes">
    <xsl:value-of              select = "concat('Cannot load lead org ',
                                                'document using URI: ',
                                                $uri)"/>
   </xsl:message>
  </xsl:if>
  <xsl:if                        test = "not(LeadOrgPersonnel
                                        [PersonRole = 'Update person'])">
   <xsl:message             terminate = "yes">
    <xsl:value-of              select = "concat('Cannot find protocol update ',
                                                'person for lead organization ',
                                                $leadOrgId)"/>
   </xsl:message>
  </xsl:if>
  <PUP>
   <xsl:apply-templates        select = "LeadOrgPersonnel
                                        [PersonRole = 'Update person']"/>
  </PUP>
  <Protocol>
   <ProtocolTitle>
    <xsl:value-of              select = "$title"/>
   </ProtocolTitle>
   <CurrentStatus>
    <xsl:value-of              select = "LeadOrgProtocolStatuses/
                                         CurrentOrgStatus/StatusName"/>
   </CurrentStatus>
   <xsl:for-each               select = "LeadOrgProtocolID">
    <ID>
     <xsl:value-of             select = "."/>
    </ID>
   </xsl:for-each>
   <LeadOrg>
    <xsl:value-of              select = "$orgName"/>
   </LeadOrg>
   <LeadOrgRole>
    <xsl:value-of              select = "LeadOrgRole"/>
   </LeadOrgRole>
   <xsl:for-each               select = "LeadOrgPersonnel
                                        [PersonRole != 'Update person']">
    <Personnel>
     <xsl:apply-templates      select = "."/>
    </Personnel>
   </xsl:for-each>
   <xsl:apply-templates        select = "ProtocolSites"/>
  </Protocol>
 </xsl:template>

 <!--
 ==========================================================================
 Create a LeadOrgPerson element for each LeadOrgPersonnel element found
 under the lead org.  Volker's original LaTeX rules were also looking
 for Street and Phone elements, but the output sample doesn't show what
 to do with these, so for right now we're just picking up a name string
 and the person's role.
 ========================================================================== -->
 <xsl:template                  match = "LeadOrgPersonnel">
  <xsl:variable                  name = "uri"
                               select = "concat('cdrx:', Person/@cdr:ref)"/>
  <xsl:variable                  name = "doc"
                               select = "document($uri)"/>
  <xsl:if                        test = "not($doc)">
   <xsl:message             terminate = "yes">
    <xsl:value-of              select = "concat('Unable to open lead org ',
                                                'personnel document from URI: ',
                                                $uri)"/>
   </xsl:message>
  </xsl:if>
  <Name>
   <xsl:apply-templates        select = "$doc/Person/PersonNameInformation"/>
  </Name>
  <xsl:call-template             name = "getLocation">
   <xsl:with-param               name = "personDoc"
                               select = "$doc"/>
   <xsl:with-param               name = "personUri"
                               select = "$uri"/>
  </xsl:call-template>
  <Role>
   <xsl:value-of               select = "PersonRole"/>
  </Role>
 </xsl:template>

 <!--
 ==========================================================================
 Paste together a personal name string.
 ========================================================================== -->
 <xsl:template                  match = "PersonNameInformation">
  <xsl:for-each                select = "*">
   <xsl:if                       test = "name() != 'Comment'">
    <xsl:copy-of               select = "."/>
   </xsl:if>
  </xsl:for-each>
 </xsl:template>

 <!--
 ==========================================================================
 Pull in the location information for a lead organization person.
 ========================================================================== -->
 <xsl:template                   name = "getLocation">
  <xsl:param                     name = "personUri"/>
  <xsl:param                     name = "personDoc"/>
  <xsl:if                        test = "not(contains($personUri, '#'))">
   <xsl:message             terminate = "yes">
    <xsl:value-of              select = "concat('Protocol update person ',
                                                'link fragment not found ',
                                                'in URI: ',
                                                $personUri)"/>
   </xsl:message>
  </xsl:if>
  <xsl:variable                  name = "fragId"
                               select = "substring-after($personUri, '#')"/>
  <xsl:apply-templates         select = "$personDoc/Person
                                                   /PersonLocations
                                                   /PrivatePractice
                                                   /PrivatePracticeLocation
                                                   [@cdr:id = $fragId]"/>
  <xsl:apply-templates         select = "$personDoc/Person
                                                   /PersonLocations
                                                   /OtherPracticeLocation
                                                   [@cdr:id = $fragId]"/>
 </xsl:template>

 <!--
 ==========================================================================
 Rule for private practice location information.
 ========================================================================== -->
 <xsl:template                  match = "PrivatePracticeLocation">
  <Location>
   <xsl:apply-templates        select = "PostalAddress"/>
   <xsl:copy-of                select = "Phone"/>
  </Location>
 </xsl:template>

 <!--
 ==========================================================================
 Rule for other practice location.
 ========================================================================== -->
 <xsl:template                  match = "OtherPracticeLocation">
  <xsl:variable                  name = "link"
                               select = "OrganizationLocation/@cdr:ref"/>
  <xsl:variable                  name = "uri"
                               select = "concat('cdrx:', $link)"/>
  <xsl:variable                  name = "doc"
                               select = "document($uri)"/>
  <xsl:if                        test = "not($doc)">
   <xsl:message             terminate = "yes">
    <xsl:value-of              select = "concat('Unable to resolve org ',
                                                'link for other practice ',
                                                'location using URI: ',
                                                $uri)"/>
   </xsl:message>
  </xsl:if>
  <xsl:if                        test = "not(contains($uri, '#'))">
   <xsl:message             terminate = "yes">
    <xsl:value-of              select = "concat('Organization location link ',
                                                $uri,
                                                ' does not contain a ',
                                                'fragment identifier')"/>
   </xsl:message>
  </xsl:if>
  <xsl:variable                  name = "fragId"
                               select = "substring-after($uri, '#')"/>
  <Location>
   <xsl:copy-of                select = "PersonTitle"/>
   <Org>
    <xsl:value-of              select = "$doc/Organization
                                             /OrganizationNameInformation
                                             /OfficialName/Name"/>
   </Org>
   <xsl:choose>
    <xsl:when                    test = "SpecificPostalAddress">
     <xsl:apply-templates      select = "SpecificPostalAddress"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates      select = "$doc/Organization
                                             /OrganizationLocations
                                             /OrganizationLocation
                                             /Location[@cdr:id = $fragId]
                                             /PostalAddress"/>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:choose>
    <xsl:when                    test = "SpecificPhone">
     <Phone>
      <xsl:value-of            select = "SpecificPhone"/>
     </Phone>
    </xsl:when>
    <xsl:otherwise>
     <xsl:copy-of              select = "$doc/Organization

                                             /OrganizationLocations
                                             /OrganizationLocation
                                             /Location[@cdr:id = $fragId]
                                             /Phone"/>
    </xsl:otherwise>
   </xsl:choose>
  </Location>
 </xsl:template>

 <!--
 ==========================================================================
 Assemble the postal address information.
 ========================================================================== -->
 <xsl:template                  match = "PostalAddress | SpecificPostalAddress">
  <PostalAddress>
   <xsl:copy-of                select = "Street | City | CitySuffix"/>
   <xsl:apply-templates        select = "PoliticalSubUnit_State"/>
   <xsl:apply-templates        select = "Country"/>
   <xsl:copy-of                select = "PostalCode_ZIP"/>
  </PostalAddress>
 </xsl:template>

 <!--
 ==========================================================================
 Denormalize the state link.
 ========================================================================== -->
 <xsl:template                  match = "PoliticalSubUnit_State">
  <xsl:variable                  name = "link"
                               select = "@cdr:ref"/>
  <xsl:variable                  name = "uri"
                               select = "concat('cdrx:', $link)"/>
  <xsl:variable                  name = "doc"
                               select = "document($uri)"/>
  <xsl:if                        test = "not($doc)">
   <xsl:message             terminate = "yes">
    <xsl:value-of              select = "concat('Unable to load state ',
                                                'document from URI: ',
                                                $uri)"/>
   </xsl:message>
  </xsl:if>
  <xsl:copy-of                 select = "$doc/PoliticalSubUnit
                                             /PoliticalSubUnitFullName"/>
  <xsl:copy-of                 select = "$doc/PoliticalSubUnit
                                             /PoliticalSubUnitShortName"/>
 </xsl:template>

 <!--
 ==========================================================================
 Denormalize the country link.
 ========================================================================== -->
 <xsl:template                  match = "Country">
  <xsl:variable                  name = "link"
                               select = "@cdr:ref"/>
  <xsl:variable                  name = "uri"
                               select = "concat('cdrx:', $link)"/>
  <xsl:variable                  name = "doc"
                               select = "document($uri)"/>
  <xsl:if                        test = "not($doc)">
   <xsl:message             terminate = "yes">
    <xsl:value-of              select = "concat('Unable to load country ',
                                                'document from URI: ',
                                                $uri)"/>
   </xsl:message>
  </xsl:if>
  <xsl:copy-of                 select = "$doc/Country/CountryFullName"/>
  <xsl:copy-of                 select = "$doc/Country/CountryShortName"/>
 </xsl:template>

 <!--
 ==========================================================================
 Assemble the collection of participating organizations and private
 practice sites.

 At the request of Sheri and Lakshmi (issue 591 2003-02-13), the logic
 for selecting the contact phone to be listed for the protocol sites
 has been altered as follows (logic compiled 2003-02-24 by RMK from
 email instructions provided by Lakshmi 2003-02-19 in a message with
 subject line "Phone numbers on Protocols" and approved by Lakshmi
 on 2003-02-25):

 If the site is an org site:
   If the contact is a specific person:
     If there is a SpecificPhone:
       Use it
     Otherwise, if the person location is a private practice location: [1]
       If there is a Phone element:
         Use it (ignoring any Public = 'No' attribute)
       Otherwise:
         Leave the cell blank
     Otherwise, if the person location is an other practice location:
       If there is a SpecificPhone without a Public = 'No' attribute:
         Use it
       Otherwise, if there is a SpecificTollFreePhone:
         Use it
       Otherwise, if the linked Organization location has a Phone: [2]
         Use it
       Otherwise, if the Org location has a TollFreePhone:
         Use it
       Otherwise:
         Leave the cell blank
     Otherwise [Home location; shouldn't happen]:
       Leave the cell blank
   Otherwise [the contact is a generic person]:
     If there is a Phone element:
       Use it [ignoring any Public attribute]
     Otherwise, if there is a TollFreePhone element:
       Use it
     Otherwise:
       Leave the cell blank
 Otherwise [the site is a private practice site]:
   If the fragment link is for a PrivatePracticeLocation:
     If there is a Phone element:
       Use it [ignore any Public attribute]
     Otherwise, if there is a TollFreePhone:
       Use it
     Otherwise:
       Leave the cell blank
   Otherwise:
     Leave the cell blank [3]

============================================================================
Notes:
============================================================================
[1] Not likely, since this is a site tied to an organization, but the
    combination is allowed by the schema, and I'm providing for the
    possibility in case it happens; if it doesn't, no harm will have
    been done.  Note that I am applying your instructions about ignoring
    the Public attribute here, carrying over that approach from what
    you said for private practice sites.
[2] I'm ignoring the Public attribute here, because your Feb 19 memo
    says "Also, if there is no Phone [in the Person document], and a
    Phone exists for the Organization, it is displayed."  Note that
    the possible presence of the Public attribute here is not mentioned.
[3] I'm not doing anything at all if the fragment points to an other
    practice location, as this combination is too ludicrous to consider.

 ========================================================================== -->
 <xsl:template                  match = "ProtocolSites">
  <ProtocolSites>
   <xsl:apply-templates        select = "OrgSite|PrivatePracticeSite"/>
  </ProtocolSites>
 </xsl:template>

 <!--
 ==========================================================================
 Rule for a single participating organization.
 ========================================================================== -->
 <xsl:template                  match = "OrgSite">
  <ParticipatingSite>
   <xsl:apply-templates        select = "OrgSiteID"/>
   <xsl:apply-templates        select = "OrgSiteStatus"/>
   <xsl:apply-templates        select = "OrgSiteContact/SpecificPerson"/>
   <xsl:apply-templates        select = "OrgSiteContact/GenericPerson"/>
  </ParticipatingSite>
 </xsl:template>

 <!--
 ==========================================================================
 Find the name for a participating organization.
 ========================================================================== -->
 <xsl:template                  match = "OrgSiteID">
  <xsl:variable                  name = "uri"
                               select = "concat('cdrx:', @cdr:ref)"/>
  <xsl:variable                  name = "doc"
                               select = "document($uri)"/>
  <xsl:if                        test = "not($doc)">
   <xsl:message             terminate = "yes">
    <xsl:value-of              select = "concat('Unable to load document for ',
                                                'participating organization ',
                                                'from URI: ',
                                                $uri)"/>
   </xsl:message>
  </xsl:if>
  <OrgSiteName>
   <xsl:value-of               select = "$doc/Organization/
                                         OrganizationNameInformation/
                                         OfficialName/Name"/>
  </OrgSiteName>
 </xsl:template>

 <!--
 ==========================================================================
 Find the status for a participating organization.
 ========================================================================== -->
 <xsl:template                  match = "OrgSiteStatus |
                                         PrivatePracticeSiteStatus">
  <SiteStatus>
   <xsl:value-of               select = "."/>
  </SiteStatus>
 </xsl:template>

 <!--
 ==========================================================================
 Extract the name and telephone for a principal investigator.
 ========================================================================== -->
 <xsl:template                  match = "SpecificPerson">
  <xsl:variable                  name = "link"
                               select = "Person/@cdr:ref"/>
  <xsl:variable                  name = "uri"
                               select = "concat('cdrx:', $link)"/>
  <xsl:variable                  name = "doc"
                               select = "document($uri)"/>
  <xsl:variable                  name = "fragId">
   <xsl:if                       test = "contains($link, '#')">
    <xsl:value-of              select = "substring-after($link, '#')"/>
   </xsl:if>
  </xsl:variable>
  <xsl:if                        test = "not($doc)">
   <xsl:message             terminate = "yes">
    <xsl:value-of              select = "concat('Unable to open specific ',
                                                'person document from URI: ',
                                                $uri)"/>
   </xsl:message>
  </xsl:if>
  <SpecificPerson>
   <xsl:apply-templates        select = "$doc/Person/PersonNameInformation"/>
  </SpecificPerson>

  <!-- See logic for phone specified at template for ProtocolSites. -->
  <Phone>
   <xsl:choose>
    <xsl:when                    test = "SpecificPhone">
     <xsl:value-of             select = "SpecificPhone"/>
    </xsl:when>
    <xsl:when                    test = "$doc/Person/PersonLocations/
                                         OtherPracticeLocation
                                         [@cdr:id = $fragId]">
     <xsl:variable               name = "orgLink"
                               select = "$doc/Person/PersonLocations/
                                         OtherPracticeLocation
                                         [@cdr:id = $fragId]/
                                         OrganizationLocation/@cdr:ref"/>
     <xsl:variable               name = "orgUri"
                               select = "concat('cdrx:', $orgLink)"/>
     <xsl:variable               name = "org"
                               select = "document($orgUri)"/>
     <xsl:variable               name = "orgFragId">
      <xsl:if                    test = "contains($orgLink, '#')">
       <xsl:value-of           select = "substring-after($orgLink, '#')"/>
      </xsl:if>
     </xsl:variable>
     <xsl:choose>
      <xsl:when                  test = "$doc/Person/PersonLocations/
                                         OtherPracticeLocation
                                         [@cdr:id = $fragId]/SpecificPhone
                                         [not(@Public='No')]">
       <xsl:value-of           select = "$doc/Person/PersonLocations/
                                         OtherPracticeLocation
                                         [@cdr:id = $fragId]/SpecificPhone
                                         [not(@Public='No')]"/>
      </xsl:when>
      <xsl:when                  test = "$doc/Person/PersonLocations/
                                         OtherPracticeLocation
                                         [@cdr:id = $fragId]/
                                         SpecificTollFreePhone">
       <xsl:value-of           select = "$doc/Person/PersonLocations/
                                         OtherPracticeLocation
                                         [@cdr:id = $fragId]/
                                         SpecificTollFreePhone"/>
      </xsl:when>
      <xsl:when                  test = "$org/Organization/
                                         OrganizationLocations/
                                         OrganizationLocation/Location/Phone">
       <xsl:value-of           select = "$org/Organization/
                                         OrganizationLocations/
                                         OrganizationLocation/Location/Phone"/>
      </xsl:when>
      <xsl:when                  test = "$org/Organization/
                                         OrganizationLocations/
                                         OrganizationLocation/Location/
                                         TollFreePhone">
       <xsl:value-of           select = "$org/Organization/
                                         OrganizationLocations/
                                         OrganizationLocation/Location/
                                         TollFreePhone"/>
      </xsl:when>
     </xsl:choose>
    </xsl:when>
    <xsl:when                    test = "$doc/Person/PersonLocations/
                                         PrivatePractice/
                                         PrivatePracticeLocation
                                         [@cdr:id = $fragId]/Phone">
     <xsl:value-of             select = "$doc/Person/PersonLocations/
                                         PrivatePractice/
                                         PrivatePracticeLocation
                                         [@cdr:id = $fragId]/Phone"/>
    </xsl:when>
   </xsl:choose>
  </Phone>
 </xsl:template>

 <!--
 ==========================================================================
 Extract the generic contact information for a participating site (in
 case there is no PI).
 ========================================================================== -->
 <xsl:template                  match = "GenericPerson">
  <GenericPerson>
   <xsl:value-of               select = "PersonTitle"/>
  </GenericPerson>
  <Phone>
   <xsl:choose>
    <xsl:when                    test = "GenericPersonContact/
                                         ContactDetail/Phone">
     <xsl:value-of             select = "GenericPersonContact/
                                         ContactDetail/Phone"/>
    </xsl:when>
    <xsl:when                    test = "GenericPersonContact/
                                         ContactDetail/TollFreePhone">
     <xsl:value-of             select = "GenericPersonContact/
                                         ContactDetail/TollFreePhone"/>
    </xsl:when>
   </xsl:choose>
  </Phone>
 </xsl:template>

 <!--
 ==========================================================================
 Extract information for a site not tied to an organization.
 ========================================================================== -->
 <xsl:template                  match = "PrivatePracticeSite">
  <ParticipatingSite>
   <xsl:apply-templates        select = "PrivatePracticeSiteID"/>
   <xsl:apply-templates        select = "PrivatePracticeSiteStatus"/>
  </ParticipatingSite>
 </xsl:template>

 <!--
 ==========================================================================
 Extract information for a private practice person.
 ========================================================================== -->
 <xsl:template                  match = "PrivatePracticeSiteID">
  <xsl:variable                  name = "link"
                               select = "@cdr:ref"/>
  <xsl:variable                  name = "uri"
                               select = "concat('cdrx:', $link)"/>
  <xsl:variable                  name = "doc"
                               select = "document($uri)"/>
  <xsl:variable                  name = "fragId">
   <xsl:if                       test = "contains($uri, '#')">
    <xsl:value-of              select = "substring-after($uri, '#')"/>
   </xsl:if>
  </xsl:variable>
  <PrivatePracticeSiteName>
   <xsl:apply-templates        select = "$doc/Person/PersonNameInformation"/>
  </PrivatePracticeSiteName>
  <Phone>
   <xsl:choose>
    <xsl:when                    test = "$doc/Person/PersonLocations/
                                         PrivatePractice/
                                         PrivatePracticeLocation
                                         [@cdr:id = $fragId]/Phone">
     <xsl:value-of             select = "$doc/Person/PersonLocations/
                                         PrivatePractice/
                                         PrivatePracticeLocation
                                         [@cdr:id = $fragId]/Phone"/>
    </xsl:when>
    <xsl:when                    test = "$doc/Person/PersonLocations/
                                         PrivatePractice/
                                         PrivatePracticeLocation
                                         [@cdr:id = $fragId]/TollFreePhone">
     <xsl:value-of             select = "$doc/Person/PersonLocations/
                                         PrivatePractice/
                                         PrivatePracticeLocation
                                         [@cdr:id = $fragId]/TollFreePhone"/>
    </xsl:when>
   </xsl:choose>
  </Phone>
 </xsl:template>

</xsl:transform>
