<?xml version = "1.0" encoding="utf-8"?>
<!-- $Id$ -->
<!-- Filter title: Module: Table Formatter -->
<!--
====================================================================
$Id$

Display a table-new format for text revisions
written by C.Burg 7/30/2002
10/10/2002 (CB) added exclude-result-prefixes
10/07/2002 (CB) changed table width to 90% 
10/07/2002 (CB) Modified to display center or left justified
                width attribute changed to 11%

BZIssue::5114 - [Summaries] Summary Frag Refs to Tables in QC Reports

==================================================================== -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
                               version = "1.0"
               exclude-result-prefixes = "cdr">

 <!-- Set this parameter to get rid of the characters used for aligning
      data without CSS. -->
 <xsl:param                       name = "suppress-nbsp"/>

 <!--
 ========================================================================
 Template to format the table
 ======================================================================== -->
 <xsl:template                   match = "Table">
  <!--
  <table border='1' valign='top' cellspacing='0' cellpadding='5' width='100%'>
  -->
  <table class="tableBody">
   <xsl:attribute                 name = "id">
    <xsl:value-of               select = "@cdr:id"/>
   </xsl:attribute>

   <xsl:apply-templates         select = "Title"
                                  mode = "table"/>          

   <!--
   Display the table header row
   ======================================================== -->
   <xsl:for-each                select = "TGroup/THead/Row">
    <tr>
     <xsl:for-each              select = "entry">
      <xsl:if                     test = "@NameEnd">
       <xsl:variable              name = "NameEnd" 
                                select = "@NameEnd"/>
       <xsl:variable              name = "NameSt"  
                                select = "@NameSt"/>
       <xsl:variable              name = "entrytype">
        <xsl:value-of           select = "1"/>
       </xsl:variable>
                       
       <xsl:call-template         name = "getColSpan">
        <xsl:with-param           name = "NameEnd"
                                select = "@NameEnd"/>
        <xsl:with-param           name = "NameSt"
                                select = "@NameSt"/>
        <xsl:with-param           name = "entry"
                                select = "."/>
        <xsl:with-param           name = "Entrytype"
                                select = "$entrytype"/>
       </xsl:call-template>
      </xsl:if>

      <xsl:if                     test = "not(@NameEnd)">
       <xsl:choose>
        <xsl:when                 test = "@Align">
         <xsl:variable            name = "align" 
                                select = "@Align"/>
         <td align='{$align}'>
          <b>
           <xsl:apply-templates/>
          </b>
          <xsl:call-template name="non-breaking-space"/>
         </td>
        </xsl:when>
        <xsl:when                 test = "@VAlign">
         <xsl:variable            name = "valign" 
                                select = "@VAlign"/>
         <td valign='{$valign}'>
          <b>
           <xsl:apply-templates/>
          </b>
          <xsl:call-template name="non-breaking-space"/>
         </td>
        </xsl:when>
        <xsl:otherwise>
         <td align='center'>
          <b>
           <xsl:apply-templates/>
          </b>
          <xsl:call-template name="non-breaking-space"/>
         </td>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:if>
     </xsl:for-each>
    </tr>
   </xsl:for-each>

   <!--
   Display the table body rows
   ======================================================== -->
   <xsl:for-each                select = "TGroup/TBody/Row">
    <tr>
     <xsl:for-each              select = "entry">
      <xsl:if                     test = "not(@NameEnd)"> 
       <xsl:if                    test = "@MoreRows">
        <xsl:variable            name  =  "rows" 
	                            select = "@MoreRows"/>
        <td rowspan='{$rows+1}' class='ltext'>
	     <xsl:apply-templates   select = "."/>
	     <xsl:call-template name="non-breaking-space"/>
	    </td>
       </xsl:if>
 
       <xsl:if                    test = "not(@MoreRows)">
        <xsl:choose>
         <xsl:when                test = "not(@Align)">
          <td class='ltext'>
	       <xsl:apply-templates select = "."/>
	       <xsl:call-template name="non-breaking-space"/>
	      </td>
         </xsl:when>
         <xsl:when                test = "@Align">
          <xsl:variable           name = "align" 
	                        select = "@Align"/>
          <td align='{$align}'>
	       <xsl:apply-templates select = "."/>
	       <xsl:call-template name="non-breaking-space"/>
	      </td>
         </xsl:when>
         <xsl:when                test = "@VAlign">
          <xsl:variable           name = "valign" 
	                        select = "@VAlign"/>
          <td valign='{$valign}'>
	       <xsl:apply-templates select = "."/>
	       <xsl:call-template name="non-breaking-space"/>
	      </td>
         </xsl:when>
        </xsl:choose>
       </xsl:if>
      </xsl:if>
             
      <xsl:if                     test = "@NameEnd"> 
       <xsl:if                    test = "@MoreRows">
        <xsl:variable             name = "rows" 
	                            select = "@MoreRows"/>
        <xsl:variable             name = "entrytype">
         <xsl:value-of          select = "2"/>
        </xsl:variable>
        <xsl:call-template        name = "getColSpan">
         <xsl:with-param          name = "NameEnd"
                                select = "@NameEnd"/>
         <xsl:with-param          name = "rows"
                                select = "$rows"/>
         <xsl:with-param          name = "NameSt"
                                select = "@NameSt"/>
         <xsl:with-param          name = "entry"
                                select = "."/>
         <xsl:with-param          name = "Entrytype"
                                select = "$entrytype"/>
        </xsl:call-template> 
       </xsl:if>
         
       <xsl:if                    test = "not(@MoreRows)">
        <xsl:variable             name = "entrytype">
         <xsl:value-of          select = "3"/>
        </xsl:variable>

        <xsl:call-template        name = "getColSpan">
         <xsl:with-param          name = "NameEnd"
                                select = "@NameEnd"/>
         <xsl:with-param          name = "NameSt"
                                select = "@NameSt"/>
         <xsl:with-param          name = "Entrytype"
                                select = "$entrytype"/>
         <xsl:with-param          name = "entry"
                                select = "."/>
        </xsl:call-template> 
       </xsl:if>
      </xsl:if>
     </xsl:for-each>
    </tr>
   </xsl:for-each>
  </table>
            
  <!--
  Display the table footer rows
  ======================================================== -->
  <xsl:choose>
   <xsl:when                      test = "TGroup/TFoot/Row
                                          and
                                          TGroup/TFoot/Row/entry/@RowSep">
    <table class="tableFooter1">
     <xsl:for-each              select = "TGroup/TFoot/Row">
      <tr>
       <xsl:for-each            select = "entry">
        <xsl:variable             name = "align" 
                                select = "@Align"/>
        <xsl:variable             name = "cols" 
                                select = "../../../@Cols"/>
        <td  align='{$align}' colspan='{$cols}'>
 	    <xsl:apply-templates/>
        </td>
       </xsl:for-each>
      </tr>
     </xsl:for-each>
    </table>
   </xsl:when>

   <!--
   <xsl:if                        test = "not(TGroup/TFoot/Row/entry/@RowSep)"> 
   -->

  <xsl:when                       test = "TGroup/TFoot/Row
                                          and
                                          not(TGroup/TFoot/Row/entry/@RowSep)">
   <table class="tableFooter2">
    <xsl:for-each               select = "TGroup/TFoot/Row">
     <tr>
      <xsl:for-each             select = "entry">
       <xsl:variable              name = "align" 
                                select = "@Align"/>
       <xsl:variable              name = "entrytype">
        <xsl:value-of           select = "4"/>
       </xsl:variable>
       <xsl:choose>
        <xsl:when                 test = "@NameEnd">
         <xsl:call-template       name = "getColSpan">
          <xsl:with-param         name = "NameEnd"
                                select = "@NameEnd"/>
          <xsl:with-param         name = "NameSt"
                                select = "@NameSt"/>
          <xsl:with-param         name = "Entrytype"
                                select = "$entrytype"/>
          <xsl:with-param         name = "entry"
                                select = "."/>
          <xsl:with-param         name = "Align"
                                select = "$align"/>
         </xsl:call-template> 
        </xsl:when>
        <xsl:otherwise>
         <xsl:variable            name = "cols" 
	                            select = "../../../@Cols"/>
         <td align='{$align}' colspan='{$cols}'>
	       <xsl:apply-templates/>
	     </td>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:for-each>
     </tr>
    </xsl:for-each> 
   </table>
  </xsl:when>
  </xsl:choose>
 </xsl:template>
      

 <!--
 ========================================================================
 Template to format the table columns
 ======================================================================== -->
 <xsl:template                    name = "getColSpan">
  <xsl:param                      name = "NameEnd"/>
  <xsl:param                      name = "rows"/>
  <xsl:param                      name = "NameSt"/>
  <xsl:param                      name = "entry"/>
  <xsl:param                      name = "Entrytype"/>
  <xsl:param                      name = "Align"/>
  <xsl:variable                   name = "AAlign" 
                                select = "$Align"/>
  <xsl:variable                   name = "type" 
                                select = "$Entrytype"/> 
  <xsl:variable                   name = "namest" 
                                select = "$NameSt"/> 
  <xsl:variable                   name = "nameend" 
                                select = "$NameEnd"/> 
  <xsl:variable                   name = "firstCol" 
                                select = "../../../ColSpec[@ColName = $namest]/
                                            @ColNum"/>
  <xsl:variable                   name = "lastCol" 
                                select = "../../../ColSpec[@ColName = $nameend]/
                                                      @ColNum"/>
  <xsl:variable                   name = "colspans" 
                                select = "1 + $lastCol - $firstCol"/>
  <xsl:choose>
   <xsl:when                      test = "$type = 1">            
    <td  rowspan='{$rows+1}' colspan='{$colspans}' align='center'>
     <b>
      <xsl:apply-templates      select = "."/>
     </b>
     <xsl:call-template name="non-breaking-space"/>
    </td>
   </xsl:when> 
   <xsl:when                      test = "$type = 2">            
    <td class='ltext' rowspan='{$rows+1}' colspan='{$colspans}'>
     <xsl:apply-templates select = "."/>
     <xsl:call-template name="non-breaking-space"/>
    </td>
   </xsl:when> 
   <xsl:when                      test = "$type = 3">            
    <td class='ltext' colspan='{$colspans}'>
     <xsl:apply-templates       select = "."/>
     <xsl:call-template name="non-breaking-space"/>
    </td> 
   </xsl:when> 
   <xsl:when                      test = "$type = 4">            
    <td class="type4" align='{$AAlign}' colspan='{$colspans}'>
      <xsl:apply-templates/>
    </td>
   </xsl:when> 
  </xsl:choose>
 </xsl:template>


 <!--
 ========================================================================
 Template to display the table title as a caption
 ======================================================================== -->
 <xsl:template                    match = "Title"
                                   mode = "table">
  <caption>
    <xsl:apply-templates/>
  </caption>
 </xsl:template>

<!--
 ========================================================================
 Template to optionally add a non-breaking space character.
 ======================================================================== -->
 <xsl:template                      name = "non-breaking-space">
  <xsl:if                           test = "not($suppress-nbsp)">
   <xsl:text>&#160;</xsl:text>
  </xsl:if>
 </xsl:template>

</xsl:transform>
