<?xml version='1.0' encoding='UTF-8'?>
<!-- Filter title: Vendor Filter: CTGovProtocol -->
<!--
=============================================================================
BZIssue::4675
BZIssue::4772 - CTGovProtocol Vendor Filter Changes
BZIssue::5034 - Modify vendor filters for CT.gov trials with RSS
                data from CTRP
OCECTS-134:  Show trial status in the trial description
OCEPROJECT-3794: Create CDR Filter Change for Clinical Trials - Trials status
=============================================================================
-->
<xsl:transform               xmlns:xsl = 'http://www.w3.org/1999/XSL/Transform'
                             xmlns:cdr = 'cips.nci.nih.gov/cdr'
                               version = '1.0'
               exclude-result-prefixes = 'cdr'>

 <xsl:include href = 'cdr:name:Module: Vendor Address Templates'/>
 <xsl:include href = 'cdr:name:Module: Vendor Filter Templates'/>

 <xsl:output                    method = 'xml'
                  omit-xml-declaration = 'no'
                                indent = 'yes'
                              encoding = 'utf-8'/>

 <xsl:variable                    name = "discTitle"
                                select = "concat('CTGov Protocol Abstract ',
                                                 'Disclaimer;CTGov protocol ',
                                                 'abstract disclaimer')"/>

 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = '/'>
  <CTGovProtocol>
   <xsl:attribute                 name = 'id'>
    <xsl:value-of               select = 'CTGovProtocol/DocId'/>
   </xsl:attribute>
   <xsl:apply-templates         select = 'CTGovProtocol'/>
  </CTGovProtocol>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'CTGovProtocol'>
  <xsl:apply-templates          select = 'RequiredHeader'/>
  <xsl:apply-templates          select = 'IDInfo'/>
  <xsl:call-template              name = 'urlInfo'/>
  <xsl:apply-templates          select = 'BriefTitle'/>
  <xsl:apply-templates          select = 'OfficialTitle'/>
  <xsl:apply-templates          select = 'Sponsors'/>
  <xsl:apply-templates          select = 'Collaborator'/>
  <xsl:apply-templates          select = 'BriefSummary'/>
  <xsl:apply-templates          select = 'DetailedDescription'/>
  <xsl:apply-templates          select = 'CTEligibility'/>
  <xsl:if                         test = 'normalize-space(CTEligibility) = ""'>
   <CTEntryCriteria>
    <Para>Entry criteria not present in the ClinicalTrials.gov record.</Para>
   </CTEntryCriteria>
  </xsl:if>


<!--  ************* Remove for New DTD *************** -->
  <CTGovDisclaimer>
   <xsl:variable                  name = "discDoc"
                                select = "document(concat('cdr:name:',
                                                   cdr:escape-uri($discTitle),
                                                        '/lastp'))"/>
   <xsl:apply-templates         select = "$discDoc/MiscellaneousDocument
                                               /MiscellaneousDocumentText
                                               /Section/Para"
                                  mode = "disclaimer"/>
  </CTGovDisclaimer>
<!-- -->

  <xsl:apply-templates          select = 'OverallStatus'/>
  <xsl:apply-templates          select = 'StartDate'/>
  <xsl:apply-templates          select = 'EndDate'/>
  <xsl:apply-templates          select = 'Phase'/>
  <xsl:apply-templates          select = 'PDQIndexing'/>
  <xsl:apply-templates          select = 'PDQAdminInfo/
                                          ProtocolSpecialCategory'/>
  <!--
  If the document contains CTRPLocations, these will overwrite any
  other location we received.  Otherwise, display the regular
  locations
  ================================================================ -->
  <xsl:choose>
   <xsl:when                      test = "CTRPInfo/CTRPLocation">
    <xsl:apply-templates        select = 'CTRPInfo/CTRPLocation'/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:apply-templates        select = 'Location'/>
   </xsl:otherwise>
  </xsl:choose>

  <xsl:apply-templates          select = 'VerificationDate'/>
  <xsl:apply-templates          select = 'LastChangedDate'/>
 </xsl:template>


 <!--
 ================================================================
 Template to add the required (per DTD) DateType attribute to the
 StartDate element.
 ================================================================ -->
 <xsl:template                   match = 'StartDate'>
  <StartDate>
   <xsl:attribute                 name = 'DateType'>
    <xsl:text>Actual</xsl:text>
   </xsl:attribute>
   <xsl:value-of                select = '.'/>
  </StartDate>
 </xsl:template>


 <!--
 ================================================================
 Templage to populate the LeadSponsor and Collaborator elements.
 For the Collaborator an extra type attribute needs to be
 specified.
 ================================================================ -->
 <xsl:template                   match = 'LeadSponsor | Collaborator'>
  <xsl:choose>
   <xsl:when                      test = 'normalize-space(Organization/
                                          OrganizationNameInformation/
                                          OfficialName/Name) != ""'>
    <xsl:element                  name = '{name()}'>
     <xsl:if                      test = 'Organization/@cdr:ref != ""'>
      <xsl:attribute              name = 'ref'>
       <xsl:value-of            select = 'Organization/@cdr:ref'/>
      </xsl:attribute>
     </xsl:if>
     <xsl:if                      test = "name() = 'Collaborator'">
      <xsl:attribute              name = "type">
       <xsl:text>Organization</xsl:text>
      </xsl:attribute>
     </xsl:if>
     <xsl:value-of              select = 'Organization/
                                          OrganizationNameInformation/
                                          OfficialName/Name'/>
    </xsl:element>
   </xsl:when>
   <xsl:when                      test = 'Person/@cdr:ref != ""'>
    <xsl:element                  name = '{name()}'>
     <xsl:attribute               name = 'ref'>
      <xsl:value-of             select = 'Person/@cdr:ref'/>
     </xsl:attribute>
     <xsl:if                      test = "name() = 'Collaborator'">
      <xsl:attribute              name = "type">
       <xsl:text>Person</xsl:text>
      </xsl:attribute>
     </xsl:if>
     <xsl:call-template           name = 'concatPersonalName'>
      <xsl:with-param             name = 'nameInfo'
                                select = 'Person/PersonNameInformation'/>
     </xsl:call-template>
    </xsl:element>
   </xsl:when>
  </xsl:choose>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'CTEligibility'>
  <xsl:if                         test = 'normalize-space() != ""'>
   <CTEntryCriteria>
    <xsl:choose>
     <xsl:when                    test = 'normalize-space(CTCriteria) != ""'>
      <xsl:apply-templates      select = 'CTCriteria/Para |
                                          CTCriteria/ItemizedList'/>
     </xsl:when>
     <xsl:otherwise>
      <Para>Entry criteria not present in the ClinicalTrials.gov record.</Para>
     </xsl:otherwise>
    </xsl:choose>
   </CTEntryCriteria>
  </xsl:if>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'OverallStatus'>
  <xsl:if                         test = 'normalize-space() != ""'>
   <CurrentProtocolStatus>
    <xsl:value-of               select = '.'/>
   </CurrentProtocolStatus>
  </xsl:if>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'RequiredHeader'>
  <RequiredHeader>
   <xsl:apply-templates         select = 'DownloadDate'/>
   <LinkText>
    <xsl:attribute                name = 'xref'>
     <xsl:value-of              select = 'URL'/>
    </xsl:attribute>
    <xsl:value-of               select = 'LinkText'/>
   </LinkText>
  </RequiredHeader>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = "IDInfo">
  <xsl:copy>
   <xsl:apply-templates         select = "OrgStudyID"/>
   <xsl:call-template             name = "listSecondaryIDs"/>
   <xsl:apply-templates         select = "NCTID"/>
  </xsl:copy>
 </xsl:template>


 <!--
 ================================================================
 Template to dedup the protocol IDs.
 Any secondary ID that we already saw as a NCTID or OrgStudyID
 will be eliminated.
 ================================================================ -->
 <xsl:template                    name = "listSecondaryIDs">

  <xsl:variable                   name = 'ctGovIDs'>
   <xsl:for-each                select = '/CTGovProtocol/
                                          IDInfo/
                                          NCTID          |
                                         /CTGovProtocol/
                                          IDInfo/
                                          OrgStudyID'>
     <xsl:value-of              select = '.'/>
     <xsl:text>~</xsl:text>
   </xsl:for-each>
   <xsl:text>~</xsl:text>
  </xsl:variable>

  <xsl:variable                   name = "secondaryIDs">
   <xsl:if                        test = "SecondaryID
                                          |
                                          /CTGovProtocol/
                                           PDQAdminInfo/
                                           PDQProtocolIDs/
                                           PrimaryID/IDString
                                          |
                                          /CTGovProtocol/
                                           PDQAdminInfo/
                                           PDQProtocolIDs/
                                           OtherID/
                                           IDStringSecondaryID">
    <xsl:for-each               select = "SecondaryID         |
                                          /CTGovProtocol/
                                           PDQAdminInfo/
                                           PDQProtocolIDs/
                                           PrimaryID/IDString |
                                          /CTGovProtocol/
                                           PDQAdminInfo/
                                           PDQProtocolIDs/
                                           OtherID/
                                           IDString">
     <xsl:value-of              select = "."/>
     <xsl:text>~</xsl:text>
    </xsl:for-each>
   </xsl:if>
  </xsl:variable>

  <xsl:variable                   name = "allIDs"
                                select = "concat($ctGovIDs, $secondaryIDs)"/>

  <xsl:variable                   name = "newIDs"
                                select = "document(concat('cdrutil:/dedup-ids/',
                                                  cdr:escape-uri($allIDs)))"/>

  <xsl:if                         test = "$newIDs/result/id">
   <xsl:for-each                select = "$newIDs/result/id">
    <xsl:element                  name = "SecondaryID">
     <xsl:value-of              select = "."/>
    </xsl:element>
   </xsl:for-each>
  </xsl:if>

 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Location | CTRPLocation'>
  <xsl:if                         test = 'normalize-space(Status) = "Active"
                                          or
                                          normalize-space(CTRPStatus)
                                                                  = "Active"
                                          or
                                          (normalize-space(
                                           /CTGovProtocol/OverallStatus)
                                                                  = "Active"
                                           and
                                           normalize-space(Status) = ""
                                           and
                                           normalize-space(CTRPStatus) = "")'>
   <Location>
    <xsl:apply-templates        select = 'Facility |
                                          CTRPFacility |
                                          Status |
                                          CTRPStatus'/>
    <xsl:if                       test = 'normalize-space(Status) = ""
                                          and
                                          normalize-space(CTRPStatus) = ""'>
     <Status>
      <xsl:value-of             select = '/CTGovProtocol/OverallStatus'/>
     </Status>
    </xsl:if>
    <xsl:apply-templates        select = 'Contact       |
                                          ContactBackup |
                                          CTRPContact   |
                                          Investigator'/>
   </Location>
  </xsl:if>
 </xsl:template>


 <!--
 ================================================================
 Template to display the status value
 ================================================================ -->
 <xsl:template                   match = 'Status | CTRPStatus'>
  <Status>
   <xsl:if                        test = 'normalize-space() != ""'>
    <xsl:value-of               select = 'normalize-space()'/>
   </xsl:if>
  </Status>
 </xsl:template>


 <!--
 ================================================================
 Template to display the Facility name and address block
 ================================================================ -->
 <xsl:template                   match = 'FacilityXXX'>
  <Facility>
   <xsl:variable                  name = 'orgName'

                                select = 'Name/Organization/
                                          OrganizationNameInformation/
                                          OfficialName/Name'/>
   <xsl:variable                  name = 'orgId'
                                select = 'Name/Organization/@cdr:ref'/>
   <FacilityName>
    <xsl:if                       test = '$orgId != ""'>
     <xsl:attribute               name = 'ref'>
      <xsl:value-of             select = '$orgId'/>
     </xsl:attribute>
    </xsl:if>
    <xsl:choose>
     <xsl:when                    test = 'normalize-space($orgName) != ""'>
      <xsl:value-of             select = '$orgName'/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>Study Site</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </FacilityName>
   <xsl:choose>
    <xsl:when                     test = 'Name/Organization/CIPSContact/
                                          PostalAddress/@AddressType = "US"'>
     <PostalAddress>
      <xsl:apply-templates      select = 'PostalAddress/Street |
                                          PostalAddress/City   |
                                          PostalAddress/CitySuffix'/>
      <xsl:for-each             select = 'Name/Organization/CIPSContact/
                                          PostalAddress/
                                          PoliticalSubUnit_State'>
       <PoliticalSubUnitName       ref = '{@cdr:ref}'>
        <xsl:value-of           select = 'PoliticalSubUnitFullName'/>
       </PoliticalSubUnitName>
      </xsl:for-each>
      <xsl:for-each             select = 'PostalAddress/Country'>
       <CountryName                ref = '{@cdr:ref}'>
        <xsl:value-of           select = 'CountryFullName'/>
       </CountryName>
      </xsl:for-each>

      <!--
      Adding the ZIP code from the Org information if available
      =============================================================== -->
      <xsl:choose>
       <xsl:when                  test = 'Name/Organization/CIPSContact/
                                          PostalAddress/PostalCode_ZIP'>
        <xsl:apply-templates    select = 'Name/Organization/CIPSContact/
                                          PostalAddress/PostalCode_ZIP'/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:apply-templates    select = 'Name/Organization/
                                          OrganizationLocations/
                                          OrganizationLocation/
                                          Location/
                                          PostalAddress/
                                          PostalCode_ZIP'/>
       </xsl:otherwise>
      </xsl:choose>

      <xsl:apply-templates      select = 'PostalAddress/Country/
                                          PostalCodePosition'/>
     </PostalAddress>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates       select = 'PostalAddress'/>
    </xsl:otherwise>
   </xsl:choose>
  </Facility>
 </xsl:template>


 <!--
 ================================================================
 Template to display the Facility name and address block
 ================================================================ -->
 <xsl:template                   match = 'Facility | CTRPFacility'>
  <Facility>
   <xsl:variable                  name = 'orgName'

                                select = 'Name/Organization/
                                           OrganizationNameInformation/
                                           OfficialName/Name     |
                                          PDQOrganization/Organization/
                                           OrganizationNameInformation/
                                           OfficialName/Name'/>
   <xsl:variable                  name = 'orgId'
                                select = 'Name/
                                           Organization/@cdr:ref |
                                          PDQOrganization/
                                           Organization/@cdr:ref'/>
   <FacilityName>
    <xsl:if                       test = '$orgId != ""'>
     <xsl:attribute               name = 'ref'>
      <xsl:value-of             select = '$orgId'/>
     </xsl:attribute>
    </xsl:if>
    <xsl:choose>
     <xsl:when                    test = 'normalize-space($orgName) != ""'>
      <xsl:value-of             select = '$orgName'/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>Study Site</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </FacilityName>
   <xsl:choose>
    <xsl:when                     test = 'Name/Organization/CIPSContact/
                                          PostalAddress/@AddressType = "US"'>
     <PostalAddress>
      <xsl:apply-templates      select = 'PostalAddress/Street |
                                          PostalAddress/City   |
                                          PostalAddress/CitySuffix'/>
      <xsl:for-each             select = 'Name/Organization/CIPSContact/
                                          PostalAddress/
                                          PoliticalSubUnit_State'>
       <PoliticalSubUnitName       ref = '{@cdr:ref}'>
        <xsl:value-of           select = 'PoliticalSubUnitFullName'/>
       </PoliticalSubUnitName>
      </xsl:for-each>
      <xsl:for-each             select = 'PostalAddress/Country'>
       <CountryName                ref = '{@cdr:ref}'>
        <xsl:value-of           select = 'CountryFullName'/>
       </CountryName>
      </xsl:for-each>

      <!--
      Adding the ZIP code from the Org information if available
      =============================================================== -->
      <xsl:choose>
       <xsl:when                  test = 'Name/Organization/CIPSContact/
                                          PostalAddress/PostalCode_ZIP'>
        <xsl:apply-templates    select = 'Name/Organization/CIPSContact/
                                          PostalAddress/PostalCode_ZIP'/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:apply-templates    select = 'Name/Organization/
                                          OrganizationLocations/
                                          OrganizationLocation/
                                          Location/
                                          PostalAddress/
                                          PostalCode_ZIP'/>
       </xsl:otherwise>
      </xsl:choose>

      <xsl:apply-templates      select = 'PostalAddress/Country/
                                          PostalCodePosition'/>
     </PostalAddress>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates       select = 'PostalAddress'/>
    </xsl:otherwise>
   </xsl:choose>
  </Facility>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Phase'>
  <ProtocolPhase>
   <xsl:choose>
    <xsl:when                     test = 'normalize-space() != ""'>
     <xsl:value-of              select = 'normalize-space()'/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>No phase specified</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </ProtocolPhase>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'CustomProfessionalSuffix |
                                          StandardProfessionalSuffix'>
  <ProfessionalSuffix>
   <xsl:value-of                select = '.'/>
  </ProfessionalSuffix>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'PDQIndexing'>
  <ProtocolDetail>
   <xsl:apply-templates         select = 'StudyType'/>
   <xsl:apply-templates         select = 'StudyCategory'/>
   <xsl:apply-templates         select = 'Condition'/>
   <xsl:apply-templates         select = 'Gene'/>
  </ProtocolDetail>
  <xsl:apply-templates          select = 'Eligibility'/>
 </xsl:template>


 <!--
 ================================================================
 Template to copy the ProtocolSpecialCaterogy information
 ================================================================ -->
 <xsl:template                   match = 'ProtocolSpecialCategory'>
  <xsl:for-each                 select = 'SpecialCategory'>
   <xsl:element                   name = 'ProtocolSpecialCategory'>
    <xsl:value-of               select = '.'/>
   </xsl:element>
  </xsl:for-each>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Eligibility'>
  <Eligibility>
   <xsl:apply-templates         select = 'HealthyVolunteers'/>
   <xsl:apply-templates         select = 'LowAge'/>
   <xsl:apply-templates         select = 'HighAge'/>
   <xsl:apply-templates         select = 'AgeText'/>
   <xsl:apply-templates         select = '../../CTEligibility
                                            /CTGender'/>
   <xsl:apply-templates         select = 'Diagnosis'/>
   <xsl:apply-templates         select = 'ExclusionCriteria'/>
  </Eligibility>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'CTGender'>
  <Gender>
   <xsl:value-of                select = '.'/>
  </Gender>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'StudyCategory'>
  <StudyCategory>
   <xsl:apply-templates         select = 'StudyCategoryName'/>
   <xsl:apply-templates         select = 'Intervention'/>
  </StudyCategory>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Diagnosis'>
  <Diagnosis>
   <SpecificDiagnosis>
    <xsl:apply-templates        select = 'Term'/>
   </SpecificDiagnosis>
   <xsl:for-each                select = 'Term/Term'>
    <DiagnosisParent>
     <xsl:apply-templates       select = '@cdr:ref'/>
     <xsl:value-of              select = '.'/>
    </DiagnosisParent>
   </xsl:for-each>
  </Diagnosis>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Term'>
  <xsl:apply-templates          select = '@cdr:ref'/>
  <xsl:value-of                 select = 'PreferredName'/>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Intervention'>
  <Intervention>
   <InterventionType>
    <xsl:apply-templates        select = 'InterventionType/Term'/><!--/@cdr:ref'/>
    <xsl:value-of               select = 'InterventionType/Term/PreferredName'/>-->
   </InterventionType>
   <xsl:for-each                select = 'InterventionType/Term/Term'>
    <InterventionTypeParent>
     <xsl:apply-templates       select = '@cdr:ref'/>
     <xsl:value-of              select = 'PreferredName'/>
    </InterventionTypeParent>
   </xsl:for-each>
   <xsl:for-each                select = 'InterventionNameLink'>
    <InterventionNameLink>
     <xsl:apply-templates       select = 'Term'/><!--/@cdr:ref'/>
     <xsl:value-of              select = 'Term/PreferredName'/>-->
    </InterventionNameLink>
   </xsl:for-each>
  </Intervention>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Condition'>
  <StudyCondition>
   <SpecificCondition>
    <xsl:apply-templates        select = 'Term'/><!--/@cdr:ref'/>
    <xsl:value-of               select = 'Term/PreferredName'/>-->
   </SpecificCondition>
   <xsl:for-each                select = 'Term/Term'>
    <ConditionParent>
     <xsl:apply-templates       select = '@cdr:ref'/>
     <xsl:value-of              select = 'PreferredName'/>
    </ConditionParent>
   </xsl:for-each>
  </StudyCondition>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Gene'>
  <Gene>
   <SpecificGene>
    <xsl:apply-templates        select = 'Term'/>
   </SpecificGene>
  </Gene>
 </xsl:template>


 <!--
 =====================================================================
 Combine personal name elements into a single text node.  Should be
 hoisted out to a common module.
 ===================================================================== -->
 <xsl:template                    name = 'concatPersonalName'>
  <xsl:param                      name = 'nameInfo'/>
  <xsl:variable                   name = 'frontPart'
                                select = 'concat(
                                          normalize-space($nameInfo/GivenName),
                                          " ",
                                          normalize-space($nameInfo/
                                                       MiddleInitial))'/>
  <xsl:value-of                 select = 'concat($frontPart, " ",
                                       normalize-space($nameInfo/SurName))'/>
  <xsl:for-each                 select = '$nameInfo/GenerationSuffix'>
   <xsl:value-of                select = 'concat(", ", .)'/>
  </xsl:for-each>
  <xsl:for-each                 select = '$nameInfo/ProfessionalSuffix/*'>
   <xsl:if                        test = 'normalize-space() != ""'>
    <xsl:value-of               select = 'concat(", ", normalize-space())'/>
   </xsl:if>
  </xsl:for-each>
 </xsl:template>


 <!--
 ================================================================
 Template to extract the PersonNameInformation
 ================================================================ -->
 <xsl:template                    name = 'extractPersonalName'>
  <xsl:param                      name = 'contact'
                                select = '"No"'/>

  <!--
  Don't display the cdr:ref attribute for the extraction of the contact
  information.
  ===================================================================== -->
  <xsl:if                         test = '$contact = "No"'>
   <xsl:apply-templates         select = '@cdr:ref'/>
  </xsl:if>
  <xsl:apply-templates          select = 'PersonNameInformation/GivenName'/>
  <xsl:apply-templates          select = 'PersonNameInformation/MiddleInitial'/>
  <xsl:variable                   name = 'surname'
                                select = 'concat(
                                          normalize-space
                                          (PersonNameInformation/Surname),
                                          normalize-space
                                          (PersonNameInformation/SurName))'/>
  <SurName>
   <xsl:choose>
    <xsl:when                     test = '$surname != ""'>
     <xsl:value-of              select = '$surname'/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>Contact Person</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </SurName>
  <xsl:apply-templates          select = 'PersonNameInformation/
                                          ProfessionalSuffix/
                                          CustomProfessionalSuffix |
                                          PersonNameInformation/
                                          ProfessionalSuffix/
                                          StandardProfessionalSuffix'/>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                    name = 'extractContact'>
  <xsl:call-template              name = 'extractPersonalName'/>
  <xsl:apply-templates          select = 'Phone'/>
  <xsl:apply-templates          select = 'PhoneExt'/>
  <xsl:apply-templates          select = 'Email'/>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Contact | CTRPContact'>
  <CTGovContact>
   <xsl:call-template             name = 'extractContact'/>
  </CTGovContact>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'ContactBackup'>
  <CTGovContactBackup>
   <xsl:call-template             name = 'extractContact'/>
  </CTGovContactBackup>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'OverallContact |
                                          OverallContactBackup'>
  <xsl:element                    name = '{name()}'>
   <xsl:call-template             name = 'extractContact'/>
  </xsl:element>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Investigator'>
  <Investigator>
   <xsl:call-template             name = 'extractPersonalName'/>
   <xsl:apply-templates         select = 'Role'/>
  </Investigator>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Sponsors'>
  <xsl:element                    name = '{name()}'>
   <xsl:apply-templates         select = 'PDQSponsorship'/>
   <xsl:apply-templates         select = 'LeadSponsor'/>
   <xsl:apply-templates         select = 'Collaborator'/>
   <!--
   If the CTRP block exists don't display the CTGov Info but
   replace it with the CTRP info

   The above statement has been reverted per discussion with
   LG.  Regardless if the CTRPOverallOfficial information
   exists or not we will always use the OverallOfficial
   information since this should be identical or should be
   modified to be so.
   Reverting code - VE, 2012-05-21
   ========================================================= -->
   <!--
   <xsl:choose>
    <xsl:when                     test = '../CTRPInfo'>
     <xsl:apply-templates       select = '../CTRPInfo/
                                             CTRPOverallOfficial'/>
     <xsl:apply-templates       select = '../CTRPInfo/
                                             CTRPOverallOfficial'
                                  mode = 'contact'/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates       select = 'OverallOfficial'/>
     <xsl:apply-templates       select = 'OverallContact'/>
    </xsl:otherwise>
   </xsl:choose>
   -->
   <xsl:apply-templates         select = 'OverallOfficial'/>
   <xsl:apply-templates         select = 'OverallContact'/>
  </xsl:element>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <!--
 <xsl:template                   match = 'OverallOfficial |
                                          CTRPOverallOfficial'>
 -->
 <xsl:template                   match = 'OverallOfficial'>
  <OverallOfficial>
   <xsl:call-template             name = 'extractPersonalName'/>
   <xsl:apply-templates         select = 'Role'/>
   <!--
   <xsl:apply-templates         select = 'Affiliation |
                                          CTRPAffiliation'/>
   -->
   <xsl:apply-templates         select = 'Affiliation'/>
  </OverallOfficial>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <!--
 <xsl:template                   match = 'CTRPOverallOfficial'
                                  mode = 'contact'>
  <OverallContact>
   <xsl:call-template             name = 'extractPersonalName'>
    <xsl:with-param               name = 'contact'
                                select = 'Yes'/>
   </xsl:call-template>
   <xsl:apply-templates         select = 'Phone[1] |
                                          Email[1]'/>
  </OverallContact>
 </xsl:template>
 -->


 <!--
 ================================================================
 ================================================================ -->
 <!--
 <xsl:template                   match = 'CTRPAffiliation'>
  <Affiliation>
   <xsl:value-of                select = 'PDQOrganization/
                                            Organization/
                                            OrganizationNameInformation/
                                            OfficialName/
                                            Name'/>
  </Affiliation>
 </xsl:template>
 -->


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = '@cdr:ref'>
  <xsl:attribute                  name = 'ref'>
   <xsl:value-of                select = '.'/>
  </xsl:attribute>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'Para'>
  <xsl:if                         test = 'normalize-space() != ""'>
   <Para>
    <xsl:value-of               select = 'normalize-space()'/>
   </Para>
  </xsl:if>
 </xsl:template>


 <!--
 ================================================================
 Para template for CTGov Disclaimer
 ================================================================ -->
 <xsl:template                   match = 'Para'
                                  mode = 'disclaimer'>
  <xsl:apply-templates/>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = 'ItemizedList'>
  <ItemizedList                  Style = 'bullet'>
   <xsl:for-each                select = 'ListItem'>
    <xsl:if                       test = 'normalize-space() != ""'>
     <ListItem>
      <xsl:value-of             select = 'normalize-space()'/>
     </ListItem>
    </xsl:if>
   </xsl:for-each>
  </ItemizedList>
 </xsl:template>


 <!--
 ================================================================
 ================================================================ -->
 <xsl:template                   match = '*'>
  <xsl:element                    name = '{name()}'>
   <xsl:apply-templates         select = '@cdr:ref|*|text()'/>
  </xsl:element>
 </xsl:template>

</xsl:transform>
