<CdrDoc Type='Filter' Id='CDR0000634383'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Copy XML for GlossaryTermName with Concept</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml     version = "1.0"?>
<!--
================================================================
$Id: CDR0000634383.xml,v 1.3 2009-08-17 14:55:32 venglisc Exp $

Filter to resolve the placeholder elements.
Volker Englisch         2009-01-26

$Log: not supported by cvs2svn $
================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr">

 <xsl:output                    method = "xml" 
                  omit-xml-declaration = "no"/>

 <xsl:include   href = "cdr:name:Module: Global Filter Templates"/>

 <!--
 ======================================================================
 Template is using the default copy mode template from the Global 
 Filter Template module.
 ====================================================================== -->
 <xsl:template                   match = "GlossaryTermName">
  <xsl:copy>
   <xsl:apply-templates           mode = "copy"/>
  </xsl:copy>
 </xsl:template>


 <!--
 ======================================================================
 Template to pick the right PlaceHolder text to insert in the 
 DefinitionText
 ====================================================================== -->
 <xsl:template                   match = "PlaceHolder"
                                  mode = "copy">
  <xsl:variable                   name = "replace"
                                select = "@name"/>

  <xsl:variable                   name = "language">
   <xsl:choose>
    <xsl:when                     test = "../../@language">
     <xsl:value-of              select = "../../@language"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of              select = "../../../@language"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>

     <AddCss>
  <xsl:choose>
  <xsl:when                      test = "@name = 'TERMNAME'">
   <xsl:choose>
    <xsl:when                    test = "$language = 'es'">
     <xsl:value-of             select = "/GlossaryTermName/
                                          TranslatedName/
                                          TermNameString"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of             select = "/GlossaryTermName/
                                          TermName/
                                          TermNameString"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:when>

  <xsl:when                       test = "@name = 'CAPPEDTERMNAME'">
   <xsl:choose>
    <xsl:when                     test = "$language = 'es'">
     <xsl:call-template           name = "convertCase">
      <xsl:with-param             name = "convString"
                                select = "substring(
                                           normalize-space(
                                           /GlossaryTermName/
                                            TranslatedName[1]/
                                            TermNameString), 1, 1)"/>
      <xsl:with-param               name = "convertTo"
                                select = "'proper'"/>
     </xsl:call-template>
     <xsl:value-of                select = "substring(
                                           normalize-space(
                                           /GlossaryTermName/
                                            TranslatedName[1]/
                                            TermNameString), 2)"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:call-template             name = "convertCase">
      <xsl:with-param               name = "convString"
                                select = "substring(
                                           normalize-space(
                                           /GlossaryTermName/
                                            TermName/
                                            TermNameString), 1, 1)"/>
      <xsl:with-param               name = "convertTo"
                                select = "'proper'"/>
     </xsl:call-template>
     <xsl:value-of                select = "substring(
                                           normalize-space(
                                           /GlossaryTermName/
                                            TermName/
                                            TermNameString), 2)"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:when>
  <xsl:when                       test = "../../
                                          ReplacementText[@name = $replace]">
   <xsl:apply-templates         select = "../../
                                          ReplacementText[@name = $replace]"/>
  </xsl:when>
  <xsl:otherwise>
   <xsl:apply-templates         select = "../../../../
                                          ReplacementText[@name = $replace]"
                                  mode = "copy"/>
  </xsl:otherwise>
 </xsl:choose>
     </AddCss>
 </xsl:template>


 <!--
 ======================================================================
 Template to display the Replacement text with markup
 ====================================================================== -->
 <xsl:template                  match = "ReplacementText"
                                 mode = "copy">
  <xsl:apply-templates           mode = "copy"/>
 </xsl:template>
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>