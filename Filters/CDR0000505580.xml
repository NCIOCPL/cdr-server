<?xml version="1.0" ?>
<!-- File Name:    CDR0000505580.xml              -->
<!-- Filter title: Vendor Filter: DrugInfoSummary -->
<!--
====================================================================
Filter to create DrugInfoSummary vendor output documents.
                              Volker Englisch, 2006-08-12

BZIssue::4949 - Vendor Filter Changes for Display of DIS information
BZIssue::5008 - [DIS] Relocate Link to MedlinePlus Information
OCECDR-3882: Modify Summary Filter to adjust URLs for NVCG
OCECDR-4122: Changes the order of information in DIS

==================================================================== -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr">

 <xsl:output                    method = "xml"
                  omit-xml-declaration = "no"/>

 <xsl:include  href = "cdr:name:Module: Vendor Filter Templates"/>

 <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
 <xsl:param                       name = "DateFirstPub"
                                select = "''"/>
 <xsl:param                       name = "setCase"
                                select = "'proper'"/>
 <xsl:variable                    name = "whoAmI"
                                select = "'DrugInfo'"/>

 <!--
 ====================================================================
 Root element.
 ==================================================================== -->
 <xsl:template                   match = "*">
  <xsl:apply-templates/>
 </xsl:template>

 <!--
 ======================================================================
 Copy DocId, PreferredName, OtherTermName, OtherNameType
 ====================================================================== -->
 <xsl:template                   match = "DrugInformationSummary">
  <xsl:element                    name = '{name()}'>
   <xsl:attribute                 name = "id">
    <xsl:value-of               select = "DocId"/>
   </xsl:attribute>

   <xsl:apply-templates         select = "DrugInfoMetaData"/>

   <xsl:element                   name = "DrugInfoTitle">
    <xsl:value-of               select = "Title"/>
   </xsl:element>

   <!--
   The DrugReference elements will have to be displayed in this
   particular sort order:  NCI, NLM.
   ================================================================= -->
   <!--
   Only display the following FDA section if the DrugReference includes
   a DrugReferenceLink with text node "FDA Approval for ..."

   Note: It's not clear to me why we are displaying the FDA information
         twise, once as part of the DrigInfoMetaData and once here.
   ==================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "DrugReference[@section='FDA']">
     <xsl:for-each              select = "DrugReference[@section='FDA']">
      <xsl:element                name = "Section">
       <xsl:attribute             name = "cdr:id">
        <xsl:text>_</xsl:text>
        <xsl:value-of           select = "@section"/>
       </xsl:attribute>

       <xsl:element               name = "Para">
        <xsl:apply-templates    select = "DrugReferenceLink"/>
       </xsl:element>
      </xsl:element>
     </xsl:for-each>
    </xsl:when>
    <!--
    If no FDA section exists we need to add an empty para element for the
    non-DrugCombination documents to prevent display problems with vertical
    spacing on Cancer.gov. -->
    <xsl:otherwise>
     <xsl:if                      test = "not(/DrugInformationSummary
                                                /DrugInfoMetaData
                                                /DrugInfoType/@Combination)">
      <xsl:element                name = "Section">
       <xsl:element               name = "Para">
        <xsl:text> </xsl:text>
       </xsl:element>
      </xsl:element>
     </xsl:if>
    </xsl:otherwise>
   </xsl:choose>

   <!--
   This will display the main text section of the DIS under
   "Use in Cancer"
   ================================================================ -->
   <xsl:apply-templates         select = "SummarySection"/>

   <!--
   Even if no NCI DrugReference exists we still need to create a
   section for this type.
   ================================================================= -->
    <xsl:variable                 name = "drugRefTypeNCI"
                                select = "'NCI'"/>

   <!--
   Collect all the DrugReference elements with Type='NCI' to display
   under the section "More about XXX" (sorted by PostedDate)
   ================================================================= -->
   <xsl:element                   name = "Section">
    <xsl:attribute                name = "cdr:id">
     <xsl:text>_About</xsl:text>
    </xsl:attribute>

    <xsl:element                  name = "Title">
     <xsl:text>More About</xsl:text>
     <xsl:text> </xsl:text>
     <xsl:value-of              select = "Title"/>
    </xsl:element>

    <!--
    As the first section within the "More About Drug" paragraph
    display the dictionary definition, then display the MedlinePlus
    section followed by everything else.
    ================================================================ -->
    <xsl:call-template            name = "addDictionaryDefinition">
     <xsl:with-param              name = "drugRefTypeNCI"
                                select = "'Dict'"/>
    </xsl:call-template>

    <!--
    Now add all Drugreferences with Type='NLM'
    Only display the test for the first node but combine the
    DrugRefenrenceLink elements in a comma separated list (see the
    Para template below).
    =============================================================== -->
    <xsl:for-each               select = "DrugReference/
                                            DrugReferenceType[text()='NLM']">
     <xsl:if test = "position()=1">
     <xsl:apply-templates       select = ".."
                                  mode = "nlm"/>
     </xsl:if>
    </xsl:for-each>
   </xsl:element>

   <!--
   Next add all Drugreferences with Type='NCI'
   collect all @section=Research-results DrugReference elements
   ================================================================= -->
   <xsl:if                        test = "DrugReference/
                                            DrugReferenceType[text()='NCI']">
    <xsl:element                  name = "Section">
     <xsl:attribute               name = "cdr:id">
      <xsl:text>_Research</xsl:text>
     </xsl:attribute>

     <xsl:element                 name = "Title">
      <xsl:text>Research Results and Related Resources</xsl:text>
     </xsl:element>

     <xsl:for-each              select = "DrugReference/
                                            DrugReferenceType[text()='NCI']">

      <xsl:sort                 select = "../DrugReferencePostedDate"
                                 order = "descending"/>
      <xsl:apply-templates      select = ".."
                                  mode = "nci"/>
      </xsl:for-each>
     </xsl:element>
    </xsl:if>

   <!--
   The Clinical Trials section should only be displayed for the Drug Info
   Summaries that are not Drug Combinations
   ====================================================================== -->
   <xsl:if                        test = "not(/DrugInformationSummary
                                                /DrugInfoMetaData
                                                /DrugInfoType/@Combination)">
    <xsl:call-template            name = "trialSection"/>
   </xsl:if>

   <!--
   Add a Disclaimer document based on the DrugInfoType
   =================================================== -->
   <xsl:choose>
    <xsl:when                     test = "DrugInfoMetaData/
                                          DrugInfoType = 'Brief'">
     <xsl:call-template           name = "briefDisclaimer"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:call-template           name = "detailedDisclaimer"/>
    </xsl:otherwise>
   </xsl:choose>


   <!--
   ===================================================================
   Copy Date First Published and Date Last Modified
   If the FirstPub date is populated in the CDRDocCtl use this.
   If that doesn't exist use the passed DateFirstPub parameter.
   If that doesn't exist use the element DatePubProc populated by the
      denormalization filter from the pub_proc processing date.
      This is typically only necessary for brand new docs since they
      don't have the FirstPub date populated yet.
      If the document is not created via a publishing process the
      DateFirstPublished is listing a text message to allow validation.
      (VE, 2006-09-29)
   =================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "CdrDocCtl/FirstPub/Date">
     <xsl:element                 name = "DateFirstPublished">
      <xsl:value-of             select = "substring-before(CdrDocCtl/
                                            FirstPub/Date,'T')"/>
     </xsl:element>
    </xsl:when>
    <xsl:when                     test = "$DateFirstPub">
     <xsl:call-template           name = "getDateFirstPub">
      <xsl:with-param             name = "date"
                                select = "$DateFirstPub"/>
     </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
     <xsl:element                 name = "DateFirstPublished">
      <xsl:choose>
       <xsl:when                  test = "DatePubProc">
        <xsl:value-of           select = "DatePubProc"/>
       </xsl:when>
       <xsl:otherwise>
        <!-- xsl:text>Date set by publishing process</xsl:text -->
        <!-- Remove time stamp since Drupal expects a date string -->
         <xsl:variable            name = "DFP"
                                select = 'document(concat("cdrutil:/date/",
                                                    "%25Y-%25m-%25d"))'/>
         <xsl:value-of          select = "substring-before($DFP, 'T')"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:element>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates         select = "DateLastModified"
                                  mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Template to display the top section mainly coming from the meta data
 ==================================================================== -->
 <xsl:template                   match = "DrugInfoMetaData">
  <xsl:copy>
   <xsl:apply-templates         select = "DrugInfoType"
                                  mode = "copy"/>
   <xsl:element                   name = "DrugInfoAudience">
    <xsl:value-of               select = "Audience"/>
   </xsl:element>
   <xsl:element                   name = "DrugInfoDescription">
    <xsl:value-of               select = "Description"/>
   </xsl:element>
   <xsl:element                   name = "DrugInfoURL">
    <xsl:attribute                name = "xref">
     <xsl:value-of              select = "URL/@cdr:xref"/>
    </xsl:attribute>
    <xsl:value-of               select = "URL"/>
   </xsl:element>

   <xsl:if                        test = "Manufacturers">
    <xsl:apply-templates        select = "Manufacturers"/>
   </xsl:if>

   <!--
   We only need to include the FDA Approved section for non-DCS
   ============================================================ -->
   <xsl:if                        test = "not(/DrugInformationSummary
                                                /DrugInfoMetaData
                                                /DrugInfoType/@Combination)">
    <xsl:apply-templates        select = "FDAApproved"/>
   </xsl:if>

   <xsl:element                   name = "TerminologyLink">
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "TerminologyLink/
                                          Term/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "TerminologyLink/
                                          Term/
                                          PreferredName"/>
   </xsl:element>
   <xsl:element                   name = "GlossaryLink">
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "GlossaryLink/
                                          GlossaryTermName/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "GlossaryLink/
                                          GlossaryTermName/
                                          TermName/
                                          TermNameString"/>
   </xsl:element>

   <xsl:apply-templates         select = "TerminologyLink/
                                          Term/
                                          USBrandNames"/>
   <xsl:element                   name = "PronunciationInfo">
    <xsl:apply-templates        select = "GlossaryLink/
                                          GlossaryTermName/
                                          TermName/
                                          TermPronunciation"
                                  mode = "copy"/>
    <!--
    We only include MediaLinks for audio here, those MediaLinks for
    images (coming from GlossaryTermConcept documents) are not planned
    for the forseeable future.
    =================================================================== -->
    <xsl:apply-templates        select = "GlossaryLink/
                                          GlossaryTermName/
                                          TermName/
                                          MediaLink">
     <xsl:with-param              name = "audioLanguage"
                                select = "'en'"/>
    </xsl:apply-templates>
    <xsl:apply-templates        select = "GlossaryLink/
                                          GlossaryTermName/
                                          TranslatedName/
                                          MediaLink">
     <xsl:with-param              name = "audioLanguage"
                                select = "'es'"/>
    </xsl:apply-templates>
   </xsl:element>

   <!--
   Create the link to the FDA approval from the DR-section="FDA"
   ====================================================================== -->
   <xsl:if                        test = "../DrugReference[@section='FDA']/
                                          DrugReferenceLink/@cdr:xref">
    <xsl:element                  name = "FDAExternalRef">
     <xsl:attribute               name = "xref">
       <xsl:value-of            select = "../DrugReference[@section='FDA']/
                                          DrugReferenceLink/@cdr:xref"/>
     </xsl:attribute>
     <xsl:value-of              select = "../DrugReference[@section='FDA']/
                                          DrugReferenceLink"/>
    </xsl:element>
   </xsl:if>
  </xsl:copy>
 </xsl:template>


 <!--
 ===================================================================
 Template to display all DrugReferences for Type=NLM
 =================================================================== -->
 <xsl:template                   match = "DrugReference"
                                  mode = "nlm">
  <xsl:param                      name = "drugRefType">
   <xsl:text>About</xsl:text>
  </xsl:param>

  <xsl:apply-templates          select = "DrugReferenceDescription">
   <xsl:with-param                name = "drugRefType"
                                select = "$drugRefType"/>
  </xsl:apply-templates>
 </xsl:template>


 <!--
 ===================================================================
 Template to display all DrugReferences for Type=NCI
 =================================================================== -->
 <xsl:template                   match = "DrugReference"
                                  mode = "nci">
  <xsl:param                      name = "drugRefType">
   <xsl:text>Research</xsl:text>
  </xsl:param>

  <xsl:param                      name = "miscDocFracId"
                                select = "substring-after(
                                            DrugReferenceDescription/
                                            MiscellaneousDocument/
                                              @cdr:ref, '#')"/>

   <xsl:element                   name = 'Para'>
    <xsl:apply-templates        select = "DrugReferenceLink"/>
   </xsl:element>

 </xsl:template>


 <!--
 =====================================================================
 Template to create the DrugReferenceLink
 ===================================================================== -->
 <xsl:template                   match = "DrugReferenceLink">
  <xsl:param                      name = "drugRefType"/>
  <xsl:param                      name = "miscDocFracId"/>

   <xsl:element                   name = "ExternalRef">
    <xsl:attribute                name = "xref">
     <xsl:value-of              select = "@cdr:xref"/>
    </xsl:attribute>

    <!--
    Until a global change has updated all DrugReferenceLinks to remove
    the text "MedlinePlus Information on " we need to strip this text
    out with this template
    ================================================================== -->
    <xsl:choose>
     <xsl:when                    test = "starts-with(.,
                                             'MedlinePlus Information on ')">
      <xsl:value-of             select = "substring-after(.,
                                             'MedlinePlus Information on ')"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "."/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:element>
 </xsl:template>


 <!--
 =====================================================================
 Template to create the DrugReferenceDescription
 ===================================================================== -->
 <xsl:template                   match = "DrugReferenceDescription">
  <xsl:param                      name = "drugRefType"/>
  <xsl:param                      name = "miscDocFracId"/>
  <xsl:variable                   name = "fracID"
                                select = "substring-after(
                                            MiscellaneousDocument/
                                              @cdr:ref, '#')"/>

  <xsl:for-each                 select = "MiscellaneousDocument/
                                          MiscellaneousDocumentText">
   <xsl:apply-templates         select = "*[@cdr:id = $fracID]"
                                  mode = "description">
    <xsl:with-param               name = "drugRefType"
                                select = "$drugRefType"/>
   </xsl:apply-templates>
  </xsl:for-each>
 </xsl:template>


 <!--
 =====================================================================
 Template to manipulate the cdr:id attribute of the misc. Documents
 since these must be unique within the document.
 ===================================================================== -->
 <xsl:template                   match = "Para         |
                                          ItemizedList |
                                          OrderedList">
  <xsl:param                      name = "drugRefType"/>

  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "@*">
    <xsl:attribute                name = "{name()}">
      <xsl:value-of             select = "."/>
    </xsl:attribute>
   </xsl:for-each>

   <!--
   Overwrite the cdr:id attribute to display the _Section prefix
   for the cdr:id
   Since the same standard wording section from the misc. docs
   can be used multiple times, we need to add the node count for
   the IDs to become unique accross the document.
   ============================================================= -->
   <xsl:attribute                 name = "cdr:id">
    <xsl:text>_</xsl:text>
    <xsl:value-of               select = "$drugRefType"/>
    <xsl:value-of               select = "@cdr:id"/>
    <xsl:text>.</xsl:text>
    <xsl:number                  level = "any"
                                 count = "Para |
                                          ItemizedList |
                                          OrderedList"/>
   </xsl:attribute>

   <!--
   If this is the first of the Para elements (coming from the misc.
   document) we want to add the ExternalRef (a.k.a. DrugRefLink)
   Need to account for three types of display:
   - one DRL
     <DRL> - text
   - two DRL
     <DRL> and <DRL> - text
   - three or more DRL
     <DRL>, <DRL>, ... <DRL>, and <DRL> - text
   ================================================================ -->
   <xsl:if                        test = ". = ../Para[1]">
    <xsl:for-each               select = "//DrugReference
                                             [@section='About_drug']">
     <!--
     The first drug needs the MedlinePlus text added
     =============================================== -->
     <xsl:if                      test = "position() = 1">
      <xsl:text>MedlinePlus Information on </xsl:text>
     </xsl:if>

     <xsl:apply-templates      select  = "DrugReferenceLink"/>

     <xsl:if                      test = "position() != last()">
      <xsl:choose>
       <xsl:when                  test = "last() = 2">
        <xsl:text> and </xsl:text>
       </xsl:when>
       <xsl:otherwise>
        <xsl:text>, </xsl:text>
       </xsl:otherwise>
      </xsl:choose>

      <xsl:if                     test = "position() + 1 = last()
                                          and
                                          last() > 2">
       <xsl:text>and </xsl:text>

      </xsl:if>
     </xsl:if>
    </xsl:for-each>
    <xsl:text> - </xsl:text>

   </xsl:if>

   <xsl:apply-templates           mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 =====================================================================
 Template to suppress attributes for FDAApproved
 ===================================================================== -->
 <xsl:template                   match = "FDAApproved">
  <xsl:copy>
   <xsl:value-of                select = "."/>
  </xsl:copy>
 </xsl:template>


 <!--
 =====================================================================
 Template to suppress the Title element of the Misc Documents since
 this will be replaced by the Section Title.
 This template does not effect the Disclaimer title
 It also suppresses the DrugReferenceType to be displayed from the NLM
 DrugReference when apply-templates is called.
 ===================================================================== -->
 <xsl:template                   match = "Title |
                                          DrugReferenceType"/>


 <!--
 =====================================================================
 Template to rename the SummarySection to a Section and remove the
 element tags of elements that are allowed in the Schema as a
 SummarySection but not in the DTD as a Section.
 ===================================================================== -->
 <xsl:template                   match = "SummarySection">
  <xsl:element                    name = "Section">
   <xsl:attribute                 name = "cdr:id">
    <xsl:value-of               select = "@cdr:id"/>
   </xsl:attribute>

   <xsl:if                        test = "not(/DrugInformationSummary
                                                /DrugInfoMetaData
                                                /DrugInfoType/@Combination)">
    <xsl:element                  name = "Title">
     <xsl:text>Use in Cancer</xsl:text>
    </xsl:element>
   </xsl:if>

  <xsl:apply-templates            mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 =====================================================================
 Template to copy various elements
 ===================================================================== -->
 <xsl:template                   match = "SummarySection"
                                  mode = "copy">
  <xsl:apply-templates          select = "Title"
                                  mode = "section"/>
  <xsl:apply-templates          select = "Para         |
                                          ItemizedList |
                                          OrderedList"
                                  mode = "copy"/>
 </xsl:template>


 <!--
 =====================================================================
 Template to convert the SummarySection Title element to a Bolded text
 since Cancer.gov doesn't allow a title in a section.
 ===================================================================== -->
 <xsl:template                   match = "Title"
                                  mode = "section">
  <xsl:element                    name = "Para">
   <Strong><xsl:value-of        select = "."/></Strong>
  </xsl:element>
 </xsl:template>

 <!--
 =====================================================================
 Template to suppress the AltTitle element tags
 ===================================================================== -->
 <xsl:template                   match = "AltTitle"
                                  mode = "copy">
  <xsl:element                    name = "Para">
   <xsl:value-of                select = "."/>
  </xsl:element>
 </xsl:template>


 <!--
 =====================================================================
 Template to suppress the KeyPoint element tags
 ===================================================================== -->
 <xsl:template                   match = "KeyPoint"
                                  mode = "copy">
  <xsl:element                    name = "Para">
   <xsl:value-of                select = "."/>
  </xsl:element>
 </xsl:template>


 <!--
 =====================================================================
 Template to create the list of manufacturers if it exists
 ===================================================================== -->
 <xsl:template                   match = "Manufacturers">
  <xsl:copy>
  <xsl:for-each                 select = "Manufacturer">
   <xsl:element                   name = "Manufacturer">
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "Organization/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "Organization/
                                          OrganizationNameInformation/
                                          OfficialName/
                                          Name"/>
   </xsl:element>
  </xsl:for-each>
  </xsl:copy>
 </xsl:template>


 <!--
 =====================================================================
 Template to create US Brand Name
 ===================================================================== -->
 <xsl:template                   match = "USBrandNames">
  <xsl:copy>
   <xsl:apply-templates         select = "OtherName">
    <xsl:sort                   select = "OtherTermName"/>
   </xsl:apply-templates>
  </xsl:copy>
 </xsl:template>

 <!--
 =====================================================================
 Template to dedup US Brand Name (the names are coming in sorted)
 ===================================================================== -->
 <xsl:template                   match = "OtherName">
  <xsl:if                         test = "OtherTermName
                                           [not(normalize-space(translate(.,
                                             'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                                             'abcdefghijklmnopqrstuvwxyz')) =
                                                normalize-space(translate
                                                (following::OtherTermName,
                                             'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                                             'abcdefghijklmnopqrstuvwxyz')))]">
   <xsl:element                   name = "USBrandName">
    <xsl:value-of               select = "normalize-space(OtherTermName)"/>
   </xsl:element>
  </xsl:if>
 </xsl:template>


 <!--
 ==================================================================
 Section Template for Misc Docs
 Need to pass the parameter of the CDR Doc ID to set the ID
 attribute properly.  The misc doc can be either the 'To Learn More'
 or the 'About PDQ' section.
 ================================================================== -->
 <xsl:template                   match = "Section"
                                  mode = "description">
  <xsl:param                      name = "drugRefType"/>

  <xsl:apply-templates>
   <xsl:with-param                name = "drugRefType"
                                select = "$drugRefType"/>
  </xsl:apply-templates>
 </xsl:template>


 <!--
 ==================================================================
 Section Template for Misc Docs
 Need to pass the parameter of the CDR Doc ID to set the ID
 attribute properly.  The misc doc can be either the 'To Learn More'
 or the 'About PDQ' section.
 ================================================================== -->
 <xsl:template                   match = "Section">
  <xsl:param                      name = "miscDocId"/>

  <xsl:element                    name = "DrugInfoDisclaimer">
   <xsl:apply-templates           mode = "disclaimer">
    <xsl:with-param               name = "miscDocId"
                                select = "$miscDocId"/>
   </xsl:apply-templates>
  </xsl:element>
 </xsl:template>


 <!--
 ==================================================================
 Main MiscellaneousDocumentText Template
 ================================================================== -->
 <xsl:template                   match = "MiscellaneousDocumentText">
  <xsl:param                      name = "miscDocId"/>
  <xsl:apply-templates>
   <xsl:with-param                name = "miscDocId"
                                select = "$miscDocId"/>
  </xsl:apply-templates>
 </xsl:template>


 <!--
 =============================================================
 Create the Title template for the Misc Text section
 ============================================================= -->
 <xsl:template                   match = "Title"
                                  mode = "disclaimer"/>


 <!--
 =============================================================
 Create the Para template including the renamed attribute for
 the paragraph IDs.
 Displaying by default the 'To Learn More' misc document.
 ============================================================= -->
 <xsl:template                   match = "Para"
                                  mode = "disclaimer">
  <xsl:param                      name = "miscDocId"/>
  <xsl:element                    name = "Para">
   <xsl:attribute                 name = "id">
    <xsl:value-of               select = "concat($miscDocId, ./@cdr:id)"/>
   </xsl:attribute>

   <xsl:apply-templates           mode = "copy"/>

  </xsl:element>
 </xsl:template>


 <!--
 =============================================================
 Suppress elements illegal according to DTD
 ============================================================= -->
 <xsl:template                   match = "SectMetaData"
                                  mode = "copy"/>


 <!--
 =====================================================================
 Template to create US Brand Name
 ===================================================================== -->
 <xsl:template                    name = "trialSection">
  <xsl:element                    name = "Section">
   <xsl:attribute                 name = "id">
    <xsl:text>_ClinicalTrial_1</xsl:text>
   </xsl:attribute>

   <xsl:element                   name = "Title">
    <xsl:text>Clinical Trials Accepting Patients</xsl:text>
   </xsl:element>
   <xsl:element                   name = "Para">
    <xsl:attribute                name = "id">
     <xsl:text>_ClinicalTrial_2</xsl:text>
    </xsl:attribute>

    <xsl:element                  name = "ExternalRef">
     <xsl:attribute               name = "xref">
      <xsl:text>https://www.cancer.gov/about-cancer</xsl:text>
      <xsl:text>/treatment/clinical-trials/intervention/</xsl:text>
      <xsl:value-of             select = "/DrugInformationSummary/
                                            DrugInfoMetaData/
                                            TerminologyLink/
                                            Term/
                                            NCIThesaurusConcept"/>
     </xsl:attribute>

     <xsl:text>Find Clinical Trials for </xsl:text>
     <xsl:call-template           name = "convertCase">
      <xsl:with-param             name = "convString"
                                select = "/DrugInformationSummary/
                                          DrugInfoMetaData/
                                          TerminologyLink/
                                          Term/
                                          PreferredName"/>
      <xsl:with-param             name = "convertTo"
                                select = "$setCase"/>
     </xsl:call-template>
    </xsl:element>
    <xsl:text> - Check for trials from NCI's list of cancer </xsl:text>
    <xsl:text>clinical trials now accepting patients.</xsl:text>
   </xsl:element>
  </xsl:element>
 </xsl:template>


 <!--
 =====================================================================
 Template to create the dictionary definition
 ===================================================================== -->
 <xsl:template                    name = "addDictionaryDefinition">
  <xsl:param                      name = "drugRefTypeNCI"
                                select = "'dada'"/>

    <!--
    Not certain where this section needs to be positioned
    ===================================================== -->
    <xsl:element                  name = "Para">
     <xsl:attribute               name = "cdr:id">
      <xsl:text>_</xsl:text>
      <xsl:value-of             select = "$drugRefTypeNCI"/>
      <xsl:text>_1</xsl:text>
     </xsl:attribute>

     <xsl:element                 name = "ExternalRef">
      <xsl:attribute              name = "xref">
       <xsl:text>https://www.cancer.gov/publications/dictionaries</xsl:text>
       <xsl:text>/cancer-drug?CdrID=</xsl:text>
       <xsl:value-of            select = "number(
                                           substring(
                                            /DrugInformationSummary/
                                            DrugInfoMetaData/
                                            TerminologyLink/
                                            Term/@cdr:ref, 4))"/>
      </xsl:attribute>
      <xsl:text>Definition from the NCI Drug Dictionary</xsl:text>
     </xsl:element>
     <xsl:text> - Detailed scientific definition and other names </xsl:text>
     <xsl:text>for this drug.</xsl:text>
    </xsl:element>
 </xsl:template>


 <!--
 =====================================================================
 Template to create the disclaimer
 ===================================================================== -->
 <xsl:template                    name = "briefDisclaimer">
  <xsl:variable                   name = "miscDoc"
                                select = "document(concat('cdr:CDR0000510121',
                                                         '/lastp'))"/>

  <xsl:apply-templates          select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
   <xsl:with-param                name = "miscDocId"
                                select = "'_Disclaimer'"/>
  </xsl:apply-templates>
 </xsl:template>


 <!--
 =====================================================================
 Template to create US Brand Name
 ===================================================================== -->
 <xsl:template                    name = "detailedDisclaimer">
  <xsl:variable                   name = "miscDoc"
                                select = "document(concat('cdr:CDR0000510122',
                                                         '/lastp'))"/>

  <xsl:apply-templates          select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
   <xsl:with-param                name = "miscDocId"
                                select = "'_Disclaimer'"/>
  </xsl:apply-templates>
 </xsl:template>
</xsl:transform>
