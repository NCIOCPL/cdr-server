<?xml version = "1.0" encoding="utf-8"?>
<!-- $Id$ -->
<!-- Filter title: Module: Vendor Filter: DrugInfoSummary -->
<!--
====================================================================
$Id$

Filter to create DrugInfoSummary vendor output documents.
                              Volker Englisch, 2006-08-12

BZIssue::4949 - Vendor Filter Changes for Display of DIS information

==================================================================== -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr">

 <xsl:output                    method = "xml" 
                  omit-xml-declaration = "no"/>

 <xsl:include  href = "cdr:name:Module: Vendor Filter Templates"/>
   
 <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
 <xsl:param                       name = "DateFirstPub"
                                select = "''"/> 
 <xsl:param                       name = "setCase"
                                select = "'proper'"/>

 <!-- *
 ====================================================================
 Root element.
 ==================================================================== -->
 <xsl:template                   match = "*">
  <xsl:apply-templates/>
 </xsl:template>

 <!-- 
 ======================================================================
 Copy DocId, PreferredName, OtherTermName, OtherNameType
 ====================================================================== -->
 <xsl:template                   match = "DrugInformationSummary">
  <xsl:element                    name = '{name()}'>   
   <xsl:attribute                 name = "id">
    <xsl:value-of               select = "DocId"/>
   </xsl:attribute>

   <xsl:apply-templates         select = "DrugInfoMetaData"/>

   <DrugInfoTitle>
    <xsl:value-of               select = "Title"/>
   </DrugInfoTitle>

   <!--
   The DrugReference elements will have to be displayed in this 
   particular sort order:  NCI, NLM.
   ================================================================= -->
   <!-- 
   Only display the following FDA section if the DrugReference includes
   a DrugReferenceLink with text node "FDA Approval for ..."
   ==================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "DrugReference[@section='FDA']">
     <xsl:for-each                select = "DrugReference[@section='FDA']">
      <Section>
       <xsl:attribute               name = "cdr:id">
        <xsl:text>_</xsl:text>
        <xsl:value-of             select = "@section"/>
       </xsl:attribute>

       <Para><xsl:apply-templates select = "DrugReferenceLink"/></Para>

       <!--
         <Para>
         Pronunciation: 
         <xsl:apply-templates     select = "../DrugInfoMetaData/
                                          GlossaryLink/
                                          GlossaryTermName/
                                          TermName/
                                          TermPronunciation"/>
         </Para>
       -->
      </Section>
     </xsl:for-each>
    </xsl:when>
    <!-- If no FDA section exists we need to add an empty para to prevent
         display problems with vertical spacing on Cancer.gov. -->
    <xsl:otherwise>
     <Section>
      <Para> </Para>
     </Section>
    </xsl:otherwise>
   </xsl:choose>

   <!-- 
   This will display the main text of the DIS
   ================================================-->
   <xsl:apply-templates         select = "SummarySection"/>

   <!--
   Collect all of the NCI DrugReference elements within a single NCI
   display section.
   Even if no NCI DrugReference exists we still need to create a 
   section for this type.
   ================================================================= -->
    <xsl:variable                 name = "drugRefTypeNCI"
                                select = "'NCI'"/>

   <!--
   Collect all @section=About-drug DrugReference elements to display 
   in a single section.
   ================================================================= -->
   <xsl:choose>
    <xsl:when                      test = "DrugReference
                                           [@section='About_drug']">
     <Section>
      <xsl:attribute               name = "cdr:id">
       <xsl:text>_About</xsl:text>
      </xsl:attribute>

      <Title>
       <xsl:text>About</xsl:text>
       <xsl:text> </xsl:text>
       <xsl:text>(</xsl:text>
       <xsl:value-of select = "count(DrugReference[@section='About_drug'])"/>
       <xsl:text>) </xsl:text>
       <xsl:value-of             select = "Title"/>
      </Title>

      <xsl:apply-templates       select = "DrugReference
                                          [@section='About_drug']"/>
     </Section>
    </xsl:when>
    <xsl:otherwise>
     <Section>
      <xsl:attribute               name = "cdr:id">
       <xsl:text>_About</xsl:text>
      </xsl:attribute>

      <Title>
       <xsl:text>About</xsl:text>
       <xsl:text> </xsl:text>
       <xsl:value-of             select = "Title"/>
      </Title>
      <xsl:call-template             name = "addDictionaryDefinition">
       <xsl:with-param               name = "drugRefTypeNCI"
                                select = "'Dict'"/>
      </xsl:call-template>
     </Section>
    </xsl:otherwise>
   </xsl:choose>

   <!--
   Next collect all @section=Research-results DrugReference elements
   to display in a single section.
   ================================================================= -->
   <xsl:if                        test = "DrugReference
                                           [@section='Research_results']">
    <Section>
     <xsl:attribute               name = "cdr:id">
      <xsl:text>_Research</xsl:text>
     </xsl:attribute>

     <Title>
      <xsl:text>Research Results</xsl:text>
     </Title>
     <xsl:apply-templates       select = "DrugReference
                                           [@section='Research_results']"/>
    </Section>
   </xsl:if>
               
   <!--
   The Clinical Trials section should only be displayed for the Drug Info
   Summaries that are not Drug Combinations
   ====================================================================== -->
   <xsl:if                        test = "not(/DrugInformationSummary
                                                /DrugInfoMetaData
                                                /DrugInfoType/@Combination)">
    <xsl:call-template            name = "trialSection"/>
   </xsl:if>

   <!--
   Add a Disclaimer document based on the DrugInfoType
   =================================================== -->
   <xsl:choose>
    <xsl:when                     test = "DrugInfoMetaData/
                                          DrugInfoType = 'Brief'">
     <xsl:call-template           name = "briefDisclaimer"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:call-template           name = "detailedDisclaimer"/>
    </xsl:otherwise>
   </xsl:choose>


   <!-- 
   ===================================================================
   Copy Date First Published and Date Last Modified
   If the FirstPub date is populated in the CDRDocCtl use this.
   If that doesn't exist use the passed DateFirstPub parameter.
   If that doesn't exist use the element DatePubProc populated by the 
      denormalization filter from the pub_proc processing date.
      This is typically only necessary for brand new docs since they
      don't have the FirstPub date populated yet.
      If the document is not created via a publishing process the 
      DateFirstPublished is listing a text message to allow validation.
      (VE, 2006-09-29)
   =================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "CdrDocCtl/FirstPub/Date">
     <DateFirstPublished>
      <xsl:value-of             select = "substring-before(CdrDocCtl/
                                            FirstPub/Date,'T')"/>
     </DateFirstPublished>
    </xsl:when>
    <xsl:when                     test = "$DateFirstPub">
     <xsl:call-template           name = "getDateFirstPub">
      <xsl:with-param             name = "date"
                                select = "$DateFirstPub"/>
     </xsl:call-template>    
    </xsl:when>
    <xsl:otherwise>
     <DateFirstPublished>
      <xsl:choose>
       <xsl:when                  test = "DatePubProc">
        <xsl:value-of           select = "DatePubProc"/>
       </xsl:when>
       <xsl:otherwise>
        <!-- xsl:text>Date set by publishing process</xsl:text -->
        <xsl:value-of           select = 'document(concat("cdrutil:/date/",
                                                    "%25Y-%25m-%25d"))'/>
       </xsl:otherwise>
      </xsl:choose>
     </DateFirstPublished>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates         select = "DateLastModified"
                                  mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the Definition node but only if the 
 ReviewStatus is "Reviewed".
 =================================================================== -->
 <xsl:template                   match = "DrugInfoMetaData">
  <xsl:copy>
   <xsl:apply-templates         select = "DrugInfoType"
                                  mode = "copy"/>
   <DrugInfoAudience>
    <xsl:value-of               select = "Audience"/>
   </DrugInfoAudience>
   <DrugInfoDescription>
    <xsl:value-of               select = "Description"/>
   </DrugInfoDescription>
   <DrugInfoURL>
    <xsl:attribute                name = "xref">
     <xsl:value-of              select = "URL/@cdr:xref"/>
    </xsl:attribute>
    <xsl:value-of               select = "URL"/>
   </DrugInfoURL>

   <xsl:if                        test = "Manufacturers">
    <xsl:apply-templates        select = "Manufacturers"/>
   </xsl:if>

   <!--
   We only need the FDA Approved section for non-DCS
   ================================================= -->
   <xsl:if                        test = "not(/DrugInformationSummary
                                                /DrugInfoMetaData
                                                /DrugInfoType/@Combination)">
    <xsl:apply-templates        select = "FDAApproved"
                                  mode = "copy"/>
   </xsl:if>

   <TerminologyLink>
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "TerminologyLink/
                                          Term/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "TerminologyLink/
                                          Term/
                                          PreferredName"/>
   </TerminologyLink>
   <GlossaryLink>
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "GlossaryLink/
                                          GlossaryTermName/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "GlossaryLink/
                                          GlossaryTermName/
                                          TermName/
                                          TermNameString"/>
   </GlossaryLink>

   <xsl:apply-templates         select = "TerminologyLink/
                                          Term/
                                          USBrandNames"/>
   <xsl:apply-templates         select = "GlossaryLink/
                                          GlossaryTermName/
                                          TermName/
                                          TermPronunciation"
                                  mode = "copy"/>

   <xsl:if                        test = "../DrugReference[@section='FDA']/
                                          DrugReferenceLink/@cdr:xref">
    <FDAExternalRef>
     <xsl:attribute               name = "xref">
       <xsl:value-of            select = "../DrugReference[@section='FDA']/
                                          DrugReferenceLink/@cdr:xref"/>
     </xsl:attribute>
     <xsl:value-of              select = "../DrugReference[@section='FDA']/
                                          DrugReferenceLink"/>
    </FDAExternalRef>
   </xsl:if>
  </xsl:copy>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the Definition node but only if the 
 ReviewStatus is "Reviewed".
 =================================================================== -->
 <xsl:template                   match = "DrugReference">
  <xsl:param                      name = "drugRefType">
   <xsl:choose>
    <xsl:when                     test = "@section = 'Research_results'">
     <xsl:text>Research</xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>About</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:param>
  <xsl:param                      name = "miscDocFracId"
                                select = "substring-after(
                                            DrugReferenceDescription/
                                            MiscellaneousDocument/
                                              @cdr:ref, '#')"/>
  <!--
  If this is the DrugReference section linking to the MedlinePlus
  Information we need to display the Dictionary Definition as the
  second paragraph.  If the MedlinePlus information doesn't exist the
  Dictionary Definition is to be displayed first.
  =================================================================== -->
  <xsl:if                         test = "@section = 'About_drug'">
   <xsl:choose>
    <xsl:when                     test = "position() = 1
                                          and
                                          not(starts-with(
                                            normalize-space(DrugReferenceLink), 
                                                            'MedlinePlus'))">
     <xsl:call-template             name = "addDictionaryDefinition">
      <xsl:with-param               name = "drugRefTypeNCI"
                                select = "'Dict'"/>
     </xsl:call-template>
    </xsl:when>
    <xsl:when                     test = "position() = 2
                                          and
                                          preceding-sibling::DrugReference[
                                            starts-with(
                                             normalize-space(DrugReferenceLink),
                                                             'MedlinePlus')]">
     <xsl:call-template             name = "addDictionaryDefinition">
      <xsl:with-param               name = "drugRefTypeNCI"
                                select = "'Dict'"/>
     </xsl:call-template>
    </xsl:when>
   </xsl:choose>
  </xsl:if>

   <!--
   Display all DrugReference sections
   ================================== -->
   <xsl:apply-templates         select = "DrugReferenceDescription">
    <xsl:with-param               name = "drugRefType"
                                select = "$drugRefType"/>
    <xsl:with-param               name = "miscDocFracId"
                                select = "$miscDocFracId"/>
   </xsl:apply-templates>

 </xsl:template>


 <!--
 =====================================================================
 Template to create the DrugReferenceLink
 ===================================================================== -->
 <xsl:template                   match = "DrugReferenceLink">
  <xsl:param                      name = "drugRefType"/>
  <xsl:param                      name = "miscDocFracId"/>

   <ExternalRef>
    <xsl:attribute                name = "xref">
     <xsl:value-of              select = "@cdr:xref"/>
    </xsl:attribute>
    <xsl:value-of               select = "."/>
   </ExternalRef>
 </xsl:template>


 <!--
 =====================================================================
 Template to create the DrugReferenceDescription
 ===================================================================== -->
 <xsl:template                   match = "DrugReferenceDescription">
  <xsl:param                      name = "drugRefType"/>
  <xsl:param                      name = "miscDocFracId"/>
  <xsl:variable                   name = "fracID"
                                select = "substring-after(
                                            MiscellaneousDocument/
                                              @cdr:ref, '#')"/>

  <xsl:for-each                 select = "MiscellaneousDocument/
                                          MiscellaneousDocumentText">
   <xsl:apply-templates         select = "*[@cdr:id = $fracID]"
                                  mode = "description">
    <xsl:with-param               name = "drugRefType"
                                select = "$drugRefType"/>
   </xsl:apply-templates>
  </xsl:for-each>
 </xsl:template>


 <!--
 =====================================================================
 Template to manipulate the cdr:id attribute of the misc. Documents
 since these must be unique within the document.
 ===================================================================== -->
 <xsl:template                   match = "Para         | 
                                          ItemizedList |
                                          OrderedList">
  <xsl:param                      name = "drugRefType"/>

  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "@*">
    <xsl:attribute                name = "{name()}">
      <xsl:value-of             select = "."/>
    </xsl:attribute>
   </xsl:for-each>

   <!--
   Overwrite the cdr:id attribute to display the _Section prefix
   for the cdr:id
   Since the same standard wording section from the misc. docs
   can be used multiple times, we need to add the node count for
   the IDs to become unique accross the document.
   ============================================================= -->
   <xsl:attribute                 name = "cdr:id">
    <xsl:text>_</xsl:text>
    <xsl:value-of               select = "$drugRefType"/>
    <xsl:value-of               select = "@cdr:id"/>
    <xsl:text>.</xsl:text>
    <xsl:number                  level = "any"
                                 count = "Para | 
                                          ItemizedList | 
                                          OrderedList"/>
   </xsl:attribute>

   <!--
   If this is the first of the Para elements (coming from the misc.
   document) we want to add the ExternalRef (a.k.a. DrugRefLink)
   ================================================================ -->
   <xsl:if                        test = ". = ../Para[1]">
    <xsl:apply-templates        select = "../../../../../
                                           DrugReferenceLink"/>
    <xsl:text> - </xsl:text>
   </xsl:if>

   <xsl:apply-templates           mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 =====================================================================
 Template to suppress the Title element of the Misc Documents since
 this will be replaced by the Section Title.
 This template does not effect the Disclaimer title
 ===================================================================== -->
 <xsl:template                   match = "Title"/>


 <!--
 =====================================================================
 Template to rename the SummarySection to a Section and remove the 
 element tags of elements that are allowed in the Schema as a 
 SummarySection but not in the DTD as a Section.
 ===================================================================== -->
 <xsl:template                   match = "SummarySection">
  <Section>
   <xsl:attribute                 name = "cdr:id">
    <xsl:value-of               select = "@cdr:id"/>
   </xsl:attribute>

   <xsl:if                        test = "not(/DrugInformationSummary
                                                /DrugInfoMetaData
                                                /DrugInfoType/@Combination)">
    <Title>Uses in Cancer Treatment</Title>
   </xsl:if>

  <xsl:apply-templates            mode = "copy"/>
  </Section>
 </xsl:template>


 <!--
 =====================================================================
 Template to display the Para elements
 ===================================================================== -->
 <xsl:template                   match = "SummarySection" 
                                  mode = "copy">
  <xsl:apply-templates          select = "Title"
                                  mode = "section"/>
  <xsl:apply-templates          select = "Para         | 
                                          ItemizedList |
                                          OrderedList" 
                                  mode = "copy"/>
 </xsl:template>


 <!--
 =====================================================================
 Template to convert the SummarySection Title element to a Bolded text
 since Cancer.gov doesn't allow a title in a section.
 ===================================================================== -->
 <xsl:template                  match = "Title"
                                 mode = "section">
  <Para>
   <Strong><xsl:value-of       select = "."/></Strong>
  </Para>
 </xsl:template>

 <!--
 =====================================================================
 Template to suppress the AltTitle element tags
 ===================================================================== -->
 <xsl:template                   match = "AltTitle"
                                  mode = "copy">
  <Para>
   <xsl:value-of                select = "."/>
  </Para>
 </xsl:template>


 <!--
 =====================================================================
 Template to suppress the KeyPoint element tags
 ===================================================================== -->
 <xsl:template                   match = "KeyPoint"
                                  mode = "copy">
  <Para>
   <xsl:value-of                select = "."/>
  </Para>
 </xsl:template>


 <!--
 =====================================================================
 Template to create US Brand Name
 ===================================================================== -->
 <xsl:template                   match = "Manufacturers">
  <xsl:copy>
  <xsl:for-each                 select = "Manufacturer">
   <Manufacturer>
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "Organization/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "Organization/
                                          OrganizationNameInformation/
                                          OfficialName/
                                          Name"/>
   </Manufacturer>
  </xsl:for-each>
  </xsl:copy>
 </xsl:template>


 <!--
 =====================================================================
 Template to create US Brand Name
 ===================================================================== -->
 <xsl:template                   match = "USBrandNames">
  <xsl:copy>
   <xsl:apply-templates         select = "OtherName"/>
  </xsl:copy>
 </xsl:template>

 <!--
 =====================================================================
 Template to dedup US Brand Name (the names are coming in sorted)
 ===================================================================== -->
 <xsl:template                   match = "OtherName">
  <xsl:if                         test = "OtherTermName
                                           [not(normalize-space(translate(.,
                                             'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                                             'abcdefghijklmnopqrstuvwxyz')) =  
                                                normalize-space(translate
                                                (following::OtherTermName,
                                             'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                                             'abcdefghijklmnopqrstuvwxyz')))]">
   <USBrandName>
    <xsl:value-of               select = "normalize-space(OtherTermName)"/>
   </USBrandName>
  </xsl:if>
 </xsl:template>


 <!-- 
 ==================================================================
 Section Template for Misc Docs
 Need to pass the parameter of the CDR Doc ID to set the ID 
 attribute properly.  The misc doc can be either the 'To Learn More'
 or the 'About PDQ' section.
 ================================================================== -->  
 <xsl:template                   match = "Section"
                                  mode = "description">
  <xsl:param                      name = "drugRefType"/>

  <xsl:apply-templates>
   <xsl:with-param                name = "drugRefType" 
                                select = "$drugRefType"/>

  </xsl:apply-templates>
 </xsl:template>


 <!-- 
 ==================================================================
 Section Template for Misc Docs
 Need to pass the parameter of the CDR Doc ID to set the ID 
 attribute properly.  The misc doc can be either the 'To Learn More'
 or the 'About PDQ' section.
 ================================================================== -->  
 <xsl:template                   match = "Section">
  <xsl:param                      name = "miscDocId"/>

  <DrugInfoDisclaimer>
   <xsl:apply-templates           mode = "disclaimer">
    <xsl:with-param               name = "miscDocId" 
                                select = "$miscDocId"/>
   </xsl:apply-templates>
  </DrugInfoDisclaimer>
 </xsl:template>


 <!-- 
 ==================================================================
 Main MiscellaneousDocumentText Template
 ================================================================== -->  
 <xsl:template                   match = "MiscellaneousDocumentText">
  <xsl:param                      name = "miscDocId"/>
  <xsl:apply-templates>
   <xsl:with-param                name = "miscDocId" 
                                select = "$miscDocId"/>
  </xsl:apply-templates>
 </xsl:template>


 <!-- 
 ============================================================= 
 Create the Title template for the Misc Text section
 ============================================================= -->
 <xsl:template                   match = "Title"
                                  mode = "disclaimer"/>


 <!-- 
 ============================================================= 
 Create the Para template including the renamed attribute for 
 the paragraph IDs.
 Displaying by default the 'To Learn More' misc document.
 ============================================================= -->
 <xsl:template                   match = "Para"
                                  mode = "disclaimer">
  <xsl:param                      name = "miscDocId"/>
  <Para>
   <xsl:attribute                 name = "id">
    <xsl:value-of               select = "concat($miscDocId, ./@cdr:id)"/>
   </xsl:attribute>

   <xsl:apply-templates           mode = "copy"/>

  </Para>
 </xsl:template>


 <!-- 
 ============================================================= 
 Suppress elements illegal according to DTD
 ============================================================= -->
 <xsl:template                   match = "SectMetaData"
                                  mode = "copy"/>


 <!--
 =====================================================================
 Template to create US Brand Name
 ===================================================================== -->
 <xsl:template                    name = "trialSection">
  <Section>
   <xsl:attribute                 name = "id">
    <xsl:text>_ClinicalTrial_1</xsl:text>
   </xsl:attribute>

   <Title>Clinical Trials Accepting Patients</Title>
   <Para id="_ClinicalTrial_2">
    <xsl:element                  name = "ExternalRef">
     <xsl:attribute               name = "xref">
      <xsl:text>http://www.cancer.gov/Search/ClinicalTrialsLink.aspx</xsl:text>
      <xsl:text>?id=</xsl:text>
      <xsl:value-of             select = "number(
                                           substring(
                                            /DrugInformationSummary/
                                            DrugInfoMetaData/
                                            TerminologyLink/
                                            Term/@cdr:ref, 4))"/>
      <xsl:text>&amp;idtype=1</xsl:text>
     </xsl:attribute>

     <xsl:text>Find Clinical Trials for </xsl:text>
     <xsl:call-template           name = "convertCase">
      <xsl:with-param             name = "convString" 
                                select = "/DrugInformationSummary/
                                          DrugInfoMetaData/
                                          TerminologyLink/
                                          Term/
                                          PreferredName"/>
      <xsl:with-param             name = "convertTo"
                                select = "$setCase"/>
     </xsl:call-template>
    </xsl:element>
    <xsl:text> - Check for trials from NCI's list of cancer </xsl:text>
    <xsl:text>clinical trials now accepting patients.</xsl:text>
   </Para>
  </Section>
 </xsl:template>


 <!--
 =====================================================================
 Template to create the dictionary definition
 ===================================================================== -->
 <xsl:template                    name = "addDictionaryDefinition">
  <xsl:param                      name = "drugRefTypeNCI"
                                select = "'dada'"/>

    <!-- 
    Not certain where this section needs to be positioned
    ===================================================== -->
    <Para>
     <xsl:attribute               name = "cdr:id">
      <xsl:text>_</xsl:text>
      <xsl:value-of             select = "$drugRefTypeNCI"/>
      <xsl:text>_1</xsl:text>
     </xsl:attribute>

     <xsl:element                 name = "ExternalRef">
      <xsl:attribute              name = "xref">
       <xsl:text>http://www.cancer.gov/Templates/drugdictionary.aspx</xsl:text>
       <xsl:text>?CdrID=</xsl:text>
       <xsl:value-of            select = "number(
                                           substring(
                                            /DrugInformationSummary/
                                            DrugInfoMetaData/
                                            TerminologyLink/
                                            Term/@cdr:ref, 4))"/>
      </xsl:attribute>
      <xsl:text>Definition from the NCI Drug Dictionary</xsl:text>
     </xsl:element>
     <xsl:text> - Detailed scientific definition and other names </xsl:text>
     <xsl:text>for this drug.</xsl:text>
    </Para>
 </xsl:template>


 <!--
 =====================================================================
 Template to create the disclaimer
 ===================================================================== -->
 <xsl:template                    name = "briefDisclaimer">
      <xsl:variable               name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000510121',
                                                         '/lastp'))"/>

     <xsl:apply-templates      select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
      <xsl:with-param            name = "miscDocId"
                               select = "'_Disclaimer'"/>
     </xsl:apply-templates>
 </xsl:template>


 <!--
 =====================================================================
 Template to create US Brand Name
 ===================================================================== -->
 <xsl:template                    name = "detailedDisclaimer">
      <xsl:variable               name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000510122',
                                                         '/lastp'))"/>

     <xsl:apply-templates      select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
      <xsl:with-param            name = "miscDocId"
                               select = "'_Disclaimer'"/>
     </xsl:apply-templates>
 </xsl:template>
</xsl:transform>
