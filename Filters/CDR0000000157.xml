<CdrDoc Type='Filter' Id='CDR0000000157'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Vendor Filter: Summary</DocTitle>
<DocComment>CVS-V1.37: New Summary Denormalization (Bug 767)</DocComment><ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml     version = "1.0"?>
<!--
================================================================
$Id: CDR0000000157.xml,v 1.81 2009-07-22 20:50:52 venglisc Exp $

Filter to create summary vendor output data.
   Written by Volker Englisch, 2003-08-12

$Log: not supported by cvs2svn $
================================================================ -->
<xsl:transform              xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                            xmlns:cdr = "cips.nci.nih.gov/cdr"
                              version = "1.0">

 <xsl:output                   method = "xml" 
                 omit-xml-declaration = "no"
                             encoding = "UTF-8"/>

 <xsl:include href = "cdr:name:Module: Vendor Filter Templates"/>

 <!-- 
 Stylesheet level parameter DateFirstPub, passed in from the caller
 ================================================================== -->
 <xsl:param                      name = "DateFirstPub" 
                               select = "''"/>
 <xsl:variable                   name = "whoAmI"
                               select = "'Summary'"/>

 <!--
 Variables needed to identify display of certain misc documents based on 
 document type
 ======================================================================= -->
 <xsl:variable                   name = "sumAudience"
                               select = "/Summary/
                                          SummaryMetaData/
                                          SummaryAudience"/>
 <xsl:variable                   name = "language"
                               select = "/Summary/
                                          SummaryMetaData/
                                          SummaryLanguage"/>
 <xsl:variable                   name = "sumType"
                               select = "/Summary/
                                          SummaryMetaData/
                                          SummaryType"/>
 <xsl:variable                   name = "sumId" 
                               select = "/Summary/
                                          DocId"/>
 <xsl:variable                   name = "tlss" 
                               select = "/Summary//
                                          SummarySection[
                                              @TrialSearchString='TopLevel']/
                                          SectMetaData"/>
 <xsl:variable                   name = "ageGroup">
  <xsl:choose>
   <xsl:when                     test = "contains(/Summary/
                                                   SummaryMetaData/
                                                   PDQBoard/
                                                   Board, 'Pediatric')">
    <xsl:text>Pediatric</xsl:text>
   </xsl:when>
   <xsl:otherwise>
    <xsl:text>Adult</xsl:text>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:variable>

  <!--
  Loading all Clinical Trials Search Text Misc documents
  ====================================================== -->
  <xsl:variable                   name = "slText_en_hp" 
                                select = "document(
                                            concat('cdr:name:Clinical Trial ',
                                                   'Search Link Text - ',
                                                   'English-HP;',
                                                   'Standard wording',
                                                                 '/lastp'))"/>
  <xsl:variable                   name = "slText_es_hp" 
                                select = "document(
                                            concat('cdr:name:Clinical Trial ',
                                                   'Search Link Text - ',
                                                   'Spanish-HP;',
                                                   'Standard wording;Spanish',
                                                                 '/lastp'))"/>
  <xsl:variable                   name = "slText_en_pat" 
                                select = "document(
                                            concat('cdr:name:Clinical Trial ',
                                                   'Search Link Text - ',
                                                   'English-Patient;',
                                                   'Standard wording',
                                                                 '/lastp'))"/>
  <xsl:variable                   name = "slText_es_pat" 
                                select = "document(
                                            concat('cdr:name:Clinical Trial ',
                                                   'Search Link Text - ',
                                                   'Spanish-Patient;',
                                                   'Standard wording;Spanish',
                                                                 '/lastp'))"/>

  <xsl:variable                   name = "miscSection">
   <xsl:choose>
    <xsl:when                     test = "$sumType = 'Supportive care'">
     <xsl:text>_supportiveCare</xsl:text>
    </xsl:when>
    <xsl:when                     test = "$sumType = 'Treatment'">
     <xsl:text>_treatment</xsl:text>
    </xsl:when>
    <xsl:when                     test = "$sumType = 'Prevention'">
     <xsl:text>_prevention</xsl:text>
    </xsl:when>
    <xsl:when                     test = "$sumType = 'Screening'">
     <xsl:text>_prevention</xsl:text>
    </xsl:when>
    <xsl:when                     test = "$sumType = 'Genetics'">
     <xsl:text>_genetics</xsl:text>
    </xsl:when>
    <xsl:when                     test = "$sumType = concat('Complementary',
                                                            ' and alternative',
                                                            ' medicine')">
     <xsl:text>_cam</xsl:text>
    </xsl:when>
   </xsl:choose>
  </xsl:variable>

 <!-- 
 ===========================================================
 Root element
 =========================================================== -->
 <xsl:template                  match = "*" >
  <xsl:apply-templates/>
 </xsl:template>

 <!-- 
 ===========================================================
 Document element.
 =========================================================== -->
 <xsl:template                  match = "Summary">
  <xsl:variable                  name = "camBoard" 
                               select = "concat('PDQ Cancer Complementary ', 
                                                  'and Alternative Medicine ',
                                                  'Editorial Board')"/>
  <!-- 
  Creating Document Element and adding Doc ID as attribute
  ======================================================== -->
  <Summary>
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "DocId"/>
   </xsl:attribute>
   <!-- 
   LegacyPDQID should not be displayed for CAM summaries 
   ===================================================== -->
   <xsl:if                       test = "not(SummaryMetaData/PDQBoard/
                                                        Board = $camBoard)">
    <xsl:attribute               name = "LegacyPDQID">
     <xsl:value-of             select = "PdqKey"/>
    </xsl:attribute>
   </xsl:if>

   <!-- 
   If multiple ReplacementFor elements exist, the CDR Doc IDs will
   need to be displayed space separated.                        
   =============================================================== -->
   <xsl:if                       test = "ReplacementFor">
    <xsl:attribute               name = "ReplacementFor">
     <xsl:for-each             select = "ReplacementFor">
      <xsl:value-of            select = "@cdr:ref"/>
      <xsl:if                    test = "position() != last()">
       <xsl:text> </xsl:text>
      </xsl:if>
     </xsl:for-each>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates        select = "SummaryMetaData"/>
   <xsl:apply-templates        select = "SummaryTitle"/>
   <xsl:apply-templates        select = "AltTitle"
                                 mode = "copy"/>

   <!-- 
   Display all of the SummarySection elements and attach the 
   "More Information" misc documents based on the summary type. 
   ============================================================== -->
   <xsl:apply-templates        select = "SummarySection"/>

   <!-- 
   =============================================================
   Display the About PDQ and To Learn More misc documents
   based on the entries of 
   Language        - English, Spanish
   SummaryAudience - Patient (only Patient summaries get this)
   SummaryType     - Treatment, CAM, etc...
   EditorialBoard  - Pediatric, Adult  
   ============================================================= -->   
   <xsl:choose>
    <xsl:when                    test = "SummaryMetaData/
                                         SummaryAudience = 'Patients'">
     <!--
     The ContactUs template is only being applied to Supportive Care,
     Screening, and Prevention summaries (Patient and HP version).
     ================================================================ -->
     <xsl:call-template          name = "ContactUs"/>

     <xsl:choose>
      <xsl:when                  test = "SummaryMetaData/
                                         SummaryType = 
                                           concat('Complementary and ',
                                                  'alternative medicine')">
       <!--
       We add the misc. documents to all CAM patient summaries except for 
       the two Overview summaries (English and Spanish)
       ================================================================== -->
       <xsl:if                   test = "$sumId != 'CDR0000446574'
                                         and
                                         $sumId != 'CDR0000448614'">

        <xsl:choose>
         <xsl:when               test = "SummaryMetaData/
                                         SummaryLanguage = 'English'">
          <xsl:call-template     name = "AboutPdqEnglish"/>
         </xsl:when>
         <xsl:otherwise>
          <xsl:call-template     name = "AboutPdqSpanish"/>
         </xsl:otherwise>
        </xsl:choose>

        <!--
        The CAM patient summaries receive two additional misc documents
        =============================================================== -->
        <xsl:call-template       name = "QandACAM"/>
        <xsl:call-template       name = "ToLearnMore"/>
       </xsl:if>
      </xsl:when>
      <xsl:otherwise>
       <xsl:call-template        name = "ToLearnMore"/>

       <xsl:choose>
        <xsl:when                test = "SummaryMetaData/
                                         SummaryLanguage = 'English'">
         <xsl:call-template      name = "AboutPdqEnglish"/>
        </xsl:when>
        <xsl:otherwise>
         <xsl:call-template      name = "AboutPdqSpanish"/>
        </xsl:otherwise>
       </xsl:choose>

      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <!-- HP Summaries -->
    <xsl:otherwise>
     <!--
     The ContactUs template is only being applied to Supportive Care,
     Screening, and Prevention summaries (Patient and HP version).
     ================================================================ -->
     <xsl:call-template          name = "ContactUs"/>

     <xsl:call-template          name = "MoreInformation"/>

    </xsl:otherwise>
   </xsl:choose>
   <!-- HP Summaries End-->

   <xsl:if                       test = "TranslationOf">
    <TranslationOf>
     <xsl:attribute              name = "ref">
      <xsl:value-of            select = "TranslationOf/@cdr:ref"/>
     </xsl:attribute>
    </TranslationOf>
   </xsl:if>

   <xsl:if                       test = "PatientVersionOf">
    <PatientVersionOf>
     <xsl:attribute              name = "ref">
      <xsl:value-of            select = "PatientVersionOf/@cdr:ref"/>
     </xsl:attribute>
    </PatientVersionOf>
   </xsl:if>

   <!-- 
   ===================================================================
   Copy Date First Published and Date Last Modified
   =================================================================== -->
   <xsl:variable                 name = "CtrlBlk" 
                               select = "document('cdr:/*/CdrCtl')"/>
   <xsl:choose>
    <xsl:when                    test = "$CtrlBlk/CdrDocCtl/FirstPub/Date">
     <DateFirstPublished>
      <xsl:value-of            select = "substring-before($CtrlBlk/
                                            CdrDocCtl/FirstPub/Date,'T')"/>
     </DateFirstPublished>
    </xsl:when>
    <xsl:otherwise>
     <xsl:call-template          name = "getDateFirstPub">
      <xsl:with-param            name = "date"
                               select = "$DateFirstPub"/>
     </xsl:call-template>    
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates        select = "DateLastModified"
                               mode   = "copy"/>
  </Summary>
 </xsl:template>


 <!-- 
 ==================================================================
 SummarySection Template
 ================================================================== -->  
 <xsl:template                  match = "SummarySection">

  <!--
  ==================================================================
  Display the TopLevel "TrialSearch" section (for HP Summaries) and 
  the "Get More Info" section just above the "Changes" section
  ================================================================== -->
  <xsl:if                        test = "SectMetaData/
                                         SectionType = 
                                          'Changes to summary'">

   <!-- 
   If the document contains a TopLevel TrialSearchString attribute we're 
   including the main Trial Search Summary section
   (The trial search sections are only added for Treatment and 
    Supportive care summaries)
   ===================================================================== -->
   <xsl:if                        test = "$sumType = 'Treatment'
                                          or
                                          ($sumType = 'Supportive care'
                                            and
                                           $sumAudience = 
                                              'Health professionals')">
    <!-- 
    Only if a TrialSearchString='TopLevel' exists are we adding the extra
    Summary section
    ===================================================================== -->
    <xsl:if                       test = "//SummarySection[@TrialSearchString 
                                           = 'TopLevel']">
     <xsl:call-template           name = "addTopLevelTrialSearchSection"/>

    </xsl:if>
   </xsl:if>

   <!--
   ================================================================
   Don't display the Get More section for the CAM summaries
   ================================================================ -->
   <xsl:if                       test = "not($sumType =
                                           concat('Complementary and ',
                                                  'alternative medicine'))">
    <xsl:choose>
     <xsl:when                   test = "$language = 'English'">
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000367',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_GetMore'"/>
      </xsl:apply-templates>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000256873',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_GetMore'"/>
      </xsl:apply-templates>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:if>
  </xsl:if>

  <SummarySection>
   <xsl:if                       test = "./@cdr:id">
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "./@cdr:id"/>
    </xsl:attribute>
   </xsl:if>

   <!--
   We need to suppress processing of the Reference Section since this
   has to be displayed at the very end of a section but we need to add
   the Clinical Trial search section first.
   This rule doesn't have any effect on the patient summaries since 
   those don't contain references.
   =================================================================== -->
   <xsl:apply-templates         select = "*[not(self::ReferenceList)]"/>
   
   <xsl:if                        test = "$sumType = 'Treatment'
                                          or
                                          $sumType = 'Supportive care'">
    <xsl:call-template            name = "addTrialSearchSection">
     <xsl:with-param              name = "sectionID"
                                select = "concat('_TrialSearch', ./@cdr:id)"/>
    </xsl:call-template>
   </xsl:if>

   <!--
   Now is the time to display the Reference section which 
   we suppressed earlier
   ========================================================= -->
   <xsl:apply-templates       select = "ReferenceList"/>

  </SummarySection>
 </xsl:template>





 <!-- 
 ==================================================================
 SummaryURL Template to drop trailing '/' 
 ================================================================== -->  
 <xsl:template                  match = "SummaryURL">
  <SummaryURL>
    <xsl:attribute               name = "xref">
     <xsl:call-template           name = "getSummaryURL">
      <xsl:with-param             name = "url"
                                select = "normalize-space(@cdr:xref)"/>
     </xsl:call-template>
    </xsl:attribute>
    <xsl:apply-templates         mode = "copy"/>
  </SummaryURL>
 </xsl:template>


 <!-- 
 ==================================================================
 SectMetaData Template
 ================================================================== -->  
 <xsl:template                  match = "SectMetaData">
  <xsl:if                        test = "Diagnosis
                                         or
                                         SectionType">
  <SectMetaData>
   <xsl:apply-templates        select = "Diagnosis"/>
   <xsl:apply-templates        select = "SectionType"
                                 mode = "copy"/>
  </SectMetaData>
  </xsl:if>
 </xsl:template>


 <!-- 
 ==================================================================
 SpecificDiagnosis Template
 ================================================================== -->  
 <xsl:template                  match = "Diagnosis">
  <SpecificDiagnosis>

   <xsl:attribute                name = "ref">
    <xsl:value-of              select = "@cdr:ref"/>
   </xsl:attribute> 

   <xsl:value-of               select = "."/>
  </SpecificDiagnosis>
 </xsl:template>


 <!-- 
 ==================================================================
 Template to create the Reference Section for each SummarySection
 ================================================================== -->  
 <xsl:template                  match = "ReferenceList">

  <!-- 
  Create the Reference Section of the summary section
  =================================================== -->
  <ReferenceSection>
   <xsl:for-each               select = "Citation">
    <Citation>
     <xsl:attribute              name = "idx">
      <xsl:value-of            select = "./@refidx"/>
     </xsl:attribute>
     <xsl:if                     test = "./@PMID">
      <xsl:attribute             name = "PMID">
       <xsl:value-of           select = "./@PMID"/>
      </xsl:attribute>
     </xsl:if>
     <xsl:if                     test = "./@MedlineID">
      <xsl:attribute             name = "MedlineID">
       <xsl:value-of           select = "./@MedlineID"/>
      </xsl:attribute>
     </xsl:if>
     <xsl:if                     test = "./@ProtocolID">
      <xsl:attribute             name = "ProtocolID">
       <xsl:value-of           select = "./@ProtocolID"/>
      </xsl:attribute>
     </xsl:if>
     <xsl:apply-templates/>
    </Citation>
   </xsl:for-each>
  </ReferenceSection>
 </xsl:template>


 <!-- 
 ===================================================================
 Template for extracting Summary Ref Definition
 Note:  The SummaryFragmentRef and LOEFragmentRef elements do 
        not exist in the vendor DTD.  These elements are 
        therefore mapped to the SummaryRef/LOERef elements instead.
 =================================================================== -->
 <xsl:template                  match = "SummaryRef | SummaryFragmentRef |
                                         LOERef     | LOEFragmentRef">
  <xsl:choose>
   <xsl:when                     test = "(name() = 'SummaryRef') or
                                         (name() = 'SummaryFragmentRef')">
    <xsl:variable                name = "hrefId"
                               select = "@cdr:href"/>
    <xsl:variable                name = "hrefNormId"
                               select = "number(
                                           substring-before(
                                           concat(
                                           substring-after(@cdr:href, 'CDR'),
                                                               '#'), '#'))"/>
    <!--
    Extracting the content of the SummaryURL attribute to be used for 
    populating the url attribute of the SummaryRef element.  This 
    information has to be retrieved via a SQL query from the database
    ================================================================= -->
    <xsl:variable                 name = "sqlQuery">
     SELECT path, value 
       FROM query_term_pub 
      WHERE doc_id = ?
        AND path = '/Summary/SummaryMetaData/SummaryURL/@cdr:xref'
    </xsl:variable>

    <!-- 
    Note: Don't perform a normalize-space here since it would convert
          the resulting node into a string
    ================================================================== -->
    <xsl:variable                 name = "queryRows"
                                select = "document(
                                           concat('cdrutil:/sql-query/',
                                                   $sqlQuery,
                                                   '~',
                                                   $hrefNormId))"/>
    <!--
    Note:  The url created by function getSummaryURL has no trailing 
           slash ('/'), specifies the domain as http://cancer.gov and
           is normalized
    ================================================================= -->
    <xsl:variable                 name = "url">
     <xsl:call-template           name = "getSummaryURL">
      <xsl:with-param             name = "url"
                                select = "normalize-space(
                                            $queryRows
                                            /SqlResult
                                            /row
                                            /col[@name='value'])"/>
     </xsl:call-template>
    </xsl:variable>
  
    <!--
    The SummaryRef url attribute is populated from the xref attribute of
    the SummaryURL element displaying the full path without the domain
    ===================================================================== -->
    <SummaryRef>
     <xsl:attribute              name = "href">
      <xsl:value-of            select = "$hrefId"/>
     </xsl:attribute>
     <xsl:attribute              name = "url">
      <xsl:choose>
       <xsl:when                 test = "starts-with($url, 'http')">
        <xsl:value-of          select = "substring-after($url, '.gov')"/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:value-of          select = "$url"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:attribute>
     <xsl:apply-templates/>
    </SummaryRef>
   </xsl:when>
   <xsl:otherwise>
    <LOERef>
     <xsl:attribute              name = "href">
      <xsl:value-of            select = "@cdr:href"/>
     </xsl:attribute>
     <xsl:apply-templates/>
    </LOERef>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ==================================================================
 Template to suppress the auxiliary information for linked
 summaries.
 ================================================================== -->  
 <xsl:template                  match = "LinkedSummary"/>


 <!-- 
 ==================================================================
 SummaryMetaData Template
 ================================================================== -->  
 <xsl:template                  match = "SummaryMetaData">
  <SummaryMetaData>
   <xsl:apply-templates        select = "SummaryType"
                                 mode = "copy"/>
   <xsl:apply-templates        select = "SummaryAudience"
                                 mode = "copy"/>
   <xsl:apply-templates        select = "SummaryLanguage"
                                 mode = "copy"/>
   <xsl:apply-templates        select = "SummaryDescription"
                                 mode = "copy"/>
   <xsl:apply-templates        select = "SummaryURL"/>
   <xsl:apply-templates        select = "MainTopics"/>
   <xsl:apply-templates        select = "SecondaryTopics"/>
  </SummaryMetaData>
 </xsl:template>


 <!-- 
 ==================================================================
 SummaryTitle Template  (adding registered tragemark (r) sign to 
 all titles).
 ================================================================== -->
 <xsl:template                  match = "SummaryTitle">
  <SummaryTitle>
   <xsl:apply-templates          mode = "copy"/>
   <xsl:text> (PDQ&#xAE;)</xsl:text>
  </SummaryTitle>
 </xsl:template>


 <!-- 
 ============================================================= 
 Template to create MainTopics
 ============================================================= -->
 <xsl:template                  match = "MainTopics">
  <MainTopics>
   <xsl:apply-templates        select = "Term"/>
  </MainTopics>
 </xsl:template>
    

 <!-- 
 ============================================================= 
 Template to create SecondaryTopics
 ============================================================= -->
 <xsl:template                  match = "SecondaryTopics">
  <SecondaryTopics>
   <xsl:apply-templates        select = "Term"/>
  </SecondaryTopics>
 </xsl:template>
   

 <!-- 
 ============================================================= 
 Template to create Terms
 ============================================================= -->
 <xsl:template                  match = "Term">
   <TermRef>
    <xsl:attribute               name = "ref">
     <xsl:value-of             select = "@cdr:ref"/>
    </xsl:attribute>

    <xsl:value-of              select = "."/>

   </TermRef>
 </xsl:template>
    


 <!-- 
 ============================================================= 
 Create the Para template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ============================================================= -->
 <xsl:template                  match = "Para">
  <xsl:if                        test = "normalize-space(.)">
   <Para>
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "./@cdr:id"/>
    </xsl:attribute>
    <xsl:apply-templates/>
   </Para>
  </xsl:if>
 </xsl:template>
    

 <!-- 
 ============================================================= 
 Create the Para template including the renamed attribute for 
 the paragraph IDs.
 Displaying by default the 'To Learn More' misc document.
 ============================================================= -->
 <xsl:template                  match = "Para"
                                 mode = "MiscText">
  <xsl:param                     name = "miscDocId"/>
  <xsl:param                   name = "curLocation">
   <SectMetaData/>
  </xsl:param>

  <Para>
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "concat($miscDocId, ./@cdr:id)"/>
   </xsl:attribute>
   <xsl:apply-templates        select = "Para" 
                                 mode = "copy"/>
   <xsl:apply-templates>
    <xsl:with-param             name = "curLocation"
                               select = "$curLocation"/>
   </xsl:apply-templates>
  </Para>
 </xsl:template>
    

 <!-- 
 ============================================================= 
 Create the Para template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ============================================================= -->
 <xsl:template                  match = "Para"
                                 mode = "trialSearch">
  <xsl:if                        test = "normalize-space(.)">
   <Para>
    <xsl:apply-templates/>
   </Para>
  </xsl:if>
 </xsl:template>


 <!-- 
 ============================================================= 
 Create the Title template 
 ============================================================= -->
 <xsl:template                  match = "Title   | AltTitle">
  <xsl:element                   name = "{name()}">
   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>
    

 <!-- 
 ============================================================= 
 Create the Title template for the Misc Text section
 ============================================================= -->
 <xsl:template                  match = "Title"
                                 mode = "MiscText">
  <xsl:apply-templates         select = "." 
                                 mode = "copy"/>
 </xsl:template>
    

 <!-- 
 ==================================================================== 
 Create the ItemizedList template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ==================================================================== -->
 <xsl:template                  match = "ItemizedList">
  <xsl:param                     name = "miscDocId"/>

  <ItemizedList>
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "concat($miscDocId, ./@cdr:id)"/>
   </xsl:attribute>
   <xsl:if                       test = "./@Style">
    <xsl:attribute               name = "Style">
     <xsl:value-of             select = "./@Style"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                       test = "./@Compact">
    <xsl:attribute               name = "Compact">
     <xsl:value-of             select = "./@Compact"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates/>
  </ItemizedList>
 </xsl:template>
    

 <!-- 
 ==================================================================== 
 Create the ItemizedList template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ==================================================================== -->
 <xsl:template                  match = "ItemizedList"
                                 mode = "MiscText">
  <xsl:param                     name = "miscDocId"/>

   <ItemizedList>
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "concat($miscDocId, ./@cdr:id)"/>
    </xsl:attribute>
    <xsl:if                      test = "./@Style">
     <xsl:attribute              name = "Style">
      <xsl:value-of            select = "./@Style"/>
     </xsl:attribute>
    </xsl:if>
    <xsl:if                      test = "./@Compact">
     <xsl:attribute              name = "Compact">
      <xsl:value-of            select = "./@Compact"/>
     </xsl:attribute>
    </xsl:if>
    <xsl:apply-templates/>
   </ItemizedList>
 </xsl:template>
    

 <!-- 
 ==================================================================== 
 Create the OrderedList template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ==================================================================== -->
 <xsl:template                  match = "OrderedList">
  <OrderedList>
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "./@cdr:id"/>
   </xsl:attribute>
   <xsl:if                       test = "./@Style">
    <xsl:attribute               name = "Style">
     <xsl:value-of             select = "./@Style"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                       test = "./@Compact">
    <xsl:attribute               name = "Compact">
     <xsl:value-of             select = "./@Compact"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates/>
  </OrderedList>
 </xsl:template>
    

 <!-- 
 ==================================================================== 
 Create the OrderedList template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ==================================================================== -->
 <xsl:template                  match = "OrderedList"
                                 mode = "MiscText">
  <xsl:param                     name = "miscDocId"/>

  <OrderedList>
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "concat($miscDocId, ./@cdr:id)"/>
    </xsl:attribute>
   <xsl:if                       test = "./@Style">
    <xsl:attribute               name = "Style">
     <xsl:value-of             select = "./@Style"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                       test = "./@Compact">
    <xsl:attribute               name = "Compact">
     <xsl:value-of             select = "./@Compact"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates/>
  </OrderedList>
 </xsl:template>
    

 <!-- 
 ==================================================================== 
 Create the ListTitle
 ==================================================================== -->
 <xsl:template                  match = "ListTitle">
  <ListTitle>
   <xsl:apply-templates/>
  </ListTitle>
 </xsl:template>
    

 <!-- 
 ==================================================================== 
 Create the OrderedList template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ==================================================================== -->
 <xsl:template                  match = "ListItem">
  <xsl:if                        test = "not(translate(., ' ', '') = '')">
   <ListItem>
    <xsl:apply-templates/>
   </ListItem>
  </xsl:if>
 </xsl:template>
    

 <!-- 
 ================================================================ 
 Create the KeyPoint template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ================================================================ -->
 <xsl:template                  match = "KeyPoint">
  <KeyPoint>
   <xsl:attribute          name = "id">
    <xsl:value-of       select = "./@cdr:id"/>
   </xsl:attribute>

   <xsl:apply-templates/>

  </KeyPoint>
 </xsl:template>
    

 <!-- 
 ============================================================= 
 Create the Citation template including the renamed attribute 
 for the Citation ref.
 The template displayes the refidx entries embedded within the 
 text.
 ============================================================= -->
 <xsl:template                  match = "Citation">
  <xsl:if                        test = "not(name(..) = 'ReferenceList')">
   <Reference>
    <xsl:attribute               name = "refidx">
     <xsl:value-of             select = "./@refidx"/>
    </xsl:attribute>
   </Reference>
  </xsl:if>
 </xsl:template>


 <!-- 
 ============================================================= 
 Create the elements and rename the attribute 
 (cdr:href ID needs to be renamed to href).
 ============================================================= -->
 <xsl:template                  match = "GlossaryTermRef |
                                         MediaRef">
  <xsl:element                   name = "{name()}">
   <xsl:attribute                name = "href">
    <xsl:value-of              select = "./@cdr:href"/>
   </xsl:attribute>
   <xsl:value-of               select = "."/>
  </xsl:element>
 </xsl:template>


 <!-- 
 ==============================================================
 Template for TT tag
 ============================================================== -->
 <xsl:template                  match = "TT">
  <TT>
   <xsl:if                       test = "./@cdr:id">
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "./@cdr:id"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates/>
  </TT>
 </xsl:template>


 <!-- 
 ==================================================================
 Create the QandAEntry template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ================================================================== -->
 <xsl:template                  match = "QandAEntry">
   <QandAEntry>
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "./@cdr:id"/>
    </xsl:attribute>
    <xsl:apply-templates/>
   </QandAEntry>
 </xsl:template>
    

 <!-- 
 ==================================================================
 Main MiscellaneousDocumentText Template
 ================================================================== -->  
 <xsl:template                  match = "MiscellaneousDocLink">
  <xsl:apply-templates           mode = "miscFragment">
   <xsl:with-param               name = "miscDocId" 
                               select = "../@cdr:id"/>
  </xsl:apply-templates>
 </xsl:template>

 <!-- 
 ==================================================================
 Main MiscellaneousDocumentText Template
 ================================================================== -->  
 <xsl:template                  match = "MiscellaneousDocumentText">
  <xsl:param                     name = "miscDocId"/>
  <xsl:apply-templates>
   <xsl:with-param               name = "miscDocId" 
                               select = "$miscDocId"/>
  </xsl:apply-templates>
 </xsl:template>


 <!-- 
 ==================================================================
 Section Template for Misc Docs
 Need to pass the parameter of the CDR Doc ID to set the ID 
 attribute properly.  The misc doc can be either the 'To Learn More'
 or the 'About PDQ' section.
 ================================================================== -->  
 <xsl:template                  match = "Section">
  <xsl:param                     name = "miscDocId"/>

  <SummarySection>
   <xsl:choose>
    <xsl:when                    test = "$miscDocId">
     <xsl:if                     test = "./@cdr:id">
      <xsl:attribute             name = "id">
       <xsl:value-of           select = "$miscDocId"/>
       <xsl:value-of           select = "./@cdr:id"/>
      </xsl:attribute>
     </xsl:if>
    </xsl:when>
    <xsl:otherwise>
     <xsl:if                     test = "./@cdr:id">
      <xsl:attribute             name = "id">
       <xsl:value-of           select = "./@cdr:id"/>
      </xsl:attribute>
     </xsl:if>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates          mode = "MiscText">
    <xsl:with-param              name = "miscDocId" 
                               select = "$miscDocId"/>
   </xsl:apply-templates>
  </SummarySection>
 </xsl:template>


 <!-- 
 ==================================================================
 Section Template for Misc Docs
 Need to pass the parameter of the CDR Doc ID to set the ID 
 attribute properly.  The misc doc can be either the 'To Learn More'
 or the 'About PDQ' section.
 ================================================================== -->  
 <xsl:template                  match = "Section"
                                 mode = "miscFragment">
  <xsl:param                     name = "miscDocId"/>
  <!-- SummarySection>
   <xsl:choose>
    <xsl:when                    test = "$miscDocId">
     <xsl:if                     test = "./@cdr:id">
      <xsl:attribute             name = "id">
       <xsl:value-of           select = "$miscDocId"/>
       <xsl:value-of           select = "./@cdr:id"/>
      </xsl:attribute>
     </xsl:if>
    </xsl:when>
    <xsl:otherwise>
     <xsl:if                     test = "./@cdr:id">
      <xsl:attribute             name = "id">
       <xsl:value-of           select = "./@cdr:id"/>
      </xsl:attribute>
     </xsl:if>
    </xsl:otherwise>
   </xsl:choose -->

   <xsl:apply-templates          mode = "MiscText">
    <xsl:with-param              name = "miscDocId" 
                               select = "$miscDocId"/>
   </xsl:apply-templates>
  <!-- /SummarySection -->
 </xsl:template>


 <!-- 
 ==============================================================
 Template for extracting External Ref Definition
 ============================================================== -->
 <xsl:template                  match = "ExternalRef">
  <ExternalRef>
   <xsl:attribute                name = "xref">
    <xsl:value-of              select = "@cdr:xref"/>
   </xsl:attribute>
   <xsl:apply-templates/>
  </ExternalRef>
 </xsl:template>


 <!-- 
 ============================================================= 
 Replace the PlaceHolder link name in the Misc. Document
 ============================================================= -->
 <xsl:template                  match = "PlaceHolder[
                                          @name = 'ClinicalTrialSearchLink']">
  <xsl:param                      name = "curLocation"/>


  <xsl:choose>
   <xsl:when                      test = "$curLocation/Diagnosis
                                         or
                                          $curLocation/Intervention
                                         or
                                          $curLocation/Drug">
    <xsl:for-each               select = "$curLocation/Diagnosis    |
                                          $curLocation/Intervention |
                                          $curLocation/Drug">
     <xsl:call-template           name = "addTrialSearchString">
      <xsl:with-param             name = "metaDataDoc"
                                select = "."/>
      <xsl:with-param             name = "metaDataType"
                                select = "name()"/>
      <xsl:with-param             name = "metaDataDocID"
                                select = "@cdr:ref | @ref"/>
      <xsl:with-param             name = "audience"
                                select = "$sumAudience"/>
     </xsl:call-template>
    </xsl:for-each>
   </xsl:when>
   <xsl:otherwise>
    <xsl:for-each               select = "$tlss/Diagnosis           |
                                          $tlss/Intervention        | 
                                          $tlss/Drug">
     <xsl:call-template           name = "addTrialSearchString">
      <xsl:with-param             name = "metaDataDoc"
                                select = "."/>
      <xsl:with-param             name = "metaDataType"
                                select = "name()"/>
      <xsl:with-param             name = "metaDataDocID"
                                select = "@cdr:ref | @ref"/>
      <xsl:with-param             name = "audience"
                                select = "$sumAudience"/>
     </xsl:call-template>
    </xsl:for-each>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>
    

 <!-- 
 ==============================================================
 Replace the PlaceHolder link for Spanish text (singular/plural
 ============================================================== -->
 <xsl:template                   match = "PlaceHolder[@name = 'termino']">
  <xsl:param                      name = "curLocation"/>
  <xsl:choose>
   <xsl:when                      test = "count($curLocation/Diagnosis    |
                                                $curLocation/Intervention |
                                                $curLocation/Drug) = 1">
    <xsl:text>el t&#xE9;rmino</xsl:text>
   </xsl:when>
   <xsl:otherwise>
    <xsl:text>los t&#xE9;rminos</xsl:text>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 =========================================================================
 Template for in-line mark-up
 ========================================================================= -->
 <xsl:template                  match = "Emphasis       | Strong         |
                                         Subscript      | Superscript    |
                                         GeneName       | ScientificName |
                                         ForeignName    | Note           |
                                         QandASet       | 
                                         QandADiv       | MarkedUpTitle  |
                                         Question       | Answer">
  <xsl:element                   name = "{name()}">
   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>


 <!-- 
 ====================================================================
 Templats needed for Table display
 ==================================================================== -->
 <!-- 
 ==================================================================== 
 Create the Table template including the renamed attribute for 
 the attribute ID. (cdr:ref ID needs to be renamed to id).
 ==================================================================== -->
 <xsl:template                  match = "Table">
  <Table>
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "./@cdr:id"/>
   </xsl:attribute>
   <xsl:if                       test = "./@ColSep">
    <xsl:attribute               name = "ColSep">
      <xsl:value-of            select = "./@ColSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                       test = "./@Frame">
    <xsl:attribute               name = "Frame">
     <xsl:value-of             select = "./@Frame"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                       test = "./@RowSep">
    <xsl:attribute               name = "RowSep">
     <xsl:value-of             select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                       test = "./@TabStyle">
    <xsl:attribute               name = "TabStyle">
     <xsl:value-of             select = "./@TabStyle"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </Table>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "TitleAbbrev">
  <xsl:apply-templates/>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "TGroup">
  <TGroup>
   <xsl:if                        test = "./@Char">
    <xsl:attribute                name = "Char">
     <xsl:value-of              select = "./@Char"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Charoff">
    <xsl:attribute                name = "Charoff">
     <xsl:value-of              select = "./@Charoff"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColSep">
    <xsl:attribute                name = "ColSep">
     <xsl:value-of              select = "./@ColSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Cols">
    <xsl:attribute                name = "Cols">
     <xsl:value-of              select = "./@Cols"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@RowSep">
    <xsl:attribute                name = "RowSep">
     <xsl:value-of              select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@TGroupStyle">
    <xsl:attribute                name = "TGroupStyle">
     <xsl:value-of              select = "./@TGroupStyle"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </TGroup>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "ColSpec">
  <ColSpec>
   <xsl:if                        test = "./@Align">
    <xsl:attribute                name = "Align">
     <xsl:value-of              select = "./@Align"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Char">
    <xsl:attribute                name = "Char">
     <xsl:value-of              select = "./@Char"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Charoff">
    <xsl:attribute                name = "Charoff">
     <xsl:value-of              select = "./@Charoff"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColName">
    <xsl:attribute                name = "ColName">
     <xsl:value-of              select = "./@ColName"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColNum">
    <xsl:attribute                name = "ColNum">
     <xsl:value-of              select = "./@ColNum"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColSep">
    <xsl:attribute                name = "ColSep">
     <xsl:value-of              select = "./@ColSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColWidth">
    <xsl:attribute                name = "ColWidth">
     <xsl:value-of              select = "./@ColWidth"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@RowSep">
    <xsl:attribute                name = "RowSep">
     <xsl:value-of              select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </ColSpec>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "SpanSpec">
  <SpanSpec>
   <xsl:if                        test = "./@Align">
    <xsl:attribute                name = "Align">
     <xsl:value-of              select = "./@Align"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Char">
    <xsl:attribute                name = "Char">
     <xsl:value-of              select = "./@Char"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Charoff">
    <xsl:attribute                name = "Charoff">
     <xsl:value-of              select = "./@Charoff"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@CosSep">
    <xsl:attribute                name = "ColSep">
     <xsl:value-of              select = "./@ColSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@NameEnd">
    <xsl:attribute                name = "NameEnd">
     <xsl:value-of              select = "./@NameEnd"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@NameSt">
    <xsl:attribute                name = "NameSt">
     <xsl:value-of              select = "./@NameSt"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@RowSep">
    <xsl:attribute                name = "RowSep">
     <xsl:value-of              select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@SpanName">
    <xsl:attribute                name = "SpanName">
     <xsl:value-of              select = "./@SpanName"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </SpanSpec>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "entry">
  <entry>
   <xsl:if                        test = "./@Align">
    <xsl:attribute                name = "Align">
     <xsl:value-of              select = "./@Align"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Char">
    <xsl:attribute                name = "Char">
     <xsl:value-of              select = "./@Char"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Charoff">
    <xsl:attribute                name = "Charoff">
     <xsl:value-of              select = "./@Charoff"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColSep">
    <xsl:attribute                name = "ColSep">
     <xsl:value-of              select = "./@ColSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Cols">
    <xsl:attribute                name = "Cols">
     <xsl:value-of              select = "./@Cols"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@MoreRows">
    <xsl:attribute                name = "MoreRows">
     <xsl:value-of              select = "./@MoreRows"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@NameEnd">
    <xsl:attribute                name = "NameEnd">
     <xsl:value-of              select = "./@NameEnd"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@NameSt">
    <xsl:attribute                name = "NameSt">
     <xsl:value-of              select = "./@NameSt"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@RowSep">
    <xsl:attribute                name = "RowSep">
     <xsl:value-of              select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@SpanName">
    <xsl:attribute                name = "SpanName">
     <xsl:value-of              select = "./@SpanName"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Valign">
    <xsl:attribute                name = "Valign">
     <xsl:value-of              select = "./@Valign"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </entry>
 </xsl:template>



 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "THead">
  <THead>
   <xsl:if                        test = "./@Valign">
    <xsl:attribute                name = "Valign">
     <xsl:value-of              select = "./@Valign"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </THead>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "TFoot">
  <TFoot>
   <xsl:if                        test = "./@Valign">
    <xsl:attribute                name = "Valign">
     <xsl:value-of              select = "./@Valign"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </TFoot>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "TBody">
  <TBody>
   <xsl:if                        test = "./@Valign">
    <xsl:attribute                name = "Valign">
     <xsl:value-of              select = "./@Valign"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </TBody>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "Row">
  <Row>
   <xsl:if                        test = "./@RowSep">
    <xsl:attribute                name = "RowSep">
     <xsl:value-of              select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </Row>
 </xsl:template>


 <!-- 
 ==============================================================
 Templates to remove elements from Vendor/Mailer Output
 ============================================================== -->
 <xsl:template                   match = "Comment           | 
                                          ResponseToComment | 
                                          PdqKey"/>
 <xsl:template                   match = "Comment           | 
                                          ResponseToComment |
                                          PdqKey"
                                  mode = "copy"/>


 <!-- 
 =========================================================================
 Named Templates:
 ========================================================================= -->
 <!-- 
 =========================================================================

 Template to add the "Contact Us" misc. document to the Supportive Care
 summaries.  This gets added to the patient and HP version.
 ========================================================================= -->
 <xsl:template                   name = "ContactUs">
  <xsl:if                        test = "SummaryMetaData/
                                         SummaryType = 'Supportive care'
                                         or
                                         SummaryMetaData/
                                         SummaryType = 'Screening'
                                         or
                                         SummaryMetaData/
                                         SummaryType = 'Prevention'">
   <xsl:choose>
    <xsl:when                    test = "SummaryMetaData/
                                         SummaryLanguage = 'English'">

     <xsl:variable               name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000353162',
                                                         '/lastp'))"/>

     <xsl:apply-templates      select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
      <xsl:with-param            name = "miscDocId"
                               select = "'_ContactUs'"/>
     </xsl:apply-templates>
    </xsl:when>
    <!-- English, Patient, Contact Us Section End-->
        
    <!-- Spanish, Patient, Contact Us Section -->
    <xsl:otherwise>
         
     <xsl:variable               name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000353206',
                                                         '/lastp'))"/>
     <xsl:apply-templates      select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
      <xsl:with-param            name = "miscDocId"
                               select = "'_ContactUs'"/>
     </xsl:apply-templates>

    </xsl:otherwise>
   <!-- Spanish To Learn More Section End-->
   </xsl:choose>
  </xsl:if>
 </xsl:template>


 <!-- 
 =========================================================================
 Template to add the "More Information" misc. document to the summaries.
 Need to add the document in its appropriate language (English/Spanish).
 ========================================================================= -->
 <xsl:template                   name = "MoreInformation">

  <xsl:variable                  name = "miscDoc">
   <xsl:choose>
    <xsl:when                    test = "SummaryMetaData/SummaryType =
                                           concat('Complementary and ',
                                                  'alternative medicine')">
     <xsl:choose>
      <xsl:when                  test = "$language = 'English'">
       <xsl:copy-of            select = "document(concat('cdr:CDR0000256925',
                                                         '/lastp'))"/>
      </xsl:when>
      <xsl:otherwise>
       <!-- Spanish HP CAM summaries currently don't exist -->
       <xsl:copy-of            select = "document(concat('cdr:CDR0000256925',
                                                         '/lastp'))"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when                  test = "$language = 'English'">
       <!-- Misc Document Title
       'More Information;For more information - Health professional summary'
       ==================================================================== -->
       <xsl:copy-of            select = "document(concat('cdr:CDR0000334953',
                                                         '/lastp'))"/>
      </xsl:when>
      <xsl:otherwise>
       <!-- Misc Document Title
       'Informaci&#xF3;n adicional;For more information - Health  
        professional summary;Spanish'
       ==================================================================== -->       
       <xsl:copy-of            select = "document(concat('cdr:CDR0000334954',
                                                         '/lastp'))"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>

  <xsl:apply-templates         select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
   <xsl:with-param               name = "miscDocId"
                               select = "'_ForMoreInfo'"/>
  </xsl:apply-templates>
 </xsl:template>


 <!-- 
 =========================================================================
 Template to add the "To Learn More" misc. document to the summaries.
 This gets only attached to the patient versions.
 ========================================================================= -->
 <xsl:template                   name = "ToLearnMore">
  <xsl:choose>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryLanguage = 'English'">
    <xsl:choose>
     <xsl:when                   test = "SummaryMetaData/
                                         SummaryType =
                                           concat('Complementary and ',
                                                  'alternative medicine')">
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000445623',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_ToLearnMore'"/>
      </xsl:apply-templates>
                                 <!-- mode = "MiscText" -->
     </xsl:when>

     <!--  
     ==================================================================
           This section has been moved in front of the "Changes to this
           Summary" section
     <xsl:otherwise>
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000367',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_GetMore'"/>
      </xsl:apply-templates>
     </xsl:otherwise>
     ================================================================== -->
    </xsl:choose>
   </xsl:when>
  <!-- English To Learn More Section End-->
        
  <!-- Spanish, Patient, To Learn More Section -->
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                   test = "SummaryMetaData/
                                         SummaryType =
                                           concat('Complementary and ',
                                                  'alternative medicine')">
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000446984',
                                                         '/lastp'))"/>

      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_ToLearnMore'"/>
      </xsl:apply-templates>
     </xsl:when>

     <!--  
     ==================================================================
           This section has been moved in front of the "Changes to this
           Summary" section
     <xsl:otherwise>
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000256873',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_GetMore'"/>
      </xsl:apply-templates>
     </xsl:otherwise>
     ================================================================== -->
    </xsl:choose>
   </xsl:otherwise>
  <!-- Spanish To Learn More Section End-->
  </xsl:choose>  
 </xsl:template>


 <!-- 
 =========================================================================
 Template to add the English "About PDQ" misc. document to the summaries.
 This gets only attached to the patient versions.
 ========================================================================= -->
 <xsl:template                   name = "AboutPdqEnglish">
  <!-- 
  English Summaries, Patient, Treatment 
  ===================================== -->
  <xsl:choose>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType = 'Treatment'">
    <!-- 
    English Summaries, Patient, Treatment, Pediatric, About PDQ 
    =========================================================== -->
    <xsl:choose>
     <xsl:when                   test = "contains(SummaryMetaData/
                                                  PDQBoard/
                                                  Board, 'Pediatric')">
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000372',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_AboutPDQ'"/>
      </xsl:apply-templates>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000366',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_AboutPDQ'"/>
      </xsl:apply-templates>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType = 'Screening'">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000374',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType = 'Prevention'">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000373',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType = 'Supportive care'">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000371',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType =
                                           concat('Complementary and ',
                                                  'alternative medicine')">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000445621',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
   <!-- English Summaries, Patient, Genetics End -->
  </xsl:choose>
 </xsl:template>


 <!-- 
 =========================================================================
 Template to add the Spanish "About PDQ" misc. document to the summaries.
 This gets only attached to the patient versions.
 ========================================================================= -->
 <xsl:template                   name = "AboutPdqSpanish">
  <!-- 
  Since no Spanish boards exist the information if a treatment summary
  is a pediatric study or not has to be extracted from the English
  version of the document
  ==================================================================== -->
  <xsl:variable                  name = "englishID"  
                               select = "TranslationOf/@cdr:ref"/>
  <xsl:variable                  name = "englishDoc"
                               select = "document(concat('cdr:', $englishID, 
                                                         '/lastp'))"/>
  <xsl:choose>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType = 'Treatment'">
    <xsl:choose>
     <xsl:when                   test = "contains($englishDoc/
                                                  Summary/
                                                  SummaryMetaData/
                                                  PDQBoard/Board, 'Pediatric')">
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000257146',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_AboutPDQ'"/>
      </xsl:apply-templates>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000256974',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_AboutPDQ'"/>
      </xsl:apply-templates>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:when                   test   = "SummaryMetaData/
                                         SummaryType = 'Supportive care'">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000257147',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType =
                                           concat('Complementary and ',
                                                  'alternative medicine')">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000446985',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
  </xsl:choose>
 </xsl:template>


 <!-- 
 =========================================================================
 Template to add the Q and A misc. document to CAM Patient Summaries
 ========================================================================= -->
 <xsl:template                   name = "QandACAM">
  <xsl:choose>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryLanguage = 'English'">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000445622',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_QandA'"/>
    </xsl:apply-templates>
   </xsl:when>
   <xsl:otherwise>
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000446986',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_QandA'"/>
    </xsl:apply-templates>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 =========================================================================
 Template to add the "General Info About ..." misc. document to the 
 summaries.
 Currently, we're only adding the section to the Treatment summaries 
 and we are adding different sections to adult/pediatric summaries.
 ========================================================================= -->
 <xsl:template                   name = "GeneralInfoAdult">
 
  <xsl:if                        test = "$sumType = 'Treatment'">
   <xsl:choose>
    <xsl:when                    test = "$language = 'English'">
     <xsl:choose>
      <xsl:when                  test = "$ageGroup = 'Adult'">
       <xsl:variable             name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000575822',
                                                         '/lastp'))"/>
       <xsl:apply-templates    select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
        <xsl:with-param          name = "miscDocId"
                               select = "'_GenInfoAdult'"/>
       </xsl:apply-templates>
      </xsl:when>
      <xsl:otherwise>
       <xsl:variable             name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000575821',
                                                         '/lastp'))"/>
       <xsl:apply-templates    select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
        <xsl:with-param          name = "miscDocId"
                               select = "'_GenInfoPed'"/>
       </xsl:apply-templates>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
   <!-- English To Learn More Section End-->
        
   <!-- Spanish, Patient, To Learn More Section -->
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when                  test = "$ageGroup = 'Adult'">
       <xsl:variable             name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000575839',
                                                         '/lastp'))"/>
       <xsl:apply-templates    select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
        <xsl:with-param          name = "miscDocId"
                               select = "'_GenInfoAdult'"/>
       </xsl:apply-templates>
      </xsl:when>
      <xsl:otherwise>
       <xsl:variable             name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000575840',
                                                         '/lastp'))"/>
       <xsl:apply-templates    select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
        <xsl:with-param          name = "miscDocId"
                               select = "'_GenInfoPed'"/>
       </xsl:apply-templates>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   <!-- Spanish General Info Section End-->
   </xsl:choose>  
  </xsl:if>
 </xsl:template>


 <!-- 
 ==================================================================
 Template to add the Top Level Trial Search section
 By convention the TrialSearchString = TopLevel attribute is being 
 placed in the top most section of a summary.
 ================================================================== -->  
 <xsl:template                    name = "addTopLevelTrialSearchSection">
  <xsl:param                      name = "sectionID"
                                select = "'_TopTrialSearch'"/>

  <xsl:choose>
   <xsl:when                      test = "$sumAudience 
                                                   = 'Health professionals'">
    <SummarySection>
     <xsl:attribute               name = "id">
      <xsl:value-of             select = "$sectionID"/>
      <xsl:text>_sid_</xsl:text>
      <xsl:value-of             select = "position()"/>
     </xsl:attribute>
     <xsl:choose>
      <xsl:when                   test = "/Summary/
                                          SummaryMetaData/
                                          SummaryLanguage = 'English'">
       <Title>
        <xsl:text>Current Clinical Trials</xsl:text>
       </Title>

       <xsl:apply-templates     select = "$slText_en_hp/
                                          MiscellaneousDocument/
                                          MiscellaneousDocumentText/
                                          Section[@cdr:id=$miscSection]/
                                          *[not(self::Title)]"
                                  mode = "MiscText">
        <xsl:with-param           name = "miscDocId"
                                select = "$sectionID"/>
       </xsl:apply-templates>
      </xsl:when>
      <xsl:when                   test = "/Summary/
                                          SummaryMetaData/
                                          SummaryLanguage = 'Spanish'">
       <Title>
        <xsl:text>Ensayos cl&#xED;nicos en curso</xsl:text>
       </Title>
       <xsl:apply-templates     select = "$slText_es_hp/
                                          MiscellaneousDocument/
                                          MiscellaneousDocumentText/
                                          Section[@cdr:id=$miscSection]/
                                          *[not(self::Title)]"
                                  mode = "MiscText">
        <xsl:with-param           name = "miscDocId"
                                select = "$sectionID"/>
       </xsl:apply-templates>
      </xsl:when>
     </xsl:choose>
    </SummarySection>
   </xsl:when>
   <xsl:when                      test = "$sumAudience 
                                                   = 'Patients'">
    <SummarySection>
     <xsl:attribute               name = "id">
      <xsl:value-of             select = "$sectionID"/>
      <xsl:text>_sid_</xsl:text>
      <xsl:value-of             select = "position()"/>
     </xsl:attribute>
     <xsl:choose>
      <xsl:when                   test = "/Summary/
                                          SummaryMetaData/
                                          SummaryLanguage = 'English'">
       <Title>
        <xsl:text>Current Clinical Trials</xsl:text>
       </Title>


       <xsl:apply-templates     select = "$slText_en_pat/
                                          MiscellaneousDocument/
                                          MiscellaneousDocumentText/
                                          Section[@cdr:id=$miscSection]/
                                          *[not(self::Title)]"
                                  mode = "MiscText">
        <xsl:with-param           name = "miscDocId"
                                select = "$sectionID"/>
       </xsl:apply-templates>
      </xsl:when>
      <xsl:when                   test = "/Summary/
                                          SummaryMetaData/
                                          SummaryLanguage = 'Spanish'">
       <Title>
        <xsl:text>Ensayos cl&#xED;nicos en curso</xsl:text>
       </Title>
       <xsl:apply-templates     select = "$slText_es_pat/
                                          MiscellaneousDocument/
                                          MiscellaneousDocumentText/
                                          Section[@cdr:id=$miscSection]/
                                          *[not(self::Title)]"
                                  mode = "MiscText">
        <xsl:with-param           name = "miscDocId"
                                select = "$sectionID"/>
       </xsl:apply-templates>
      </xsl:when>
     </xsl:choose>
    </SummarySection>
   </xsl:when>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ==================================================================
 Template to add the Trial Search section
 ================================================================== -->  
 <xsl:template                    name = "addTrialSearchSection">
  <xsl:param                      name = "sectionID"
                                select = "'_TrialSearch'"/>

  <xsl:if                         test = "(SectMetaData/
                                           Diagnosis
                                          or
                                           SectMetaData/
                                           Intervention
                                          or 
                                           SectMetaData/
                                           Drug)
                                          and
                                           not(@TrialSearchString)">
   <xsl:variable                  name = "metaData"
                                select = "./SectMetaData"/>
   
   <xsl:choose>
    <xsl:when                     test = "/Summary/
                                           SummaryMetaData/
                                           SummaryAudience = 
                                                        'Health professionals'">
     <SummarySection>
      <xsl:attribute              name = "id">
       <xsl:value-of            select = "$sectionID"/>
       <xsl:value-of            select = "concat('_sid_', position())"/>
      </xsl:attribute>

      <xsl:choose>
       <xsl:when                  test = "$language = 'English'">
        <Title>Current Clinical Trials</Title>
        <xsl:apply-templates    select = "$slText_en_hp/
                                          MiscellaneousDocument/
                                          MiscellaneousDocumentText/
                                          Section[@cdr:id=$miscSection]/
                                          *[not(self::Title)]"
                                  mode = "MiscText">
           <xsl:with-param        name = "miscDocId"
                                select = "$sectionID"/>
           <xsl:with-param        name = "curLocation"
                                select = "$metaData"/>
        </xsl:apply-templates>
       </xsl:when>
       <xsl:when                  test = "$language = 'Spanish'">
        <Title>Ensayos cl&#xED;nicos en curso</Title>
        <xsl:apply-templates    select = "$slText_es_hp/
                                          MiscellaneousDocument/
                                          MiscellaneousDocumentText/
                                          Section[@cdr:id=$miscSection]/
                                          *[not(self::Title)]"
                                  mode = "MiscText">
           <xsl:with-param        name = "miscDocId"
                                select = "$sectionID"/>
           <xsl:with-param        name = "curLocation"
                                select = "$metaData"/>
        </xsl:apply-templates>
       </xsl:when>
      </xsl:choose>
     </SummarySection>
    </xsl:when>
    <!-- 
    Display additional paragraph at end of section for 'Patients'
    ============================================================= -->
    <xsl:when                     test = "/Summary/
                                          SummaryMetaData/
                                          SummaryAudience = 'Patients'">
     <xsl:choose>
      <xsl:when                   test = "$language = 'English'">
       <xsl:apply-templates     select = "$slText_en_pat/
                                          MiscellaneousDocument/
                                          MiscellaneousDocumentText/
                                          Section[@cdr:id=$miscSection]/
                                          *[not(self::Title)]"
                                  mode = "MiscText">
           <xsl:with-param        name = "miscDocId"
                                select = "$sectionID"/>
           <xsl:with-param        name = "curLocation"
                                select = "$metaData"/>
       </xsl:apply-templates>
      </xsl:when>
      <xsl:when                   test = "$language = 'Spanish'">
       <xsl:apply-templates     select = "$slText_es_pat/
                                          MiscellaneousDocument/
                                          MiscellaneousDocumentText/
                                          Section[@cdr:id=$miscSection]/
                                          *[not(self::Title)]"
                                  mode = "MiscText">
           <xsl:with-param        name = "miscDocId"
                                select = "$sectionID"/>
           <xsl:with-param        name = "curLocation"
                                select = "$metaData"/>
       </xsl:apply-templates>
      </xsl:when>
     </xsl:choose>
    </xsl:when>
   </xsl:choose>
  </xsl:if>
 </xsl:template>


 <!-- 
 ==================================================================
 Template to add the Trial Search String to sections with Diagnosis
 in the section meta data.
 ================================================================== -->  
 <xsl:template                    name = "addTrialSearchString">
  <xsl:param                      name = "metaDataDoc"
                                select = "''"/>
  <xsl:param                      name = "metaDataType"
                                select = "'Diagnosis'"/>
  <xsl:param                      name = "metaDataDocID"
                                select = "'CDR0000000000'"/>
  <xsl:param                      name = "audience"
                                select = "'Patients'"/>
  
  <xsl:choose>
   <xsl:when                      test = "position() = last()
                                          and
                                          not(position() = 1)">
    <xsl:choose>
     <xsl:when                    test = "/Summary/
                                           SummaryMetaData/
                                           SummaryLanguage = 'English'">
      <xsl:text> and </xsl:text>
     </xsl:when>
     <xsl:when                    test = "/Summary/
                                           SummaryMetaData/
                                           SummaryLanguage = 'Spanish'">
      <xsl:text> y </xsl:text>
     </xsl:when>
    </xsl:choose>
   </xsl:when>
   <xsl:when                      test = "not(position() = 1)">
    <xsl:text>, </xsl:text>
   </xsl:when>
  </xsl:choose>

  <xsl:choose>
   <xsl:when                      test = "$audience = 'Patients'">
    <xsl:element                  name = "ExternalRef">
     <xsl:attribute               name = "xref">
      <xsl:text>http://www.cancer.gov/Search/ClinicalTrialsLink.aspx</xsl:text>
      <xsl:text>?</xsl:text>
      <xsl:value-of             select = "$metaDataType"/>
      <xsl:text>=</xsl:text>
      <xsl:value-of             select = "number(substring($metaDataDocID,
                                                                      4))"/>
      <xsl:text>&amp;tt=1</xsl:text>
      <xsl:text>&amp;format=1</xsl:text>
      <xsl:text>&amp;cn=1</xsl:text>
     </xsl:attribute>
     <xsl:value-of              select = "$metaDataDoc"/>
    </xsl:element>
   </xsl:when>
   <!--
   HP Section
   ========================================================== -->
   <xsl:otherwise>
    <xsl:call-template            name = "makeSearchString">
     <xsl:with-param              name = "metaDataType"
                                select = "$metaDataType"/>
     <xsl:with-param              name = "metaDataDocID"
                                select = "$metaDataDocID"/>
     <xsl:with-param              name = "metaDataDoc"
                                select = "$metaDataDoc"/>
    </xsl:call-template>
   </xsl:otherwise>
  </xsl:choose>

 </xsl:template>


 <!-- 
 ==================================================================
 
 ================================================================== -->  
 <xsl:template                    name = "makeSearchString">
  <xsl:param                      name = "metaDataDoc"
                                select = "''"/>
  <xsl:param                      name = "metaDataType"
                                select = "'Diagnosis'"/>
  <xsl:param                      name = "metaDataDocID"
                                select = "'CDR0000000000'"/>
  <xsl:param                      name = "audience"
                                select = "'patient'"/>

  <xsl:variable                   name = "trialType">
   <xsl:choose>
    <xsl:when                     test = "$sumType = 'Supportive care'">
     <xsl:text>2</xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>1</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>

    <xsl:element                  name = "ExternalRef">
     <xsl:attribute               name = "xref">

      <xsl:choose>
       <xsl:when                  test = "$metaDataType = 'Diagnosis'">
        <xsl:text>http://www.cancer.gov/Search</xsl:text>
        <xsl:text>/ClinicalTrialsLink.aspx?</xsl:text>
        <xsl:value-of            select = "$metaDataType"/>
        <xsl:text>=</xsl:text>
        <xsl:value-of            select = "number(substring($metaDataDocID,
                                                                       4))"/>
        <xsl:text>&amp;tt=</xsl:text>
        <xsl:value-of            select = "$trialType"/>
        <xsl:text>&amp;format=2</xsl:text>
        <xsl:text>&amp;cn=1</xsl:text>
       </xsl:when>
       <xsl:when                  test = "$metaDataType = 'Intervention'">
        <xsl:text>http://www.cancer.gov/Search</xsl:text>
        <xsl:text>/ClinicalTrialsLink.aspx?</xsl:text>
        <xsl:text>idtype=5&amp;id=</xsl:text>
        <xsl:value-of            select = "number(substring($metaDataDocID,
                                                                       4))"/>
        <xsl:text>&amp;tt=</xsl:text>
        <xsl:value-of            select = "$trialType"/>
        <xsl:text>&amp;format=2</xsl:text>
        <xsl:text>&amp;cn=1</xsl:text>
       </xsl:when>
       <xsl:when                  test = "$metaDataType = 'Drug'">
        <xsl:text>http://www.cancer.gov/Search</xsl:text>
        <xsl:text>/ClinicalTrialsLink.aspx?</xsl:text>
        <xsl:text>idtype=1&amp;id=</xsl:text>
        <xsl:value-of            select = "number(substring($metaDataDocID,
                                                                       4))"/>
        <xsl:text>&amp;tt=</xsl:text>
        <xsl:value-of            select = "$trialType"/>
        <xsl:text>&amp;format=2</xsl:text>
        <xsl:text>&amp;cn=1</xsl:text>
       </xsl:when>
      </xsl:choose>
     </xsl:attribute>
     <xsl:value-of              select = "$metaDataDoc"/>
    </xsl:element>
 </xsl:template>


 <!-- 
 =========================================================================
 ========================================================================= -->
<!-- 
 <xsl:template                    name = "MiscDiagnosis">
  <xsl:variable                   name = "MiscInfo" 
                                select = "document(concat('cdr:name:',
                                                        'TEST - VE TrialSearch',
                                                        ';Standard wording',
                                                          '/lastp'))"/>
  
  <xsl:apply-templates          select = "$MiscInfo/
                                            MiscellaneousDocument/
                                            MiscellaneousDocumentText/
                                            Section/Para"
                                  mode = "trialSearch"/>
 </xsl:template>
-->

</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>