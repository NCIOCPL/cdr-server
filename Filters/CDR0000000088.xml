<?xml version = "1.0" encoding="utf-8"?>
<!-- $Id$ -->
<!-- Filter title: Terminology QC Report Filter -->
<!--
================================================================
$Id$

Filter to create a Terminology Content QC Report
   Written      10/18/2001  C.Burg   
   Made Tabular  6/26/2003  Nanci 

BZIssue::5166 - QC reports showing in table format

================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr"
                               version = "1.0">

 <xsl:output                    method = "html" 
                                indent = "no"
                              encoding = "utf-8"/>
  
 <xsl:include  href = "cdr:name:Module: Attribute Sets"/>
 <xsl:include  href = "cdr:name:Module: InLine Markup Formatter"/>
 <xsl:include  href = "cdr:name:Module: Table Formatter"/>
 <xsl:include  href = "cdr:name:Module: STYLE Default"/>

 <xsl:variable                    name = "docID"
                                select = "document('cdrutil:/docid')"/>
 <!--
 ======================================================================
 Main Template
 ====================================================================== -->
 <xsl:template                   match = "/">
  <!-- <!DOCTYPE HTML PUBLIC '-//IETF//DTD HTML//EN' /> -->
  <HTML>
   <HEAD>
    <xsl:variable                 name = "cdrdocs" 
                                select = "document('cdrx:/*/CdrCtl')"/>
    <TITLE>
     <xsl:value-of              select = "concat('CDR', 
                                           number(
                                           substring-after($docID, 'CDR')))"/>
     <xsl:text>: </xsl:text>
     <xsl:value-of              select = "substring-before(
                                           concat($cdrdocs/CdrDocCtl/
                                                  DocTitle, ';'), ';')"/> 
    </TITLE>
    <STYLE type='text/css'>
     <xsl:call-template           name = "defaultStyle"/>  
    </STYLE>
   </HEAD>
   <BASEFONT                      FACE = 'Arial, Helvetica, sans-serif' />
   <xsl:apply-templates         select = "Term"/>
  </HTML>
 </xsl:template>


 <!-- 
 ===================================================================
 Generate the HTML for the Terminology QC Report
 =================================================================== -->
 <xsl:template                   match = "Term">
  <BODY>

  <!-- 
  ==================================================================
  Display Report heading and subheading 
  ================================================================== -->
  <b>
   <font size='4'>
    <center>
     <xsl:text>Terminology</xsl:text>
     <br/>
     <xsl:text>QC Report</xsl:text>
    </center>
   </font>
   <font size='3'>
    <center>
     <xsl:value-of              select = "document(concat('cdrutil:/date/%25B',
                                                          ' %25#d, %25Y %25#I',
                                                          ':%25M% 25p'))"/>
    </center>
   </font>
  </b>
  <p/>

  <!-- 
  ====================================================================
  Display CDR ID
  ==================================================================== -->
  <b>
   <font size='4'>
    <xsl:value-of               select = "concat('CDR', 
                                           number(
                                           substring-after($docID, 'CDR')))"/>
   </font>
  </b>
  <p/>

  <!-- 
  ===================================================================
  Display preferred name of term and the optionally following comment
  =================================================================== -->
  <xsl:for-each                 select = "PreferredName">
   <xsl:call-template             name = "elementAndComment">
    <xsl:with-param               name = "myElement"
                                select = "."/>
   </xsl:call-template>
  </xsl:for-each>

  <p/>

  <!-- 
  ====================================================================
  If other names, display them, including type,review status 
  ==================================================================== -->
  <span class='big'>Other Names</span>

  <xsl:apply-templates          select = "OtherName"/>
  <p/>

  <!-- 
  ======================================================================
  Display definitions
  ====================================================================== -->
  <span class='big'>Definition</span>
  <xsl:apply-templates          select = "Definition"/>
 
  <!-- 
  =================================================================
  Display TermType, SemanticType, and TermRelationship 
  ================================================================= -->
  <xsl:apply-templates          select = "TermType"/>
  <xsl:apply-templates          select = "SemanticType"/>
  <xsl:apply-templates          select = "CTGovInterventionType"/>
  <xsl:apply-templates          select = "TermRelationship"/>

  <!-- 
  ===================================================================
  Display term status and comment if available 
  =================================================================== -->
  <span class='big'>Term Status</span>

  <xsl:for-each                 select = "TermStatus">
   <xsl:call-template             name = "elementAndComment">
    <xsl:with-param               name = "myElement"
                                select = "."/>
   </xsl:call-template>
  </xsl:for-each>

  <p/>

  <xsl:apply-templates          select = "MenuInformation"/>

  <!-- 
  ===================================================================
  Display Record Information
  ================================================================ -->
  <span class='big'>Record Information</span>

  <xsl:variable                   name = "cdrmydoc" 
                                select = "document('cdrx:/*/CdrCtl')"/>

  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Date Created</b>
    </td>
    <td class="qc_td">
     <xsl:value-of              select = "$cdrmydoc/CdrDocCtl/Create/Date"/>
    </td>
   </tr>
   <tr>
    <td class="qc_td">
     <b>User</b>
    </td>
    <td class="qc_td">
     <xsl:value-of              select = "$cdrmydoc/CdrDocCtl/Create/User"/>
    </td>
   </tr>
   <tr>
    <td class="qc_td">
     <b>Date Modified</b>
    </td>
    <td class="qc_td">
     <xsl:value-of              select = "$cdrmydoc/CdrDocCtl/Modify/Date"/>
    </td>
   </tr>
   <tr>
    <td class="qc_td">
     <b>User</b>
    </td>
    <td class="qc_td">
     <xsl:value-of              select = "$cdrmydoc/CdrDocCtl/Modify/User"/>
    </td>
   </tr>
  </table>

 
  <!-- 
  Comment below required exactly as given for Concept/Term Review Report
  ====================================================================== --> 
  <xsl:comment>@@TERMTREE@@</xsl:comment>

  </BODY>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to display the TermStatus and the optional Comment that's
 following.
 This needs to be done in a template since there may exist multiple
 Comment elements as children of the root node.
 =================================================================== -->
 <xsl:template                   match = "TermStatus">

  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Status</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of              select = "."/>
    </td>
   </tr>

   <xsl:if                        test = "following-sibling::Comment">
    <tr>
     <td        xsl:use-attribute-sets = "cell1of2">
      <b>Comment</b>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:value-of             select = "following-sibling::Comment"/>
     </td>
    </tr>
   </xsl:if>
  </table>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to display the element and the optional Comment that's
 following.
 This needs to be done in a template since there may exist multiple
 Comment elements as children of the root node.
 =================================================================== -->
 <xsl:template                    name = "elementAndComment">
  <xsl:param                      name = "myElement"/>
                                
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <xsl:choose>
      <xsl:when                    test = "name() = 'PreferredName'">
       <span class="big">Preferred Name</span>
      </xsl:when>
      <xsl:otherwise>
       <b>Status</b>
      </xsl:otherwise>
     </xsl:choose>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of              select = "$myElement"/>
    </td>
   </tr>
<!--
   <xsl:if                        test = "following-sibling::Comment">
-->
   <xsl:if                        test="following-sibling::*[1][self::Comment]">
    <tr>
     <td        xsl:use-attribute-sets = "cell1of2">
      <b>Comment</b>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:value-of             select = "following-sibling::Comment"/>
     </td>
    </tr>
   </xsl:if>
  </table>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to display the Other Name elements
 =================================================================== -->
 <xsl:template                   match = "OtherName">
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>
      <u>Name</u>
     </b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of              select = "OtherTermName"/>
    </td>
   </tr>
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Type</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:apply-templates       select = "OtherNameType"/>
    </td>
   </tr>

   <!--
   If no Source Information is available just add a record to the 
   table to this effect.  Otherwise create a new table.
   =============================================================== -->
   <xsl:if                        test = "not(SourceInformation)">
    <tr>
     <td class="qc_td">
      <b>Source Information</b>
     </td>
     <td class="qc_td">No source information</td>
    </tr>
   </xsl:if>
  </table>

  <xsl:if                         test = "SourceInformation">
   <table       xsl:use-attribute-sets = "table">
    <tr>
     <td class="qc_td" colspan = "2">
      <b>Source Information</b>
     </td>
    </tr>

    <xsl:apply-templates        select = "SourceInformation"/>

   </table>
  </xsl:if>   

  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Review Status</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of  select = "ReviewStatus"/>
    </td>
   </tr>
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Comment</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of  select = "Comment"/>
    </td>
   </tr>
  </table>
  <p/>
 </xsl:template>



 <!-- 
 ===================================================================
 Template to display the OtherNameType values
 =================================================================== -->
 <xsl:template                   match = "OtherNameType">
  <xsl:value-of                 select = "."/>
  <br/>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to display the SourceInformation element
 =================================================================== -->
 <xsl:template                   match = "SourceInformation">
  <xsl:apply-templates          select = "ReferenceSource |
                                          VocabularySource"/>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to display the ReferenceSource element
 =================================================================== -->
 <xsl:template                   match = "ReferenceSource">
  <tr>
   <td         xsl:use-attribute-sets = "cell1iof2"> </td>
   <td         xsl:use-attribute-sets = "cell2iof2">
    <b>Reference Source</b>
   </td>
   <td class="qc_td">
    <xsl:value-of               select = "."/>
   </td>
  </tr>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to display the VocabularySource element
 =================================================================== -->
 <xsl:template                   match = "VocabularySource">
  <tr>
   <td         xsl:use-attribute-sets = "cell1iof2"> </td>
   <td         xsl:use-attribute-sets = "cell2iof2">
    <b>Vocabulary Source</b>
   </td>
   <td         xsl:use-attribute-sets = "cell2of2">
    <xsl:value-of               select = "SourceCode"/>
   </td>
  </tr>
  <tr>
   <td         xsl:use-attribute-sets = "cell1iof2"> </td>
   <td         xsl:use-attribute-sets = "cell2iof2">
    <b>Vocabulary Source Term Type</b>
   </td>
   <td         xsl:use-attribute-sets = "cell2of2">
    <xsl:value-of               select = "SourceTermType"/>
   </td>
  </tr>
  <tr>
   <td         xsl:use-attribute-sets = "cell1iof2"> </td>
   <td         xsl:use-attribute-sets = "cell2iof2">
    <b>Vocabulary Source Term ID</b>
   </td>
   <td         xsl:use-attribute-sets = "cell2of2">
    <xsl:value-of               select = "SourceTermId"/>
   </td>  
  </tr>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to Display Definition Elements
 =================================================================== -->
 <xsl:template                   match = "Definition">
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Text</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:apply-templates       select = "DefinitionText"/>
    </td>
   </tr>
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Type</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of              select = "DefinitionType"/>
    </td>
   </tr>
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Source(Name,ID)</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of              select = "DefinitionSource"/>
    </td>
   </tr>
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Comment</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of              select = "Comment"/>
    </td>
   </tr>
  </table>
  <p/>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to Display TermType 
 =================================================================== -->
 <xsl:template                   match = "TermType">
  <span class='big'>Term Type</span>
 
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Name</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <table cellspacing = "0" cellpadding = "0">
      <xsl:for-each             select = "TermTypeName">
       <tr>
        <td class="qc_td">
         <xsl:value-of          select = "."/>
        </td>
       </tr>
      </xsl:for-each>
     </table> 
    </td>
   </tr>
  </table>
  <br />
 </xsl:template>


 <!-- 
 ===================================================================
 Template to Display SemanticType 
 =================================================================== -->
 <xsl:template                   match = "SemanticType">
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Semantic Type</b>
    </td>

    <td class="qc_td">
     <table cellspacing = "0" cellpadding = "0">
      <xsl:for-each             select = "Term/PreferredName">
       <tr>
        <td class="qc_td"><xsl:value-of       select = "."/>
        </td>
       </tr>
      </xsl:for-each>
     </table>
    </td>
   </tr>
  </table>
  <p/>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to Display CTGovInterventionType 
 =================================================================== -->
 <xsl:template                   match = "CTGovInterventionType">
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>CTGov Intervention Type</b>
    </td>
    <td class="qc_td">
     <xsl:value-of       select = "."/>
    </td>
   </tr>
  </table>
  <p/>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to Display TermRelationship
 =================================================================== -->
 <xsl:template                   match = "TermRelationship">
  <span class='big'>Term Relationship</span>
  <xsl:apply-templates          select = "ParentTerm"/>
  <xsl:apply-templates          select = "RelatedTerm"/>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to Display ParentTerm
 =================================================================== -->
 <xsl:template                   match = "ParentTerm">
  <table        xsl:use-attribute-sets = "table">
  <xsl:for-each                 select = "TermId/Term">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>
      <u>Parent Term</u>
     </b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of              select = "PreferredName"/>
    </td>
   </tr>
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Term ID</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">


     <xsl:value-of              select = "concat('CDR', 
                                           number(
                                           substring-after(@cdr:ref, 'CDR')))"/>
    </td>
   </tr>
   </xsl:for-each>
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Parent Type</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of              select = "ParentType"/>
    </td>
   </tr>
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Comment</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:if                      test = "Comment">
      <xsl:value-of             select = "Comment"/>
     </xsl:if>
    </td>
   </tr>
  </table>
  <p/>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to Display RelatedTerm
 =================================================================== -->
 <xsl:template                   match = "RelatedTerm">
  <xsl:for-each                 select = "TermId/Term">
   <table       xsl:use-attribute-sets = "table">
    <tr>
     <td        xsl:use-attribute-sets = "cell1of2">
      <b>
       <u>Related Term</u>
      </b>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:value-of             select = "PreferredName"/>
     </td>
    </tr>
   </table>
   <table       xsl:use-attribute-sets = "table">
    <tr>
     <td        xsl:use-attribute-sets = "cell1of2">
      <b>Term ID</b>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:value-of             select = "concat('CDR', 
                                           number(
                                           substring-after(@cdr:ref, 'CDR')))"/>
     </td>
    </tr>
    <xsl:if                       test = "../../RelationshipType">
     <tr>
      <td class="qc_td">
       <b>Relationship Type</b>
      </td>
      <td class="qc_td">
       <xsl:value-of            select = "../../RelationshipType"/>
      </td>
     </tr>
    </xsl:if>
    <tr>
     <td valign = "top">
      <b>Comment Type</b>
     </td>
     <td class="qc_td">
      <xsl:value-of             select = "Comment"/>
     </td>
    </tr>
   </table>
   <p/>
  </xsl:for-each>
  <p/>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to Display Menu Information
 =================================================================== -->
 <xsl:template                   match = "MenuInformation">
  <hr/>
  <span class='big'>Menu Information</span>

  <ol>
   <xsl:apply-templates         select = "MenuItem"/>
  </ol>
  <p/>
  <hr/>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to Display Menu Items
 =================================================================== -->
 <xsl:template                   match = "MenuItem">
  <li>
   <b>
    <u>Menu Item</u>
   </b>
   <br />
   <table       xsl:use-attribute-sets = "table">
    <tr>
     <td        xsl:use-attribute-sets = "mcell1of2">
      <b>Menu Type</b>
     </td>
     <td        xsl:use-attribute-sets = "mcell2of2">
      <xsl:value-of             select = "MenuType"/>
     </td>
    </tr>
   </table>

   <table       xsl:use-attribute-sets = "table">
    <xsl:apply-templates        select = "MenuParent"/>
   </table>

   <table       xsl:use-attribute-sets = "table">
     <tr>
      <td       xsl:use-attribute-sets = "mcell1of2">
       <b>Display Name</b>
      </td>
      <td       xsl:use-attribute-sets = "mcell2of2">
       <xsl:value-of            select = "DisplayName"/>
      </td>
     </tr>
      <tr>
       <td class="qc_td">
        <b>Sort Order</b>
       </td>
       <td class="qc_td">
        <xsl:value-of           select = "@SortOrder"/>
       </td>
      </tr>
      <tr>
       <td class="qc_td">

        <b>MenuStatus</b>
       </td>
       <td class="qc_td">
        <xsl:value-of           select = "MenuStatus"/>
       </td>
      </tr>
      <tr>
       <td class="qc_td">
        <b>Entered By</b>
       </td>
       <td class="qc_td">
        <xsl:value-of           select = "EnteredBy"/>
       </td>
      </tr>
      <tr>
       <td class="qc_td">
        <b>EntryDate</b>
       </td>
       <td class="qc_td">
        <xsl:value-of           select = "EntryDate"/>
       </td>
      </tr>
      <tr>
       <td valign = "top">
        <b>Comment</b>
       </td>
       <td class="qc_td">
        <xsl:value-of           select = "Comment"/>
       </td>
      </tr>
    </table>
    <br/>
  </li>
 </xsl:template>


 <!-- 
 ===================================================================
 Template to Display Menu Parents
 =================================================================== -->
 <xsl:template                  match = "MenuParent">
  <tr>
   <td         xsl:use-attribute-sets = "mcell1of2">
    <b>MenuParent</b>
   </td>
   <td         xsl:use-attribute-sets = "mcell2of2">
    <xsl:value-of              select = "Term/PreferredName"/>
   </td>
  </tr>
 </xsl:template>
</xsl:transform>
