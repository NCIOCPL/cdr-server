<CdrDoc Type='Filter' Id='CDR0000000054'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">DocTitle for OutOfScopeProtocol</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
  <xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                 version="1.0" 
                    xmlns:cdr="cips.nci.nih.gov/cdr">
                                      
                
   <xsl:output method="text"/>
   <xsl:template match="OutOfScopeProtocol">
<xsl:variable name="PIDs" select="concat(ProtocolIDs/PrimaryID/IDString,';',ProtocolIDs/OtherID/IDString,';',ProtocolTitle/TitleText)"/>
  <xsl:value-of select="substring($PIDs,1,255)"/>

   
<!--<xsl:for-each select="ProtocolIDs">
  <xsl:value-of select="PrimaryID/IDstring"/>;
</xsl:for-each>
<xsl:for-each select="ProtocolIDs/OtherID">
  <xsl:value-of select="IDString"/>;<xsl:text/>
 </xsl:for-each>
<xsl:for-each select="ProtocolTitle">
 <xsl:choose>
 <xsl:when test="string-length(TitleText &lt; 255)">
<xsl:apply-templates select="TitleText"/>
</xsl:when>

<xsl:otherwise>
<xsl:value-of select="substring(TitleText,1,255)"/>
</xsl:otherwise>
</xsl:choose>
</xsl:for-each>-->
</xsl:template>
</xsl:transform>]]>
</CdrDocXml>
</CdrDoc>