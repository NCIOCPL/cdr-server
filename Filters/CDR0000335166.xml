<?xml version='1.0' encoding='utf-8'?>
<!-- $Id$ -->
<!-- Filter title: Module: Checkbox Formatter -->
<!-- 

BZIssue::4751 - Modify BU Reports to display LOERefs
BZIssue::4919 - [Summary] QC Report Bugs
BZIssue::4967 - [Summary] Modification to QC Reports to Show/Hide 
                Certain Comments
BZIssue::5075 - [Summary] No definition texts for Spanish B/U QC report
BZIssue::5249 - Standard wording in Patient QC report not displaying in green

===============================================================
Filter to create Vendor Genetics Professionals XML documents 
=============================================================== -->
<xsl:transform               xmlns:xsl = 'http://www.w3.org/1999/XSL/Transform'
                             xmlns:cdr = 'cips.nci.nih.gov/cdr'
                               version = '1.0'
               exclude-result-prefixes = 'cdr'>

 <!-- 
 Checkbox parameters passed via the Web interface
 ==================================================== -->
 <xsl:param                       name = "DisplayGlossaryTermList"/>
 <xsl:param                       name = "DisplayLOETermList"/>
 <xsl:param                       name = "DisplayComments"
                                select = "'N'"/>
 <xsl:param                       name = "SourceComments"
                                select = "'N'"/>
 <xsl:param                       name = "DurationComments"
                                select = "'N'"/>
 <xsl:param                       name = "IncludeExtPerm"
                                select = "'N'"/>
 <xsl:param                       name = "IncludeIntAdv"
                                select = "'N'"/>
 <xsl:param                       name = "ShowStandardWording"
                                select = "'N'"/>
 <xsl:param                       name = "DisplayImages"
                                select = "'N'"/>
 <xsl:param                       name = "DisplayCitations"
                                select = "'Y'"/>

 <!-- 
 ================================================================
 Display a Table of Glossary Terms at the end of Patient Summary 
 QC Report if the 'Include Glossary Terms' checkbox is checked.
 ================================================================ -->
 <xsl:template                   match = "GlossaryTerms">
  <xsl:if                         test = "$DisplayGlossaryTermList='Y'">
   <hr />
   <b>
    <h1>
     <xsl:text>Table of Glossary Terms</xsl:text>
    </h1>
   </b>
   <xsl:if                        test = "$whoAmI = 'SummaryPatBU'">
    <button id="gtButton" 
        onclick="toggleText()">Click to display deleted Glossary Terms</button>
        
    <p/>
   </xsl:if>
   <table                       border = "1"> 
    <tr>
     <th>
      <b>
       <xsl:text>Term Text</xsl:text>
      </b>
     </th>

     <th>
      <b>
       <xsl:text>Term Name</xsl:text>
      </b>
     </th>
     <th>
      <b>
       <xsl:text>Definition Text</xsl:text>
      </b>
     </th>
    </tr>
           
    <xsl:for-each               select = "GlossaryTerm">
     <tr>
       <!--
       We want to be able to turn display of the rows on/off
       ===================================================== -->
       <xsl:choose>
        <xsl:when                 test = "GlossaryTermRef/
                                          GlossaryText/
                                          Deletion">
         <xsl:attribute           name = "class">
          <xsl:text>gtTrDeletion</xsl:text>
         </xsl:attribute>
        </xsl:when>
        <xsl:when                 test = "GlossaryTermRef/
                                          GlossaryText/
                                          Insertion">
         <xsl:attribute           name = "class">
          <xsl:text>gtTrInsertion</xsl:text>
         </xsl:attribute>
        </xsl:when>
       </xsl:choose>
       <xsl:choose>
        <xsl:when                 test = "GlossaryTermRef/
                                          GlossaryText/
                                          Deletion">
         <xsl:choose>
          <xsl:when               test = "GlossaryTermRef/
                                          GlossaryText/
                                          Deletion/
                                          @RevisionLevel = 'proposed'">
           <td>
            <span class="deleteproposed">
             <xsl:value-of      select = "GlossaryTermRef/
                                          GlossaryText/
                                          Deletion"/>
            </span>
           </td>
           <td>
            <span class="deleteproposed">
             <xsl:value-of      select = "GlossaryTermName"/>
            </span>
           </td>
           <td>
            <span class="deleteproposed">
             <xsl:apply-templates select = "GlossaryTermConcept/
                                            TermDefinition/
                                            DefinitionText         |
                                            GlossaryTermConcept/
                                            TranslatedTermDefinition/
                                            DefinitionText"/>
            </span>
           </td>
          </xsl:when>
          <xsl:otherwise>
           <td>
            <span class="deleteapproved">
             <xsl:value-of      select = "GlossaryTermRef/
                                          GlossaryText/
                                          Deletion"/>
            </span>
           </td>
           <td>
            <span class="deleteapproved">
             <xsl:value-of      select = "GlossaryTermName"/>
            </span>
           </td>
           <td>
            <span class="deleteapproved">
             <xsl:apply-templates select = "GlossaryTermConcept/
                                            TermDefinition/
                                            DefinitionText         |
                                            GlossaryTermConcept/
                                            TranslatedTermDefinition/
                                            DefinitionText"/>
            </span>
           </td>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:when>
        <xsl:when                 test = "GlossaryTermRef/
                                          GlossaryText/
                                          Insertion">
         <xsl:choose>
          <xsl:when               test = "GlossaryTermRef/
                                          GlossaryText/
                                          Insertion/
                                          @RevisionLevel = 'proposed'">
           <td>
            <span class="insertproposed">
             <xsl:value-of      select = "GlossaryTermRef/
                                          GlossaryText/
                                          Insertion"/>
            </span>
           </td>
           <td>
            <span class="insertproposed">
             <xsl:value-of      select = "GlossaryTermName"/>
            </span>
           </td>
           <td>
            <span class="insertproposed">
             <xsl:apply-templates select = "GlossaryTermConcept/
                                            TermDefinition/
                                            DefinitionText         |
                                            GlossaryTermConcept/
                                            TranslatedTermDefinition/
                                            DefinitionText"/>
            </span>
           </td>
          </xsl:when>
          <xsl:otherwise>
           <td>
            <span class="insertapproved">
             <xsl:value-of      select = "GlossaryTermRef/
                                          GlossaryText/
                                          Insertion"/>
            </span>
           </td>
           <td>
            <span class="insertapproved">
             <xsl:value-of      select = "GlossaryTermName"/>
            </span>
           </td>
           <td>
            <span class="insertapproved">
             <xsl:apply-templates select = "GlossaryTermConcept/
                                            TermDefinition/
                                            DefinitionText         |
                                            GlossaryTermConcept/
                                            TranslatedTermDefinition/
                                            DefinitionText"/>
            </span>
           </td>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
         <td>
          <xsl:value-of         select = "GlossaryTermRef/
                                          GlossaryText"/>
         </td>
         <td>
          <xsl:value-of         select = "GlossaryTermName"/>
         </td>
         <td>
          <xsl:apply-templates  select = "GlossaryTermConcept/
                                          TermDefinition/
                                          DefinitionText         |
                                          GlossaryTermConcept/
                                          TranslatedTermDefinition/
                                          DefinitionText"/>
         </td>
        </xsl:otherwise>
       </xsl:choose>
     </tr>
    </xsl:for-each>
   </table>
  </xsl:if>
 </xsl:template>


 <!-- 
 ================================================================
 Display a Table of LOEs at the end of a Summary QC Report if the
 'Include LOE Terms' checkbox is checked.
 ================================================================ -->
 <xsl:template                   match = "LOETerms">
  <xsl:if                         test = "$DisplayLOETermList='Y'">
   <hr />
   <b>
    <h1>
     <xsl:text>Table of Level of Evidence Terms</xsl:text>
    </h1>
   </b>
   <p/>
        
   <table                       border = "1"> 
    <tr>
     <th>
      <b>
       <xsl:text>Term Text</xsl:text>
      </b>
     </th>

     <th>
      <b>
       <xsl:text>Term Name</xsl:text>
      </b>
     </th>
     <th>
      <b>
       <xsl:text>Definition Text</xsl:text>
      </b>
     </th>
    </tr>
           
    <xsl:for-each               select = "LOETerm">
     <tr>
       <xsl:choose>
        <xsl:when                 test = "LOERef/
                                          GlossaryText/Deletion">
         <xsl:choose>
          <xsl:when               test = "LOERef/
                                          GlossaryText/Deletion/
                                          @RevisionLevel = 'proposed'">
           <td>
            <span class="deleteproposed">
             <xsl:value-of      select = "LOERef/
                                          GlossaryText/Deletion"/>
            </span>
           </td>
           <td>
            <span class="deleteproposed">
             <xsl:value-of      select = "GlossaryTermName"/>
            </span>
           </td>
           <td>
            <span class="deleteproposed">
             <xsl:apply-templates select = "GlossaryTermConcept/
                                            TermDefinition/
                                            DefinitionText         |
                                            GlossaryTermConcept/
                                            TranslatedTermDefinition/
                                            DefinitionText"/>
            </span>
           </td>
          </xsl:when>
          <xsl:otherwise>
           <td>
            <span class="deleteapproved">
             <xsl:value-of      select = "LOERef/
                                          GlossaryText/Deletion"/>
            </span>
           </td>
           <td>
            <span class="deleteapproved">
             <xsl:value-of      select = "GlossaryTermName"/>
            </span>
           </td>
           <td>
            <span class="deleteapproved">
             <xsl:apply-templates select = "GlossaryTermConcept/
                                            TermDefinition/
                                            DefinitionText         |
                                            GlossaryTermConcept/
                                            TranslatedTermDefinition/
                                            DefinitionText"/>
            </span>
           </td>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:when>
        <xsl:when                 test = "LOERef/
                                          GlossaryText/Insertion">
         <xsl:choose>
          <xsl:when               test = "LOERef/
                                          GlossaryText/Insertion/
                                          @RevisionLevel = 'proposed'">
           <td>
            <span class="insertproposed">
             <xsl:value-of      select = "LOERef/
                                          GlossaryText/Insertion"/>
            </span>
           </td>
           <td>
            <span class="insertproposed">
             <xsl:value-of      select = "GlossaryTermName"/>
            </span>
           </td>
           <td>
            <span class="insertproposed">
             <xsl:apply-templates select = "GlossaryTermConcept/
                                            TermDefinition/
                                            DefinitionText         |
                                            GlossaryTermConcept/
                                            TranslatedTermDefinition/
                                            DefinitionText"/>
            </span>
           </td>
          </xsl:when>
          <xsl:otherwise>
           <td>
            <span class="insertapproved">
             <xsl:value-of      select = "LOERef/
                                          GlossaryText/Insertion"/>
            </span>
           </td>
           <td>
            <span class="insertapproved">
             <xsl:value-of      select = "GlossaryTermName"/>
            </span>
           </td>
           <td>
            <span class="insertapproved">
             <xsl:apply-templates select = "GlossaryTermConcept/
                                            TermDefinition/
                                            DefinitionText         |
                                            GlossaryTermConcept/
                                            TranslatedTermDefinition/
                                            DefinitionText"/>
            </span>
           </td>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
         <td>
          <xsl:value-of         select = "LOERef/
                                          GlossaryText"/>
         </td>
         <td>
          <xsl:value-of         select = "GlossaryTermName"/>
         </td>
         <td>
          <xsl:apply-templates  select = "GlossaryTermConcept/
                                         TermDefinition/
                                         DefinitionText         |
                                         GlossaryTermConcept/
                                         TranslatedTermDefinition/
                                         DefinitionText"/>
         </td>
        </xsl:otherwise>
       </xsl:choose>
     </tr>
    </xsl:for-each>
   </table>
  </xsl:if>
 </xsl:template>


 <!--
 ======================================================================
 Template to handle the PlaceHolder/ReplacementText elements within the 
 DefinitionText.
 ====================================================================== -->
 <xsl:template                   match = "DefinitionText">
  <xsl:apply-templates/>
 </xsl:template>


 <!--
 ======================================================================
 Template to pick the right PlaceHolder text to insert in the 
 DefinitionText
 ====================================================================== -->
 <xsl:template                   match = "PlaceHolder">
  <xsl:variable                   name = "replace"
                                select = "@name"/>

  <xsl:choose>
  <xsl:when                       test = "@name = 'TERMNAME'">
   <xsl:value-of                select = "../../../../
                                          GlossaryTermName"/>
  </xsl:when>
  <xsl:when                       test = "../../
                                          ReplacementText[@name = $replace]">
   <xsl:value-of                select = "../../
                                          ReplacementText[@name = $replace]"/>
  </xsl:when>
  <xsl:otherwise>
   <xsl:value-of                select = "../../../../
                                          ReplacementText[@name = $replace]"/>
  </xsl:otherwise>
 </xsl:choose>
 </xsl:template>


 <!-- 
 ================================================================
 Display Comments - Redline/Strikeout

 The Comment template needs a little explaining:
 Comments are entered with three attributes in XMetaL that 
 control the display on the QC reports.  The three attributes are
   audience = [Internal | External]
   duration = [permanent]  (no value = non-permanent)
   source   = [advisory-board]  (no value = editorial-board)

 Based on these attributes the users want to be able to display
 certain combinations of comments and they are entering their 
 choice via the passed in parameters 
   DisplayComments - A[ll], I[nternal], E[xternal]
   DurationComments - A[ll], P[ermanent], R[regular]
   SourceComments - A[ll], E[ditorial], [ad]V[isory]
 These values are derived from three pairs of checkboxes on the 
 input page:
   Audience: Internal/External - On|Off
   Duration: permanent/regular - On|Off
   Source:   editorial/advisory - On|Off
 Whenever one of these checkboxes gets unchecked, i.e. 'Internal',
 these comments will *not* be shown on the QC report.  In the 
 example, if 'Internal' is unchecked then even if a permanent 
 comment exists and is checked to be displayed it will not be
 shown in the report because the condition 'do not show internal
 comments' would remove such a comment.
 The IF-statement in this templeate is taking care of this 
 situation.
 Note: The display of comments is being suppressed by setting the 
       respective CSS class to 'none' and defining the style to
       {display: none}

 It is getting interesting now because the users also want to 
 combine some of these situations which are by definition 
 mutually exclusive.  For instanse, we need to be able to display
 all internal comments *and* all permanents comments.  Under the 
 first IF-statement the external permanent comments would be 
 excluded but they need to be displayed as well.
 Similarily external comments should be displayed along with all
 advisory board comments.
 ================================================================ -->
 <xsl:template               match = "Comment |
                                      ResponseToComment" 
                              mode = "RS">

  <!-- xsl:text>111</xsl:text -->
  <xsl:variable               name = "myScope"
                            select = "name()"/>

  <xsl:if                     test = "substring(@audience, 1, 1) = 
                                                $DisplayComments
                                      or
                                      not(@audience) and $DisplayComments = 'I'
                                      or
                                      $DisplayComments = 'A'
                                      or 
                                      $whoAmI = 'DrugInfoSummary'">
   <!-- xsl:text>111a</xsl:text -->
   <xsl:choose>
    <xsl:when                 test = "Insertion">
     <xsl:choose>
      <xsl:when               test = "Insertion/@RevisionLevel = 'approved'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'cominsertappr'"/>
       </xsl:call-template>
      </xsl:when>   
      <xsl:when                 test = "Insertion/@RevisionLevel = 'proposed'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'cominsertprop'"/>
       </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
       <!-- xsl:text>HHH </xsl:text -->
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'cominsertappr'"/>
       </xsl:call-template>
      </xsl:otherwise>

     </xsl:choose>
    </xsl:when>
    <xsl:when                 test = "Deletion">
     <xsl:choose>
      <xsl:when               test = "Deletion/@RevisionLevel = 'approved'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'comdeleteappr'"/>
       </xsl:call-template>
      </xsl:when>   
      <xsl:when                 test = "Deletion/@RevisionLevel = 'proposed'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'comdeleteprop'"/>
       </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
       <!-- xsl:text>CCC </xsl:text -->
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'comdeleteappr'"/>
       </xsl:call-template>

      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <!-- Display the comments without insertion/deletion markup -->
    <xsl:otherwise>

     <!-- xsl:text>AAA </xsl:text -->
     <xsl:call-template       name = "listComment">
      <xsl:with-param         name = "myScope"
                            select = "$myScope"/>
     </xsl:call-template>

    </xsl:otherwise>
   </xsl:choose>
  </xsl:if>

  <xsl:call-template          name = "twoOptionsChecked">
   <xsl:with-param            name = "whereAmI"
                            select = "'111T'"/>
    <xsl:with-param           name = "myScope"
                            select = "$myScope"/>
  </xsl:call-template>

  <!--
  Ensure that permanent, external comments are displayed even when
  'Internal' has been selected
  ================================================================ -->
  <!-- 
  <xsl:if                     test = "@audience = 'External'
                                      and
                                      @duration = 'permanent'
                                      and
                                      $DisplayComments = 'I'
                                      and
                                      $IncludeExtPerm = 'Y'">
     <xsl:call-template       name = "listComment">
      <xsl:with-param         name = "myScope"
                            select = "$myScope"/>
     </xsl:call-template>
  </xsl:if>
  -->

 <!-- 
 Ensure that internal, advisory-board comments are displayed even
 when 'External' has been selected.
 ================================================================ -->
 <!-- 
 <xsl:if                     test = "@audience = 'Internal'
                                      and
                                      @source = 'advisory-board'
                                      and
                                      $SourceComments = 'E'
                                      and
                                      $IncludeIntAdv = 'Y'">
     <xsl:call-template       name = "listComment">
      <xsl:with-param         name = "myScope"
                            select = "$myScope"/>
     </xsl:call-template>
  </xsl:if>
  -->
 </xsl:template>


 <!-- 
 ================================================================
 Display the Comment elements with markup if the checkbox
 is checked.
 The comments are being displayed without insertion/deletion
 markup within insertion and are not displayed by default for 
 the deletions.
 ================================================================ -->
 <xsl:template               match = "Comment |
                                      ResponseToComment">

  <!-- xsl:text>222</xsl:text -->
  <xsl:variable               name = "myScope"
                            select = "name()"/>

  <xsl:if                     test = "substring(@audience, 1, 1) = 
                                                $DisplayComments
                                      or
                                      not(@audience) and $DisplayComments = 'I'
                                      or
                                      $DisplayComments = 'A'">
   <!-- xsl:text>222a</xsl:text -->
   <xsl:choose>
    <xsl:when                 test = "Insertion">
     <xsl:choose>
      <xsl:when               test = "Insertion/@RevisionLevel = 'approved'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'cominsertappr'"/>
       </xsl:call-template>
       <!-- 
       <span class="cominsertappr">
        <xsl:choose>
         <xsl:when            test = "$myScope = 'Comment'">
          <xsl:text> [</xsl:text>

          <xsl:choose>
           <xsl:when          test = "@duration = 'permanent'
                                      and
                                      @source   = 'advisory-board'">
            <xsl:text>Permanent-AB-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@duration = 'permanent'">
            <xsl:text>Permanent-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@source = 'advisory-board'">
            <xsl:text>AB-</xsl:text>
           </xsl:when>
          </xsl:choose>

          <xsl:text>Comment: </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:text> [Response: </xsl:text>
         </xsl:otherwise>
        </xsl:choose>
        <xsl:apply-templates/>
        <xsl:text>] </xsl:text>
       </span>
       -->
      </xsl:when>   
      <xsl:when               test = "Insertion/@RevisionLevel = 'proposed'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'cominsertprop'"/>
       </xsl:call-template>
       <!--
       <span class="cominsertprop">
        <xsl:choose>
         <xsl:when            test = "$myScope = 'Comment'">
          <xsl:text> [</xsl:text>

          <xsl:choose>
           <xsl:when          test = "@duration = 'permanent'
                                      and
                                      @source   = 'advisory-board'">
            <xsl:text>Permanent-AB-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@duration = 'permanent'">
            <xsl:text>Permanent-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@source = 'advisory-board'">
            <xsl:text>AB-</xsl:text>
           </xsl:when>
          </xsl:choose>

          <xsl:text>Comment: </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:text> [Response: </xsl:text>
         </xsl:otherwise>
        </xsl:choose>
        <xsl:apply-templates/>
        <xsl:text>] </xsl:text>
       </span>
       -->
      </xsl:when>
      <xsl:otherwise>
       <!-- xsl:text>GGG </xsl:text -->
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'cominsertappr'"/>
       </xsl:call-template>

      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:when                 test = "Deletion">
     <xsl:choose>
      <xsl:when               test = "Deletion/@RevisionLevel = 'approved'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'comdeleteappr'"/>
       </xsl:call-template>
       <!-- 
       <span class="comdeleteappr">
        <xsl:choose>
         <xsl:when            test = "$myScope = 'Comment'">
          <xsl:text> [</xsl:text>

          <xsl:choose>
           <xsl:when          test = "@duration = 'permanent'
                                      and
                                      @source   = 'advisory-board'">
            <xsl:text>Permanent-AB-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@duration = 'permanent'">
            <xsl:text>Permanent-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@source = 'advisory-board'">
            <xsl:text>AB-</xsl:text>
           </xsl:when>
          </xsl:choose>

          <xsl:text>Comment: </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:text> [Response: </xsl:text>
         </xsl:otherwise>
        </xsl:choose>

        <xsl:apply-templates/>
        <xsl:text>] </xsl:text>
       </span>
       -->
      </xsl:when>
      <xsl:when               test = "Deletion/@RevisionLevel = 'proposed'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'comdeleteprop'"/>
       </xsl:call-template>
       <!--
       <span class="comdeleteprop">
        <xsl:choose>
         <xsl:when            test = "$myScope = 'Comment'">
          <xsl:text> [</xsl:text>

          <xsl:choose>
           <xsl:when          test = "@duration = 'permanent'
                                      and
                                      @source   = 'advisory-board'">
            <xsl:text>Permanent-AB-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@duration = 'permanent'">
            <xsl:text>Permanent-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@source = 'advisory-board'">
            <xsl:text>AB-</xsl:text>
           </xsl:when>
          </xsl:choose>

          <xsl:text>Comment: </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:text> [Response: </xsl:text>
         </xsl:otherwise>
        </xsl:choose>
        <xsl:apply-templates/>
        <xsl:text>] </xsl:text>
       </span>
       -->
      </xsl:when>
      <xsl:otherwise>
       <!-- xsl:text>DDD </xsl:text -->
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'comdeleteappr'"/>
       </xsl:call-template>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <!-- Display the comments without insertion/deletion markup -->
    <xsl:otherwise>
     <!-- xsl:text>FFF </xsl:text -->
     <xsl:call-template       name = "listComment">
      <xsl:with-param         name = "myScope"
                            select = "$myScope"/>
     </xsl:call-template>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:if>

  <xsl:call-template          name = "twoOptionsChecked">
   <xsl:with-param            name = "whereAmI"
                            select = "'222T'"/>
    <xsl:with-param           name = "myScope"
                            select = "$myScope"/>
  </xsl:call-template>

  <!--
  Ensure that permanent, external comments are displayed even when
  'Internal' has been selected
  ================================================================ -->
  <!-- 
  <xsl:if                     test = "@audience = 'External'
                                      and
                                      @duration = 'permanent'
                                      and
                                      $DisplayComments = 'I'
                                      and
                                      $IncludeExtPerm = 'Y'">
   <xsl:call-template         name = "listComment">
    <xsl:with-param           name = "myScope"
                            select = "$myScope"/>
   </xsl:call-template>
  </xsl:if>
  -->

  <!-- 
  Ensure that internal, advisory-board comments are displayed even
  when 'External' has been selected.
  ================================================================ -->
  <!-- 
  <xsl:if                     test = "@audience = 'Internal'
                                      and
                                      @source = 'advisory-board'
                                      and
                                      $SourceComments = 'E'
                                      and
                                      $IncludeIntAdv = 'Y'">
   <xsl:call-template         name = "listComment">
    <xsl:with-param           name = "myScope"
                            select = "$myScope"/>
   </xsl:call-template>
  </xsl:if>
  -->

 </xsl:template>


 <!-- 
 ================================================================
 Display the Comment elements with markup if the checkbox
 is checked.
 The comments are being displayed without insertion/deletion
 markup within insertion and are not displayed by default for 
 the deletions.
 Note: Despite its mode name "compactNo" this template is used 
       for the compact ItemizedList content
 ================================================================ -->
 <xsl:template               match = "Comment |
                                      ResponseToComment"
                              mode = "compactNo">

  <xsl:variable               name = "myScope"
                            select = "name()"/>

  <xsl:if                     test = "substring(@audience, 1, 1) = 
                                                $DisplayComments
                                      or
                                      not(@audience) and $DisplayComments = 'I'
                                      or
                                      $DisplayComments = 'A'">
   <xsl:choose>
    <xsl:when                 test = "Insertion">
     <xsl:choose>
      <xsl:when               test = "Insertion/@RevisionLevel = 'approved'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'cominsertappr'"/>
       </xsl:call-template>
       <!-- 
       <span class="cominsertappr">
        <xsl:choose>
         <xsl:when            test = "$myScope = 'Comment'">
          <xsl:text> [</xsl:text>

          <xsl:choose>
           <xsl:when          test = "@duration = 'permanent'
                                      and
                                      @source   = 'advisory-board'">
            <xsl:text>Permanent-AB-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@duration = 'permanent'">
            <xsl:text>Permanent-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@source = 'advisory-board'">
            <xsl:text>AB-</xsl:text>
           </xsl:when>
          </xsl:choose>

          <xsl:text>Comment: </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:text> [Response: </xsl:text>
         </xsl:otherwise>
        </xsl:choose>
        <xsl:apply-templates/>
        <xsl:text>] </xsl:text>
       </span>
       -->
      </xsl:when>   
      <xsl:when               test = "Insertion/@RevisionLevel = 'proposed'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'cominsertprop'"/>
       </xsl:call-template>
       <!--
       <span class="cominsertprop">
        <xsl:choose>
         <xsl:when            test = "$myScope = 'Comment'">
          <xsl:text> [</xsl:text>

          <xsl:choose>
           <xsl:when          test = "@duration = 'permanent'
                                      and
                                      @source   = 'advisory-board'">
            <xsl:text>Permanent-AB-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@duration = 'permanent'">
            <xsl:text>Permanent-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@source = 'advisory-board'">
            <xsl:text>AB-</xsl:text>
           </xsl:when>
          </xsl:choose>

          <xsl:text>Comment: </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:text> [Response: </xsl:text>
         </xsl:otherwise>
        </xsl:choose>
        <xsl:apply-templates/>
        <xsl:text>] </xsl:text>
       </span>
       -->
      </xsl:when>
      <xsl:otherwise>
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'cominsertappr'"/>
       </xsl:call-template>

      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:when                 test = "Deletion">
     <xsl:choose>
      <xsl:when               test = "Deletion/@RevisionLevel = 'proposed'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'comdeleteprop'"/>
       </xsl:call-template>
       <!-- 
       <span class="comdeleteprop">
        <xsl:choose>
         <xsl:when            test = "$myScope = 'Comment'">
          <xsl:text> [</xsl:text>

          <xsl:choose>
           <xsl:when          test = "@duration = 'permanent'
                                      and
                                      @source   = 'advisory-board'">
            <xsl:text>Permanent-AB-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@duration = 'permanent'">
            <xsl:text>Permanent-</xsl:text>
           </xsl:when>
           <xsl:when          test = "@source = 'advisory-board'">
            <xsl:text>AB-</xsl:text>
           </xsl:when>
          </xsl:choose>

          <xsl:text>Comment: </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:text> [Response: </xsl:text>
         </xsl:otherwise>
        </xsl:choose>

        <xsl:apply-templates/>
        <xsl:text>] </xsl:text>
       </span>
       -->
      </xsl:when>
      <xsl:when               test = "Deletion/@RevisionLevel = 'approved'">
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'comdeleteappr'"/>
       </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
       <xsl:call-template     name = 'listComment'>
        <xsl:with-param       name = "myScope"
                            select = "$myScope"/>
        <xsl:with-param       name = "myCss"
                            select = "'comdeleteappr'"/>
       </xsl:call-template>

      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <!-- Display the comments without insertion/deletion markup -->
    <xsl:otherwise>
     <xsl:call-template       name = "listComment">
      <xsl:with-param         name = "myScope"
                            select = "$myScope"/>
     </xsl:call-template>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:if>

  <xsl:call-template          name = "twoOptionsChecked">
   <xsl:with-param            name = "whereAmI"
                            select = "'333T'"/>
    <xsl:with-param           name = "myScope"
                            select = "$myScope"/>
  </xsl:call-template>

  <!--
  Ensure that permanent, external comments are displayed even when
  'Internal' has been selected
  ================================================================ -->
  <!-- 
  <xsl:if                     test = "@audience = 'External'
                                      and
                                      @duration = 'permanent'
                                      and
                                      $DisplayComments = 'I'
                                      and
                                      $IncludeExtPerm = 'Y'">
   <xsl:call-template         name = "listComment">
    <xsl:with-param           name = "myScope"
                            select = "$myScope"/>
   </xsl:call-template>
  </xsl:if>
  -->

  <!-- 
  Ensure that internal, advisory-board comments are displayed even
  when 'External' has been selected.
  ================================================================ -->
  <!-- 
  <xsl:if                     test = "@audience = 'Internal'
                                      and
                                      @source = 'advisory-board'
                                      and
                                      $SourceComments = 'E'
                                      and
                                      $IncludeIntAdv = 'Y'">
   <xsl:call-template         name = "listComment">
    <xsl:with-param           name = "myScope"
                            select = "$myScope"/>
   </xsl:call-template>
  </xsl:if>
  -->

 </xsl:template>


 <!-- 
 ================================================================
 Display the StandardWording elements with markup if the checkbox
 is checked, otherwise just display regular text.
 ================================================================ -->
 <xsl:template               match = "StandardWording">
  <xsl:choose>                   
   <xsl:when                  test = "$ShowStandardWording = 'Y'">
    <xsl:element              name = "span">
     <xsl:attribute           name = "class">
      <xsl:text>standardWording</xsl:text>
     </xsl:attribute>
     <xsl:apply-templates/>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <xsl:apply-templates/>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ================================================================
 Template to create the Comment markup based on the specified and
 selected comment attributes.
 ================================================================ -->
 <xsl:template                name = "listComment">
  <xsl:param                  name = "myScope"/>
  <xsl:param                  name = "myCss"
                            select = "'commentnormal'"/>

  <xsl:element                name = "span">
   <xsl:attribute             name = "class">
    <xsl:value-of           select = "$myCss"/>

    <xsl:choose>
     <xsl:when                test = "$DisplayComments = 'A'">
      <xsl:choose>
       <xsl:when              test = "@audience = 'Internal'">
        <xsl:text> com_intern</xsl:text>
       </xsl:when> 
       <xsl:otherwise>
        <xsl:text> com_extern</xsl:text>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:when                test = "$DisplayComments = 'I'">
      <xsl:text> com_intern</xsl:text>
     </xsl:when>
     <xsl:when                test = "$DisplayComments = 'E'">
      <xsl:text> com_extern</xsl:text>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text> none</xsl:text>
     </xsl:otherwise>
    </xsl:choose>

    <xsl:choose>
     <xsl:when                test = "$SourceComments = 'A'">
      <xsl:choose>
       <xsl:when              test = "@source = 'advisory-board'">
        <xsl:text> com_adv</xsl:text>
       </xsl:when> 
       <xsl:otherwise>
        <xsl:text> com_edi</xsl:text>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:when                test = "$SourceComments = 'V'
                                     and
                                     @source = 'advisory-board'">
      <xsl:text> com_adv</xsl:text>
     </xsl:when>
     <xsl:when                test = "$SourceComments = 'E'
                                      and
                                      not(@source = 'advisory-board')">
      <xsl:text> com_edi</xsl:text>
     </xsl:when>
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when              test = "$SourceComments = 'E'
                                      and
                                      @source = 'advisory-board'
                                      and
                                      $IncludeIntAdv = 'Y'">
        <xsl:text> com_adv</xsl:text>
       </xsl:when>
       <xsl:otherwise>
        <xsl:text> none</xsl:text>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>

    <xsl:choose>
     <xsl:when                test = "$DurationComments = 'A'">
      <xsl:choose>
       <xsl:when              test = "@duration = 'permanent'">
        <xsl:text> com_perm</xsl:text>
       </xsl:when> 
       <xsl:otherwise>
        <xsl:text> com_temp</xsl:text>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:when                test = "$DurationComments = 'P'
                                        and
                                        @duration = 'permanent'">
      <xsl:text> com_perm</xsl:text>
     </xsl:when>
     <xsl:when                test = "$DurationComments = 'R'
                                        and
                                        not(@duration = 'permanent')">
      <xsl:text> com_temp</xsl:text>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text> none</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>

   <xsl:choose>
    <xsl:when                 test = "$myScope = 'Comment'">
     <xsl:text> [</xsl:text>

     <!-- Adding Comment Prefix -->
     <xsl:choose>
      <xsl:when               test = "@duration = 'permanent'
                                      and
                                      @source   = 'advisory-board'">
       <xsl:text>Permanent-AB-</xsl:text>
      </xsl:when>
      <xsl:when               test = "@duration = 'permanent'">
       <xsl:text>Permanent-</xsl:text>
      </xsl:when>
      <xsl:when               test = "@source = 'advisory-board'">
       <xsl:text>AB-</xsl:text>
      </xsl:when>
     </xsl:choose>

     <xsl:text>Comment: </xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text> [Response: </xsl:text>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates/>
   <xsl:text>] </xsl:text>
  </xsl:element>
 </xsl:template>

 <!--
 ================================================================
 Template that checks if a comment needs to be displayed due to 
 the entry of two options (internal + permanent, external + adv)
 ================================================================ -->
 <xsl:template                name = "twoOptionsChecked">
  <xsl:param                  name = "myScope"/>
  <xsl:param                  name = "whereAmI"
                            select = "'999'"/>

  <!-- xsl:value-of             select = "$whereAmI"/ -->

  <!--
  Ensure that permanent, external comments are displayed even when
  'Internal' has been selected
  ================================================================ -->
  <xsl:if                     test = "@audience = 'External'
                                      and
                                      @duration = 'permanent'
                                      and
                                      $DisplayComments = 'I'
                                      and
                                      $IncludeExtPerm = 'Y'">
     <xsl:call-template       name = "listComment">
      <xsl:with-param         name = "myScope"
                            select = "$myScope"/>
     </xsl:call-template>
  </xsl:if>

  <!-- 
  Ensure that internal, advisory-board comments are displayed even
  when 'External' has been selected.
  ================================================================ -->
  <xsl:if                     test = "@audience = 'Internal'
                                      and
                                      @source = 'advisory-board'
                                      and
                                      $SourceComments = 'A'
                                      and
                                      $IncludeIntAdv = 'Y'">
     <xsl:call-template       name = "listComment">
      <xsl:with-param         name = "myScope"
                            select = "$myScope"/>
     </xsl:call-template>
  </xsl:if>
 </xsl:template>

</xsl:transform>
