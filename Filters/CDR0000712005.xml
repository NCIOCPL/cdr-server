<?xml version='1.0' encoding='utf-8'?>
<!-- $Id$ -->
<!-- Filter title: Denormalization Filter: Summary Module -->
<!--
====================================================================
$Id: $

Filter to denormalize a SummaryModuleLink.  This filter needs to run
prior to the "Denormalization Filter: Summary" in the sequence of 
the filter set members because some processing, like identifying if a
SummarySection is empty, can only be done successfully if all 
SummarySections are available.

Volker Englisch, 2011-09-14

BZIssue::5097 - Modifications to Publishing Filter to include Module content

==================================================================== -->
<xsl:transform               xmlns:xsl = 'http://www.w3.org/1999/XSL/Transform'
                             xmlns:cdr = 'cips.nci.nih.gov/cdr'
                               version = '1.0'>

 <xsl:output                    method = 'xml'
                              encoding = 'utf-8'/>

 <!-- 
 ==================================================================
 Template to add the names of the board members from the English
 board to the Spanish summary.
 ================================================================== -->
 <xsl:template                   match = "SummaryModuleLink">
  <xsl:variable                   name = "moduleRef"
                                select = "@cdr:ref"/>
  <xsl:variable                   name = "moduleInfo"
                                select = "document(concat('cdr:', $moduleRef,
                                                            ''))"/>
   <xsl:apply-templates         select = "$moduleInfo/
                                           Summary/
                                           SummarySection">
    <xsl:with-param               name = "ref"
                                select = "@cdr:ref"/>
    <xsl:with-param               name = "module"
                                select = "'_sm'"/>
   </xsl:apply-templates>
 </xsl:template>


 <!-- 
 ==================================================================
 Template to process all SummarySections
 ================================================================== -->
 <xsl:template                   match = "SummarySection">
  <xsl:param                      name = "ref"/>
  <xsl:param                      name = "module"/>
  
  <xsl:element                    name = "{name()}">
   <xsl:choose>
   <xsl:when                      test = "$ref">
    <xsl:attribute                name = "cdr:ref">
     <xsl:value-of              select = "$ref"/>
    </xsl:attribute>
    <xsl:attribute                name = "cdr:id">
     <xsl:value-of              select = "$module"/>
     <xsl:value-of              select = "concat('_', $ref)"/>
     <xsl:value-of              select = "@cdr:id"/>
    </xsl:attribute>
   </xsl:when>
   <xsl:otherwise>
    <xsl:attribute                name = "cdr:id">
     <xsl:value-of              select = "@cdr:id"/>
    </xsl:attribute>
   </xsl:otherwise>
   </xsl:choose>
   <xsl:for-each                select = "@*">
    <xsl:if                       test = "not(name() = 'cdr:id')">
    <xsl:attribute                name = "{name()}">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
    </xsl:if>
   </xsl:for-each>

   <xsl:apply-templates           mode = "module">
    <xsl:with-param               name = "ref"
                                select = "$ref"/>
    <xsl:with-param               name = "module"
                                select = "'_sm'"/>
   </xsl:apply-templates>
  </xsl:element>
 </xsl:template>


 <!-- 
 ==================================================================
 Template to process all elements of SummarySections within a
 module
 ================================================================== -->
 <xsl:template                   match = 'SummarySection/*'
                                  mode = "module">
  <xsl:param                      name = "ref"/>
  <xsl:param                      name = "module"/>

  <xsl:copy>
   <xsl:apply-templates         select = '@*|node()' 
                                  mode = "module">
    <xsl:with-param               name = "ref"
                                select = "$ref"/>
    <xsl:with-param               name = "module"
                                select = "'_sm'"/>
   </xsl:apply-templates>
  </xsl:copy>
 </xsl:template>

 <!-- 
 ==================================================================
 Template to pass on the module ID to elements within the 
 Insertion/Deletion elements
 ================================================================== -->
 <xsl:template                   match = 'Insertion | Deletion' 
                                  mode = "module">
  <xsl:param                      name = "ref"/>
  <xsl:param                      name = "module"/>


  <xsl:copy>
   <xsl:apply-templates         select = '@*|node()'
                                  mode = "module">
    <xsl:with-param               name = "ref"
                                select = "$ref"/>
    <xsl:with-param               name = "module"
                                select = "'_sm'"/>
   </xsl:apply-templates>
  </xsl:copy>
 </xsl:template>


 <!-- 
 ==================================================================
 Template to update the cdr:id value for elements with the module
 ================================================================== -->
 <xsl:template                   match = "@cdr:id"  
                                  mode = "module">
  <xsl:param                      name = "ref"/>
  <xsl:param                      name = "module"/>

  <xsl:choose>
   <xsl:when                      test = "$ref">
    <xsl:attribute                name = "cdr:id">
     <xsl:value-of              select = "$module"/>
     <xsl:value-of              select = "concat('_', $ref)"/>
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:when>
   <xsl:otherwise>
    <xsl:attribute                name = "cdr:id">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

 
 <!-- 
 ==================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of of something 
 ================================================================== -->
 <xsl:template                   match = '@*|node()'
                                  mode = "module">
  <xsl:param                      name = "ref"/>
  <xsl:param                      name = "module"/>

  <xsl:copy>
   <xsl:apply-templates         select = '@*|node()' 
                                  mode = "module">
    <xsl:with-param               name = "ref"
                                select = "$ref"/>
    <xsl:with-param               name = "module"
                                select = "'_sm'"/>
   </xsl:apply-templates>
  </xsl:copy>
 </xsl:template>


 <!-- 
 ==================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of of something 
 (Everything that's not inside a SummaryModule or SummarySection)
 ================================================================== -->
 <xsl:template                   match = '@*|node()'>
  <xsl:copy>
   <xsl:apply-templates         select = '@*|node()'/>
  </xsl:copy>
 </xsl:template>
</xsl:transform>
