<?xml version="1.0" ?>
<!-- Filter title: Denormalization Filter: Summary Module -->
<!--
====================================================================

Filter to denormalize a SummaryModuleLink.  This filter needs to run
prior to the "Denormalization Filter: Summary" in the sequence of
the filter set members because some processing, like identifying if a
SummarySection is empty, can only be done successfully if all
SummarySections are available.

Volker Englisch, 2011-09-14

BZIssue::5097 - Modifications to Publishing Filter to include Module content
BZIssue::OCECDR-3645 - Changes section in summary modules
OCECDR-4159: Modify QC Report filters to not display Module Changes Section
             in main Summary QC reports

==================================================================== -->
<xsl:transform               xmlns:xsl = 'http://www.w3.org/1999/XSL/Transform'
                             xmlns:cdr = 'cips.nci.nih.gov/cdr'
                               version = '1.0'>

 <xsl:output                    method = 'xml'
                              encoding = 'utf-8'/>

 <!--
 =================================================================
 Start copying everything from the root down
 ================================================================= -->
 <xsl:template                   match = "/">
  <xsl:apply-templates/>
 </xsl:template>


 <!--
 ==================================================================
 Template to denormalize a module link into a section of a summary.
 We also need to include those summary sections that are listed
 within insertion/deletion markup.
 Modified to pull in only a publishable version of a module.
                                                     VE, 2019-10-31
 ================================================================== -->
 <xsl:template                   match = "SummaryModuleLink">
  <xsl:variable                   name = "moduleRef"
                                select = "@cdr:ref"/>
  <xsl:variable                   name = "moduleInfo"
                                select = "document(concat('cdr:', $moduleRef,
                                                                  '/lastp'))"/>
   <xsl:apply-templates         select = "$moduleInfo/
                                           Summary/
                                           SummarySection
                                             [not(SectMetaData/
                                                  SectionType =
                                                      'Changes to summary')] |
                                          $moduleInfo/
                                           Summary/
                                           Insertion[child::SummarySection
                                             [not(SectMetaData/
                                                  SectionType =
                                                      'Changes to summary')]] |
                                          $moduleInfo/
                                           Summary/
                                           Deletion[child::SummarySection
                                             [not(SectMetaData/
                                                  SectionType =
                                                      'Changes to summary')]]"
                                  mode = "module">
    <xsl:with-param               name = "ref"
                                select = "@cdr:ref"/>
    <xsl:with-param               name = "module"
                                select = "'_sm'"/>
   </xsl:apply-templates>
 </xsl:template>


 <!--
 ==================================================================
 Template to process all SummarySections
 This template converts the cdr:id to be unique accross the new
 document.  It also adds the cdr:id of the module document.
 ================================================================== -->
 <xsl:template                   match = "SummarySection"
                                  mode = "module">
  <xsl:param                      name = "ref"/>
  <xsl:param                      name = "module"/>

    <xsl:variable                 name = "modprefix">
     <xsl:value-of              select = "$module"/>
     <xsl:value-of              select = "concat('_', $ref)"/>
     <xsl:value-of              select = "@cdr:id"/>
    </xsl:variable>

  <xsl:element                    name = "{name()}">
   <!--
   If this section has been imported via a SummaryModuleLink add
   an attribute to indicate this
   ============================================================= -->
   <xsl:if                        test = "$module = '_sm'">
    <xsl:attribute                name = "thissection">
     <xsl:value-of              select = "'module'"/>
    </xsl:attribute>
   </xsl:if>

   <!--
   Also add a new cdr:id to keep ids unique within the document
   ============================================================ -->
   <xsl:choose>
    <xsl:when                     test = "$ref">
     <xsl:attribute               name = "cdr:ref">
      <xsl:value-of             select = "$ref"/>
     </xsl:attribute>
     <xsl:attribute               name = "cdr:id">
      <xsl:value-of             select = "$modprefix"/>
     </xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:attribute               name = "cdr:id">
      <xsl:value-of             select = "@cdr:id"/>
     </xsl:attribute>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:for-each                select = "@*">
    <xsl:if                       test = "not(name() = 'cdr:id')">
    <xsl:attribute                name = "{name()}">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
    </xsl:if>
   </xsl:for-each>

   <!-- xsl:apply-templates           mode = "module" -->
   <xsl:apply-templates>
    <xsl:with-param               name = "ref"
                                select = "$ref"/>
    <xsl:with-param               name = "module"
                                select = "$module"/>
    <xsl:with-param               name = "modprefix"
                                select = "$modprefix"/>
                                <!-- select = "'_sm'"/ -->
   </xsl:apply-templates>
  </xsl:element>
 </xsl:template>


 <!--
 ==================================================================
 Template to properly process a summary section that is included
 in Insertion/Deletion tags within the module document.
 ================================================================== -->
 <xsl:template                   match = "Insertion | Deletion"
                                  mode = "module">
  <xsl:param                      name = "ref"/>
  <xsl:param                      name = "module"/>

  <xsl:copy>
   <xsl:for-each                select = "@*">
    <xsl:copy/>
   </xsl:for-each>

   <xsl:apply-templates         select = "SummarySection"
                                  mode = "module">
    <xsl:with-param               name = "module"
                                select = "$module"/>
    <xsl:with-param               name = "ref"
                                select = "$ref"/>
   </xsl:apply-templates>
  </xsl:copy>
  <!--
  <xsl:choose>
   <xsl:when test = "$module">
  aaa<xsl:copy>
    <xsl:for-each select = "@*">
     <xsl:copy/>
    </xsl:for-each>
    <xsl:apply-templates select = "SummarySection" mode="module">
     <xsl:with-param name = "module" select = "$module"/>
     <xsl:with-param name = "ref" select = "$ref"/>
    </xsl:apply-templates>
  </xsl:copy>
   </xsl:when>
   <xsl:otherwise>
  bbb<xsl:copy>
   <xsl:apply-templates         select = "@*|node()"
                                  mode = "module">
    <xsl:with-param               name = "ref"
                                select = "$ref"/>
    <xsl:with-param               name = "module"
                                select = "$module"/>
   </xsl:apply-templates>
  </xsl:copy>
  </xsl:otherwise>
  </xsl:choose>
  -->
 </xsl:template>


 <!--
 ==================================================================
 Template to update the cdr:id value for elements with the module
 ================================================================== -->
 <xsl:template                   match = "@cdr:id">
  <xsl:param                      name = "ref"/>
  <xsl:param                      name = "module"/>
  <xsl:param                      name = "modprefix"/>

  <!-- xsl:if                         test = "$ref">
  <xsl:attribute                  name = "dada">
   <xsl:text>Volker</xsl:text>
  </xsl:attribute>
  </xsl:if -->

  <xsl:choose>
   <xsl:when                      test = "$ref">
    <xsl:attribute                name = "cdr:id">
     <xsl:value-of              select = "$modprefix"/>
     <xsl:value-of              select = "$module"/>
     <xsl:value-of              select = "concat('_', $ref)"/>
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:when>
   <xsl:otherwise>
    <xsl:attribute                name = "cdr:id">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ==================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of of something
 ================================================================== -->
 <xsl:template                   match = '@*|node()'
                                  mode = "module">
  <xsl:param                      name = "ref"/>
  <xsl:param                      name = "module"/>

  <xsl:copy>
   <xsl:apply-templates         select = '@*|node()'
                                  mode = "module">
    <xsl:with-param               name = "ref"
                                select = "$ref"/>
    <xsl:with-param               name = "module"
                                select = "'_sm'"/>
   </xsl:apply-templates>
  </xsl:copy>
 </xsl:template>


 <!--
 ==================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of something
 (Everything that's not inside a SummaryModule or SummarySection)
 ================================================================== -->
 <xsl:template                   match = '@*|node()'>
  <xsl:copy>
   <xsl:apply-templates         select = '@*|node()'/>
  </xsl:copy>
 </xsl:template>


 <!--
 ==================================================================
 Template to process all elements of SummarySections within a
 module
 ================================================================== -->
 <!--
 <xsl:template                   match = 'SummarySectionXXX/*'
                                  mode = "module">
  <xsl:param                      name = "ref"/>
  <xsl:param                      name = "module"/>
  <xsl:text>mode: module</xsl:text>

  <xsl:copy>
   <xsl:apply-templates         select = '@*|node()|SummaryModuleLink'
                                  mode = "module">
    <xsl:with-param               name = "ref"
                                select = "$ref"/>
    <xsl:with-param               name = "module"
                                select = "'_sm'"/>
   </xsl:apply-templates>
  </xsl:copy>
 </xsl:template>
 -->


 <!--
 ==================================================================
 Template to denormalize a module link into a section of a summary.
 ================================================================== -->
 <!--
 <xsl:template                   match = "SummaryModuleLinkXXX"
                                  mode = "module">
  <xsl:text>Volker-m</xsl:text>
  <xsl:variable                   name = "moduleRef"
                                select = "@cdr:ref"/>
  <xsl:variable                   name = "moduleInfo"
                                select = "document(concat('cdr:', $moduleRef,
                                                            ''))"/>
   <xsl:apply-templates         select = "$moduleInfo/
                                           Summary/
                                           SummarySection">
    <xsl:with-param               name = "ref"
                                select = "@cdr:ref"/>
    <xsl:with-param               name = "module"
                                select = "'_sm'"/>
   </xsl:apply-templates>
 </xsl:template>
 -->
</xsl:transform>
