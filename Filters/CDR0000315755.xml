<?xml version = "1.0" encoding="utf-8"?>
<!-- Filter title: Module: Person QC Common -->
<!--
================================================================

Common Templates shared between Person and PDQBoardMember
QC Report Filters
Written by Volker Englisch

BZIssue::4681 - Include GeneticsProfessional elements
BZIssue::5166 - QC reports showing in table format

================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr">

 <!--
 =================================================================
 Template for PersonNameInformation
 PersonQc    - Display name in table format
 PersonAtOrg - No table format
 ================================================================= -->
 <xsl:template                   match = "PersonNameInformation">
  <xsl:choose>
   <!--
   Display information in tabular format
   =========================================================== -->
   <xsl:when                      test = "$whoAmI = 'PersonQc'
                                          or
                                          $whoAmI = 'PdqBoardMemberQc'">
    <table      xsl:use-attribute-sets = "table">
     <tr>
      <td       xsl:use-attribute-sets = "cell1of2">
       <b>
        <font size='4'>Name</font>
       </b>
      </td>
      <td       xsl:use-attribute-sets = "cell2of2">
       <xsl:call-template         name = "formatName"/>
      </td>
     </tr>
     <xsl:if                      test = "$whoAmI = 'PersonQc'">
      <xsl:apply-templates      select = "Comment"
                                  mode = "withAttribute">
       <xsl:with-param            name = "label"
                                select = "'Person Name Comment'"/>
      </xsl:apply-templates>
     </xsl:if>
    </table>
   </xsl:when>
   <!--
   Display Name left aligned
   ====================================================================== -->
   <xsl:otherwise>
    <xsl:if                       test = "../Status/CurrentStatus='Inactive'">
     <xsl:text>Inactive - </xsl:text>
    </xsl:if>
    <xsl:call-template            name = "formatName"/>

    <!--
    Board Roster Report only - Display Editor-in-Chief title
    ===================================================================== -->
    <xsl:if                       test = "$whoAmI = 'PdqBoardMemberRoster'">
     <xsl:if                      test = "$eic = 'Yes'">
      <br/>
      <b>Editor-in-Chief</b>
     </xsl:if>
    </xsl:if>
    <br/>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =====================================================================
 Template to display the Person Locations
 ===================================================================== -->
 <xsl:template                   match = "PersonLocations">
  <xsl:if                         test = "$whoAmI != 'PdqBoardMemberRoster'">
  <xsl:choose>
   <xsl:when                      test = "$whoAmI = 'PersonQc'">
    <xsl:apply-templates        select = "Home"/>
    <xsl:apply-templates        select = "PrivatePracticeLocation"/>
    <xsl:apply-templates        select = "OtherPracticeLocation"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:apply-templates        select = "Home
                                           [@cdr:id=$location]"/>
    <xsl:apply-templates        select = "PrivatePracticeLocation
                                           [@cdr:id=$location]"/>
    <xsl:apply-templates        select = "OtherPracticeLocation
                                           [@cdr:id=$location]"/>
   </xsl:otherwise>
  </xsl:choose>
  </xsl:if>
 </xsl:template>


 <!--
 =====================================================================
 Display Person Location Information for Private Practice and
 Home Location
 ===================================================================== -->
 <xsl:template                   match = "Home                     |
                                          PrivatePracticeLocation">
  <b>
   <xsl:choose>
    <xsl:when                     test = "name() = 'Home'">
     <xsl:text>Home</xsl:text>
     <xsl:text> [</xsl:text>
     <xsl:value-of              select = "@cdr:id"/>
     <xsl:text>]</xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>Private Practice</xsl:text>
     <xsl:text> [</xsl:text>
     <xsl:value-of              select = "@cdr:id"/>
     <xsl:text>]</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </b>

  <xsl:if                         test = "../CIPSContact = @cdr:id">
   <b>
    <xsl:text> - CIPS Contact</xsl:text>
   </b>
  </xsl:if>
  <xsl:if                         test = "@PreviousLocation = 'Yes'">
   <b>
    <xsl:text> - Previous Location</xsl:text>
   </b>
  </xsl:if>
  <br/>

  <xsl:for-each                 select = "PostalAddress">
   <xsl:choose>
    <xsl:when                     test = "@Public">
     <table     xsl:use-attribute-sets = "table">
      <tr>
       <td class="qc_td">
        <xsl:choose>
         <xsl:when                test = "@native">
          <i>
           <xsl:call-template     name = "listAddress"/>
          </i>
         </xsl:when>
         <xsl:otherwise>
          <xsl:call-template      name = "listAddress"/>
         </xsl:otherwise>
        </xsl:choose>
       </td>
       <td valign="center">
        <font size="10">&#125;</font>
       </td>
       <td valign="center">
        <b>
         <xsl:text> (Public = No)</xsl:text>
        </b>
       </td>
      </tr>
     </table>
    </xsl:when>
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when                   test = "@native">
       <i>
        <xsl:call-template        name = "listAddress"/>
       </i>
      </xsl:when>
      <xsl:otherwise>
       <xsl:call-template         name = "listAddress"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:call-template             name = "listPhone"/>
  </xsl:for-each>
  <br />
 </xsl:template>


 <!--
 =====================================================================
 Display Person Location Information for Other Practice Location
 ===================================================================== -->
 <xsl:template                   match = "OtherPracticeLocation">
  <b>
   <xsl:text>Other Practice Location</xsl:text>
   <xsl:text> [</xsl:text>
   <xsl:value-of                select = "@cdr:id"/>
   <xsl:text>]</xsl:text>
  </b>

  <xsl:if                         test = "../CIPSContact = @cdr:id">
   <b>
    <xsl:text> - CIPS Contact</xsl:text>
   </b>
  </xsl:if>
  <xsl:if                         test = "@PreviousLocation = 'Yes'">
   <b>
    <xsl:text> - Previous Location</xsl:text>
   </b>
  </xsl:if>
  <xsl:if                         test = "@UsedFor">
   <b><i>
    <xsl:text>(UsedFor = </xsl:text>
    <xsl:value-of               select = "@UsedFor"/>
    <xsl:text>)</xsl:text>
   </i></b>
  </xsl:if>
  <br/>

  <!-- Display the Person Title if available -->
  <xsl:if                         test = "PersonTitle">
   <xsl:value-of                select = "PersonTitle"/>
   <br/>
  </xsl:if>

  <xsl:for-each                 select = "OrganizationLocation/
                                          OrganizationName">
   <xsl:value-of                select = "."/>
   <xsl:apply-templates         select = "@cdr:ref"/>
   <br />
  </xsl:for-each>

  <xsl:for-each                 select = "OrganizationLocation/
                                          PostalAddress">
   <xsl:choose>
    <xsl:when                     test = "@Public">
     <table     xsl:use-attribute-sets = "table">
      <tr>
       <td class="qc_td">
        <xsl:choose>
         <xsl:when                test = "@native">
          <i>
           <xsl:call-template     name = "listAddress"/>
          </i>
         </xsl:when>
         <xsl:otherwise>
          <xsl:call-template      name = "listAddress"/>
         </xsl:otherwise>
        </xsl:choose>
       </td>
       <td valign="center">
        <font size="10">&#125;</font>
       </td>
       <td valign="center">
        <b>
         <xsl:text> (Public = No)</xsl:text>
        </b>
       </td>
      </tr>
     </table>
    </xsl:when>
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when                   test = "@native">
       <i>
        <xsl:call-template        name = "listAddress"/>
       </i>
      </xsl:when>
      <xsl:otherwise>
       <xsl:call-template         name = "listAddress"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:call-template             name = "listPhone"/>
  </xsl:for-each>

  <!--
  The Complex Affilication only needs to be displayed for the
  Person QC report.
  ============================================================ -->
  <xsl:if                         test = "$whoAmI = 'PersonQc'">
   <xsl:if                        test = "ComplexAffiliation">
    <b>Complex Affiliation</b>
    <xsl:apply-templates        select = "ComplexAffiliation"/>
   </xsl:if>
  </xsl:if>
  <br/>
 </xsl:template>

 <!--
 ======================================================================
 Template to add CDR-ID and fragment ID to the display
 The CDR-ID should be displayed without leading zeros.
 ====================================================================== -->
 <xsl:template                   match = "@cdr:ref">
  <xsl:variable                   name = "cdrId"
                                select = "concat('CDR',
                                           number(
                                            substring-after(
                                             substring-before(
                                              concat(., '#'), '#'), 'CDR')))"/>
  <xsl:text> (</xsl:text>
  <xsl:element                    name = "a">
   <xsl:attribute                 name = "href">
    <xsl:value-of               select = "concat('/cgi-bin/cdr/QcReport.py',
                                                 '?Session=@@SESSION@@',
                                                 '&amp;DocId=',
                                                 $cdrId)"/>
   </xsl:attribute>
   <xsl:value-of                select = "$cdrId"/>
  </xsl:element>
  <xsl:if                         test = "contains( . , '#')">
   <xsl:text> - </xsl:text>
   <xsl:value-of                select = "substring-after(., '#')"/>
  </xsl:if>
  <xsl:text>)</xsl:text>
 </xsl:template>

 <!--
 ======================================================================
 Template to add (Public = No) to the display
 ====================================================================== -->
 <xsl:template                   match = "@Public">
  <b>
   <xsl:text> (Public = No)</xsl:text>
  </b>
 </xsl:template>


 <!--
 ========================================================================
 Named Template to display a formatted person name
 ======================================================================== -->
 <xsl:template                    name = "formatName">
  <b>
   <xsl:if                        test = "Prefix">
    <xsl:apply-templates        select = "Prefix"/>
    <xsl:text> </xsl:text>
   </xsl:if>
   <xsl:apply-templates         select = "GivenName"/>
   <xsl:text> </xsl:text>
   <xsl:apply-templates         select = "MiddleInitial"/>
   <xsl:text> </xsl:text>

   <!-- check for Professional suffix and display -->
   <xsl:choose>
    <xsl:when                     test = "ProfessionalSuffix">
     <xsl:apply-templates       select = "SurName"/>

     <!--
     Display the GenerationSuffix properly.  No comma if a roman numeral
     follows:
     Volker Englisch III, PhD  but
     Volker Englisch, Jr, PhD
     =================================================================== -->
     <xsl:choose>
      <xsl:when                   test = "GenerationSuffix">
       <xsl:if                    test = "GenerationSuffix = 'Jr'
                                          or
                                          GenerationSuffix = 'Sr'">
        <xsl:text>,</xsl:text>
       </xsl:if>
       <xsl:text> </xsl:text>
       <xsl:apply-templates      select = "GenerationSuffix"/>
       <xsl:text>, </xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>, </xsl:text>
      </xsl:otherwise>
     </xsl:choose>

     <xsl:for-each              select = "ProfessionalSuffix">
      <xsl:value-of             select = "."/>
      <xsl:if                     test = "position() !=last()">
       <xsl:text>, </xsl:text>
      </xsl:if>
     </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
     <!-- Display surname if no Suffix is present -->
     <xsl:apply-templates       select = "SurName"/>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:if                        test = "$whoAmI = 'PersonAtOrg'">
    <xsl:text> (</xsl:text>
    <xsl:value-of               select = "concat('CDR',
                                           number(
                                           substring-after($docID, 'CDR')))"/>
    <xsl:text>)</xsl:text>
   </xsl:if>
  </b>
 </xsl:template>


 <!--
 ========================================================================
 Named Template to display the Address
 ======================================================================== -->
 <xsl:template                    name = "listAddress">
  <xsl:for-each                 select = "Street">
   <xsl:value-of                select = "."/>
   <br/>
  </xsl:for-each>
  <xsl:choose>
   <xsl:when                      test = "PostalCodePosition = 'before City'">
    <xsl:value-of               select = "PostalCode_ZIP"/>
    <xsl:text> </xsl:text>
    <xsl:value-of               select = "City"/>
    <xsl:if                       test = "CitySuffix">
     <xsl:text> </xsl:text>
     <xsl:value-of              select = "CitySuffix"/>
    </xsl:if>
   </xsl:when>
   <xsl:when                      test = "PostalCodePosition = 'after City'">
    <xsl:value-of               select = "City"/>
    <xsl:if                       test = "CitySuffix">
     <xsl:text> </xsl:text>
     <xsl:value-of              select = "CitySuffix"/>
    </xsl:if>
    <xsl:text> </xsl:text>
    <xsl:value-of               select = "PostalCode_ZIP"/>
   </xsl:when>
   <!--
   This section is for US addresses
   =================================================================== -->
   <xsl:when                      test = "PostalCodePosition =
                                         'after PoliticalSubUnit_State'">
    <xsl:value-of               select = "City"/>
    <xsl:if                       test = "CitySuffix">
     <xsl:text> </xsl:text>
     <xsl:value-of              select = "CitySuffix"/>
    </xsl:if>
    <xsl:text>, </xsl:text>
    <xsl:value-of               select = "PoliticalSubUnitShortName"/>
    <xsl:text> </xsl:text>
    <xsl:value-of               select = "PostalCode_ZIP"/>
   </xsl:when>
  </xsl:choose>
  <br/>
  <xsl:value-of                 select = "CountryName"/>
  <br/>
 </xsl:template>


 <!--
 ========================================================================
 Named Template to display the Phone, Fax, WebSite, Role information

 Note:
 We're using the Board Roster Report filter to create a summary sheet
 roster report so that we don't have to reinvent the denormalization
 rules but we don't want the table layout for the summary sheet.
 In order to achieve this we're using a hack.  None HTML elements are
 ignored within an HTML document, so we're wrapping Phone, Fax, Email
 in an element allowing us to easily extract the data via a string search
    PhoneNumber  ==> <Phone>PhoneNumber</Phone>
 ======================================================================== -->
 <xsl:template                    name = "listPhone">
  <!--
  Display the Phone, Fax, Email, etc. in a table format
  ========================================================== -->
  <!--
  A) Phone
  ============= -->
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <xsl:choose>
      <xsl:when                   test = "../Phone/@native">
       <i>
        <xsl:text>Phone</xsl:text>
       </i>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>Phone</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:choose>
      <xsl:when                   test = "../Phone/@native">
       <!--
       See note above
       ================================================================= -->
       <xsl:choose>
        <xsl:when                 test = "$whoAmI =
                                            'PdqBoardMemberRosterSummary'">
         <xsl:element             name = "Phone">
          <xsl:value-of         select = "../Phone"/>
         </xsl:element>
        </xsl:when>
        <xsl:otherwise>
         <i>
          <xsl:value-of         select = "../Phone"/>
          <xsl:if                 test = "../Phone/@Public">
           <xsl:apply-templates select = "../Phone/@Public"/>
          </xsl:if>
         </i>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
       <!--
       See note above
       ================================================================ -->
       <xsl:choose>
        <xsl:when                 test = "$whoAmI =
                                            'PdqBoardMemberRosterSummary'">
         <xsl:element             name = "Phone">
          <xsl:value-of         select = "../Phone"/>
         </xsl:element>
        </xsl:when>
        <xsl:otherwise>
         <xsl:value-of          select = "../Phone"/>
        </xsl:otherwise>
       </xsl:choose>

       <xsl:if                    test = "../Phone/@Public
                                          and
                                          $whoAmI != 'PdqBoardMemberRoster'">
        <xsl:apply-templates    select = "../Phone/@Public"/>
       </xsl:if>
      </xsl:otherwise>
     </xsl:choose>
    </td>
   </tr>
  <!--
  B) Toll Free Phone
  =================== -->
   <xsl:if                        test = "$whoAmI = 'PersonQc'
                                          or
                                          $whoAmI = 'PdqBoardMemberQc'">
    <tr>
     <td class="qc_td">
      <xsl:choose>
       <xsl:when                  test = "../TollFreePhone/@native">
        <i><xsl:text>TollFreePhone</xsl:text></i>
       </xsl:when>
       <xsl:otherwise>
        <xsl:text>TollFreePhone</xsl:text>
       </xsl:otherwise>
      </xsl:choose>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:choose>
       <xsl:when                  test = "../TollFreePhone/@native">
        <i>
         <xsl:value-of          select = "../TollFreePhone"/>
        </i>
       </xsl:when>
       <xsl:otherwise>
         <xsl:value-of          select = "../TollFreePhone"/>
       </xsl:otherwise>
      </xsl:choose>
     </td>
    </tr>
   </xsl:if>
  <!--
  C) Fax
  =================== -->
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <xsl:choose>
      <xsl:when                   test = "../Fax/@native">
       <i>
        <xsl:text>Fax</xsl:text>
       </i>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>Fax</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:choose>
      <xsl:when                   test = "../Fax/@native">
       <!--
       See note for Phone above
       ==================================================== -->
       <xsl:choose>
        <xsl:when                 test = "$whoAmI =
                                            'PdqBoardMemberRosterSummary'">
         <xsl:element             name = "Fax">
          <xsl:value-of         select = "../Fax"/>
         </xsl:element>
        </xsl:when>
        <xsl:otherwise>
         <i>
          <xsl:value-of         select = "../Fax"/>
         </i>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
       <!--
       See note for Phone above
       ==================================================== -->
       <xsl:choose>
        <xsl:when                 test = "$whoAmI =
                                            'PdqBoardMemberRosterSummary'">
         <xsl:element             name = "Fax">
          <xsl:value-of         select = "../Fax"/>
         </xsl:element>
        </xsl:when>
        <xsl:otherwise>
         <xsl:value-of          select = "../Fax"/>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </td>
   </tr>
  <!--
  D) Email
  =================== -->
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <xsl:text>Email</xsl:text>
    </td>
    <xsl:choose>
     <xsl:when                    test = "../Email">
      <td       xsl:use-attribute-sets = "cell2of2">
       <!--
       See note above
       ==================================================== -->
       <xsl:choose>
        <xsl:when                 test = "$whoAmI =
                                            'PdqBoardMemberRosterSummary'">
         <xsl:element             name = "Email">
          <xsl:value-of         select = "../Email"/>
         </xsl:element>

        </xsl:when>
        <xsl:otherwise>
         <xsl:call-template       name = "listEmail">
          <xsl:with-param         name = "email"
                                select = "../Email"/>
         </xsl:call-template>
        </xsl:otherwise>
       </xsl:choose>

       <xsl:if                    test = "../Email/@Public
                                          and
                                          $whoAmI != 'PdqBoardMemberRoster'
                                          and
                                          $whoAmI !=
                                               'PdqBoardMemberRosterSummary'">
        <xsl:apply-templates    select = "../Email/@Public"/>
       </xsl:if>
      </td>
     </xsl:when>
    </xsl:choose>
   </tr>
   <xsl:if                        test = "$whoAmI = 'PersonQc'
                                          or
                                          $whoAmI = 'PdqBoardMemberQc'">
    <xsl:if                       test = "name(..) !=
                                               'SpecificBoardMemberContact'">
     <tr>
      <td       xsl:use-attribute-sets = "cell1of2">
       <xsl:choose>
        <xsl:when                 test = "../WebSite/@native">
         <i>
          <xsl:text>Website</xsl:text>
         </i>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>Website</xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </td>
      <xsl:choose>
       <xsl:when                  test = "../WebSite">
        <td     xsl:use-attribute-sets = "cell2of2">
         <xsl:choose>
          <xsl:when               test = "../WebSite/@native">
           <i>
            <xsl:call-template    name = "listWebSite">
             <xsl:with-param      name = "webSite"
                                select = "../WebSite/@xref"/>
            </xsl:call-template>
            <br/>
            <xsl:value-of       select = "../WebSite"/>
           </i>
          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template    name = "listWebSite">
             <xsl:with-param      name = "webSite"
                                select = "../WebSite/@xref"/>
            </xsl:call-template>
            <br/>
            <xsl:value-of       select = "../WebSite"/>
          </xsl:otherwise>
         </xsl:choose>
        </td>
       </xsl:when>
      </xsl:choose>
     </tr>
    </xsl:if>
    <xsl:if                       test = "../../PersonRole">
     <tr>
      <td       xsl:use-attribute-sets = "cell1of2">
       <xsl:text>Person Role</xsl:text>
      </td>
      <td       xsl:use-attribute-sets = "cell2of2">
       <table   xsl:use-attribute-sets = "table">
        <xsl:for-each           select = "../../PersonRole">
         <tr>
          <td   xsl:use-attribute-sets = "cell1of2">
           <xsl:value-of        select = "."/>
          </td>
         </tr>
        </xsl:for-each>
       </table>
      </td>
     </tr>
    </xsl:if>
   </xsl:if>
   <br/>
  </table>
 </xsl:template>


 <!--
 ========================================================================
 Named Template to display the Email information
 ======================================================================== -->
 <xsl:template                    name = "listEmail">
  <xsl:param                      name = "email"/>

  <xsl:element                    name = "a">
   <xsl:attribute                 name = "href">
    <xsl:text>mailto:</xsl:text>
    <xsl:value-of               select = "$email"/>
   </xsl:attribute>
    <xsl:value-of               select = "$email"/>
  </xsl:element>
 </xsl:template>


 <!--
 ========================================================================
 Named Template to display the Website information
 ======================================================================== -->
 <xsl:template                    name = "listWebSite">
  <xsl:param                      name = "webSite"/>

  <xsl:element                    name = "a">
   <xsl:attribute                 name = "href">
    <xsl:choose>
     <xsl:when                    test = "contains($webSite, 'http://')">
      <xsl:value-of             select = "$webSite"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>http://</xsl:text>
      <xsl:value-of             select = "substring-after(
                                                        $webSite, 'http://')"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>
   <xsl:attribute                 name = "target">
    <xsl:text>new</xsl:text>
   </xsl:attribute>

   <xsl:value-of                select = "$webSite"/>
  </xsl:element>
 </xsl:template>
</xsl:transform>
