<?xml version="1.0"?>
<!-- Filter title: Wrap nodes with Insertion or Deletion -->
  <xsl:transform             version = "1.0"
                           xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                           xmlns:cdr = "cips.nci.nih.gov/cdr"
             exclude-result-prefixes = "cdr">

    <xsl:output               method = "xml"
                              indent = "no"
                            encoding = "utf-8"/>

<!-- =================================================================
       Drive the copy processing logic.
     ================================================================== -->
    <xsl:template              match = "@* | node()">
     <xsl:copy>
      <xsl:apply-templates    select = "@* | node()"/>
     </xsl:copy>
    </xsl:template>

<!-- =================================================================
       Override the template for text node. Wrap any text node with
       its Insertion/Deletion ancestors. Drop the white space node
       between CitationLinks/ProtocolLinks.
       The wrapping Insertion/Deletion will be cleaned up by a following
       filter according to their RevisionLevels.
       Multiple levels of Insertion/Deletion may result in confusion in
       reading HTML code such as <b><u><b><u>text</u></b></u></b>, in
       the QC report.
     ================================================================== -->
    <xsl:template              match = "text()">

     <!-- Pick up all Insertion/Deletion ancestors. -->
     <xsl:variable              name = "ancestors"
                              select = "ancestor::Insertion |
                                        ancestor::Deletion"/>

     <!-- Is this node between CitationLinks/ProtocolLinks? -->
     <xsl:variable              name = "prev"
                              select = "preceding-sibling::*[position()=1]"/>
     <xsl:variable              name = "next"
                              select = "following-sibling::*[position()=1]"/>
     <xsl:variable              name = "notBetween">
      <xsl:if                   test = "(name($prev) != 'CitationLink' and
                                         name($prev) != 'ProtocolLink')
                                       or
                                        (name($next) != 'CitationLink' and
                                         name($next) != 'ProtocolLink')">
       <xsl:text>Node Not Between CitationLinks/ProtocolLinks</xsl:text>
      </xsl:if>
     </xsl:variable>

     <!-- Simply wrap the text node that are not to be dropped. -->
     <xsl:if                    test = "normalize-space() != '' or
                                        $notBetween != ''">
      <xsl:call-template        name = "popAncestor">
       <xsl:with-param          name = "ancestors"
                              select = "$ancestors"/>
       <xsl:with-param          name = "pos"
                              select = "1"/>
      </xsl:call-template>
     </xsl:if>

    </xsl:template>

<!-- =================================================================
       For the purpose of QC report, we need to remember some specific
       properties of Insertion/Deletion. We add an attribute
       InsertionOrDeletion = "Insertion|Deletion" here so that they can
       still be identified after Insertion/Deletion is dropped by a
       following filter. We also carry the value of RevisionLevel in
       QC report for BU or RS.
     ================================================================== -->
    <xsl:template              match = "@cdr:ref">

     <!-- Pick up all Insertion/Deletion ancestors. -->
     <xsl:variable              name = "ancestors"
                              select = "ancestor::Insertion |
                                        ancestor::Deletion"/>

     <xsl:copy/>
     <xsl:if                    test = "$ancestors">

      <!-- Get the value of the nearest ancestor. -->
      <xsl:attribute            name = "InsertionOrDeletion">
       <xsl:value-of          select = "name($ancestors[last()])"/>
      </xsl:attribute>
      <xsl:attribute            name = "RevisionLevel">
       <xsl:value-of          select = "$ancestors[last()]/@RevisionLevel"/>
      </xsl:attribute>
      <xsl:attribute            name = "Source">
       <xsl:value-of          select = "$ancestors[last()]/@Source"/>
      </xsl:attribute>

     </xsl:if>

    </xsl:template>

<!-- =================================================================
       Recursively call this named template to push all ancestors
       to the text node from top to bottom. After all elements and
       their attributes have been wrapped around the text node, print
       out the content of the text node. We have duplicated the
       Insertion/Deletion parent of the text node if the text node has
       it at the beginning, to simplify logic.
     ================================================================== -->
    <xsl:template               name = "popAncestor">
     <xsl:param                 name = "ancestors"/>
     <xsl:param                 name = "pos"/>

     <!-- Which ancestor are we popping? -->
     <xsl:variable              name = "ancestor"
                              select = "$ancestors[position()=$pos]"/>

     <xsl:choose>

      <!-- The ancestor does exist. -->
      <xsl:when                 test = "$ancestor">
       <xsl:element             name = "{name($ancestor)}">
        <xsl:apply-templates  select = "$ancestor/@*" />

        <!-- Proceed with the next possible ancestor. -->
        <xsl:call-template      name = "popAncestor">
         <xsl:with-param        name = "ancestors"
                              select = "$ancestors"/>
         <xsl:with-param        name = "pos"
                              select = "$pos+1"/>
        </xsl:call-template>

       </xsl:element>
      </xsl:when>

      <!-- Print out the text node itself now. -->
      <xsl:otherwise>
       <xsl:value-of          select = "."/>
      </xsl:otherwise>

     </xsl:choose>

    </xsl:template>

  </xsl:transform>
