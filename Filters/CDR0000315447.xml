<?xml version="1.0" ?>
<!-- Filter title: Module: Vendor Address Templates -->

<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr"
                               version = "1.0">

 <xsl:output                    method = "xml"
                  omit-xml-declaration = "no"
                              encoding = "UTF-8"/>

 <!--
 =====================================================================
 Filter to enforce the business rules for selecting the proper address
 for the vendor and QC output.
 ===================================================================== -->
 <!--
 ====================================================================
 Postal Address
 ==================================================================== -->
 <xsl:template                   match = "PostalAddress |
                                          SpecificPostalAddress |
                                          BoardContactPostalAddress">
  <xsl:param                      name = "native"
                                select = "''"/>

  <xsl:element                    name = "PostalAddress">
   <xsl:if                        test = "@Public">
    <xsl:attribute                name = "Public">
     <xsl:value-of              select = "'No'"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "$native">
    <xsl:attribute                name = "native">
     <xsl:value-of              select = "'no'"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates         select = "Street"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "City"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "CitySuffix"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "PoliticalSubUnit_State"/>
   <xsl:apply-templates         select = "Country"/>

   <!--
   The denormalization filter inserts the organization's ZIP code if
   it is not part of the original US located address block and the
   organization's cdr:ref exists.
   Otherwise, just insert the ZIP that's provided.
   ================================================================= -->
   <xsl:choose>
    <xsl:when                     test = "../Name/
                                             Organization/
                                             OrganizationLocations">
     <xsl:copy-of               select = "../Name/
                                             Organization/
                                             OrganizationLocations/
                                             OrganizationLocation/
                                             Location/
                                             PostalAddress/
                                             PostalCode_ZIP"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates       select = "PostalCode_ZIP"
                                  mode = "copy"/>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:apply-templates         select = "Country/PostalCodePosition"
                                  mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 =====================================================================
 Copy Contact Information for Private Practice and Home location
 ==================================================================== -->
 <xsl:template                   match = "Home |
                                          PrivatePracticeLocation">
  <xsl:element                    name = "{name()}">
   <xsl:attribute                 name = "id">
    <xsl:value-of               select = "@cdr:id"/>
   </xsl:attribute>
   <xsl:if                        test = "@cdr:id = ../../CIPSContact
                                          or
                                          @cdr:id = ../CIPSContact">
    <xsl:attribute                name = "CIPSContact">
     <xsl:value-of              select = "'Y'"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:call-template             name = "getHomePrivatePractice"/>
  </xsl:element>
 </xsl:template>


 <!--
 =====================================================================
 Copy PostalAddress information for Home and PrivatePracticeLocation
 This template is called by the Home, PrivatePractice template and
 Protocol denormalization filter.
 ==================================================================== -->
 <xsl:template                    name = "getHomePrivatePractice">
   <xsl:if                        test = "../../../Status/
                                          CurrentStatus = 'Inactive'
                                          or ../PreviousLocaton">
    <xsl:attribute                name = "Status">
     <xsl:text>Inactive--Contact Information may not be current</xsl:text>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates         select = "PostalAddress |
                                          TollFreePhone |
                                          Phone | Fax   |
                                          Email | WebSite"/>
 </xsl:template>


 <!--
 ====================================================================
 Assemble the state element.  This template collapses two element
 layers into one, combining the 'ref' attribute from the parent
 PoliticalSubUnit_State element with the text content of the child
 PoliticalSubUnitFullName element, using a new PoliticalSubUnitName
 name for the combo element.
 ==================================================================== -->
 <xsl:template                   match = "PoliticalSubUnit_State">
  <PoliticalSubUnitName>
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "@cdr:ref"/>
   </xsl:attribute>
   <xsl:value-of                select = "PoliticalSubUnitFullName"/>
  </PoliticalSubUnitName>
  <PoliticalSubUnitShortName>
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "@cdr:ref"/>
   </xsl:attribute>
   <xsl:value-of                select = "PoliticalSubUnitShortName"/>
  </PoliticalSubUnitShortName>
 </xsl:template>


 <!--
 ====================================================================
 Put together the Country element.
 ==================================================================== -->
 <xsl:template                   match = "Country">
  <CountryName>
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "@cdr:ref"/>
   </xsl:attribute>
   <xsl:value-of                select = "CountryFullName"/>
  </CountryName>
 </xsl:template>


 <!--
 ====================================================================
 Picking up the Specific Postal Address from Person Record or from
 Organization record.
 ==================================================================== -->
 <xsl:template                    name = "getPostalAddress">
  <xsl:param                      name = "orgAddressFID"/>

  <xsl:choose>
   <xsl:when                      test = "SpecificPostalAddress">
    <xsl:apply-templates        select = "SpecificPostalAddress"/>
   </xsl:when>
   <xsl:when                      test = "OrganizationLocation/
                                          Organization/OrganizationLocations/
                                          OrganizationLocation/
                                          Location[@cdr:id = $orgAddressFID]/
                                          PostalAddress">
    <xsl:apply-templates        select = "OrganizationLocation/
                                          Organization/OrganizationLocations/
                                          OrganizationLocation/
                                          Location[@cdr:id = $orgAddressFID]/
                                          PostalAddress">
     <xsl:with-param              name = "native"
                                select = "'organization'"/>
    </xsl:apply-templates>
   </xsl:when>
  </xsl:choose>
 </xsl:template>


 <!-- *
 ====================================================================
 Collect the parent names for the address block display
 ==================================================================== -->
 <xsl:template                    name = "getParentName">
  <OrganizationName>
   <xsl:value-of                select = "Organization/
                                          OrganizationNameInformation/
                                          OfficialName/Name"/>
  </OrganizationName>

  <xsl:for-each                 select = "Organization/ParentOrganization">
   <xsl:call-template             name = "getParentName"/>
  </xsl:for-each>

 </xsl:template>


 <!--
 ==================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of of something
 ================================================================== -->
 <!-- xsl:template              match = "@*|node()"
                             mode = "copy">
  <xsl:copy>
   <xsl:apply-templates    select = "@*|node()"
                             mode = "copy"/>
  </xsl:copy>
 </xsl:template -->
</xsl:transform>
