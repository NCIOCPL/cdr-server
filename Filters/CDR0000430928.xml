<?xml version = "1.0" encoding="utf-8"?>
<!-- Filter title: Module: QC Filter Templates -->
<!--
================================================================

Filter Module to include all general formatting templates for
QC Reports
Volker Englisch, 2005-04-26

BZIssue::5166 - QC reports showing in table format

================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
                               version = "1.0">

 <xsl:output                    method = "html"/>

 <!--
 ===============================================================
 The PublishedResults elements are being suppressed for the QC
 Reports.  Instead the PublishedResultsQC elements are used.
 ================================================================ -->
 <xsl:template                   match = "PublishedResults |
                                          RelatedPublications">
 </xsl:template>


 <!--
 =======================================================================
 Template to create the email as a clickable link
 ======================================================================= -->
 <xsl:template                    name = "createEmailLink">
  <xsl:element                    name = "a">
   <xsl:attribute                 name = "href">
    <xsl:value-of               select = "concat('mailto:', .)"/>
   </xsl:attribute>
   <xsl:value-of                select = "."/>
  </xsl:element>
  <xsl:apply-templates          select = "@Public"/>
 </xsl:template>


 <!--
 =======================================================================
 Template to create the WebSite as a clickable link
 ======================================================================= -->
 <xsl:template                   name = "createWebLink">
  <xsl:element                   name = "a">
   <xsl:attribute                name = "href">
    <xsl:choose>
     <xsl:when                   test = "contains(@cdr:xref, 'http')">
      <xsl:value-of            select = "@cdr:xref"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of            select = "concat('http://', @cdr:xref)"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>
   <xsl:attribute                name = "target">
    <xsl:text>new</xsl:text>
   </xsl:attribute>

   <xsl:value-of               select = "@cdr:xref"/>
  </xsl:element>
 </xsl:template>


 <!--
 =======================================================================
 Template to create the link to a CDR Document QC report
 ======================================================================= -->
 <xsl:template                   name = "createCdrQcLink">
     <xsl:variable                name = "docRef"
                                select = "@cdr:ref"/>
     <xsl:variable                name = "fragmentRef"
                                select = "substring-after($docRef,'#')"/>
     <xsl:variable                name = "cdrId"
                                select = "concat('CDR',
                                           number(
                                            substring-after(
                                             substring-before(
                                              concat($docRef, '#'), '#'),
                                                                   'CDR')))"/>
     <xsl:text> (</xsl:text>
     <xsl:element                 name = "a">
      <xsl:attribute              name = "href">
       <xsl:value-of            select = "concat('/cgi-bin/cdr/QcReport.py',
                                                 '?Session=guest',
                                                 '&amp;DocId=',
                                                 $cdrId)"/>
      </xsl:attribute>
      <xsl:attribute              name = "target">
       <xsl:text>new</xsl:text>
      </xsl:attribute>
      <xsl:value-of             select = "$cdrId"/>
      </xsl:element>
     <xsl:text>)</xsl:text>

     <xsl:if                      test = "$fragmentRef">
     <xsl:text> [</xsl:text>
     <xsl:value-of              select = "$fragmentRef"/>
     <xsl:text>]</xsl:text>
     </xsl:if>

     <xsl:apply-templates       select = "../@Public"/>
 </xsl:template>


 <!--
 =======================================================================
 Template to create the link to a GlossaryTerm QC report with Concept
 ======================================================================= -->
 <xsl:template                   name = "createGlossaryQcLink">
     <xsl:variable                name = "docRef"
                                select = "@cdr:ref"/>
     <xsl:variable                name = "fragmentRef"
                                select = "substring-after($docRef,'#')"/>
     <xsl:variable                name = "cdrId"
                                select = "concat('CDR',
                                           number(
                                            substring-after(
                                             substring-before(
                                              concat($docRef, '#'), '#'),
                                                                   'CDR')))"/>
     <xsl:text> (</xsl:text>
     <xsl:element                 name = "a">
      <xsl:attribute              name = "href">
       <xsl:value-of            select = "concat('/cgi-bin/cdr/Filter.py',
                                                 '?Filter=set:QC Glossary',
                                                 'TermName with Concept Set',
                                                 '&amp;DocId=',
                                                 $cdrId)"/>
      </xsl:attribute>
      <xsl:attribute              name = "target">
       <xsl:text>new</xsl:text>
      </xsl:attribute>
      <xsl:value-of             select = "$cdrId"/>
      </xsl:element>
     <xsl:text>)</xsl:text>

     <xsl:if                      test = "$fragmentRef">
     <xsl:text> [</xsl:text>
     <xsl:value-of              select = "$fragmentRef"/>
     <xsl:text>]</xsl:text>
     </xsl:if>

     <xsl:apply-templates       select = "../@Public"/>
 </xsl:template>


 <!--
 =======================================================================
 Template for Admin Information Comments
 ======================================================================= -->
 <xsl:template                   match = "Comment"
                                  mode = "withAttribute">
  <xsl:param                      name = "label"
                                select = "'Comment'"/>
  <xsl:param                      name = "indent"
                                select = "'No'"/>

  <xsl:choose>
   <xsl:when                      test = "$indent = 'No'">
  <tr>
   <td class="qc_td" xsl:use-attribute-sets = "cell1of2">
    <b>
     <xsl:value-of              select = "$label"/>
    </b>
   </td>
   <td class="qc_td" xsl:use-attribute-sets = "cell2of2">
    <span class="attribute">
     <xsl:if                      test = "@audience">
      <xsl:text>audience=</xsl:text>
      <xsl:value-of             select = "@audience"/>
     </xsl:if>
     <xsl:if                      test = "@date">
      <xsl:text> date=</xsl:text>
      <xsl:value-of             select = "@date"/>
     </xsl:if>
     <xsl:if                      test = "@user">
      <xsl:text> user=</xsl:text>
      <xsl:value-of             select = "@user"/>
     </xsl:if>
    </span>
   </td>
  </tr>
  <tr>
   <td class="qc_td"><xsl:text> </xsl:text></td>
   <td class="qc_td">
    <xsl:value-of              select = "."/>
   </td>
  </tr>
  </xsl:when>
  <xsl:otherwise>
   <tr>
    <td class="qc_td" xsl:use-attribute-sets = "cell1iof2">
    </td>
    <td class="qc_td" xsl:use-attribute-sets = "cell2iof2">
     <b>
      <xsl:value-of              select = "$label"/>
     </b>
    </td>
    <td class="qc_td" xsl:use-attribute-sets = "cell2of2">
    <span class="attribute">
     <xsl:if                      test = "@audience">
      <xsl:text>audience=</xsl:text>
      <xsl:value-of             select = "@audience"/>
     </xsl:if>
     <xsl:if                      test = "@date">
      <xsl:text> date=</xsl:text>
      <xsl:value-of             select = "@date"/>
     </xsl:if>
     <xsl:if                      test = "@user">
      <xsl:text> user=</xsl:text>
      <xsl:value-of             select = "@user"/>
     </xsl:if>
    </span>
    </td>
   </tr>
  <tr>
   <td class="qc_td"><xsl:text> </xsl:text></td>
   <td class="qc_td"><xsl:text> </xsl:text></td>
   <td class="qc_td">
    <xsl:value-of              select = "."/>
   </td>
  </tr>
  </xsl:otherwise>
 </xsl:choose>
 </xsl:template>


 <!--
 ====================================================================
 Convert the format of the phone numbers provided by RSS from the
 form "(123) 456-7890" to the form "123-456-7890"
 ==================================================================== -->
 <xsl:template                    name = "convertPhoneNumber">
  <xsl:value-of                 select = "translate(
                                           translate(., '()', ' -'), ' ', '')"/>
 </xsl:template>
</xsl:transform>
