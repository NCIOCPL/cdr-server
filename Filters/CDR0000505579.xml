<?xml      version = "1.0"?>
<!-- CDR0000505579.xml -->
<!-- Filter title: Copy XML for DrugInfoSummary -->
<!--
OCECDR-3903: Cancer.gov displaying Patient definitions for terms
             in HP Summaries
===================================================================
Filter to create the vendor Terminology XML
=================================================================== -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
                               version = "1.0">

 <xsl:include  href = "cdr:name:Module: Global Filter Templates"/>
 <xsl:include  href = "cdr:name:Module: URL Conversion"/>

 <xsl:output                    method = "xml"
                  omit-xml-declaration = "no"/>

 <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
 <xsl:param                       name = "DateFirstPub"
                                select = "''"/>

 <!-- *
 ====================================================================
 Root element.
 ==================================================================== -->
 <xsl:template                   match = "*">
  <xsl:copy>
   <xsl:apply-templates           mode = "copy"/>
  </xsl:copy>
 </xsl:template>


 <!--
 =====================================================================
 Template to create wrapper element for Manufacturer.
 ===================================================================== -->
 <xsl:template                   match = "DrugInfoMetaData"
                                  mode = "copy">
  <xsl:copy>
   <xsl:if                        test = "Manufacturer">
    <Manufacturers>
     <xsl:copy-of               select = "Manufacturer"/>
    </Manufacturers>
   </xsl:if>

   <xsl:apply-templates           mode = "copy"/>

  </xsl:copy>
 </xsl:template>


 <!--
 =====================================================================
 Template to drop the Manufacturer elements since these will be
 repeated within the Manufacturers wrapper.
 ===================================================================== -->
 <xsl:template                   match = "Manufacturer"
                                  mode = "copy"/>


 <!--
 =====================================================================
 Template to drop the Manufacturer elements since these will be
 repeated within the Manufacturers wrapper.
 ===================================================================== -->
 <xsl:template                   match = "URL"
                                  mode = "copy">
  <xsl:copy-of                  select = "."/>
 </xsl:template>


 <!--
 =====================================================================
 Template to create wrapper elements for US Brand Name and Synonym.
 ===================================================================== -->
 <xsl:template                   match = "Term"
                                  mode = "copy">
  <xsl:copy>
   <xsl:for-each                select = "@*">
    <xsl:attribute                name = "{name()}">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:for-each>

   <xsl:if                        test = "OtherName/
                                          OtherNameType = 'US brand name'">
    <USBrandNames>
     <xsl:apply-templates       select = "OtherName"
                                  mode = "brandname">
      <xsl:sort/>
     </xsl:apply-templates>
    </USBrandNames>
   </xsl:if>

   <xsl:copy-of                 select = "*[not(self::OtherName)]"/>
  </xsl:copy>
 </xsl:template>


 <!--
 =====================================================================
 Template to create US Brand Name
 ===================================================================== -->
 <xsl:template                   match = "OtherName"
                                  mode = "brandname">
  <xsl:if                         test = "OtherNameType = 'US brand name'">
  <xsl:copy>
   <xsl:apply-templates/>
  </xsl:copy>
  </xsl:if>
 </xsl:template>


 <!--
 =====================================================================
 Template to create US Brand Name
 ===================================================================== -->
 <xsl:template                   match = "OtherName"
                                  mode = "synonym">
  <xsl:if                         test = "OtherNameType = 'Code name'
                                          or
                                          OtherNameType = 'Foreign brand name'
                                          or
                                          OtherNameType = 'Abbreviation'">
  <xsl:copy>
   <xsl:apply-templates/>
  </xsl:copy>
  </xsl:if>
 </xsl:template>


 <!--
 =====================================================================
 Template to rename the DrugSummaryRef element to DrugRef and 
 populate the URL attribute value with the linked-to DIS URL
 ===================================================================== -->
 <xsl:template                   match = "DrugSummaryRef"
                                  mode = "copy">
  <xsl:variable                   name = "docNormId"
                                select = "number(
                                           substring-after(@cdr:href, 'CDR'))"/>

  <!--
  Extracting the content of the URL element for the linked-to DIS
  ==================================================================== -->
  <xsl:variable                   name = "sqlQuery">
   SELECT doc_id, value
     FROM query_term_pub
    WHERE doc_id = ?
      AND path = '/DrugInformationSummary/DrugInfoMetaData/URL/@cdr:xref'
  </xsl:variable>
  
  <xsl:variable                   name = "queryRows"
                                select = "document(
                                          concat('cdrutil:/sql-query/',
                                                  $sqlQuery,
                                                  '~',
                                                  $docNormId))"/>

  <xsl:variable                  name = "disUrl">
   <xsl:call-template            name = "getSummaryURL">
    <xsl:with-param              name = "url"
                               select = "normalize-space(
                                           $queryRows
                                           /SqlResult
                                           /row
                                           /col[@name='value'])"/>
   </xsl:call-template>
  </xsl:variable>

  <xsl:element                    name = "DrugRef">
   <xsl:attribute                 name = "href">
    <xsl:value-of               select = "@cdr:href"/>
   </xsl:attribute>
   <xsl:attribute                 name = "url">
    <xsl:choose>
     <xsl:when                    test = "starts-with($disUrl, 'http')">
      <xsl:value-of             select = "substring-after($disUrl, '.gov')"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "$disUrl"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>
   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>


 <!--
 ========================================================================
 Create the GlossaryTermRef elements and rename the attribute
 (cdr:href ID needs to be renamed to href).

 Note:
 Please also see the note in CDR157 (duplicate template GlossaryTermRef)
 ======================================================================== -->
 <xsl:template                   match = "GlossaryTermRef"
                                  mode = "copy">
  <xsl:element                    name = "{name()}">
   <xsl:attribute                 name = "href">
    <xsl:value-of               select = "@cdr:href"/>
   </xsl:attribute>
   <!-- When the dictionary value does not exist set it to NotSet -->
   <xsl:attribute                 name = "dictionary">
    <xsl:choose>
     <xsl:when                    test = "Dictionary">
      <xsl:value-of             select = "Dictionary"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>NotSet</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>
   <xsl:attribute                 name = "audience">
    <xsl:value-of               select = "Audience"/>
   </xsl:attribute>

   <xsl:value-of                select = "GlossaryText"/>

  </xsl:element>
 </xsl:template>


 <!--
 =======================================================
 Default template to copy all elements and attributes
 ======================================================= -->
 <xsl:template               match = "@* | node()"
                              mode = "copy">
  <xsl:copy>
   <xsl:apply-templates     select = "@* | node()"
                              mode = "copy"/>
  </xsl:copy>
 </xsl:template>
</xsl:transform>
