<?xml version="1.0" ?>
<!-- Filter title: Module: Vendor Filter Templates -->
<!--
====================================================================

Filter including misc Vendor filter templates.

BZIssue::???? - Modify Vendor Filters to Include Audio
BZIssue::5003 - [Summaries] Table Column Widths - Display on Cancer.gov
BZIssue::5274 - Mobile images in Spanish Summaries
OCECDR-3869: Support for linking to blocked trials
OCECTS-116 - Add nct_id attribute to ProtocolRef element

==================================================================== -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
               exclude-result-prefixes = "cdr"
                             xmlns:cdr = "cips.nci.nih.gov/cdr">

 <xsl:output                    method = "xml"
                  omit-xml-declaration = "no"
                              encoding = "UTF-8"/>

 <xsl:include href = "cdr:name:Module: Global Filter Templates"/>
 <xsl:include href = "cdr:name:Module: URL Conversion"/>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:xref with mode = "copy".
 ==================================================================== -->
 <xsl:template                   match = "@cdr:xref"
                                  mode = "copy">
   <xsl:attribute                 name = "xref">
    <xsl:value-of               select = "."/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Keep ProtocolRef markup, but strip the 'cdr' prefix from attributes.
 As far as I (Bob) can tell, this is redundant, as it is also done in
 the Vendor Cleanup Templates module, but Volker isn't sure there
 aren't cases where one module is used without the other.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolRef">
  <xsl:element                    name = "ProtocolRef">
   <xsl:for-each                select = "@*">
    <xsl:choose>
     <xsl:when                    test = "starts-with(name(), 'cdr:')">
      <xsl:attribute              name = "{substring-after(name(),':')}">
       <xsl:value-of            select = "."/>
      </xsl:attribute>
     </xsl:when>
     <xsl:otherwise>
      <xsl:attribute              name = "{name()}">
       <xsl:value-of            select = "."/>
      </xsl:attribute>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:for-each>
   <xsl:apply-templates           mode = "copy"/>
  </xsl:element>
 </xsl:template>

 <!--
 ====================================================================
 Same as the previous template, but using copy mode. Keeping the
 duplicate path on Volker's advice. Clean this up when we do CDR 2.0.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolRef"
                                  mode = "copy">
  <xsl:element                    name = "ProtocolRef">
   <xsl:for-each                select = "@*">
    <xsl:choose>
     <xsl:when                    test = "starts-with(name(), 'cdr:')">
      <xsl:attribute              name = "{substring-after(name(),':')}">
       <xsl:value-of            select = "."/>
      </xsl:attribute>
     </xsl:when>
     <xsl:otherwise>
      <xsl:attribute              name = "{name()}">
       <xsl:value-of            select = "."/>
      </xsl:attribute>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:for-each>
   <xsl:apply-templates           mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 =========================================================================
 Template for MediaLink element (used by Summary, DIS and GlossaryTerm)
 ========================================================================= -->
 <xsl:template                   match = "MediaLink">
  <xsl:param                      name = "audioLanguage"/>

  <xsl:variable                   name = "mediaLinkType">
   <xsl:choose>
    <xsl:when                     test = "MediaID/Media/
                                            PhysicalMedia/
                                            ImageData/
                                            ImageEncoding = 'JPEG'">
     <xsl:value-of              select = "'image/jpeg'"/>
    </xsl:when>
    <xsl:when                     test = "MediaID/Media/
                                            PhysicalMedia/
                                            ImageData/
                                            ImageEncoding = 'GIF'">
     <xsl:value-of              select = "'image/gif'"/>
    </xsl:when>
    <xsl:when                     test = "MediaID/Media/
                                            PhysicalMedia/
                                            SoundData/
                                            SoundEncoding = 'MP3'">
     <xsl:value-of              select = "'audio/mpeg'"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of              select = "'unsupported media type'"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>

  <!--
  This block is for a GlossaryTerm document with a MediaLink element
  shared between the English and Spanish version like the "peau d'orange"
  ======================================================================= -->
  <xsl:choose>
   <xsl:when                      test = "$whoAmI = 'GlossaryTerm'
                                          and
                                          name(..) = 'GlossaryTermConcept'">
    <xsl:variable                 name = "mediaCdrRef"
                                select = "MediaID/@cdr:ref"/>
    <xsl:variable                 name = "mediaLinkAlt"
                                select = "@AlternativeText"/>
    <xsl:variable                 name = "mediaLinkUseCaption"
                                select = "@UseCaption"/>
    <xsl:variable                 name = "mediaLinkId"
                                select = "@cdr:id"/>
    <xsl:variable                 name = "mediaLinkPlacement"
                                select = "@placement"/>

    <xsl:for-each               select = "MediaID/
                                          Media/
                                          MediaContent/
                                          Captions/
                                          MediaCaption">

     <xsl:call-template           name = "createMediaLink">
      <xsl:with-param             name = "mediaRef"
                                select = "$mediaCdrRef"/>
      <xsl:with-param             name = "mediaType"
                                select = "$mediaLinkType"/>
      <xsl:with-param             name = "mediaAlt"
                                select = "$mediaLinkAlt"/>
      <xsl:with-param             name = "mediaUseCaption"
                                select = "$mediaLinkUseCaption"/>
      <xsl:with-param             name = "mediaId"
                                select = "$mediaLinkId"/>
     </xsl:call-template>

    </xsl:for-each>
   </xsl:when>
   <xsl:otherwise>
    <!--
    Create MediaLink element for Summary and GlossaryTerm (the
    MediaLink element is NOT shared between the English and Spanish
    version)
    ===============================================================
    Define language variable to select the caption and alt text
    Note:  This only applies for summary document and GlossaryTerm
           document with a MediaLink child element of the
           TermDefinition or SpanishTermDefinition
    =============================================================== -->
    <xsl:variable                 name = "docLanguage">
     <xsl:choose>
      <xsl:when                   test = "$audioLanguage">
       <xsl:value-of            select = "$audioLanguage"/>
      </xsl:when>
      <xsl:when                   test = "/Summary/
                                          SummaryMetaData/
                                          SummaryLanguage
                                            = 'Spanish'
                                          or
                                          name(..)
                                            = 'TranslatedTermDefinition'">
       <xsl:text>es</xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>en</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:variable>

    <!--
    Define audience variable to select the alt text
    =============================================== -->
    <xsl:variable                 name = "docAudience">
     <xsl:choose>
      <xsl:when                   test = "/Summary/
                                          SummaryMetaData/
                                          SummaryAudience
                                            = 'Health professionals'
                                          or
                                          ../Audience
                                            = 'Health professional'">
       <xsl:text>Health_professionals</xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>Patients</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:variable>

    <!--
    Create MediaLink Element and attributes

    For the GlossaryTerm we will either have one MediaLink that is
    shared between the English and Spanish version or two distinct
    MediaLink elements, one for the English and one for the Spanish
    version.
    It is an error to have a MediaLink element for the
    English version and a MediaLink element for the Spanish version
    when both are pointing to the same Media document.  The filter
    should fail to have the problem corrected.
                                     per LG/MB, 2006-11-15, VE.
    =============================================================== -->
    <xsl:if                       test = "not(MediaID/
                                              Media/
                                              MediaContent/
                                              Captions/
                                              MediaCaption[@language =
                                                           $docLanguage])
                                          and
                                          UseCaption = 'Yes'">

     <xsl:message            terminate = "yes">
      <xsl:value-of             select = "name()"/>
      <xsl:text> (</xsl:text>
      <xsl:value-of             select = "MediaID/@cdr:ref"/>
      <xsl:text>) </xsl:text>
      <xsl:text>Caption for specified language missing: </xsl:text>
      <xsl:value-of             select = "$docLanguage"/>
     </xsl:message>
    </xsl:if>

    <xsl:element                  name = "MediaLink">
     <xsl:attribute               name = "ref">
      <xsl:value-of             select = "MediaID/@cdr:ref |
                                          MediaID/Media/@cdr:ref"/>
     </xsl:attribute>
     <xsl:attribute               name = "type">
      <xsl:value-of             select = "$mediaLinkType"/>
     </xsl:attribute>

     <!--
     alt text is taken from summary AlternativeText attribute or
     from the Media Content description matching the audience and
     language of the document type
     ============================================================ -->
     <xsl:choose>
      <xsl:when                   test = "@AlternativeText">
       <xsl:attribute             name = "alt">
        <xsl:value-of           select = "@AlternativeText"/>
       </xsl:attribute>
      </xsl:when>
      <xsl:otherwise>
       <xsl:attribute             name = "alt">
        <xsl:value-of           select = "normalize-space(MediaID/Media/
                                          MediaContent/
                                          ContentDescriptions/
                                          ContentDescription
                                            [@language=$docLanguage
                                             and
                                             @audience=$docAudience])"/>
       </xsl:attribute>
      </xsl:otherwise>
     </xsl:choose>

     <!--
     The language attribute is being added only if the Media document
     specifies a different language then that of the document type
     i.e. if an image with English labels is being displayed in a
          Spanish summary
     By default, the MediaLanguage element will not be specified.

     The above decision has been revised per request from Cancer.gov.
     The language attribute will always be displayed.
     =================================================================== -->
     <xsl:attribute               name = "language">
      <xsl:value-of             select = "$docLanguage"/>
     </xsl:attribute>

     <!--
     For GlossaryTerm documents the audience attribute is being added.
     This is done only for images (not for audio files) as the captions
     may be written for HP or patients (a.k.a. the genetics or the
     patient dictionary).
     Note:
       This section is called for MediaLinks NOT shared between the
       English and Spanish version.
     =================================================================== -->
     <xsl:if                      test = "/GlossaryTermName
                                          and
                                          not($mediaLinkType = 'audio/mpeg')">
      <xsl:call-template          name = "addAudience"/>
     </xsl:if>

     <!--
     If the thumb attribute is set to 'No' display it.
     Additionally, per request from Cancer.gov the thumb attribute will
     always be set to a default of thumb='Yes' if it has not been specified.
     Additionally, we were asked to set thumb='No' if the specified size of
     the image is equal or greater then the actual size of the image so
     that making the image clickable wouldn't result in a larger image size.
     Note:  The above requirement only makes sense for image files.  There
            won't be a thumb attribute for audio files.
     Note:  The "thumb" and "size" attributes are ignored by cancer.gov.
            Keeping it in for licensees only.  The cancer.gov-specific
            attribute "placement" will be stripped out from licensee output.
     ======================================================================= -->
     <xsl:if                      test = "not($mediaLinkType = 'audio/mpeg')">

      <!--
      If the placement (size + position) attribute is set, use it or
      set the default.
      ================================================================ -->
      <xsl:choose>
       <xsl:when                  test = "@placement">
        <xsl:attribute            name = "placement">
         <xsl:value-of          select = "@placement"/>
        </xsl:attribute>
       </xsl:when>
       <xsl:otherwise>
        <xsl:attribute            name = "placement">
         <xsl:text>image-center</xsl:text>
        </xsl:attribute>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:if>

     <!-- Optional Attributes -->
     <xsl:if                      test = "@cdr:id">
      <xsl:attribute              name = "id">
       <xsl:value-of            select = "@cdr:id"/>
      </xsl:attribute>
     </xsl:if>

     <xsl:for-each              select = "./@ExcludedDevices |
                                          ./@IncludedDevices">
      <xsl:attribute              name = "{name()}">
       <xsl:value-of            select = "."/>
      </xsl:attribute>
     </xsl:for-each>


     <!--
     The UseCaption attibute turns existing captions on or off
     No UseCaption attribute defaults to UseCaption = 'Yes'
     ========================================================= -->
     <xsl:if                      test = "not(@UseCaption)
                                          or
                                          @UseCaption = 'Yes'">
      <xsl:choose>
       <xsl:when                  test = "Caption">
        <xsl:apply-templates    select = "Caption">
         <xsl:with-param          name = "capLanguage"
                                select = "$docLanguage"/>
        </xsl:apply-templates>
       </xsl:when>
       <xsl:otherwise>
        <xsl:apply-templates    select = "MediaID/Media/
                                            MediaContent/
                                            Captions/
                                            MediaCaption
                                              [@audience = $docAudience
                                               and
                                               @language = $docLanguage]"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:if>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =========================================================================
 Template for Caption and MediaCaption elements
 ========================================================================= -->
 <xsl:template                   match = "Caption |
                                          MediaCaption">
  <xsl:param                      name = "capLanguage"/>

  <xsl:element                    name = "Caption">
   <xsl:choose>
    <xsl:when                     test = "@language">
     <xsl:attribute               name = "language">
      <xsl:value-of             select = "@language"/>
     </xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:attribute               name = "language">
      <xsl:value-of             select = "$capLanguage"/>
     </xsl:attribute>
    </xsl:otherwise>
   </xsl:choose>

   <!-- 
   If we're coming in from the MediaCaption for-each loop we have to go
   back up the tree to find out if a specific title has been specified -->
   <xsl:choose>
    <xsl:when                     test = "ancestor::EmbeddedVideo/
                                             SpecificMediaCaption">
     <xsl:apply-templates       select = "ancestor::EmbeddedVideo/
                                             SpecificMediaCaption"/>
     <!--
     <xsl:apply-templates       select = "../../../../../SpecificMediaCaption"/>
     -->
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates/>
    </xsl:otherwise>
   </xsl:choose>

  </xsl:element>
 </xsl:template>


 <!-- 
 ============================================================= 
 Template to process the EmbeddedVideo element
 ============================================================= -->
 <xsl:template                   match = "EmbeddedVideo">
  <!--
  This block is for a GlossaryTerm document with a EmbeddedVideo element
  shared between the English and Spanish version.  This means we'll have
  to create an EmbeddedVideo element for each language

  The otherwise-block is used for Summaries
  ======================================================================= -->
  <xsl:choose>
   <xsl:when                      test = "$whoAmI = 'GlossaryTerm'
                                          and
                                          name(..) = 'GlossaryTermConcept'">
    <xsl:variable                 name = "videoCdrRef"
                                select = "MediaID/@cdr:ref"/>
    
    <xsl:variable                 name = "videoLinkId"
                                select = "@cdr:id"/>

    <xsl:variable                 name = "videoYtId"
                                select = "MediaID/
                                            Media/
                                            PhysicalMedia/
                                            VideoData/
                                            HostingID"/>
    <xsl:variable                 name = "videoHosting"
                                select = "MediaID/
                                            Media/
                                            PhysicalMedia/
                                            VideoData/
                                            VideoHosting"/>

    <xsl:variable                 name = "videoTemplate">
     <xsl:choose>
      <xsl:when                   test = "SpecificVideoPresentationTemplate">
       <xsl:value-of            select = "SpecificVideoPresentationTemplate"/>
      </xsl:when>
      <xsl:when                   test = "MediaID/
                                            Media/
                                            PhysicalMedia/
                                            VideoData/
                                            DefaultVideoPresentationTemplate">
       <xsl:value-of            select = "MediaID/
                                            Media/
                                            PhysicalMedia/
                                            VideoData/
                                            DefaultVideoPresentationTemplate"/>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>Video75NoTitle</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:variable>

    <xsl:for-each               select = "MediaID/
                                             Media/
                                             MediaContent/
                                             Captions/
                                             MediaCaption">

     <xsl:call-template           name = "createVideoLink">
      <xsl:with-param             name = "videoRef"
                                select = "$videoCdrRef"/>
      <xsl:with-param             name = "videoId"
                                select = "$videoLinkId"/>
      <xsl:with-param             name = "uniqueId"
                                select = "$videoYtId"/>
      <xsl:with-param             name = "hosting"
                                select = "$videoHosting"/>
      <xsl:with-param             name = "displayTemplate"
                                select = "$videoTemplate"/>
     </xsl:call-template>

    </xsl:for-each>
   </xsl:when>
   <xsl:otherwise>
    <!--
    Create EmbeddedVideo element for Summary and GlossaryTerm (the
    EmbeddedVideo element is NOT shared between the English and 
    Spanish version)
    ===============================================================
    Define language variable to select the caption
    Note:  This only applies for summary document and GlossaryTerm
           document with a EmbeddedVideo child element of the
           TermDefinition or SpanishTermDefinition
    =============================================================== -->
    <xsl:variable                 name = "docLanguage">
     <xsl:choose>
      <xsl:when                   test = "/Summary/
                                          SummaryMetaData/
                                          SummaryLanguage
                                            = 'Spanish'
                                          or
                                          name(..)
                                            = 'TranslatedTermDefinition'">
       <xsl:text>es</xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>en</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:variable>

    <!--
    Define audience variable to select the alt text
    =============================================== -->
    <xsl:variable                 name = "docAudience">
     <xsl:choose>
      <xsl:when                   test = "/Summary/
                                          SummaryMetaData/
                                          SummaryAudience
                                            = 'Health professionals'
                                          or
                                          ../Audience
                                            = 'Health professional'">
       <xsl:text>Health_professionals</xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>Patients</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:variable>



    <xsl:element                  name = "{name()}">
     <!--
     <xsl:attribute              name  = "volker">
      <xsl:value-of            select  = "'SumSection'"/>
     </xsl:attribute>
     -->

     <xsl:attribute              name  = "id">
      <xsl:value-of            select  = "./@cdr:id"/>
     </xsl:attribute>

     <xsl:attribute               name = "ref">
      <xsl:value-of             select = "MediaID/@cdr:ref"/>
     </xsl:attribute>

     <xsl:attribute               name = "hosting">
      <xsl:value-of             select = "MediaID/
                                            Media/
                                            PhysicalMedia/
                                            VideoData/
                                            VideoHosting"/>
     </xsl:attribute>

     <xsl:attribute               name = "unique_id">
      <xsl:value-of             select = "MediaID/
                                            Media/
                                            PhysicalMedia/
                                            VideoData/
                                            HostingID"/>
     </xsl:attribute>

     <xsl:attribute               name = "language">
      <xsl:value-of             select = "$docLanguage"/>
     </xsl:attribute>

     <xsl:attribute               name = "audience">
      <!--
      <xsl:text>1111 </xsl:text>
      <xsl:value-of select = "$docAudience"/>
      <xsl:value-of select = "name()"/>
      -->
      <xsl:value-of             select = "$docAudience"/>
      <!--
      <xsl:value-of             select = "MediaID/
                                            Media/
                                            MediaContent/
                                            Captions/
                                            MediaCaption/
                                            @audience"/>
      -->
     </xsl:attribute>

     <xsl:attribute               name = "template">
      <xsl:choose>
       <xsl:when                  test = "SpecificVideoPresentationTemplate">
        <xsl:value-of           select = "SpecificVideoPresentationTemplate"/>
       </xsl:when>
       <xsl:when                  test = "MediaID/
                                            Media/
                                            PhysicalMedia/
                                            VideoData/
                                            DefaultVideoPresentationTemplate">
        <xsl:value-of           select = "MediaID/
                                            Media/
                                            PhysicalMedia/
                                            VideoData/
                                            DefaultVideoPresentationTemplate"/>

       </xsl:when>
       <xsl:otherwise>
        <xsl:text>Video75NoTitle</xsl:text> 
       </xsl:otherwise>
      </xsl:choose>
     </xsl:attribute>

     <xsl:call-template           name = "mediaTitle"/>

     <xsl:choose>
      <xsl:when                   test = "$whoAmI = 'GlossaryTerm'">
       <xsl:call-template         name = "gtVideoCaption">
        <xsl:with-param           name = "language"
                                select = "$docLanguage"/>
        <xsl:with-param           name = "audience"
                                select = "$docAudience"/>
       </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
       <xsl:call-template         name = "mediaCaption"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ==============================================================
 Template to create the VideoTitle element
 This template gets called either as part of the EmbeddedVideo
 template or the MediaCaption template (as part of a shared
 EmbeddedVideo element).  The path to the title text differs
 depending on which template is calling.
 ============================================================== -->
 <xsl:template                    name = "mediaTitle">
  <xsl:element                    name = "VideoTitle">
   <xsl:choose>
    <xsl:when                     test = "SpecificMediaTitle
                                          or
                                          ancestor::EmbeddedVideo/
                                             SpecificMediaTitle">
     <xsl:apply-templates       select = "ancestor::EmbeddedVideo/
                                             SpecificMediaTitle      |
                                          SpecificMediaTitle"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates       select = "ancestor::Media/MediaTitle |
                                          MediaID/
                                            Media/
                                            MediaTitle"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:element>
 </xsl:template>



 <!-- 
 ==============================================================
 Named template to create the video captions for GlossaryTerm 
 documents.
 This template is used when a video is shared between the 
 English and Spanish definition.  In this case we're creating 
 one EmbeddedVideo item for each language and the default 
 audience is 'Patients'.
 ============================================================== -->
 <xsl:template                    name = "createVideoLink">
  <xsl:param                      name = "videoId"/>
  <xsl:param                      name = "videoRef"/>
  <xsl:param                      name = "uniqueId"/>
  <xsl:param                      name = "hosting"/>
  <xsl:param                      name = "displayTemplate"/>

  <xsl:variable                   name = "capLanguage"
                                select = "@language"/>

  <xsl:variable                   name = "capAudience"
                                select = "@audience"/>

  <!--
  Create EmbeddedVideo Element and attributes but prevent the element
  from being created if the GlossaryTerm has no Spanish definition
  ================================================================ -->
  <xsl:if                         test = "$capLanguage = 'en'
                                          or
                                          $capLanguage = 'es'
                                          and
                                          /GlossaryTermName/
                                           GlossaryTermConcept/
                                           TranslatedTermDefinition">

   <xsl:element                    name = "EmbeddedVideo">
     <!--
     <xsl:attribute              name  = "volker">
      <xsl:value-of            select  = "'GTNSection'"/>
     </xsl:attribute>
     -->

    <xsl:attribute                 name = "id">
     <xsl:value-of               select = "$videoId"/>
     <xsl:text>.</xsl:text>
     <xsl:number                 level = "any"
                                 count = "MediaCaption"/>
    </xsl:attribute>
    <xsl:attribute                 name = "ref">
     <xsl:value-of               select = "$videoRef"/>
    </xsl:attribute>
    <xsl:attribute                 name = "hosting">
     <xsl:value-of               select = "$hosting"/>
    </xsl:attribute>
    <xsl:attribute                 name = "unique_id">
     <xsl:value-of               select = "$uniqueId"/>
    </xsl:attribute>
    <xsl:attribute                 name = "language">
     <xsl:value-of               select = "$capLanguage"/>
    </xsl:attribute>
    <xsl:attribute                 name = "audience">
      <!--
      <xsl:text>2222</xsl:text>
      <xsl:value-of select = "name()"/>
      -->
     <xsl:value-of               select = "$capAudience"/>
    </xsl:attribute>
    <xsl:attribute                 name = "template">
     <xsl:value-of               select = "$displayTemplate"/>
    </xsl:attribute>
    <xsl:attribute                 name = "ref">
     <xsl:value-of               select = "$videoRef"/>
    </xsl:attribute>

    <xsl:call-template            name = "mediaTitle"/>

    <xsl:choose>
     <xsl:when                     test = "SpecificMediaCaption">
      <xsl:apply-templates       select = "SpecificMediaCaption"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates       select = "."/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:element>
  </xsl:if>
 </xsl:template>


 <!-- 
 ==============================================================
 Template for Video Caption
 ============================================================== -->
 <xsl:template                    name = "gtVideoCaption">
  <xsl:param                      name = "language"
                                select = "'NotSet'"/>
  <xsl:param                      name = "audience"
                                select = "'NotSet'"/>
  <xsl:choose>
   <xsl:when                      test = "SpecificMediaCaption">
    <xsl:element                  name = "Caption">
     <xsl:attribute               name = "language">
      <xsl:value-of             select = "$language"/>
      <!--
      <xsl:choose>
       <xsl:when                  test = "$language = 'English'">
        <xsl:text>en</xsl:text>
       </xsl:when>
       <xsl:when                  test = "$language = 'Spanish'">
        <xsl:text>es</xsl:text>
       </xsl:when>
       <xsl:otherwise>
        <xsl:text>NA</xsl:text>
       </xsl:otherwise>
      </xsl:choose>
      -->
     </xsl:attribute>

     <xsl:apply-templates       select = "SpecificMediaCaption"/>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <xsl:apply-templates        select = "MediaID/
                                            Media/
                                            MediaContent/
                                            Captions/
                                            MediaCaption
                                               [@language = $language
                                                and
                                                @audience = $audience]"/>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>





<!-- 
 ==============================================================
 Template for MediaCaption
 ============================================================== -->
 <xsl:template                    name = "mediaCaption">
    <!--
    Define audience variable to select the alt text
    =============================================== -->
    <xsl:variable                 name = "docAudience">
     <xsl:choose>
      <xsl:when                   test = "$sumAudience 
                                             = 'Health professionals'">
       <xsl:text>Health_professionals</xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>Patients</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:variable>

    <!--
    Create MediaLink element for Summary and GlossaryTerm (the
    MediaLink element is NOT shared between the English and Spanish
    version)
    ===============================================================
    Define language variable to select the caption and alt text
    Note:  This only applies for summary document and GlossaryTerm
           document with a MediaLink child element of the
           TermDefinition or SpanishTermDefinition
    =============================================================== -->
    <xsl:variable                 name = "docLanguage">
     <xsl:choose>
      <xsl:when                   test = "$language = 'Spanish'">
       <xsl:text>es</xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>en</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:variable>

   <xsl:choose>
    <xsl:when                     test = "SpecificMediaCaption">
     <xsl:element                 name = "Caption">
      <xsl:attribute              name = "language">
       <xsl:choose>
        <xsl:when                 test = "$language = 'English'">
         <xsl:text>en</xsl:text>
        </xsl:when>
        <xsl:when                 test = "$language = 'Spanish'">
         <xsl:text>es</xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>NA</xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:attribute>

      <xsl:apply-templates       select = "SpecificMediaCaption"/>
     </xsl:element>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates       select = "MediaID/
                                            Media/
                                            MediaContent/
                                            Captions/
                                            MediaCaption
                                              [@language = $docLanguage 
                                               and 
                                               @audience=$docAudience]"/>
    </xsl:otherwise>
   </xsl:choose>
 </xsl:template>


 <!--
 ======================================================================
 Named template to create the media captions for GlossaryTerm documents
 This template is used when an image is shared between the English and
 Spanish definition.  In this case we're creating one MediaLink item
 for each language and the default audience is 'Patients'.
 ====================================================================== -->
 <xsl:template                    name = "createMediaLink">
  <xsl:param                      name = "mediaRef"/>
  <xsl:param                      name = "mediaType"/>
  <xsl:param                      name = "mediaAlt"/>
  <xsl:param                      name = "mediaUseCaption"/>
  <xsl:param                      name = "mediaId"/>

  <xsl:variable                   name = "capLanguage"
                                select = "@language"/>

  <xsl:variable                   name = "capAudience"
                                select = "@audience"/>

  <!--
  Create MediaLink Element and attributes
  ======================================== -->
  <xsl:if                         test = "$capLanguage = 'en'
                                          or
                                          $capLanguage = 'es'
                                          and
                                          /GlossaryTermName/
                                           GlossaryTermConcept/
                                           TranslatedTermDefinition">

  <xsl:element                    name = "MediaLink">
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "$mediaRef"/>
   </xsl:attribute>
   <xsl:attribute                 name = "type">
    <xsl:value-of               select = "$mediaType"/>
   </xsl:attribute>

   <!--
   alt text is taken from summary AlternativeText attribute or
   from the Media Content description matching the audience and
   language of the document type
   ============================================================ -->
   <xsl:choose>
    <xsl:when                     test = "$mediaAlt">
     <xsl:attribute               name = "alt">
      <xsl:value-of             select = "$mediaAlt"/>
     </xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:if                      test = "not(../../
                                          ContentDescriptions/
                                          ContentDescription
                                            [@language=$capLanguage
                                             and
                                             @audience=$capAudience])">
      <xsl:message         terminate = "yes">
       <xsl:value-of          select = "name()"/>
       <xsl:text> (</xsl:text>
       <xsl:value-of          select = "concat('CDR', number(
                                        substring-after($docID, 'CDR')))"/>
       <xsl:text>) Content description missing.</xsl:text>
      </xsl:message>
     </xsl:if>
     <xsl:attribute               name = "alt">
      <xsl:value-of             select = "normalize-space(../../
                                          ContentDescriptions/
                                          ContentDescription
                                            [@language=$capLanguage
                                             and
                                             @audience=$capAudience])"/>
     </xsl:attribute>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:attribute                 name = "language">
    <xsl:value-of               select = "$capLanguage"/>
   </xsl:attribute>

   <!--
   For images in GlossaryTerm documents we need to add an audience
   attribute
   =============================================================== -->
   <xsl:if                        test = "/GlossaryTermName">
    <xsl:call-template            name = "addAudience"/>
   </xsl:if>

   <!--
   Per request from Cancer.gov the thumb attribute will always be set to
   a default of thumb=Yes if it has not been specified.
   Additionally, we were asked to set thumb=No if the specified size of
   the image is equal or greater then the actual size of the image so
   that making the image clickable wouldn't result in a larger image size.
   ======================================================================= -->

   <!-- Optional Attributes -->
   <xsl:if                        test = "$mediaId">
    <xsl:attribute                name = "id">
     <xsl:value-of              select = "$mediaId"/>
     <xsl:text>.</xsl:text>
     <xsl:number                 level = "any"
                                 count = "MediaCaption"/>
    </xsl:attribute>
   </xsl:if>

   <!--
   The UseCaption attibute turns existing captions on or off
   No UseCaption attribute defaults to UseCaption = 'Yes'
   ========================================================= -->
   <xsl:if                        test = "not($mediaUseCaption)
                                          or
                                          $mediaUseCaption = 'Yes'">
    <xsl:choose>
     <xsl:when                    test = "Caption">
      <xsl:apply-templates      select = "Caption">
       <xsl:with-param            name = "capLanguage"
                                select = "$docLanguage"/>
      </xsl:apply-templates>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates      select = "."/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:if>

  </xsl:element>
  </xsl:if>
 </xsl:template>


 <!--
 ======================================================================
 For GlossaryTerm documents the audience attribute is being added.
 This is done only for images (not for audio files) as the captions
 may be written for HP or patients (a.k.a. the genetics or the
 patient dictionary).

 Note:
   For some reason the Audience element uses singular rather than
   plural values but the DTD specifies plurals for all of it's audience
   element and attribute values
   The final values are:  [Patients | Health_professionals]
 ====================================================================== -->
 <xsl:template                    name = "addAudience">
  <xsl:attribute                  name = "audience">
      <!--
      <xsl:text>3333</xsl:text>
      <xsl:value-of select = "name()"/>
      -->
   <xsl:choose>
    <!--
    This section is for MediaLinks within each language/dictionary section -->
    <xsl:when                     test = "../Audience">
     <xsl:value-of              select = "translate(../Audience, ' ', '_')"/>
     <xsl:text>s</xsl:text>
    </xsl:when>
    <!--
    This section is for MediaLinks shared between English and Spanish
    The default audience is always 'Patients' -->
    <xsl:otherwise>
     <xsl:text>Patients</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:attribute>
 </xsl:template>


 <!--
 ======================================================================
 Suppress Comment nodes with or without copy mode.
 ====================================================================== -->
 <xsl:template                   match = "Comment | PdqKey"/>

 <xsl:template                   match = "Comment | PdqKey"
                                  mode = "copy"/>


 <!--
 ====================================================================
 Template to convert the column width of a table specified by
       col1=1*, col2=1*, col3=2*
 into percentages
      col1=25.00%, col2=25.00%, col3=50.00%
 ==================================================================== -->
 <xsl:template                    name = "setColWidth">
  <xsl:param                      name = "allCols"
                                select = "'1,'"/>

  <!--
  Creating a variable that counts the number of "column units" (CU)
  If the table contains 3 columns with the widths specified as
   col1=*, col2=2*, col3=3* then the sum of column units is 6.
  In order to convert the column widths to percentages (which
  are understood by the browser) we're applying the folloing
  formula:
     100 / CU * N = column width
  (in percent of the table width). N is the specified column width
  in column units. If the width is specified as '*' instead of 'N*'
  the column width is set to '1'.
  If users are setting a column width of '0*' it's overwritten
  to '1*'.  We don't support a '0' value to suppress a column.
  ================================================================== -->
  <xsl:variable                   name = "myTotal">
   <xsl:call-template             name = "getSum">
    <xsl:with-param               name = "allCols"
                                select = "$allCols"/>
   </xsl:call-template>
  </xsl:variable>

  <xsl:attribute                  name = "ColWidth">
   <xsl:choose>
    <xsl:when                     test = "@ColWidth = '*'
                                          or
                                          @ColWidth = '0*'">
     <xsl:value-of              select = "format-number(
                                            floor(1 div $myTotal * 100 * 100)
                                               div 100, '#.00')"/>
    </xsl:when>
    <xsl:otherwise>
     <!--
     Our mailer program fails when the sum of all column numbers is
     greater than 100% but rounding errors might cause this to be a
     problem.  To avoid this I'm multiplying the column width percentage
     by 100 and apply the floor() function to cut-off the non-integer
     part.  Dividing the resulting number by 100 and using a display
     format to 1/100th ensures no further rounding and allows the table
     width to reach in a worst case 99.9%
     ===================================================================== -->
     <xsl:value-of              select = "format-number(
                                            floor(
                                              substring-before(@ColWidth, '*')
                                                div $myTotal * 100 * 100)
                                                        div 100,
                                                        '#.00')"/>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:value-of                select = "'%'"/>
  </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Template to take a string of numbers separated by comma (',') and
 calculate the sum of those numbers.
 The string is passed in the allCols parameter as '1, 2, 3,'.
 Recursively add the first element to the sum and continue to call
 the function with the first element removed until allCols is empty.
 ==================================================================== -->
 <xsl:template                   name = "getSum">
  <xsl:param                     name = "allCols"
                               select = "."/>
  <xsl:param                     name = "pSum"
                               select = "0"/>

  <xsl:choose>
   <xsl:when                     test = "not(string-length($allCols) > 0)">
    <xsl:value-of              select = "$pSum"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:variable                name = "vHead"
                               select = "substring-before($allCols, ',')"/>
    <xsl:call-template           name = "getSum">
     <xsl:with-param             name = "allCols"
                               select = "substring-after($allCols, ',')"/>
     <xsl:with-param             name = "pSum"
                               select = "$pSum + $vHead"/>
    </xsl:call-template>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

</xsl:transform>
