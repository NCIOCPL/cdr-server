<CdrDoc Type='Filter' Id='CDR0000593716'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Validation Error IDs: Delete and Add cdr-eid attributes</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 =======================================================================
 $Id$

 Filter to strip error markup from documents coming in from the client,
 and add it to documents to be validated and returned to the client.

 Error markup is used by the client to assist the user in locating errors.
 Any markup coming in from the client is left over from a previous validation
 and is no longer useful either for saving or revalidation.

 Author: Alan Meyer.

 $Log: not supported by cvs2svn $

 =======================================================================
 -->
 <xsl:transform xmlns:xsl = "http://www.w3.org/1999/XSL/Transform" 
                  version = "1.0"
                xmlns:cdr = 'cips.nci.nih.gov/cdr'>
 <xsl:output       method = "xml"/>
 <xsl:preserve-space elements='*'/>

 <!-- ==================================================================
 Copy almost everything straight through.
 ======================================================================= -->
 <xsl:template               match = "@*|comment()|text()|
                                      processing-instruction()">
   <xsl:copy>
     <xsl:apply-templates   select = "@*|comment()|text()|
                                      processing-instruction()"/>
   </xsl:copy>
 </xsl:template>

 <!-- Delete cdr-eid attributes using empty template -->
 <xsl:template               match = "@cdr-eid"/>

 <xsl:template               match = "child::*">
   <xsl:element               name = "{name()}">
      <xsl:for-each         select = "@*">
        <xsl:copy-of        select = "."/>
      </xsl:for-each>
      <xsl:attribute          name = "cdr-eid">
         <xsl:number         level = "any"
                            format = "_a"
                             count = "node()"/>
      </xsl:attribute>
      <xsl:apply-templates/>
   </xsl:element>
 </xsl:template>
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>