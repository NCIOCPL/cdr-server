<?xml version='1.0' encoding='utf-8'?>
<!-- $Id$ -->
<!-- Filter title: Vendor Filter: GeneticsProfessional -->
<!-- 

BZIssue::4751 - Modify BU Reports to display LOERefs
BZIssue::4629 - Vendor filter changes for GenProf

===============================================================
Filter to create Vendor Genetics Professionals XML documents 
=============================================================== -->
<xsl:transform               xmlns:xsl = 'http://www.w3.org/1999/XSL/Transform'
                             xmlns:cdr = 'cips.nci.nih.gov/cdr'
                               version = '1.0'
               exclude-result-prefixes = 'cdr'>

 <xsl:output                    method = 'xml'
                  omit-xml-declaration = 'no'
                              encoding = 'utf-8'/>

 <xsl:include  href = "cdr:name:Module: Global Filter Templates"/>
 <xsl:include  href = "cdr:name:Module: Vendor Address Templates"/>
 <xsl:include  href = "cdr:name:Module: Vendor Phone Templates"/>

 <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
 <xsl:param                       name = "DateFirstPub"
                                select = "''"/>

 <!-- 
 =================================================================
 Copy control information 
 ================================================================= -->
 <xsl:template                   match = "Person">
  <xsl:element                    name = "GENETICSPROFESSIONAL">
   <xsl:for-each                select = "DocId">
    <xsl:attribute                name = "id">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:for-each>

   <!--
   Collect the individual sections that make up the GenProf vendor output
   ====================================================================== -->
   <xsl:choose>
    <!-- New documents don't contain Legacy data -->
    <xsl:when                     test = "ProfessionalInformation/
                                            GeneticsProfessionalDetails/
                                            LegacyGeneticsData/
                                            LegacyID">
     <xsl:apply-templates       select = "ProfessionalInformation/
                                            GeneticsProfessionalDetails/
                                            LegacyGeneticsData/
                                            LegacyID"/>
    </xsl:when>
<!--
    Changed DTD to make ID element optional
    =======================================
    <xsl:otherwise>
     <xsl:element                 name = "ID">
     <xsl:value-of              select = "number(
                                                substring-after(/Person/DocId, 
                                                                'CDR'))"/>
     </xsl:element>
    </xsl:otherwise>
-->
   </xsl:choose>

   <xsl:apply-templates         select = "PersonNameInformation"/>

   <!--
   We're only interested in locations marked with the attribute
     UsedFor = GP
   ====================================================================== -->
   <xsl:apply-templates         select = "PersonLocations/
                                            PrivatePractice[@UsedFor]/
                                            PrivatePracticeLocation         |
                                          PersonLocations/
                                            OtherPracticeLocation[@UsedFor]"/>

   <xsl:apply-templates         select = "ProfessionalType"/>
   <xsl:apply-templates         select = "ProfessionalInformation/
                                            GeneticsProfessionalDetails/
                                            GeneticsSpecialtyInformation"/>
   <xsl:apply-templates         select = "ProfessionalInformation/
                                            GeneticsProfessionalDetails/
                                            GeneticsTeamServices"/>
   <xsl:if                        test = "ProfessionalInformation/
                                            GeneticsProfessionalDetails/
                                            FamilialCancerSyndrome">
    <xsl:element                  name = "GENETICSERVICES">
     <xsl:apply-templates       select = "ProfessionalInformation/
                                             GeneticsProfessionalDetails/
                                             FamilialCancerSyndrome"/>
    </xsl:element>
   </xsl:if>

   <xsl:if                        test = "ProfessionalInformation/
                                            GeneticsProfessionalDetails/
                                            MemberOfGeneticsSociety">
    <xsl:element                  name = "MEMBERSHIP">
     <xsl:apply-templates       select = "ProfessionalInformation/
                                            GeneticsProfessionalDetails/
                                            MemberOfGeneticsSociety"/>
    </xsl:element>
   </xsl:if>

   <xsl:if                        test = "ProfessionalInformation/
                                            GeneticsProfessionalDetails/
                                            ServiceLimitations">
    <xsl:element                  name = "NOTES">
     <xsl:apply-templates       select = "ProfessionalInformation/
                                            GeneticsProfessionalDetails/
                                            ServiceLimitations"/>
    </xsl:element>
   </xsl:if>

  </xsl:element> 
 </xsl:template>


 <!-- 
 ====================================================================
 Copy ID information
 For Legacy records this will be the CIAT DB ID, otherwise it will 
 be identical to the CDR-ID.
 ==================================================================== -->
 <xsl:template                   match = "LegacyID">
  <xsl:element                    name = "ID">
   <xsl:choose>
    <xsl:when                     test = "/Person/ProfessionalInformation/
                                            GeneticsProfessionalDetails/
                                            LegacyGeneticsData/
                                            LegacyID">
     <xsl:value-of              select = "."/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>9999999999</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Assemble the PersonNameInformation for a person.
 (Eliminating the StandardProfessionalSuffix element)
 ==================================================================== -->
 <xsl:template                   match = "PersonNameInformation">
  <xsl:element                    name = "NAME">
   <xsl:element                   name = "SNAME">
    <xsl:value-of               select = "substring(GivenName, 1, 1)"/>
    <xsl:choose>
     <xsl:when                    test = "MiddleInitial">
      <xsl:value-of             select = "substring(MiddleInitial, 1, 1)"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "substring(substring-after(
                                                     GivenName, ' '), 1, 1)"/>
     </xsl:otherwise>
    </xsl:choose>
    <xsl:text> </xsl:text>
    <xsl:apply-templates        select = "SurName"/>
   </xsl:element>

   <xsl:element                   name = "FIRSTNAME">
    <xsl:apply-templates        select = "GivenName"/>
    <xsl:if                       test = "MiddleInitial">
     <xsl:text> </xsl:text>
     <xsl:value-of              select = "substring(MiddleInitial, 1, 1)"/>
     <xsl:text>.</xsl:text>
    </xsl:if>
   </xsl:element>

   <xsl:element                   name = "LASTNAME">
    <xsl:apply-templates        select = "SurName"/>
   </xsl:element>

   <xsl:apply-templates         select = "Prefix"
                                  mode = "copy"/>
   <xsl:element                   name = "SUFFIX">
    <xsl:apply-templates        select = "GenerationSuffix"/>
   </xsl:element>

   <xsl:apply-templates         select = "NameFormat"
                                  mode = "copy"/>
  </xsl:element>

  <!-- 
  If the ProfessionalSuffix element is prepared for the vendor output
  it's created from the Standard/Custom-ProfessionalSuffix elements
  (when clause).
  However, if the ProfessionalSuffix element is only to be copied -
  because it's the second pass of this filter module - the element 
  only needs to be copied as is (otherwise clause).
  ==================================================================== -->
  <xsl:choose>
   <xsl:when                      test = "ProfessionalSuffix/
                                            StandardProfessionalSuffix |
                                          ProfessionalSuffix/
                                            CustomProfessionalSuffix">
    <xsl:for-each               select = "ProfessionalSuffix/
                                            StandardProfessionalSuffix |
                                          ProfessionalSuffix/
                                            CustomProfessionalSuffix">
     <xsl:element                 name = "DEGREE">
      <!-- Clean up the periods of the Custom Prof Suffix  -->
      <xsl:choose>
       <xsl:when                  test = "name() = 'CustomProfessionalSuffix'">
        <xsl:value-of           select = "translate(node(), '.', '')"/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:value-of           select = "."/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:element>
    </xsl:for-each>
   </xsl:when>
  </xsl:choose>
 </xsl:template>


 <!-- 
 =====================================================================
 Copy Contact Information for Private Practice and Home location
 Note:
 There doesn't exist any Home or PrivatePractice location for GenProfs
 at this time.  If they start to exist the filter needs to be extended
 to create the location from it according to the DTD.  VE, 2010-01-13

 Note:
 In order for the Mailer addresses to be carried over with the Mailer
 filter set we need to iterate over the tokens of the @UsedFor 
 attribute and create a separate address block for each.
 ===================================================================== --> 
 <!--
 Call the do-each-token template to iterate over the individual tokens
 ===================================================================== -->
 <xsl:template                   match = "OtherPracticeLocation  |
                                          PrivatePracticeLocation">
  <xsl:variable                   name = "usedfor">
   <xsl:choose>
    <xsl:when                     test = "@UsedFor">
     <xsl:value-of              select = "normalize-space(@UsedFor)"/>
    </xsl:when>
    <xsl:when                     test = "../@UsedFor">
     <xsl:value-of              select = "normalize-space(../@UsedFor)"/>
    </xsl:when>
   </xsl:choose>

  </xsl:variable>
  
  <xsl:call-template              name = "do-each-token">
   <xsl:with-param                name = "tokens"
                                select = "$usedfor"/>
  </xsl:call-template>
 </xsl:template>


 <!--
 =====================================================================
 Template to iterate over the content of an attribute
 ===================================================================== -->
 <xsl:template                    name = "do-each-token">
  <xsl:param                      name = "tokens"/>
  
  <xsl:if                         test = "$tokens">
   <xsl:choose>
    <xsl:when                     test = "contains($tokens, ' ')">
     <xsl:call-template           name = "makePracticeLocation">
      <xsl:with-param             name = "token"
                                select = "substring-before($tokens, ' ')"/>
     </xsl:call-template>
     <xsl:call-template           name = "do-each-token">
      <xsl:with-param             name = "tokens"
                                select = "substring-after($tokens, ' ')"/>
     </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
     <xsl:call-template           name = "makePracticeLocation">
      <xsl:with-param             name = "token"
                                select = "$tokens"/>
     </xsl:call-template>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:if>
 </xsl:template>


 <!--
 =====================================================================
 Template to create the individual element with the token content as
 a tag.
 ===================================================================== -->
 <xsl:template                    name = "makePracticeLocation">
  <xsl:param                      name = "token"/>
     <!-- xsl:element                 name = "PRACTICELOCATION">
      <xsl:attribute              name = "UsedFor">
       <xsl:value-of            select = "$token"/>
      </xsl:attribute>
      <Volker>Dada</Volker>
     </xsl:element>
 </xsl:template -->


 <!-- xsl:template                   match = "OtherPracticeLocation  |
                                          PrivatePracticeLocation" -->
  <xsl:element                    name = "PRACTICELOCATIONS">
   <xsl:attribute                 name = "UsedFor">
    <xsl:value-of               select = "$token"/>
   </xsl:attribute>
   <!-- 
   =====================================================================
   Copy Contact Information for Private Practice and Home location
   ===================================================================== --> 
   <xsl:element                   name = "INSTITUTION">
    <xsl:value-of               select = "OrganizationLocation/
                                          OfficialName/
                                          Name"/>
   </xsl:element>

   <!--
   ================================================================
   Contact Information for Other Practice Locations 
   ================================================================ -->
   <xsl:variable                  name = "ind"
                                select = "@cdr:id"/>
   <xsl:variable                  name = "Stat"
                                select = "../../Status/CurrentStatus"/>
   <xsl:variable                  name = "orgloc" 
                                select = "OrganizationLocation/
                                          Organization/@cdr:ref"/>
   <xsl:variable                  name = "orgnameloc"
                                select = "substring-before 
                                           (OrganizationLocation/
                                            Organization/@cdr:ref,'#')"/>

   <xsl:variable                  name = "orgAddressFID"
                                select = "substring-after
                                           (OrganizationLocation/
                                            Organization/@cdr:ref,'#')"/>
   <xsl:call-template             name = "getPostalAddress">
    <xsl:with-param               name = "orgAddressFID"
                                select = "$orgAddressFID"/>
   </xsl:call-template>

   <xsl:call-template             name = "getGenProfPrivatePractice"/>

   <xsl:call-template             name = "getPhone">
    <xsl:with-param               name = "orgAddressFID"
                                select = "$orgAddressFID"/>
   </xsl:call-template>

   <xsl:call-template             name = "getEmail"/>
   <xsl:call-template             name = "getPPEmail"/>

  </xsl:element>
 </xsl:template>


 <!-- 
 =====================================================================
 Copy PostalAddress information for Home and PrivatePracticeLocation 
 This template is called by the Home, PrivatePractice template and
 Protocol denormalization filter.
 ==================================================================== --> 
 <xsl:template                    name = "getGenProfPrivatePractice">
   <xsl:if                        test = "../../../Status/
                                          CurrentStatus = 'Inactive' 
                                          or ../PreviousLocaton">
    <xsl:attribute                name = "Status">
     <xsl:text>Inactive--Contact Information may not be current</xsl:text>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates         select = "PostalAddress |
                                          FaxXXX   |
                                          WebSite"/>
 </xsl:template>


 <!--
 ====================================================================
 Postal Address
 ==================================================================== -->
 <xsl:template                   match = "PostalAddress |
                                          SpecificPostalAddress |
                                          BoardContactPostalAddress">
  <xsl:param                      name = "native"
                                select = "''"/>

   <xsl:for-each                select = "Street">
    <xsl:element                  name = "CADD">
     <xsl:apply-templates       select = "."/>
    </xsl:element>
   </xsl:for-each>
    <xsl:element                  name = "CADD">
     <xsl:apply-templates       select = "City"/>
     <xsl:if                      test = "CitySuffix">
      <xsl:text> </xsl:text>
      <xsl:apply-templates      select = "CitySuffix"/>
     </xsl:if>
     <xsl:text>, </xsl:text>
     <xsl:apply-templates       select = "PoliticalSubUnit_State/
                                           PoliticalSubUnitShortName"/>
     <xsl:text> </xsl:text>    
     <xsl:apply-templates       select = "PostalCode_ZIP"/>
    </xsl:element>
    <xsl:if                       test = "City">
     <xsl:element                 name = "CCIT">
      <xsl:apply-templates      select = "City"/>
     </xsl:element>
    </xsl:if>

   <xsl:apply-templates         select = "CitySuffix"
                                  mode = "copy"/>

    <xsl:if                       test = "PoliticalSubUnit_State">
     <xsl:element                 name = "CPUN">
      <xsl:apply-templates      select = "PoliticalSubUnit_State/
                                           PoliticalSubUnitShortName"/>
     </xsl:element>
    </xsl:if>

    <xsl:if                       test = "PostalCode_ZIP">
     <xsl:element                 name = "CCOD">
      <xsl:apply-templates      select = "PostalCode_ZIP"/>
     </xsl:element>
    </xsl:if>

    <xsl:element                  name = "CCTY">
     <xsl:apply-templates       select = "Country/CountryFullName"/>
    </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Postal Address
 ==================================================================== -->
 <xsl:template                    name = "getPhone">
  <xsl:param                      name = "orgAddressFID"/>

  <xsl:if                         test = "OrganizationLocation/
                                          Organization/OrganizationLocations/
                                          OrganizationLocation/
                                          Location[@cdr:id = $orgAddressFID]/
                                          Phone">
   <xsl:element                   name = "CPHN">
    <xsl:value-of               select = "../Phone"/>
     <xsl:value-of              select = "OrganizationLocation/
                                          Organization/OrganizationLocations/
                                          OrganizationLocation/
                                          Location[@cdr:id = $orgAddressFID]/
                                          Phone"/>
   </xsl:element>
  </xsl:if>

  <!-- xsl:if                         test = "SpecificPhone">
   <xsl:element                   name = "CPHN">
    <xsl:value-of               select = "SpecificPhone"/>
   </xsl:element>
  </xsl:if -->

  <xsl:if                         test = "SpecificPhone
                                          and
                                          not(SpecificPhone[@Public='No'])
                                          or 
                                          TollFreePhone
                                          or
                                          SpecificTollFreePhone">
   <xsl:element                   name = "CPHN">
    <xsl:for-each               select = "Phone         |
                                          SpecificPhone | 
                                          TollFreePhone |
                                          SpecificTollFreePhone">
     <xsl:if                      test = "not(position() = 1)">
      <xsl:text> </xsl:text>
     </xsl:if>
     <xsl:value-of              select = "."/>
    </xsl:for-each>
   </xsl:element>
  </xsl:if>
 </xsl:template>


 <!--
 ====================================================================
 Get the email address for OtherPracticeLocations
 The email address is only maintained for the CIPSContact location
 ==================================================================== -->
 <xsl:template                    name = "getEmail">
  <xsl:variable                   name = "gpContact">
   <xsl:for-each                select = "/Person/
                                           PersonLocations/
                                           OtherPracticeLocation">
    <xsl:if                       test = "contains(@UsedFor, 'GPMailer')">
     <xsl:value-of              select = "@cdr:id"/>
    </xsl:if>
   </xsl:for-each>
  </xsl:variable>

   <xsl:if                        test = "../OtherPracticeLocation
                                               [@cdr:id = $gpContact]/
                                          SpecificEmail
                                          and
                                          not(../OtherPracticeLocation
                                               [@cdr:id = $gpContact]/
                                          SpecificEmail[@Public='No'])">
    <xsl:element                  name = "CEML">
     <xsl:value-of              select = "../OtherPracticeLocation
                                               [@cdr:id = $gpContact]/
                                          SpecificEmail"/>
    </xsl:element>
   </xsl:if>
 </xsl:template>


 <!--
 ====================================================================
 Get the email address for PrivatePractice locations.
 The email address is only maintained for the CIPSContact location
 ==================================================================== -->
 <xsl:template                    name = "getPPEmail">
  <xsl:variable                   name = "gpContact">
   <xsl:for-each                select = "/Person/
                                           PersonLocations/
                                           PrivatePractice">
    <xsl:if                       test = "contains(@UsedFor, 'GPMailer')">
     <xsl:value-of              select = "PrivatePracticeLocation/@cdr:id"/>
    </xsl:if>
   </xsl:for-each>
  </xsl:variable>

   <xsl:if                        test = "../PrivatePracticeLocation
                                               [@cdr:id = $gpContact]/
                                          Email
                                          and
                                          not(../PrivatePracticeLocation
                                               [@cdr:id = $gpContact]/
                                          Email[@Public='No'])">
    <xsl:element                  name = "CEML">
     <xsl:value-of              select = "../PrivatePracticeLocation
                                               [@cdr:id = $gpContact]/
                                          Email"/>
    </xsl:element>
   </xsl:if>
 </xsl:template>


 <!-- 
 =======================================================================
 Template for ProfessionalInformation
 ======================================================================= -->
 <xsl:template                   match = "ProfessionalInformation">
  <xsl:if                         test = "PhysicianDetails/
                                          AdministrativeInformation/
                                          Directory/Include = 'Include'">
   <xsl:if                        test = "../Status/CurrentStatus = 'Active'">
    <ProfessionalInformation>
     <xsl:for-each              select = "PDQBoardMembershipDetails/
                                          PDQEditorialBoard/Organization/
                                          OrganizationName[1]">
      <xsl:variable               name = "Ref"    
                                select = "../@cdr:ref"/>
      <PDQBoardMembership          ref = "{$Ref}">
       <xsl:value-of            select = "."/>
      </PDQBoardMembership>
     </xsl:for-each>
     <xsl:for-each              select = "PDQBoardMembershipDetails/
                                          PDQAdvisoryBoard/Organization/
                                          OrganizationName[1]">
      <xsl:variable               name = "Ref"    
                                select = "../@cdr:ref"/>
      <PDQBoardMembership          ref = "{$Ref}">
       <xsl:value-of            select = "."/>
      </PDQBoardMembership>
     </xsl:for-each>
     <xsl:for-each              select = "PDQBoardMembershipDetails/
                                          PDQVoluntaryProtocolReviewBoard/
                                          Organization/
                                          OrganizationName[1]">
      <xsl:variable               name = "Ref"    
                                select = "../@cdr:ref"/>
      <PDQBoardMembership          ref = "{$Ref}">
       <xsl:value-of            select = "."/>
      </PDQBoardMembership>
     </xsl:for-each>

     <PhysicianDetails>
      <xsl:apply-templates      select = "PhysicianDetails/
                                          AdministrativeInformation"
                                  mode = "copy"/>
      <xsl:apply-templates      select = "PhysicianDetails/
                                          PhysicianSpecialtyInformation"
                                  mode = "copy"/>
                               
    <!-- =========================================================== 
       Copy Physician Membership Information, Member of Cooperative
       Group, Member of Medical Society
     ================================================================= -->
      <PhysicianMembershipInformation>   
       <xsl:for-each            select = "PhysicianDetails/
                                          PhysicianMembershipInformation/
                                          MemberOfCooperativeGroup/
                                          CooperativeGroup">
        <MemberOfCooperativeGroup>
         <xsl:attribute           name = "ref">
          <xsl:value-of         select = "Organization/@cdr:ref"/>
         </xsl:attribute>
         <xsl:value-of          select = "Organization/OrganizationName"/>
        </MemberOfCooperativeGroup>
       </xsl:for-each>

<!-- ==================================================================
                  Copy MemberOfMedicalSociety
     ================================================================== -->
       <xsl:apply-templates     select = "PhysicianDetails/
                                         PhysicianMembershipInformation/
                                         MemberOfMedicalSociety" 
                                  mode = "copy"/>
      </PhysicianMembershipInformation>
     </PhysicianDetails>  
    </ProfessionalInformation>
   </xsl:if>
  </xsl:if>
 </xsl:template>


 <!-- 
 =====================================================================
 Copy ProfessionalType to TYPE element
 ==================================================================== --> 
 <xsl:template                   match = "ProfessionalType">
  <xsl:element                    name = "TYPE">
   <xsl:value-of                select = "substring-before(., ' (')"/>
  </xsl:element>
 </xsl:template>


 <!-- 
 =====================================================================
 Copy GeneticsSpecialtyInformation to SPECIALTY element
 ==================================================================== --> 
 <xsl:template                   match = "GeneticsSpecialtyInformation">
  <xsl:for-each                 select = "GeneticsBoardCertification">
   <xsl:element                   name = "SPECIALTY">
    <xsl:apply-templates        select = "."/>
   </xsl:element>
  </xsl:for-each>
 </xsl:template>


 <!-- 
 =====================================================================
 Copy GeneticsSpecialtyInformation to SPECIALTY element
 ==================================================================== --> 
 <xsl:template                   match = "GeneticsBoardCertification">
  <xsl:element                    name = "SPECIALTYNAME">
   <xsl:apply-templates         select = "GeneticsBoardName"/>
  </xsl:element>
  <xsl:choose>
   <xsl:when                      test = "CertificationStatus = 'Certified'">
    <xsl:element                  name = "BDCT">
     <xsl:text>Yes</xsl:text>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                  name = "BDCT">
     <xsl:text>No</xsl:text>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 =====================================================================
 Copy GeneticsSpecialtyInformation to SPECIALTY element
 ==================================================================== --> 
 <xsl:template                   match = "GeneticsTeamServices">
  <xsl:element                    name = "TEAMSERVICES">
   <xsl:value-of                select = "."/>
  </xsl:element>
 </xsl:template>


 <!-- 
 =====================================================================
 Create the FAMILYCANCERSYNDROME block
 ==================================================================== --> 
 <xsl:template                   match = "FamilialCancerSyndrome">
  <xsl:element                    name = "FAMILYCANCERSYNDROME">
   <xsl:element                   name = "SYNDROMENAME">
    <xsl:value-of               select = "Term/
                                          MenuItem/
                                          DisplayName"/>
   </xsl:element>

   <xsl:apply-templates         select = "TermMenus"/>
  </xsl:element>
 </xsl:template>

 <!-- 
 =====================================================================
 Create the CancerType/CancerSite elements
 The data comes from the denorm filter in the format
    GPCancerType
       GPCancerSite
    GPCancerType
       GPCancerSite
 If two or more CancerTypes are identical we're suppressing the 
 display of the second one and include the GPCancerSite in the display
 of the second one like this:
    GPCancerType
       GPCancerSite1
       GPCancerSite2
 ==================================================================== --> 
 <xsl:template                   match = "TermMenus">
  <xsl:for-each                 select = "GPCancerType">
   <!-- Display only the first unique CancerType -->
   <xsl:if                        test = "not(DisplayName = 
                                          preceding-sibling::GPCancerType/
                                          DisplayName)">

    <xsl:element                  name = "CANCERTYPE">
     <xsl:element                 name = "TYPENAME">
       <xsl:value-of            select = "DisplayName"/>
     </xsl:element>
     <xsl:variable                name = "location"
                                select = "DisplayName"/>

     <!-- Collect ALL of the CancerSites for this CancerType -->
     <xsl:for-each              select = "../GPCancerType
                                              [DisplayName = $location]/
                                          GPCancerSite">
      <xsl:element                name = "CANCERSITE">
       <xsl:value-of            select = "DisplayName"/>
      </xsl:element>
     </xsl:for-each>
    </xsl:element>
   </xsl:if>
  </xsl:for-each>
 </xsl:template>


 <!-- 
 =====================================================================
 Copy GeneticsSpecialtyInformation to SPECIALTY element
 ==================================================================== --> 
 <xsl:template                   match = "MemberOfGeneticsSociety">
  <xsl:element                    name = "INSTITUTION">
   <xsl:value-of                select = "."/>
  </xsl:element>
 </xsl:template>

</xsl:transform>
