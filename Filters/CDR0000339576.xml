<?xml version="1.0" ?>
<!-- Filter title: Module: InLine Markup Formatter -->
<!--
==========================================================================
Filter handling all In-Line Markup elements of Summary Docs
Written by Volker Englisch, 2004-07-16

BZIssue::4919 - [Summary] QC Report Bugs
BZIssue::4934 - [Summary] Change Display for Link Elements in QC Reports
BZIssue::4970 - [Summary] Key Point display problems in QC reports
BZIssue::5065 - [Summaries] 2 More Patient Summary QC Report Display Options
BZIssue::5116 - [Summaries] Personalized Word Macros for Summaries in MS Word
BZIssue::5157 - [Summaries] HP Treatment summaries not retrieving GTN with
                            Concept QC Report
BZIssue::5159 - [Summaries] Changes to HP & Patient QC Report Interfaces and
                            Display Options
BZIssue::5134 - [Summaries] Citation Links in QC Reports
OCECDR-3956: Allow CitationLinks in Image Captions

========================================================================== -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr">

 <xsl:param                       name = "thisDocID"
                                select = "document('cdrutil:/docid')"/>
 <xsl:param                       name = "DisplayModuleMarkup"
                                select = "'N'"/>
 <xsl:param                       name = "DisplayPubImages"
                                select = "'Y'"/>

 <xsl:variable                    name = "mediaAudience">
  <xsl:choose>
   <xsl:when                      test = "/Summary/
                                            SummaryMetaData/
                                            SummaryAudience =
                                              'Health professionals'">
    <xsl:text>Health_professionals</xsl:text>
   </xsl:when>
   <xsl:otherwise>
    <xsl:text>Patients</xsl:text>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:variable>

 <xsl:variable                    name = "mediaLanguage">
  <xsl:choose>
   <xsl:when                      test = "/Summary/
                                            SummaryMetaData/
                                            SummaryLanguage = 'English'">
    <xsl:text>en</xsl:text>
   </xsl:when>
   <xsl:otherwise>
    <xsl:text>es</xsl:text>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:variable>

 <!--
 ======================================================================
 Display a Summary Reference
 The element should display the QC report of the particular document
 Note: This template used to include processing for ProtocolRefs, too.
 ====================================================================== -->
 <xsl:template                   match = "SummaryRef">
  <xsl:element                    name = "a">
   <xsl:attribute                 name = "href">
    <!--
    For reformatted patient summaries run a different QC report
    =========================================================== -->
    <xsl:choose>
     <xsl:when                    test = "LinkedSummary
                                           /LinkedSummaryAudience = 'Patients'
                                          or
                                           LinkedSummary/LinkedSummaryType =
                                           concat('Integrative, alternative, ',
                                                  'and complementary therapies')">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;ReportType=pat',
                                                 '&amp;Session=guest')"/>
                                             <!--
                                                 '&amp;DocVersion=-1',
                                             -->
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
                                             <!--
                                                 '&amp;DocVersion=-1',
                                             -->
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>

   <xsl:choose>
    <xsl:when                     test = "name() = 'SummaryRef'
                                              and
                                              SummaryRefText">
     <xsl:apply-templates       select = "SummaryRefText"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:element>

 </xsl:template>


 <!--
 ======================================================================
 Display a ProtocolRef
 The element should link to Cancer.gov using the following
 format:
    https://www.cancer.gov/clinicaltrials/NCT00004451
 ====================================================================== -->
 <xsl:template                   match = "ProtocolRef">
  <xsl:element                    name = "a">
   <xsl:attribute                 name = "href">
    <xsl:text>https://www.cancer.gov/clinicaltrials/</xsl:text>
    <xsl:value-of               select = "@nct_id"/>
   </xsl:attribute>
   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Display a SummaryFragmentRef or LOEFragmentRef.
 These elements should be created as links to sections within the
 document.
 ====================================================================== -->
 <xsl:template                   match = "SummaryFragmentRef |
                                          LOEFragmentRef">
  <xsl:element                    name = "a">
   <!--
   Attribute to being able and specify the CSS for this link
   ========================================================= -->
   <xsl:attribute                 name = "class">
    <xsl:text>idLink</xsl:text>
   </xsl:attribute>

   <!--
   Attribute to display the element name as a mouse-hover
   ====================================================== -->
   <xsl:attribute                 name = "title">
    <xsl:value-of               select = "name()"/>
   </xsl:attribute>

   <!--
   Attribute to specify the link.  If the link is an internal link
   do not go through the filter process but jump to the anker
   element directly.
   =============================================================== -->
   <xsl:attribute                 name = "href">
    <!--
    Create an anker link if the link points to a location
    within the same document
    =========================================================== -->
    <xsl:choose>
     <!-- Internal link -->
     <xsl:when                    test = "$thisDocID =
                                            substring-before(@cdr:href, '#')">
      <xsl:value-of             select = "concat('#',
                                            substring-after(@cdr:href, '#'))"/>
     </xsl:when>
     <!--
     If the SummaryFragment CDR-ID is different from the document's
     CDR-ID there are several possible scenarios:
     a) We're linking to a different document or
     b) We're linking from a module to the main document or
        vise versa.
     ========================================================== -->
     <xsl:otherwise>
      <xsl:choose>
       <!--
       Handle links from a module to the main document
       =========================================================== -->
       <xsl:when                  test = "//SummarySection[@cdr:ref]/@cdr:ref =
                                           substring-before(@cdr:href, '#')">
        <xsl:value-of           select = "concat('#_sm_',
                                            translate(@cdr:href, '#', ''))"/>
       </xsl:when>
       <!--
       For reformatted patient summaries run 'pat' QC report
       =========================================================== -->
       <xsl:when                  test = "LinkedSummary
                                            /LinkedSummaryAudience = 'Patients'
                                          or
                                           LinkedSummary
                                            /LinkedSummaryType =
                                           concat('Integrative, alternative, ',
                                                  'and complementary therapies')">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=',
                                                 substring-before(@cdr:href, '#'),
                                                 '&amp;ReportType=pat',
                                                 '&amp;Session=guest',
                                                 '#',
                                                 substring-after(@cdr:href, '#'))"/>
                                             <!--
                                                 '&amp;DocVersion=-1',
                                             -->

       </xsl:when>
       <!--
       For old patient summaries and HP run regular QC report
       =========================================================== -->
       <xsl:otherwise>
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=',
                                                 substring-before(@cdr:href, '#'),
                                                 '&amp;Session=guest',
                                                 '#',
                                                 substring-after(@cdr:href, '#'))"/>
                                             <!--
                                                 '&amp;DocVersion=-1',
                                             -->

       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>

   <xsl:choose>
    <xsl:when                     test = "name() = 'SummaryFragmentRef'
                                          and
                                          SummaryRefText">
     <xsl:apply-templates       select = "SummaryRefText"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates/>
    </xsl:otherwise>
   </xsl:choose>

  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Display a Documentation Reference as a hyperlink
 ====================================================================== -->
 <xsl:template                   match = "DocumentationRef   |
                                          DocumentationLink">
  <xsl:variable                   name = "docRef"
                                select = "@cdr:href"/>
  <xsl:element                    name = "a">
   <xsl:attribute                 name = "href">
    <xsl:text>/cgi-bin/cdr/Filter.py?DocId=</xsl:text>
    <xsl:value-of               select = "$docRef"/>
    <xsl:text>&amp;Filter=name:Documentation+Help+Screens+Filter</xsl:text>
   </xsl:attribute>
   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Display a Documentation Reference as a hyperlink
 ====================================================================== -->
 <xsl:template                   match = "DocumentationFragmentRef   |
                                          DocumentationFragmentLink">
  <xsl:variable                   name = "docRef"
                                select = "substring-before(@cdr:href, '#')"/>
  <xsl:variable                   name = "docFrag"
                                select = "substring-after(@cdr:href, '#')"/>
  <xsl:element                    name = "a">
   <xsl:attribute                 name = "href">
    <xsl:text>/cgi-bin/cdr/Filter.py?DocId=</xsl:text>
    <xsl:value-of               select = "$docRef"/>
    <xsl:text>#</xsl:text>
    <xsl:value-of               select = "$docFrag"/>
    <xsl:text>&amp;Filter=name:Documentation+Help+Screens+Filter</xsl:text>
   </xsl:attribute>
   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Link to DrugInfoSummaries
 ====================================================================== -->
 <xsl:template                   match = "DrugSummaryRef">
  <xsl:choose>
   <xsl:when                      test = "Deletion">
    <xsl:element                  name = "a">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
                                                 '&amp;DocVersion=-1',
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <span class="deleteDisRef">
      <xsl:value-of             select = "."/>
     </span>
    </xsl:element>
   </xsl:when>
   <xsl:when                      test = "Insertion">
    <xsl:element                  name = "a">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <span class="insertDisRef">
      <xsl:value-of             select = "."/>
     </span>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                  name = "a">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <xsl:value-of              select = "."/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ===================================================================
 Decide which version of the GlossaryTermRef/LOERef to display
 =================================================================== -->
 <xsl:template                   match = "GlossaryTermRef | LOERef">
  <xsl:choose>
   <xsl:when                      test = "/Summary/SummaryMetaData/
                                          SummaryAudience =
                                                          'Health professionals'
                                          and
                                          /Summary/SummaryMetaData/
                                          SummaryType !=
                                       'Integrative, alternative, and complementary therapies'
                                          and
                                          /Summary/SummaryMetaData/
                                          SummaryLanguage = 'English'">
    <xsl:apply-templates        select = "."
                                  mode = "HPE"/>
   </xsl:when>
   <xsl:when                      test = "/Summary/
                                          SummaryMetaData/SummaryAudience =
                                          'Health professionals'
                                          and
                                          /Summary/SummaryMetaData/
                                          SummaryLanguage = 'Spanish'">
    <xsl:apply-templates        select = "."
                                  mode = "HPS"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                    test = "$whoAmI = 'ProtHPQc'">
      <xsl:apply-templates      select = "."
                                  mode = "HPE"/>
     </xsl:when>
     <xsl:when                    test = "$whoAmI = 'ProtPatQc'">
      <xsl:apply-templates      select = "."
                                  mode = "PE"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates      select = "."
                                  mode = "PE"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ======================================================================
 Link to glossaryTermRefs - Patients RS and Protocol
 Note: Patient Version Summaries are not being reviewed by an
       Advisory board according to MB.  I'm not implementing a
       different style for advisory-board markup for this template.
                                                       VE, 2005-05-10
 ====================================================================== -->
 <xsl:template                   match = "GlossaryTermRef"
                                  mode = "PE">
  <xsl:choose>
   <xsl:when                      test = "GlossaryText/
                                          Deletion">
    <xsl:element                  name = "a">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <xsl:choose>
      <xsl:when                   test = "GlossaryText/
                                           Deletion[@RevisionLevel='approved']">
       <span class="deleteGlossaryTerm">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                           Deletion[@Source='advisory-board']">
          <span class="deleteapproved_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Deletion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Deletion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:when                   test = "GlossaryText/
                                           Deletion[@RevisionLevel='proposed']">
       <span class="deleteGlossaryTerm_prop">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                           Deletion[@Source='advisory-board']">
          <span class="deleteproposed_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Deletion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Deletion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:when                   test = "GlossaryText/
                                           Deletion[@RevisionLevel='publish']">
       <span class="deleteGlossaryTerm_pup">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                           Deletion[@Source='advisory-board']">
          <span class="deletepublish_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Deletion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Deletion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:value-of            select = "GlossaryText"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:element>
   </xsl:when>
   <xsl:when                      test = "GlossaryText/Insertion">
    <xsl:element                  name = "a">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <xsl:choose>
      <xsl:when                   test = "GlossaryText/
                                          Insertion[@RevisionLevel='approved']">
       <span class="insertGlossaryTerm">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                          Insertion[@Source='advisory-board']">
          <span class="insertapproved_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Insertion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Insertion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:when                   test = "GlossaryText/
                                          Insertion[@RevisionLevel='proposed']">
       <span class="insertGlossaryTerm_prop">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                          Insertion[@Source='advisory-board']">
          <span class="insertproposed_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Insertion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Insertion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:when                   test = "GlossaryText/
                                          Insertion[@RevisionLevel='publish']">
       <span class="insertGlossaryTerm_pup">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                          Insertion[@Source='advisory-board']">
          <span class="insertpublish_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Insertion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Insertion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:value-of            select = "GlossaryText"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                  name = "a">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <xsl:value-of              select = "GlossaryText"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ======================================================================
 Link to LOERefs - Patients RS and Protocol
 Note: Patient Version Summaries are not being reviewed by an
       Advisory board according to MB.  I'm not implementing a
       different style for advisory-board markup for this template.
                                                       VE, 2005-05-10
 ====================================================================== -->
 <xsl:template                   match = "LOERef"
                                  mode = "PE">
  <xsl:choose>
   <xsl:when                      test = "GlossaryText/Deletion">
    <xsl:element                  name = "a">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <xsl:choose>
      <xsl:when                   test = "GlossaryText/
                                          Deletion[@RevisionLevel='approved']">
       <span class="deleteGlossaryTerm">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                          Deletion[@Source='advisory-board']">
          <span class="deleteapproved_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Deletion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Deletion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:when                   test = "GlossaryText/
                                          Deletion[@RevisionLevel='proposed']">
       <span class="deleteGlossaryTerm_prop">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                          Deletion[@Source='advisory-board']">
          <span class="deleteproposed_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Deletion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Deletion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:when                   test = "GlossaryText/
                                          Deletion[@RevisionLevel='publish']">
       <span class="deleteGlossaryTerm_pup">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                          Deletion[@Source='advisory-board']">
          <span class="deletepublish_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Deletion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Deletion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:value-of            select = "GlossaryText"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:element>
   </xsl:when>
   <xsl:when                      test = "GlossaryText/
                                          Insertion">
    <xsl:element                  name = "a">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <xsl:choose>
      <xsl:when                   test = "GlossaryText/
                                          Insertion[@RevisionLevel='approved']">
       <span class="insertGlossaryTerm">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                          Insertion[@Source='advisory-board']">
          <span class="insertapproved_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Insertion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Insertion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:when                   test = "GlossaryText/
                                          Insertion[@RevisionLevel='proposed']">
       <span class="insertGlossaryTerm_prop">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                          Insertion[@Source='advisory-board']">
          <span class="insertproposed_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Insertion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Insertion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:when                   test = "GlossaryText/
                                          Insertion[@RevisionLevel='publish']">
       <span class="insertGlossaryTerm_pup">
        <xsl:choose>
         <xsl:when                test = "GlossaryText/
                                          Insertion[@Source='advisory-board']">
          <span class="insertpublish_ad">
           <xsl:value-of        select = "GlossaryText/
                                          Insertion"/>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "GlossaryText/
                                          Insertion"/>
         </xsl:otherwise>
        </xsl:choose>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:value-of            select = "GlossaryText"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                  name = "a">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <xsl:value-of              select = "GlossaryText"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

<!--
 ======================================================================
 Link to glossaryTermRefs - Patients BU
 Note: Patient Version Summaries are not being reviewed by an
       Advisory board according to MB.  I'm not implementing a
       different style for advisory-board markup for this template.
                                                       VE, 2005-05-10
 ====================================================================== -->
 <xsl:template                   match = "GlossaryTermRef"
                                  mode = "PEBU">
  <xsl:choose>
   <xsl:when                      test = "GlossaryText/Deletion">
    <xsl:if                       test = "GlossaryText/
                                          Deletion/@RevisionLevel = 'proposed'">
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
          <xsl:value-of         select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:attribute>
       <span class="deleteGlossaryTerm">
        <xsl:value-of           select = "GlossaryText/
                                          Deletion"/>
       </span>
      </xsl:element>
    </xsl:if>
   </xsl:when>
   <xsl:when                      test = "GlossaryText/
                                          Insertion">
    <xsl:element                name = "a">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <span class="insertGlossaryTerm">
      <xsl:value-of             select = "GlossaryText/
                                          Insertion"/>
     </span>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                name = "a">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
     </xsl:attribute>
     <xsl:value-of              select = "GlossaryText"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ======================================================================
 Link to LOERefs - Patients BU
 Note: Patient Version Summaries are not being reviewed by an
       Advisory board according to MB.  I'm not implementing a
       different style for advisory-board markup for this template.
                                                       VE, 2005-05-10
 ====================================================================== -->
 <xsl:template                   match = "LOERef"
                                  mode = "PEBU">
  <xsl:choose>
   <xsl:when                      test = "GlossaryText/
                                          Deletion">
    <xsl:if                       test = "GlossaryText/
                                          Deletion/@RevisionLevel = 'proposed'">
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
       </xsl:attribute>
       <span class="deleteGlossaryTerm">
        <xsl:value-of           select = "GlossaryText/
                                          Deletion"/>
       </span>
      </xsl:element>
    </xsl:if>
   </xsl:when>
   <xsl:when                      test = "GlossaryText/
                                          Insertion">
    <xsl:element                name = "a">
     <xsl:attribute               name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <span class="insertGlossaryTerm">
      <xsl:value-of             select = "GlossaryText/
                                          Insertion"/>
     </span>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                name = "a">
     <xsl:attribute               name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
     </xsl:attribute>
     <xsl:value-of              select = "GlossaryText"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ======================================================================
 Link to GlossaryTermRef - English Health Professional
 ====================================================================== -->
 <xsl:template                   match = "GlossaryTermRef"
                                  mode = "HPE" >
  <xsl:choose>
   <xsl:when                      test = "GlossaryText/
                                          Deletion">
    <xsl:choose>
     <xsl:when                    test = "GlossaryText/
                                          Deletion/@Source = 'advisory-board'">
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:attribute>
       <span class="deleteGlossaryTerm_ad">
        <xsl:value-of           select = "GlossaryText/
                                          Deletion"/>
       </span>
      </xsl:element>
     </xsl:when>
     <xsl:otherwise>
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:attribute>
       <span class="deleteGlossaryTerm">
        <xsl:value-of           select = "GlossaryText/
                                          Deletion"/>
       </span>
      </xsl:element>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                    test = "GlossaryText/
                                          Insertion/@Source = 'advisory-board'">
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:attribute>
       <span class="insertGlossaryTerm_ad">
        <xsl:value-of           select = "GlossaryText/
                                          Insertion"/>
       </span>
      </xsl:element>
     </xsl:when>
     <xsl:otherwise>
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:attribute>
       <xsl:value-of            select = "GlossaryText"/>
      </xsl:element>

     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


<!--
 ======================================================================
 Link to LOERef - English Health Professional
 ====================================================================== -->
 <xsl:template                   match = "LOERef"
                                  mode = "HPE" >
  <xsl:choose>
   <xsl:when                      test = "GlossaryText/
                                          Deletion">
    <xsl:choose>
     <xsl:when                    test = "GlossaryText/
                                          Deletion/@Source = 'advisory-board'">
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
       </xsl:attribute>
       <span class="deleteGlossaryTerm_ad">
        <xsl:value-of           select = "GlossaryText/
                                          Deletion"/>
       </span>
      </xsl:element>
     </xsl:when>
     <xsl:otherwise>
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
       </xsl:attribute>
       <span class="deleteGlossaryTerm">
        <xsl:value-of           select = "GlossaryText/
                                          Deletion"/>
       </span>
      </xsl:element>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                    test = "GlossaryText/
                                          Insertion/@Source = 'advisory-board'">
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
       </xsl:attribute>
       <span class="insertGlossaryTerm_ad">
        <xsl:value-of           select = "GlossaryText/
                                          Insertion"/>
       </span>
      </xsl:element>
     </xsl:when>
     <xsl:otherwise>
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
       </xsl:attribute>
       <xsl:value-of            select = "GlossaryText"/>
      </xsl:element>

     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ======================================================================
 Link to glossaryTermRefs - Spanish Health Professional
 ====================================================================== -->
 <xsl:template                   match = "GlossaryTermRef"
                                  mode = "HPS" >
  <xsl:choose>
   <xsl:when                      test = "GlossaryText/
                                          Deletion">
    <xsl:choose>
     <xsl:when                    test = "GlossaryText/
                                          Deletion/@Source = 'advisory-board'">
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:attribute>
       <span class="deleteGlossaryTerm_ad">
        <xsl:value-of           select = "GlossaryText/
                                          Deletion"/>
       </span>
      </xsl:element>
     </xsl:when>
     <xsl:otherwise>
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:attribute>
       <span class="deleteGlossaryTerm">
        <xsl:value-of           select = "GlossaryText"/>
       </span>
      </xsl:element>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                    test = "GlossaryText/
                                          Insertion/@Source = 'advisory-board'">
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:attribute>
       <span class="insertGlossaryTerm_ad">
        <xsl:value-of           select = "GlossaryText/
                                          Insertion"/>
       </span>
      </xsl:element>
     </xsl:when>
     <xsl:otherwise>
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:attribute>
       <xsl:value-of            select = "GlossaryText"/>
      </xsl:element>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

 <!--
 ======================================================================
 Link to LOERef - Spanish Health Professional
 ====================================================================== -->
 <xsl:template                   match = "LOERef"
                                  mode = "HPS" >
  <xsl:choose>
   <xsl:when                      test = "GlossaryText/
                                          Deletion">
    <xsl:choose>
     <xsl:when                    test = "GlossaryText/
                                          Deletion/@Source = 'advisory-board'">
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
       </xsl:attribute>
       <span class="deleteGlossaryTerm_ad">
        <xsl:value-of           select = "GlossaryText/
                                          Deletion"/>
       </span>
      </xsl:element>
     </xsl:when>
     <xsl:otherwise>
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
       </xsl:attribute>
       <span class="deleteGlossaryTerm">
        <xsl:value-of           select = "GlossaryText/
                                          Deletion"/>
       </span>
      </xsl:element>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                    test = "GlossaryText/
                                          Insertion/@Source = 'advisory-board'">
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
       </xsl:attribute>
       <span class="insertGlossaryTerm_ad">
        <xsl:value-of           select = "GlossaryText/
                                          Insertion"/>
       </span>
      </xsl:element>
     </xsl:when>
     <xsl:otherwise>
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;DocVersion=-1',
                                                 '&amp;Session=guest')"/>
       </xsl:attribute>
       <xsl:value-of            select = "GlossaryText"/>
      </xsl:element>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

 <!--
 =====================================================================
 Display Itemized Lists for KeyPoints
 ===================================================================== -->
 <xsl:template                   match = "KeyPointsList[@Style='bullet'] |
                                          KeyPointsList[@Style='dash']">
  <ul>
   <xsl:attribute                 name = "class">
    <xsl:choose>
     <xsl:when                    test = "@Style = 'bullet'">
      <xsl:text>disc</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'dash'">
      <xsl:text>square</xsl:text>
     </xsl:when>
    </xsl:choose>
   </xsl:attribute>



   <xsl:for-each                select = "ListItem">
    <!-- Don't display empty list items -->
    <xsl:if                       test = "not(. = '')">
     <li>
      <xsl:apply-templates/>
     </li>
    </xsl:if>
   </xsl:for-each>
  </ul>
 </xsl:template>


 <!--
 =====================================================================
 Display a Subscript
 ===================================================================== -->
 <xsl:template                   match = "Subscript">
  <sub>
   <xsl:apply-templates/>
  </sub>
 </xsl:template>


 <!--
 =====================================================================
 Display a Superscript

 ===================================================================== -->
 <xsl:template                   match = "Superscript">
  <sup>
   <xsl:apply-templates/>
  </sup>
 </xsl:template>


 <!--
 =====================================================================
 Display tables in old format
 ===================================================================== -->
 <xsl:template                   match = "TT">
  <pre><xsl:apply-templates/></pre>
 </xsl:template>


 <!--
 =====================================================================
 Create a link to another document or website
 ===================================================================== -->
 <xsl:template                   match = "ExternalRef">
  <xsl:variable                   name = "nlink"
                                select = "@cdr:xref"/>
  <a href="{$nlink}">
   <xsl:apply-templates/>
  </a>
 </xsl:template>


 <!--
 =====================================================================
 Display Strong
 ===================================================================== -->
 <xsl:template                   match = "Strong">
  <b>
   <xsl:apply-templates/>
  </b>
 </xsl:template>


 <!--
 =====================================================================
 Display Emphasis, ScientificName, ForeignWord, GeneName
 ===================================================================== -->
 <xsl:template                   match = "Emphasis       |
                                          ScientificName |
                                          ForeignWord    |
                                          GeneName">
  <i>
   <xsl:apply-templates/>
  </i>
 </xsl:template>


 <!--
 =====================================================================
 Display a Note element without markup
 ===================================================================== -->
 <xsl:template                   match = "Note"
                                  mode = "R">
  <i>
   <xsl:text> [</xsl:text>

   <xsl:choose>
    <xsl:when                     test = "//SummaryLanguage = 'Spanish'">
     <xsl:text>Nota: </xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>Note: </xsl:text>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates/>

   <xsl:text>] </xsl:text>
  </i>
 </xsl:template>


 <!--
 =====================================================================
 Display a note with mark-up (Redline/Strikeout)
 ===================================================================== -->
 <xsl:template                   match = "Note"
                                  mode = "RS">
  <i>
   <!--

   Display the left bracket for the Note
   =================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
     <xsl:choose>
      <xsl:when                   test = "Insertion/@RevisionLevel='approved'
                                          or
                                          Insertion/@RevisionLevel='publish'">
       <span class="insertapproved_ad">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Insertion/@RevisionLevel ='proposed'">
       <span class="insertproposed_ad">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">
       <span class="deleteapproved_ad">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'proposed'">
       <span class="deleteproposed_ad">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text> [</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when                   test = "Insertion/@RevisionLevel='approved'
                                          or
                                          Insertion/@RevisionLevel='publish'">
       <span class="insertapproved">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Insertion/@RevisionLevel ='proposed'">
       <span class="insertproposed">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">
       <span class="deleteapproved">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'proposed'">
       <span class="deleteproposed">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text> [</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>


   <!--
   Display the Spanish "Nota: " string properly marked up
   ========================================================================= -->
   <xsl:choose>
    <xsl:when                     test = "//SummaryLanguage ='Spanish'">
     <xsl:choose>
      <xsl:when                   test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
       <xsl:choose>
        <xsl:when                 test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertapproved_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Insertion/@RevisionLevel
                                                                  = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertproposed_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteapproved_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteproposed_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>Nota: </xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
       <xsl:choose>
        <xsl:when                 test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertapproved'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Insertion/@RevisionLevel
                                                                  = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertproposed'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteapproved'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteproposed'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>Nota: </xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>

    <!--
    Display the "Note: " string properly marked up
    ======================================================================== -->
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when                   test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
       <xsl:choose>
        <xsl:when                 test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertapproved_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Insertion/@RevisionLevel
                                                                  = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertproposed_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">

         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteapproved_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteproposed_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>Note: </xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
       <xsl:choose>
        <xsl:when                 test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertapproved'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Insertion/@RevisionLevel
                                                                  = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertproposed'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"

                                select = "'deleteapproved'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteproposed'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>Note: </xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>

   <!--
   Display the text properly marked up
   ====================================================================== -->
   <xsl:apply-templates/>

   <!--
   Display the right bracket for the Note
   =================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
     <xsl:choose>
      <xsl:when                   test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
       <span class="insertapproved_ad">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Insertion/@RevisionLevel ='proposed'">
       <span class="insertproposed_ad">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel='publish'">
       <span class="deleteapproved_ad">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'proposed'">
       <span class="deleteproposed_ad">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>] </xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when                   test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
       <span class="insertapproved">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Insertion/@RevisionLevel ='proposed'">
       <span class="insertproposed">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel='publish'">
       <span class="deleteapproved">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'proposed'">
       <span class="deleteproposed">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>] </xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>
  </i>
 </xsl:template>


 <!--
 =====================================================================
 Template to display the text with appropriate markup.
 ===================================================================== -->
 <xsl:template                    name = "setCSS">
  <xsl:param                      name = "myCSS"/>
  <xsl:param                      name = "myString"/>
  <span class="{$myCSS}">
   <xsl:value-of                select = "$myString"/>
  </span>
 </xsl:template>


 <!--
 =====================================================================

 Display a note with markup (Bold/Underline)
 ===================================================================== -->
 <xsl:template                   match = "Note"
                                  mode = "BU">
  <!-- Don't display empty Note elements -->
  <xsl:if                         test = "not(.='')">
   <i>
    <!--
    Display the left bracket for the Note
    =================================================================== -->
    <xsl:choose>
     <xsl:when                    test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel ='publish'">
        <span class="insertapproved_ad">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Insertion/@RevisionLevel ='proposed'">
        <span class="insertproposed_ad">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>

       <xsl:when                  test = "Deletion/@RevisionLevel = 'proposed'">
        <span class="deleteproposed_ad">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <xsl:if                   test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel
                                                 = 'publish')">
         <xsl:text> [</xsl:text>
        </xsl:if>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel ='publish'">
        <span class="insertapproved">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Insertion/@RevisionLevel ='proposed'">
        <span class="insertproposed">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Deletion/@RevisionLevel = 'proposed'">
        <span class="deleteproposed">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <xsl:if                   test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel
                                                 = 'publish')">
         <xsl:text> [</xsl:text>
        </xsl:if>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>

    <!--
    Display the Spanish "Nota: " string properly marked up
    ======================================================================== -->
    <xsl:choose>
     <xsl:when                    test = "//SummaryLanguage ='Spanish'">
      <xsl:choose>
       <xsl:when                  test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertapproved_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>

         </xsl:when>
         <xsl:when                test = "Insertion/@RevisionLevel ='proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertproposed_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Deletion/@RevisionLevel = 'proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'deleteproposed_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:otherwise>
          <xsl:if                 test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel
                                                 = 'publish')">
           <xsl:text>Nota: </xsl:text>
          </xsl:if>
         </xsl:otherwise>

        </xsl:choose>

       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertapproved'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Insertion/@RevisionLevel ='proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertproposed'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Deletion/@RevisionLevel = 'proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'deleteproposed'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:otherwise>
          <xsl:if                 test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel
                                                 = 'publish')">
           <xsl:text>Nota: </xsl:text>
          </xsl:if>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>

     <!--
     Display the "Note: " string properly marked up
     ======================================================================= -->
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertapproved_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Insertion/@RevisionLevel ='proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertproposed_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Deletion/@RevisionLevel = 'proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'deleteproposed_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:otherwise>
          <xsl:if                 test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel
                                                 = 'publish')">
           <xsl:text>Note: </xsl:text>
          </xsl:if>
         </xsl:otherwise>
        </xsl:choose>

       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertapproved'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Insertion/@RevisionLevel ='proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertproposed'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Deletion/@RevisionLevel = 'proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'deleteproposed'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:otherwise>
          <xsl:if                 test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel
                                                 = 'publish')">
           <xsl:text>Note: </xsl:text>
          </xsl:if>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>

    <!--
    Display the text properly marked up
    ====================================================================== -->
    <xsl:choose>
     <xsl:when                    test = "Insertion/@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
        <span class="insertapproved_ad">
         <xsl:apply-templates/>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <span class="insertproposed_ad">
         <xsl:apply-templates/>
        </span>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:when                    test = "Deletion/@Source = 'advisory-board'">
      <span class="deleteproposed_ad">
       <xsl:apply-templates/>
      </span>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates/>
     </xsl:otherwise>
    </xsl:choose>

    <!--
    Display the right bracket for the Note
    =================================================================== -->
    <xsl:choose>
     <xsl:when                    test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
        <span class="insertapproved_ad">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Insertion/@RevisionLevel ='proposed'">
        <span class="insertproposed_ad">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Deletion/@RevisionLevel = 'proposed'">
        <span class="deleteproposed_ad">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <xsl:if                   test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel
                                                 = 'publish')">
          <xsl:text>] </xsl:text>
        </xsl:if>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
        <span class="insertapproved">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Insertion/@RevisionLevel ='proposed'">
        <span class="insertproposed">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Deletion/@RevisionLevel = 'proposed'">
        <span class="deleteproposed">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <xsl:if                   test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel
                                                 = 'publish')">
          <xsl:text>] </xsl:text>
        </xsl:if>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>

   </i>
  </xsl:if>
 </xsl:template>


 <!--
 =====================================================================
 Display TOC Summary Title with Deletion and Insertion

 The users want immediate feedback to see if a summary is a SVPC doc
 or not.  Adding a "SVPC summary header" here.
 ===================================================================== -->
 <xsl:template                   match = "SummaryTitle"
                                  mode = "TOC">

  <xsl:choose>
   <xsl:when                      test = "/Summary/@SVPC='Yes'">
    <xsl:element                  name = "div">
     <xsl:attribute               name = "class">
      <xsl:text>svpc-qc-header</xsl:text>
     </xsl:attribute>
     <xsl:text>Single View Patient Content (SVPC)</xsl:text>
    </xsl:element>
   </xsl:when>
   <xsl:when                      test = "/Summary/@PartnerMergeSet='Yes'">
    <xsl:element                  name = "div">
     <xsl:attribute               name = "class">
      <xsl:text>svpc-merge-qc-header</xsl:text>
     </xsl:attribute>
     <xsl:text>Merged Partner Patient Content (SVPC)</xsl:text>
    </xsl:element>
   </xsl:when>
  </xsl:choose>

  <xsl:element                    name = "h2">
   <xsl:apply-templates />
  </xsl:element>
 </xsl:template>

 <!--
 =====================================================================
 Display summary alt titles in TOC.
 ===================================================================== -->
 <xsl:template                   match = "AltTitle"
                                  mode = "TOC">
  <xsl:apply-templates/>
  <br/>
 </xsl:template>


 <!--
 =====================================================================
 Display summary titles in TOC.
 ===================================================================== -->
 <xsl:template                   match = "Title"
                                  mode = "TOC">
  <xsl:apply-templates/>

 </xsl:template>


 <!--
 =====================================================================
 Display SummarySection in TOC.
 ===================================================================== -->
 <xsl:template                    name = "TocSummarySection">
  <xsl:param                      name = "secID"/>
  <xsl:param                      name = "level"/>

  <xsl:if                         test = "Title">
   <xsl:element                   name = "li">
    <xsl:attribute                name = "class">
     <xsl:text>tocItem</xsl:text>
     <xsl:value-of              select = "$level"/>
    </xsl:attribute>
    <xsl:element                  name = "a">
     <xsl:attribute               name = "href">
      <xsl:text>#</xsl:text>
      <xsl:value-of             select = "$secID"/>
     </xsl:attribute>
    <xsl:apply-templates        select = "Title"
                                  mode = "TOC"/>
    </xsl:element>
   </xsl:element>
  </xsl:if>

  <xsl:if                         test = "SummarySection
                                          and
                                          $level &lt; 10
                                          and
                                          SummarySection/Title">
   <ul class="tocSubSection">
    <xsl:for-each               select = "SummarySection">
     <!-- Exclude the "Unusual Cancers Special Considerations' section from
          the TOC since the section isn't displayed in the QC report
          Also, exclude modules not displayed on the QC report -->
     <xsl:if                      test = "not(SectMetaData
                                              /SectionType =
                                              concat('Unusual Cancers Special',
                                                     ' Considerations'))
                                          and
                                          not(@thissection = 'module'
                                              and
                                              @usedfor = 'qc-only'
                                              and
                                              $DisplayQcOnlyMod = 'N')">
      <xsl:call-template          name = "TocSummarySection">
       <xsl:with-param            name = "secID"
                                select = "@cdr:id"/>
       <xsl:with-param            name = "level"
                                select = "$level + 1"/>
      </xsl:call-template>
     </xsl:if>
    </xsl:for-each>
   </ul>
  </xsl:if>
 </xsl:template>


 <!--
 ================================================================
 Template to create a target element for SummaryFragmetRef
 elements.  The SummarySection cdr:id attribute is being attached
 to the Title element (H1, H2, ...) in the HTML output.
 For SummarySections without a title the SummaryFragmentRef would
 not work.  We need to create a target for the link - using a
 <span id=NNN> to make the links work.
 ================================================================ -->
 <xsl:template                   match = "SummarySection">
  <xsl:variable                   name = "title"
                                select = "child::Title"/>

  <xsl:choose>
   <xsl:when                      test = "$ShowLearnMoreSection = 'N'
                                          and
                                          starts-with($title,
                                                          'To Learn More')">
    <!-- Do nothing - suppress this section -->
   </xsl:when>
   <xsl:when                      test = "@thissection = 'module'
                                          and
                                          @usedfor = 'qc-only'
                                          and
                                          $DisplayQcOnlyMod = 'N'">
    <!-- Do nothing - suppress this section -->
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>
     <!-- We need one path for SummarySections with SectionTitle
          Those will need to add a KeyPoint section.
          The "Otherwise" path is for SummarySections without KP
          ====================================================== -->
     <xsl:when                    test = "count($title) = 0">
      <!-- Need to be able to markup a module section if requested
           Wrapping a div around SummarySection identified as module -->
      <xsl:element                name = "div">
       <xsl:if                    test = "@thissection = 'module'
                                             and
                                             $DisplayModuleMarkup = 'Y'">
        <xsl:attribute            name = "class">
         <xsl:text>is-module</xsl:text>
        </xsl:attribute>
       </xsl:if>
       <span class="kpSection">
        <xsl:call-template        name = "addIdLinkTarget">
         <xsl:with-param          name = "id"
                                select = "@cdr:id"/>
        </xsl:call-template>
       </span>

        <!--
        If a QC-only module is being displayed we need to include the SummaryTitle
        of the module as a Section title.  The SummaryTitle is carried over in the
        previous sibling with the name ModuleExtra
        ========================================================================== -->
        <xsl:choose>
         <xsl:when                test = "//ModuleExtra/@cdr:ref = @cdr:ref">
          <xsl:element            name = "h2">
           <xsl:value-of        select = "preceding-sibling::node()[1]/SummaryTitle"/>
          </xsl:element>
          <xsl:apply-templates/>
         </xsl:when>
         <xsl:otherwise>
          <xsl:apply-templates/>
         </xsl:otherwise>
        </xsl:choose>
      </xsl:element>
     </xsl:when>
     <!--
      Only display this section if it's not part of a module, i.e. displayed
      within a parent document -->
     <xsl:when                    test = "@thissection = 'module'
                                          and
                                          SectMetaData/SectionType =
                                            concat('Unusual Cancers Special',
                                                   ' Considerations')">
      <!-- Do nothing - suppress this section -->
     </xsl:when>
     <xsl:otherwise>
      <!-- Need to be able to markup a module section if requested -->
      <xsl:element                name = "div">
       <xsl:if                    test = "@thissection = 'module'
                                             and
                                             $DisplayModuleMarkup = 'Y'">
        <xsl:attribute            name = "class">
         <xsl:text>is-module</xsl:text>
        </xsl:attribute>
       </xsl:if>

        <!--
        If a QC-only module is being displayed we need to include the SummaryTitle
        of the module as a Section title.  The SummaryTitle is carried over in the
        previous sibling with the name ModuleExtra
        ========================================================================== -->
        <xsl:choose>
         <xsl:when                test = "//ModuleExtra/@cdr:ref = @cdr:ref">
          <xsl:element            name = "h2">
           <xsl:value-of        select = "preceding-sibling::node()[1]/SummaryTitle"/>
          </xsl:element>
          <xsl:apply-templates/>
         </xsl:when>
         <xsl:otherwise>
          <xsl:apply-templates/>
         </xsl:otherwise>
        </xsl:choose>

      </xsl:element>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =====================================================================
 Display titles for Patient Summaries
 ===================================================================== -->
 <xsl:template                   match = "Title"
                                  mode = "PT">
  <xsl:variable                   name = "ancestors"
                                select = "ancestor::SummarySection"/>
  <xsl:choose>
   <xsl:when                      test = "count($ancestors) = 1">
    <!-- The first level header is already displayed as SectionTitle -->
    <!-- h2><xsl:apply-templates/></h2 -->
   </xsl:when>
   <xsl:when                      test = "count($ancestors) &lt; 5">
    <!-- Need to enclose the name into {} to make it a valid QName -->
    <xsl:element                  name = "{concat('h', count($ancestors) + 1)}">
     <xsl:call-template           name = "addIdLinkTarget">
      <xsl:with-param             name = "id"
                                select = "../@cdr:id"/>
     </xsl:call-template>
     <xsl:apply-templates/>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                  name = "h6">
     <xsl:call-template           name = "addIdLinkTarget">
      <xsl:with-param             name = "id"
                                select = "../@cdr:id"/>
     </xsl:call-template>
     <xsl:apply-templates/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =====================================================================
 Display a summary section title depending on how many
 SummarySection in its ancestors. We may have to use
 a mode here to avoid unintended usage in documents that
 are not summaries, but with Title.
 Fixed RMK 2003-10-14.  [mode=HT]
 ===================================================================== -->
 <xsl:template                   match = "Title"
                                  mode = "HT">
  <xsl:variable                   name = "ancestors"
                                select = "ancestor::SummarySection"/>
  <xsl:choose>
   <xsl:when                      test = "count($ancestors) = 1">
    <!-- The first level header is already displayed as SectionTitle -->
    <!-- h2><xsl:apply-templates/></h2 -->
   </xsl:when>
   <xsl:when                      test = "count($ancestors) &lt; 5">
    <!-- Need to enclose the name into {} to make it a valid QName -->
    <xsl:element                  name = "{concat('h', count($ancestors) + 1)}">
     <xsl:call-template           name = "addIdLinkTarget">
      <xsl:with-param             name = "id"
                                select = "../@cdr:id"/>
     </xsl:call-template>
     <xsl:apply-templates/>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <h6>
     <xsl:call-template           name = "addIdLinkTarget">
      <xsl:with-param             name = "id"
                                select = "../@cdr:id"/>
     </xsl:call-template>
     <xsl:apply-templates/>
    </h6>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =====================================================================
 Display Paragraphs
 ===================================================================== -->
 <xsl:template                   match = "Para">
  <p>
   <xsl:call-template             name = "addIdLinkTarget"/>
   <xsl:apply-templates/>
  </p>
 </xsl:template>


  <!--
 =====================================================================
 Display an itemized list
 ===================================================================== -->
 <xsl:template                   match = "ItemizedList">
  <xsl:apply-templates          select = "ListTitle"/>
  <!-- Handle ListItem now. -->
  <xsl:element                    name = "ul">
   <xsl:attribute                 name = "class">
    <xsl:choose>
     <xsl:when                    test = "@Style = 'bullet'">
      <xsl:text>disc</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'dash'">
      <xsl:text>square</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'simple'">
      <xsl:text>lnone</xsl:text>
     </xsl:when>
    </xsl:choose>
    <xsl:if                       test = "@iod">
     <xsl:choose>
      <xsl:when                   test = "@iod = 'Deletion'
                                           and
                                           descendant::Deletion[
                                              @RevisionLevel='proposed']">
       <!-- Proposed text for BU is displayed which means we only want to
            add the Deletion class specifier when the RevisionLevel is
            not proposed because this specifier makes the text
            disappear via CSS -->
       <xsl:text></xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text> </xsl:text>
       <xsl:value-of            select = "@iod"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:if>
   </xsl:attribute>

   <xsl:call-template             name = "addIdLinkTarget">
    <xsl:with-param               name = "id"
                                select = "@cdr:id"/>
   </xsl:call-template>


   <xsl:apply-templates         select = "ListItem"/>
  </xsl:element>
 </xsl:template>


 <!--
 =====================================================================
 Display an ordered list
 ===================================================================== -->
 <xsl:template                   match = "OrderedList">
  <xsl:apply-templates          select = "ListTitle"/>
  <!-- Handle ListItem now. -->
  <ol>
   <xsl:attribute                 name = "class">
    <xsl:choose>
     <xsl:when                    test = "@Style = 'UAlpha'">
      <xsl:text>A</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'LAlpha'">
      <xsl:text>little-alpha</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'URoman'">
      <xsl:text>I</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'LRoman'">
      <xsl:text>little-roman</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'Arabic'">
      <xsl:text>d</xsl:text>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>none</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>

   <xsl:call-template             name = "addIdLinkTarget">
    <xsl:with-param               name = "id"
                                select = "@cdr:id"/>
   </xsl:call-template>

   <xsl:apply-templates         select = "ListItem"/>
  </ol>
 </xsl:template>


 <!--
 =====================================================================
 Display a list item but suppress items without content.
 ===================================================================== -->
 <xsl:template                   match = "ListItem">
  <xsl:if                         test = "not(. = '')">
   <li>
    <xsl:for-each               select = "@iod">
      <xsl:attribute              name = "class">
       <xsl:value-of            select = "."/>
      </xsl:attribute>
     </xsl:for-each>
    <xsl:apply-templates/>
   </li>
  </xsl:if>
 </xsl:template>


 <!--
 ======================================================================
 Template handling ListTitle
 ====================================================================== -->
 <xsl:template                   match = "ListTitle">
  <xsl:choose>
   <xsl:when                      test = "name(../..) = 'SummarySection'">
    <p class="listtitletop">
     <xsl:apply-templates/>
    </p>
   </xsl:when>
   <xsl:otherwise>
    <p class="listtitle">
     <xsl:apply-templates/>
    </p>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ======================================================================
 Template to display images
 - If DisplayImage = Y, display the image *and* the caption
   - if there is no caption in the summary, display the caption of the
     Media document
 - If DisplayImage = N, display a placeholder for the image
   - if it's a HP summary display the caption
   - if it's a patient summary, don't display the caption
     - if there is no caption in the summary, display the caption of
       the Media document

 If the image does not replace the MediaID element with a little div
 box as a place holder for the image
 Don't show the caption if the "UseCaption = 'No'" attribute has been
 set.
 ====================================================================== -->
 <xsl:template                   match = "MediaID">
  <xsl:choose>
   <!-- Display Images -->
   <xsl:when                      test = "$DisplayImages = 'Y'">
    <xsl:choose>

     <!-- Display for RS Report -->
     <xsl:when                    test = "contains($whoAmI, 'RS')">
      <xsl:apply-templates      select = "."
                                  mode = "summary"/>

      <!-- Display caption -->
      <xsl:if                     test = "not(../@UseCaption = 'No')">
       <xsl:call-template         name = "addCaption"/>
      </xsl:if>

     </xsl:when>

     <!-- Display for BU Report -->
     <xsl:otherwise>
      <!-- Handle markup sections -->
      <!-- Don't display approved deletion -->
      <xsl:apply-templates    select = "."
                                  mode = "summary"/>

      <!-- Display caption -->
      <xsl:if                   test = "not(../@UseCaption = 'No')">
       <xsl:call-template       name = "addCaption"/>
      </xsl:if>

     </xsl:otherwise>

    </xsl:choose>
   </xsl:when>

   <!-- Display Image Placeholders -->
   <xsl:otherwise>
      <!--
      The users want to have the image placeholders marked up
      if the entire image is being inserted/deleted          -->
      <xsl:choose>
       <xsl:when                  test = "parent::MediaLink
                                            /@iod = 'Deletion'">
        <xsl:choose>
         <xsl:when                test = "@RevisionLevel = 'proposed'">
          <xsl:element            name = "div">
           <xsl:attribute         name = "class">
            <xsl:text>imagepadding</xsl:text>
           </xsl:attribute>
           <xsl:element           name = "div">
            <xsl:attribute        name = "class">
             <xsl:text>gogreenimage</xsl:text>
            </xsl:attribute>
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteproposed</xsl:text>
             </xsl:attribute>
             <xsl:call-template   name = "addIdLinkTarget">
              <xsl:with-param     name = "id"
                                select = "../@cdr:id"/>
             </xsl:call-template>
             <xsl:element         name = "b">
              <xsl:text>Image: </xsl:text>
              <xsl:value-of     select = "Media/
                                          MediaTitle"/>
             </xsl:element>
            </xsl:element>
           </xsl:element>
          </xsl:element>
         </xsl:when>
         <xsl:otherwise>
          <!--
          Approved Deletion
          Users want the image suppressed in a B/U report
          -->
          <xsl:choose>
           <xsl:when              test = "contains($whoAmI, 'RS')">

            <xsl:element          name = "div">
             <xsl:attribute       name = "class">
              <xsl:text>imagepadding</xsl:text>
             </xsl:attribute>
             <xsl:element         name = "div">
              <xsl:attribute      name = "class">
               <xsl:text>gogreenimage</xsl:text>
              </xsl:attribute>
              <xsl:element        name = "span">
               <xsl:attribute     name = "class">
                <xsl:text>deleteapproved</xsl:text>
               </xsl:attribute>
               <xsl:call-template name = "addIdLinkTarget">
                <xsl:with-param   name = "id"
                                select = "../@cdr:id"/>
               </xsl:call-template>
               <xsl:element       name = "b">
                <xsl:text>Image: </xsl:text>
                 <xsl:value-of  select = "Media/
                                          MediaTitle"/>
               </xsl:element>
              </xsl:element>
             </xsl:element>
            </xsl:element>
           </xsl:when>
           <xsl:otherwise>
            <!-- Display videos in BU report but not deleted videos -->
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>
       <xsl:when                  test = "parent::MediaLink
                                            /@iod = 'Insertion'">
        <xsl:choose>
         <xsl:when                test = "@RevisionLevel = 'proposed'">
          <xsl:element            name = "div">
           <xsl:attribute         name = "class">
            <xsl:text>imagepadding</xsl:text>
           </xsl:attribute>
           <xsl:element           name = "div">
            <xsl:attribute        name = "class">
             <xsl:text>gogreenimage</xsl:text>
            </xsl:attribute>
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>insertproposed</xsl:text>
             </xsl:attribute>
             <xsl:call-template   name = "addIdLinkTarget">
              <xsl:with-param     name = "id"
                                select = "../@cdr:id"/>
             </xsl:call-template>
             <xsl:element         name = "b">
              <xsl:text>Image: </xsl:text>
              <xsl:value-of     select = "Media/
                                          MediaTitle"/>
             </xsl:element>
            </xsl:element>
           </xsl:element>
          </xsl:element>
         </xsl:when>
         <xsl:otherwise>
          <xsl:element            name = "div">
           <xsl:attribute         name = "class">
            <xsl:text>imagepadding</xsl:text>
           </xsl:attribute>
           <xsl:element           name = "div">
            <xsl:attribute        name = "class">
             <xsl:text>gogreenimage</xsl:text>
            </xsl:attribute>
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>insertapproved</xsl:text>
             </xsl:attribute>
             <xsl:call-template   name = "addIdLinkTarget">
              <xsl:with-param     name = "id"
                                select = "../@cdr:id"/>
             </xsl:call-template>
             <xsl:element         name = "b">
              <xsl:text>Image: </xsl:text>
              <xsl:value-of     select = "Media/
                                          MediaTitle"/>
             </xsl:element>
            </xsl:element>
           </xsl:element>
          </xsl:element>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>
       <xsl:otherwise>
        <xsl:element              name = "div">
         <xsl:attribute           name = "class">
          <xsl:text>imagepadding</xsl:text>
         </xsl:attribute>
         <xsl:element             name = "div">
          <xsl:attribute          name = "class">
           <xsl:text>gogreenimage</xsl:text>
          </xsl:attribute>
          <xsl:call-template      name = "addIdLinkTarget">
           <xsl:with-param        name = "id"
                                select = "../@cdr:id"/>
          </xsl:call-template>
          <xsl:element         name = "b">
           <xsl:text>Image: </xsl:text>
           <xsl:value-of         select = "Media/
                                          MediaTitle"/>
          </xsl:element>
         </xsl:element>
        </xsl:element>
       </xsl:otherwise>
      </xsl:choose>

    <xsl:if                       test = "$mediaAudience =
                                                 'Health_professionals'">
     <xsl:if                      test = "not(../@UseCaption = 'No')">
      <xsl:call-template          name = "addCaption"/>
     </xsl:if>
    </xsl:if>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ======================================================================
 Template to display videos



 - If DisplayImage = Y, display the image *and* the caption
   - if there is no caption in the summary, display the caption of the
     Media document
 - If DisplayImage = N, display a placeholder for the image
   - if it's a HP summary display the caption
   - if it's a patient summary, don't display the caption
     - if there is no caption in the summary, display the caption of
       the Media document

 If the image does notreplace the MediaID element with a little div
 box as a place holder for the image
 Don't show the caption if the "UseCaption = 'No'" attribute has been
 set.
 ====================================================================== -->
 <xsl:template                   match = "EmbeddedVideo">
  <xsl:choose>
   <!-- Display videos in RS report -->
   <xsl:when                      test = "contains($whoAmI, 'RS')">
    <xsl:choose>
     <!-- Video in RS (not Placeholder) -->
     <xsl:when                    test = "$DisplayImages = 'Y'">
      <xsl:apply-templates      select = "MediaID"
                                  mode = "summary"/>
      <xsl:call-template          name = "addCaptionVideo"/>
     </xsl:when>

     <!-- Video Placeholders in RS -->
     <xsl:otherwise>
      <xsl:element                name = "div">
       <xsl:attribute             name = "class">
        <xsl:text>imagepadding</xsl:text>
       </xsl:attribute>
       <xsl:element               name = "div">
        <xsl:attribute            name = "class">
         <xsl:text>gogreenimage</xsl:text>
        </xsl:attribute>

        <!--
        The users want to have the image placeholders marked up
        if the entire image is being inserted/deleted          -->
        <xsl:choose>
         <xsl:when                test = "@iod = 'Deletion'">
          <xsl:choose>
           <xsl:when              test = "descendant::MediaTitle[
                                                      Deletion/@RevisionLevel
                                                                  = 'proposed']">
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteproposed</xsl:text>
             </xsl:attribute>
             <xsl:call-template   name = "addIdLinkTarget">
              <xsl:with-param     name = "id"
                                select = "../@cdr:id"/>
             </xsl:call-template>
             <xsl:element         name = "b">
              <xsl:text>Video: </xsl:text>
              <xsl:value-of     select = "MediaID/
                                          Media/
                                          MediaTitle"/>
             </xsl:element>
            </xsl:element>
           </xsl:when>
           <xsl:otherwise>
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteapproved</xsl:text>
             </xsl:attribute>
             <xsl:call-template   name = "addIdLinkTarget">
              <xsl:with-param     name = "id"
                                select = "../@cdr:id"/>
             </xsl:call-template>
             <xsl:element         name = "b">
             <xsl:text>Video: </xsl:text>
             <xsl:value-of      select = "MediaID/
                                          Media/
                                          MediaTitle"/>
            </xsl:element>
            </xsl:element>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:when>
         <xsl:when                test = "@iod = 'Insertion'">
          <xsl:choose>
           <xsl:when              test = "descendant::MediaTitle[
                                                      Insertion/@RevisionLevel
                                                                  = 'proposed']">
            <xsl:element          name = "span">
             <xsl:attribute         name = "class">
              <xsl:text>insertproposed</xsl:text>
             </xsl:attribute>
             <xsl:call-template   name = "addIdLinkTarget">
              <xsl:with-param     name = "id"
                                select = "../@cdr:id"/>
             </xsl:call-template>
             <xsl:element         name = "b">
             <xsl:text>Video: </xsl:text>
             <xsl:value-of      select = "MediaID/
                                          Media/
                                          MediaTitle"/>
            </xsl:element>
            </xsl:element>
           </xsl:when>
           <xsl:otherwise>
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>insertapproved</xsl:text>
             </xsl:attribute>
             <xsl:call-template   name = "addIdLinkTarget">
              <xsl:with-param     name = "id"
                                select = "../@cdr:id"/>
             </xsl:call-template>
             <xsl:element         name = "b">
             <xsl:text>Video: </xsl:text>
             <xsl:value-of      select = "MediaID/
                                          Media/
                                          MediaTitle"/>
            </xsl:element>
            </xsl:element>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:when>
         <xsl:otherwise>
          <xsl:call-template      name = "addIdLinkTarget">
           <xsl:with-param        name = "id"
                                select = "../@cdr:id"/>
          </xsl:call-template>
          <xsl:element            name = "b">
           <xsl:text>Video: </xsl:text>
           <xsl:value-of        select = "MediaID/
                                          Media/
                                          MediaTitle"/>
          </xsl:element>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:element>
      </xsl:element>
      <!-- Add the caption but only for HP summaries. Captions in the
           report displaying placeholders are suppressed for patients -->
      <xsl:if                     test = "$mediaAudience =
                                                 'Health_professionals'">
       <xsl:if                    test = "not(../@UseCaption = 'No')">
        <xsl:call-template        name = "addCaptionVideo"/>
       </xsl:if>
      </xsl:if>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>

   <!-- Display videos in BU report -->
   <xsl:otherwise>
    <xsl:choose>
     <!-- Video in BU (not Placeholder) -->
     <xsl:when                    test = "$DisplayImages = 'Y'">
                                          <!--
                                          and
                                          not(@iod = 'Deletion')">
                                          -->
      <xsl:apply-templates      select = "MediaID"
                                  mode = "summary"/>
      <xsl:call-template          name = "addCaptionVideo"/>
     </xsl:when>

     <!-- Video Placeholders in BU -->
     <xsl:otherwise>
      <xsl:if                     test = "not(@iod = 'Deletion')
                                          or
                                          descendant::Deletion/@RevisionLevel = 'proposed'">
       <xsl:element               name = "div">
        <xsl:attribute            name = "class">
         <xsl:text>imagepadding</xsl:text>
        </xsl:attribute>
        <xsl:element              name = "div">
         <xsl:attribute           name = "class">
          <xsl:text>gogreenimage</xsl:text>
         </xsl:attribute>

         <!--
         The users want to have the image placeholders marked up
         if the entire image is being inserted/deleted          -->
         <xsl:choose>
          <xsl:when               test = "@iod = 'Deletion'">



          <xsl:choose>
           <xsl:when              test = "descendant::Deletion/@RevisionLevel = 'proposed'">
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteproposed</xsl:text>
             </xsl:attribute>
             <xsl:call-template   name = "addIdLinkTarget">
              <xsl:with-param     name = "id"
                                select = "../@cdr:id"/>
             </xsl:call-template>
             <!-- The title of the proposed deletion should be bold unlike the
                  text/caption -->
             <xsl:element         name = "b">
              <xsl:text>Video: </xsl:text>
              <xsl:value-of     select = "MediaID/
                                          Media/
                                          MediaTitle"/>
             </xsl:element>
            </xsl:element>
           </xsl:when>
           <xsl:otherwise>
             <!--
             <b>
             -->
             <xsl:text>Video: </xsl:text>
             <!--
             </b>
             -->
            <!-- Do nothing, image is deleted -->
            <!--
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteapproved</xsl:text>
             </xsl:attribute>
             <xsl:call-template   name = "addIdLinkTarget">
              <xsl:with-param     name = "id"
                                select = "../@cdr:id"/>
             </xsl:call-template>
             <b>Video: </b>
             <xsl:value-of      select = "MediaID/
                                          Media/
                                          MediaTitle"/>
            </xsl:element>
            -->
           </xsl:otherwise>
          </xsl:choose>



          </xsl:when>
          <xsl:when               test = "@iod = 'Insertion'">
           <xsl:choose>
            <xsl:when             test = "descendant::Insertion/@RevisionLevel = 'proposed'">
             <xsl:element         name = "span">
              <xsl:attribute      name = "class">
               <xsl:text>insertproposed</xsl:text>
              </xsl:attribute>
              <xsl:call-template  name = "addIdLinkTarget">
               <xsl:with-param    name = "id"
                                select = "../@cdr:id"/>
              </xsl:call-template>

              <!-- xsl:element        name = "b" -->
               <xsl:text>Video: </xsl:text>
               <xsl:value-of    select = "MediaID/
                                          Media/
                                          MediaTitle"/>
              <!-- /xsl:element -->
             </xsl:element>
            </xsl:when>
            <xsl:otherwise>
             <xsl:element         name = "span">
              <xsl:attribute      name = "class">
               <xsl:text>insertapproved</xsl:text>
              </xsl:attribute>
              <xsl:call-template  name = "addIdLinkTarget">
               <xsl:with-param    name = "id"
                                select = "../@cdr:id"/>
              </xsl:call-template>

              <!-- xsl:element        name = "b" -->
               <xsl:text>Video: </xsl:text>
               <xsl:value-of    select = "MediaID/
                                          Media/
                                          MediaTitle"/>
              <!-- /xsl:element -->
             </xsl:element>
            </xsl:otherwise>
           </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
           <xsl:call-template     name = "addIdLinkTarget">
            <xsl:with-param       name = "id"
                                select = "../@cdr:id"/>
           </xsl:call-template>
           <xsl:element           name = "b">
           <xsl:text>Video: </xsl:text>
           <xsl:value-of        select = "MediaID/
                                          Media/
                                          MediaTitle"/>
           </xsl:element>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:element>
       </xsl:element>
      </xsl:if>
      <xsl:if                     test = "$mediaAudience =
                                                 'Health_professionals'">
       <xsl:if                    test = "not(../@UseCaption = 'No')">
        <xsl:call-template        name = "addCaptionVideo"/>
       </xsl:if>
      </xsl:if>
     </xsl:otherwise>
    </xsl:choose>

   </xsl:otherwise>

  </xsl:choose>
 </xsl:template>


 <!--
 ======================================================================
 Template handling Captions when images are being displayed or if
 UseCaption option is applied
 ====================================================================== -->
 <xsl:template                    name = "addCaption">
  <xsl:element                    name = "div">
   <xsl:attribute                 name = "class">
    <xsl:text>caption</xsl:text>
    <xsl:text> caption-box</xsl:text>
   </xsl:attribute>

   <xsl:choose>
    <!-- Using caption from MediaLink element -->
    <xsl:when                     test = "../Caption">
     <xsl:apply-templates       select = "../Caption"
                                  mode = "createCaption"/>
    </xsl:when>
    <!-- Using caption from Media document (MediaLink/@UseCaption = "Yes") -->
    <xsl:otherwise>
     <xsl:element                 name = "div">
      <xsl:attribute              name = "class">
       <xsl:text>media-caption</xsl:text>
      </xsl:attribute>

      <xsl:choose>
       <!-- Deletion Section -->
       <xsl:when                  test = "@InsertionOrDeletion = 'Deletion'">
        <xsl:element              name = "span">
         <xsl:choose>
          <xsl:when               test = "@RevisionLevel = 'proposed'">
           <xsl:attribute         name = "class">
            <xsl:text>deleteproposed</xsl:text>
           </xsl:attribute>
          </xsl:when>
          <xsl:otherwise>
           <xsl:attribute         name = "class">
            <xsl:text>deleteapproved</xsl:text>
           </xsl:attribute>
          </xsl:otherwise>
         </xsl:choose>

         <xsl:choose>
          <xsl:when               test = "@RevisionLevel = 'approved'
                                          and
                                          contains($whoAmI, 'BU')">
           <!-- Do nothing, Approved deletion is applied in BU report -->

          </xsl:when>
          <xsl:otherwise>

           <xsl:apply-templates select = "Media/
                                            MediaContent/
                                            Captions/
                                            MediaCaption[@audience =
                                                           $mediaAudience
                                                         and
                                                         @language =
                                                           $mediaLanguage]"/>
          </xsl:otherwise>
         </xsl:choose>

        </xsl:element>
       </xsl:when>
       <!-- Insertion Section -->
       <xsl:when                  test = "@InsertionOrDeletion = 'Insertion'">
        <xsl:element              name = "span">
         <xsl:choose>
          <xsl:when               test = "@RevisionLevel = 'proposed'">
           <xsl:attribute         name = "class">
            <xsl:text>insertproposed</xsl:text>
           </xsl:attribute>
          </xsl:when>
          <xsl:otherwise>
           <xsl:attribute         name = "class">
            <xsl:text>insertapproved</xsl:text>
           </xsl:attribute>
          </xsl:otherwise>
         </xsl:choose>

        <xsl:apply-templates    select = "Media/
                                            MediaContent/
                                            Captions/
                                            MediaCaption[@audience =
                                                           $mediaAudience
                                                         and
                                                         @language =
                                                           $mediaLanguage]"/>

        </xsl:element>
       </xsl:when>

       <!-- No Markup section -->
       <xsl:otherwise>
        <xsl:apply-templates    select = "Media/
                                            MediaContent/
                                            Captions/
                                            MediaCaption[@audience =
                                                           $mediaAudience
                                                         and
                                                         @language =
                                                           $mediaLanguage]"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:element>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:element>
 </xsl:template>


 <!--
 ========================================================================
 Template handling Captions when images/video are being displayed as well
 ======================================================================== -->
 <xsl:template                    name = "addCaptionVideo">
   <xsl:element                   name = "div">
    <xsl:attribute                name = "class">
     <xsl:text>caption</xsl:text>
     <xsl:text> caption-box</xsl:text>
    </xsl:attribute>
   <xsl:choose>
    <xsl:when                     test = "SpecificMediaCaption">
     <xsl:element                 name = "div">
      <xsl:attribute              name = "class">
       <xsl:text>media-caption</xsl:text>
      </xsl:attribute>

      <xsl:apply-templates/>
     </xsl:element>
    </xsl:when>
    <xsl:otherwise>
     <xsl:element                 name = "div">
      <xsl:attribute              name = "class">
       <xsl:text>media-caption</xsl:text>
      </xsl:attribute>
     <xsl:apply-templates       select = "MediaID/
                                            Media/
                                            MediaContent/
                                            Captions/
                                            MediaCaption[@audience =
                                                           $mediaAudience
                                                         and
                                                         @language =
                                                           $mediaLanguage]"/>
     </xsl:element>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Template to add the caption called as part of the MediaID element
 (within the addCaption named template)
 ====================================================================== -->
 <xsl:template                   match = "Caption"
                                  mode = "createCaption">
  <xsl:element                    name = "div">
   <xsl:attribute                 name = "class">
    <xsl:text>media-caption</xsl:text>
   </xsl:attribute>

   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Template suppressing the Captions.
 Since the captions have already been dealt with as part of the MediaID
 template the default document-flow processing needs to be turned off.
 ====================================================================== -->
 <xsl:template                   match = "Caption"/>


 <!--
 ======================================================================
 Template handling Captions following the MediaID element in the case
 that the images are being suppressed.  Image title and caption are
 being printed in one placeholder box.
 ====================================================================== -->
 <xsl:template                   match = "Caption"
                                  mode = "summary">
  <br/>
  <b>Caption: </b>
  <xsl:value-of                 select = "."/>
  <xsl:apply-templates/>
 </xsl:template>


 <!--
 ======================================================================
 Template to display the image of the MediaID element

 Note: For both, the insertion as well as the deletion we're only
       marking-up the 'approved' revision level but not the 'publish'
       or 'proposed' revision level.  To do so would require to add
       a RevisionLevel attribute to the MediaLink ID.  After the
       MediaLink denormalization the information of the revision level
       is lost unless a caption is included and we have no way of
       identifying the revision level of the element currently.  It was
       decided to keep this as is for the time being.
                                                       2017-04-03, VE

       The above decision has been revised and the users do now want to
       have approved and proposed content for video and images marked
       up. We're changing the denormalization order for video to
       accomodate this request.
       We're also adjusting the media denormalization to carry over
       the RevisionLevel attribute.
                                                       2020-03-18, VE
 ====================================================================== -->
 <xsl:template                   match = "MediaID"
                                  mode = "summary">

  <xsl:choose>
   <!-- Deletion section -->
   <xsl:when                      test = "parent::MediaLink
                                            /@iod = 'Deletion'
                                          or
                                          parent::EmbeddedVideo
                                            /@iod = 'Deletion'">
    <xsl:choose>
     <!-- Markup section -->
     <xsl:when                    test = "@RevisionLevel = 'proposed'">
      <xsl:element                name = "span">
       <xsl:attribute             name = "class">
        <xsl:text>deleteproposed</xsl:text>
       </xsl:attribute>

       <xsl:call-template         name = "addImageAndTitle"/>

      </xsl:element>
     </xsl:when>
     <!-- Apply approved deletion for images -->
     <xsl:when                    test = "@RevisionLevel = 'approved'
                                          and
                                          contains($whoAmI, 'BU')">
      <!-- Do nothing, Deletion is applied for BU -->
     </xsl:when>
     <!-- Apply approved deletion for video -->
     <xsl:when                    test = "descendant::Deletion[
                                             @RevisionLevel = 'approved']
                                          and
                                          contains($whoAmI, 'BU')">
      <!-- Do nothing, Deletion is applied for BU -->
     </xsl:when>
     <xsl:otherwise>
      <xsl:element                name = "span">
       <xsl:attribute             name = "class">
        <xsl:text>deleteapproved</xsl:text>
       </xsl:attribute>

       <xsl:call-template         name = "addImageAndTitle"/>

      </xsl:element>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <!-- Insertion section -->
   <xsl:when                      test = "parent::MediaLink
                                             /@iod = 'Insertion'
                                          or
                                          parent::EmbeddedVideo
                                             /@iod = 'Insertion'">
    <xsl:choose>
     <!-- Markup section -->
     <xsl:when                    test = "parent::MediaLink
                                            /@RevisionLevel = 'proposed'">
      <xsl:element                name = "span">
       <xsl:attribute             name = "class">
        <xsl:text>insertproposed</xsl:text>
       </xsl:attribute>

       <xsl:call-template         name = "addImageAndTitle"/>

      </xsl:element>
     </xsl:when>
     <xsl:otherwise>
      <xsl:element                name = "span">
       <xsl:attribute             name = "class">
        <xsl:text>insertapproved</xsl:text>
       </xsl:attribute>

       <xsl:call-template         name = "addImageAndTitle"/>

      </xsl:element>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <!-- No mark-up section -->
   <xsl:otherwise>
    <xsl:call-template            name = "addImageAndTitle"/>

   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =====================================================================
 Template to create the DIV elements for Title and Images
 This is used multiple times for different markup situations.
 ===================================================================== -->
 <xsl:template                    name = "addImageAndTitle">
  <xsl:element                    name = "div">
   <xsl:attribute                 name = "class">
    <xsl:text>qc-image</xsl:text>
   </xsl:attribute>

   <xsl:call-template             name = "addIdLinkTarget">
    <xsl:with-param               name = "id"
                                select = "../@cdr:id"/>
   </xsl:call-template>

   <!--
   DIV to display the image
   ============================================= -->
   <xsl:choose>
    <xsl:when                     test = "parent::EmbeddedVideo">
      <xsl:element                name = "iframe">
       <xsl:attribute             name = "src">
        <xsl:text>https://www.youtube.com/embed/</xsl:text>
        <xsl:value-of           select = "Media/
                                           PhysicalMedia/
                                           VideoData/
                                           HostingID"/>
       </xsl:attribute>
        <!--
        <xsl:text>/hqdefault.jpg</xsl:text>
        -->
       <xsl:attribute             name = "width">
        <xsl:text>560px</xsl:text>
       </xsl:attribute>
       <xsl:attribute             name = "height">
        <xsl:text>315px</xsl:text>
       </xsl:attribute>

       <xsl:call-template         name = "addIdLinkTarget">
         <xsl:with-param          name = "id"
                                select = "../@cdr:id"/>
       </xsl:call-template>
      </xsl:element>

    </xsl:when>

    <!-- Adding the image, image title, and caption -->
    <xsl:otherwise>
     <xsl:element                 name = "div">
      <xsl:attribute              name = "class">
       <xsl:text>image-center</xsl:text>
      </xsl:attribute>

      <xsl:element                name = "img">
       <xsl:attribute             name = "src">
        <xsl:text>/cgi-bin/cdr/</xsl:text>
        <xsl:text>GetCdrImage.py?</xsl:text>
          <xsl:choose>
           <xsl:when              test = "$DisplayPubImages = 'N'">
            <xsl:text>pp=N&amp;</xsl:text>
           </xsl:when>
           <xsl:otherwise>
            <xsl:text>pp=Y&amp;</xsl:text>
           </xsl:otherwise>
          </xsl:choose>
        <xsl:text>id=</xsl:text>

        <xsl:value-of           select = "@cdr:ref"/>
        <xsl:text>-400.jpg</xsl:text>
       </xsl:attribute>
      </xsl:element>
     </xsl:element>
    </xsl:otherwise>
   </xsl:choose>

   <!--
   Floating DIV to display the title

   Note: The MediaLink and EmbeddedVideo are denomalized by two different filters.
         The EmbeddedVideo is part of the "regular" denormalization and therefore
         every text element is enclosed in Insertion/Deletion markup if it exists.
         In order to identify the mark-up level (approved or proposed) we can
         check the children of the MediaTitle directly.
         The MediaLink is NOT part of that original denormalization and therefore
         the Insertion/Deletion markup is missing inside the MediaID element.  In
         order to identify the mark-up level we'll have to inspect the mark-up
         element just before the MediaID element.
   ============================================================================== -->
   <xsl:element                   name = "div">
    <xsl:attribute                name = "class">
     <xsl:text>image-title</xsl:text>
    </xsl:attribute>

    <!-- The users want the caption and image title marked up -->
    <xsl:choose>
     <xsl:when                    test = "parent::MediaLink/@iod = 'Deletion'
                                          or
                                          parent::EmbeddedVideo/@iod = 'Deletion'">
      <xsl:choose>
       <!-- For MediaLink, Insertion/Deletion element exists just before MediaID -->
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>deleteproposed</xsl:text>
         </xsl:attribute>
         <xsl:choose>
          <xsl:when               test = "Media/MediaTitle">
           <xsl:value-of        select = "Media/MediaTitle"/>
          </xsl:when>
          <xsl:otherwise>
           <xsl:value-of        select = "."/>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:element>
       </xsl:when>

       <!-- For EmbeddedVideo, the MediaTitle includes Insertion/Deletion -->
       <xsl:when                  test = "descendant::MediaTitle[
                                             Deletion/@RevisionLevel = 'proposed']">
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>deleteproposed</xsl:text>
         </xsl:attribute>
         <xsl:choose>
          <xsl:when               test = "Media/MediaTitle">
           <xsl:value-of        select = "Media/MediaTitle"/>
          </xsl:when>
          <xsl:otherwise>
           <xsl:value-of        select = "."/>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:element>
       </xsl:when>
       <!-- For MediaID -->
       <xsl:when                  test = "@RevisionLevel = 'approved'
                                          and
                                          contains($whoAmI, 'BU')">
        <!-- Do nothing, Approved deletion is applied -->

       </xsl:when>
       <!-- For EmbeddedVideo -->
       <xsl:when                  test = "descendant::MediaTitle[
                                            Deletion/@RevisionLevel = 'approved']
                                          and
                                          contains($whoAmI, 'BU')">
        <!-- Do nothing, Approved deletion is applied -->

       </xsl:when>
       <xsl:otherwise>
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>deleteapproved</xsl:text>
         </xsl:attribute>
         <xsl:choose>
          <xsl:when               test = "Media/MediaTitle">
           <xsl:value-of        select = "Media/MediaTitle"/>
          </xsl:when>
          <xsl:otherwise>
           <xsl:value-of        select = "."/>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:element>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>

     <xsl:when                    test = "parent::MediaLink/@iod='Insertion'
                                          or
                                          parent::EmbeddedVideo/@iod='Insertion'">
      <xsl:choose>
       <!-- For MediaLink, Insertion/Deletion element exists just before MediaID -->
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>insertproposed</xsl:text>
         </xsl:attribute>
         <xsl:choose>
          <xsl:when               test = "Media/MediaTitle">
           <xsl:value-of        select = "Media/MediaTitle"/>
          </xsl:when>
          <xsl:otherwise>
           <xsl:value-of        select = "."/>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:element>
       </xsl:when>

       <!-- For EmbeddedVideo, the MediaTitle includes Insertion/Deletion -->
       <xsl:when                  test = "descendant::MediaTitle[
                                             Insertion/@RevisionLevel = 'proposed']">
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>insertproposed</xsl:text>
         </xsl:attribute>
         <xsl:choose>
          <xsl:when               test = "Media/MediaTitle">
           <xsl:value-of        select = "Media/MediaTitle"/>
          </xsl:when>
          <xsl:otherwise>
           <xsl:value-of        select = "."/>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:element>
       </xsl:when>

       <xsl:otherwise>
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>insertapproved</xsl:text>
         </xsl:attribute>
         <xsl:choose>
          <xsl:when               test = "Media/MediaTitle">
           <xsl:value-of        select = "Media/MediaTitle"/>
          </xsl:when>
          <xsl:otherwise>
           <xsl:value-of        select = "."/>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:element>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>

     <xsl:otherwise>
      <xsl:value-of             select = "Media/MediaTitle"/>
     </xsl:otherwise>

    </xsl:choose>

   </xsl:element>
  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Template to replace the MediaID element with a little table as a
 place holder for the image
 ====================================================================== -->
 <xsl:template                   match = "MediaID | VideoID"
                                  mode = "gtc">
  <xsl:choose>
   <!--
   If multiple images are displayed we need a linebreak before
   the second title element -->
   <!--
   This section is only used as part of the GTN QC report.
   The Media/MediaTitle node doesn't exist for the GTC QC report
   ============================================================= -->
   <xsl:when                      test = "Media/MediaTitle">
    <xsl:if                       test = "position() > 1">
     <br/>
    </xsl:if>
    <xsl:value-of               select = "Media/MediaTitle"/>
    <br/>
    <!--
    In the Glossary Term Name Full QC report the Video and images
    are both denormalized to 'Media' nodes and
    those must be distinguished by their parent elements
    EmbeddedVideo bs MediaLink
    ============================================================== -->
    <xsl:choose>
     <xsl:when                    test = "parent::MediaLink">
      <xsl:element                name = "img">
       <xsl:attribute             name = "src">
        <xsl:text>/cgi-bin/cdr/</xsl:text>
        <xsl:text>GetCdrImage.py?</xsl:text>
        <xsl:choose>
         <xsl:when                test = "$DisplayPubImages = 'N'">
          <xsl:text>pp=N&amp;</xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:text>pp=Y&amp;</xsl:text>
         </xsl:otherwise>
        </xsl:choose>
        <xsl:text>id=</xsl:text>

        <xsl:value-of           select = "@cdr:ref"/>
        <xsl:text>-300.jpg</xsl:text>
       </xsl:attribute>

       <xsl:call-template         name = "addIdLinkTarget">
        <xsl:with-param           name = "id"
                                select = "../@cdr:id"/>
       </xsl:call-template>
      </xsl:element>
     </xsl:when>
     <xsl:when                    test = "parent::EmbeddedVideo">
      <xsl:element                name = "img">
       <xsl:attribute             name = "src">
        <xsl:text>https://img.youtube.com/vi/</xsl:text>
        <xsl:value-of           select = "Media/
                                           PhysicalMedia/
                                           VideoData/
                                           HostingID"/>
        <xsl:text>/hqdefault.jpg</xsl:text>
       </xsl:attribute>
       <xsl:attribute             name = "width">
        <xsl:text>300px</xsl:text>
       </xsl:attribute>

       <xsl:call-template         name = "addIdLinkTarget">
         <xsl:with-param          name = "id"
                                select = "../@cdr:id"/>
       </xsl:call-template>
      </xsl:element>
      <br/>
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:text>https://www.youtube.com/watch?v=</xsl:text>
        <xsl:value-of           select = "Media/
                                           PhysicalMedia/
                                           VideoData/
                                           HostingID"/>
       </xsl:attribute>
       <xsl:text>Watch video on YouTube</xsl:text>
      </xsl:element>
     </xsl:when>
    </xsl:choose>
    <br/>
   </xsl:when>
   <!-- This section is used for the GTC QC reports -->
   <xsl:otherwise>
    <xsl:value-of               select = "."/>
    <br/>
    <xsl:choose>
     <xsl:when                    test = "parent::MediaLink">
      <xsl:element                name = "img">
       <xsl:attribute             name = "src">
        <xsl:text>/cgi-bin/cdr/</xsl:text>
        <xsl:text>GetCdrImage.py?</xsl:text>
        <xsl:text>id=</xsl:text>

        <xsl:value-of           select = "@cdr:ref"/>
        <xsl:text>-300.jpg</xsl:text>
       </xsl:attribute>

       <xsl:call-template         name = "addIdLinkTarget">
        <xsl:with-param           name = "id"
                                select = "../@cdr:id"/>
       </xsl:call-template>
      </xsl:element>
     </xsl:when>
     <xsl:when                    test = "parent::EmbeddedVideo">
      <!-- Need to denormalize the EmbeddedVideo link to pickup
           the YouTube ID -->
      <xsl:variable               name = "VideoID"
                                select = "@cdr:ref"/>
      <xsl:variable               name = "VideoInfo"
                                select = "document(concat('cdr:', $VideoID,
                                                          '/last'))"/>
      <xsl:element                name = "img">
       <xsl:attribute             name = "src">
        <xsl:text>https://img.youtube.com/vi/</xsl:text>
        <xsl:value-of           select = "$VideoInfo/Media/
                                           PhysicalMedia/
                                           VideoData/
                                           HostingID"/>
        <xsl:text>/hqdefault.jpg</xsl:text>
       </xsl:attribute>
       <xsl:attribute             name = "width">
        <xsl:text>300px</xsl:text>
       </xsl:attribute>

       <xsl:call-template         name = "addIdLinkTarget">
         <xsl:with-param          name = "id"
                                select = "../@cdr:id"/>
       </xsl:call-template>
      </xsl:element>
      <br/>
      <xsl:element                name = "a">
       <xsl:attribute             name = "href">
        <xsl:text>https://www.youtube.com/watch?v=</xsl:text>
        <xsl:value-of           select = "$VideoInfo/Media/
                                           PhysicalMedia/
                                           VideoData/
                                           HostingID"/>
       </xsl:attribute>
       <xsl:text>Watch video on YouTube</xsl:text>
      </xsl:element>
     </xsl:when>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ======================================================================
 Display CitationLinks
 ====================================================================== -->
 <xsl:template                   match = "Citation">
  <xsl:variable                   name = "nextRef"
                                select = "position()+1"/>
  <xsl:variable                   name = "firstRef"
                                select = "position()-1"/>
  <xsl:variable                   name = "ref"
                                select = "."/>
  <xsl:variable                   name = "sectionID">
   <xsl:call-template             name = "getSectionId"/>
  </xsl:variable>

  <!--
  Displaying the Left Bracket of a list of citations with marked up
  ================================================================= -->
  <xsl:if                         test = "name(../node()[$firstRef])
                                            != 'Citation'">

   <xsl:choose>
    <xsl:when                     test = "@InsertionOrDeletion = 'Insertion'">
     <xsl:choose>
      <xsl:when                   test = "@Source = 'advisory-board'">
       <xsl:choose>
        <xsl:when                 test = "@RevisionLevel = 'proposed'">
         <xsl:element             name = "span">
          <xsl:attribute          name = "class">
           <xsl:text>insertproposed_ad</xsl:text>
          </xsl:attribute>
          <xsl:text>[</xsl:text>
         </xsl:element>
        </xsl:when>
        <xsl:otherwise>
         <xsl:element             name = "span">
          <xsl:attribute          name = "class">
           <xsl:text>insertapproved_ad</xsl:text>
          </xsl:attribute>
          <xsl:text>[</xsl:text>
         </xsl:element>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
       <xsl:choose>
        <xsl:when                 test = "@RevisionLevel = 'proposed'">
         <xsl:element             name = "span">
          <xsl:attribute          name = "class">
           <xsl:text>insertproposed</xsl:text>
          </xsl:attribute>
          <xsl:text>[</xsl:text>
         </xsl:element>
        </xsl:when>
        <xsl:otherwise>
         <xsl:element             name = "span">
          <xsl:attribute          name = "class">
           <xsl:text>insertapproved</xsl:text>
          </xsl:attribute>
          <xsl:text>[</xsl:text>
         </xsl:element>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:when                     test = "@InsertionOrDeletion = 'Deletion'">
     <xsl:choose>
      <xsl:when                   test = "@Source = 'advisory-board'">
       <xsl:choose>
        <xsl:when                 test = "@existing">
         <xsl:text>[</xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:choose>
          <xsl:when               test = "@RevisionLevel = 'proposed'">
           <xsl:element           name = "span">
            <xsl:attribute        name = "class">
             <xsl:text>deleteproposed_ad</xsl:text>
            </xsl:attribute>
            <xsl:text>[</xsl:text>
           </xsl:element>
          </xsl:when>
          <xsl:otherwise>
           <xsl:element           name = "span">
            <xsl:attribute        name = "class">
             <xsl:text>deleteapproved_ad</xsl:text>
            </xsl:attribute>
            <xsl:text>[</xsl:text>
           </xsl:element>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
       <xsl:choose>
        <xsl:when                 test = "@existing">
         <xsl:text>[</xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:choose>
          <xsl:when               test = "@RevisionLevel = 'proposed'">
           <xsl:element           name = "span">
            <xsl:attribute        name = "class">
             <xsl:text>deleteproposed</xsl:text>
            </xsl:attribute>
            <xsl:text>[</xsl:text>
           </xsl:element>
          </xsl:when>
          <xsl:otherwise>
           <xsl:element           name = "span">
            <xsl:attribute        name = "class">
             <xsl:text>deleteapproved</xsl:text>
            </xsl:attribute>
            <xsl:text>[</xsl:text>
           </xsl:element>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>[</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:if>

  <!--
  Displaying the citation ID with marked up
  ========================================= -->
  <xsl:choose>
   <xsl:when                      test = "@InsertionOrDeletion = 'Deletion'">
    <xsl:choose>
     <xsl:when                    test = "@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>deleteproposed_ad</xsl:text>
         </xsl:attribute>
         <xsl:call-template       name = "addCitationLink">
          <xsl:with-param         name = "sectionID"
                                select = "$sectionID"/>
         </xsl:call-template>
        </xsl:element>
       </xsl:when>
       <xsl:otherwise>
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>deleteapproved_ad</xsl:text>
         </xsl:attribute>
         <xsl:call-template       name = "addCitationLink">
          <xsl:with-param         name = "sectionID"
                                select = "$sectionID"/>
         </xsl:call-template>
        </xsl:element>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>deleteproposed</xsl:text>
         </xsl:attribute>
         <xsl:call-template       name = "addCitationLink">
          <xsl:with-param         name = "sectionID"
                                select = "$sectionID"/>
         </xsl:call-template>
        </xsl:element>
       </xsl:when>
       <xsl:otherwise>
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>deleteapproved</xsl:text>
         </xsl:attribute>
         <xsl:call-template       name = "addCitationLink">
          <xsl:with-param         name = "sectionID"
                                select = "$sectionID"/>
         </xsl:call-template>
        </xsl:element>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:when                      test = "@InsertionOrDeletion = 'Insertion'">
    <xsl:choose>
     <xsl:when                    test = "@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>insertproposed_ad</xsl:text>
         </xsl:attribute>
         <xsl:call-template       name = "addCitationLink">
          <xsl:with-param         name = "sectionID"
                                select = "$sectionID"/>
         </xsl:call-template>
        </xsl:element>
       </xsl:when>
       <xsl:otherwise>
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>insertapproved_ad</xsl:text>
         </xsl:attribute>
         <xsl:call-template       name = "addCitationLink">
          <xsl:with-param         name = "sectionID"
                                select = "$sectionID"/>
         </xsl:call-template>
        </xsl:element>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>insertproposed</xsl:text>
         </xsl:attribute>
         <xsl:call-template       name = "addCitationLink">
          <xsl:with-param         name = "sectionID"

                                select = "$sectionID"/>
         </xsl:call-template>
        </xsl:element>
       </xsl:when>
       <xsl:otherwise>
        <xsl:element              name = "span">
         <xsl:attribute           name = "class">
          <xsl:text>insertapproved</xsl:text>
         </xsl:attribute>
         <xsl:call-template       name = "addCitationLink">
          <xsl:with-param         name = "sectionID"
                                select = "$sectionID"/>
         </xsl:call-template>
        </xsl:element>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
    <xsl:call-template            name = "addCitationLink">
     <xsl:with-param              name = "sectionID"
                                select = "$sectionID"/>
    </xsl:call-template>
   </xsl:otherwise>
  </xsl:choose>

  <!--
  Displaying the comma of a list of citations with marked up
  ========================================================== -->
  <xsl:choose>
   <xsl:when                      test = "name(../node()[$nextRef])
                                            = 'Citation'">
    <xsl:choose>
     <xsl:when                    test = "@InsertionOrDeletion = 'Insertion'">
      <xsl:choose>
       <xsl:when                  test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                test = "@RevisionLevel = 'proposed'">
          <xsl:element            name = "span">
           <xsl:attribute         name = "class">
            <xsl:text>insertproposed_ad</xsl:text>
           </xsl:attribute>
           <xsl:text>, </xsl:text>
          </xsl:element>
         </xsl:when>
         <xsl:otherwise>
          <xsl:element            name = "span">
           <xsl:attribute         name = "class">
            <xsl:text>insertapproved_ad</xsl:text>
           </xsl:attribute>
           <xsl:text>, </xsl:text>
          </xsl:element>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                test = "@RevisionLevel = 'proposed'">
          <xsl:element            name = "span">
           <xsl:attribute         name = "class">
            <xsl:text>insertproposed</xsl:text>
           </xsl:attribute>
           <xsl:text>, </xsl:text>
          </xsl:element>
         </xsl:when>
         <xsl:otherwise>
          <xsl:element            name = "span">
           <xsl:attribute         name = "class">
            <xsl:text>insertapproved</xsl:text>
           </xsl:attribute>
          <xsl:text>, </xsl:text>
          </xsl:element>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:when                    test = "@InsertionOrDeletion = 'Deletion'">
      <xsl:choose>
       <xsl:when                  test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                test = "@existing">
          <xsl:text>, </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when              test = "@RevisionLevel = 'proposed'">
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteproposed_ad</xsl:text>
             </xsl:attribute>
             <xsl:text>, </xsl:text>
            </xsl:element>
           </xsl:when>
           <xsl:otherwise>
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteapproved_ad</xsl:text>
             </xsl:attribute>
             <xsl:text>, </xsl:text>
            </xsl:element>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                test = "@existing">
          <xsl:text>, </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when              test = "@RevisionLevel = 'proposed'">
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteproposed</xsl:text>
             </xsl:attribute>
             <xsl:text>, </xsl:text>
            </xsl:element>
           </xsl:when>
           <xsl:otherwise>
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteapproved</xsl:text>
             </xsl:attribute>
             <xsl:text>, </xsl:text>
            </xsl:element>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>, </xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>

   <!--
   Displaying the Right Bracket of a list of citations with marked up
   ================================================================== -->
   <xsl:when                      test = "name(../node()[$nextRef])
                                            != 'Citation'">
    <xsl:choose>
     <xsl:when                    test = "@InsertionOrDeletion = 'Insertion'">

      <xsl:choose>
       <xsl:when                  test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                test = "@RevisionLevel = 'proposed'">
          <xsl:element            name = "span">
           <xsl:attribute         name = "class">
            <xsl:text>insertproposed_ad</xsl:text>
           </xsl:attribute>
           <xsl:text>]</xsl:text>
          </xsl:element>
         </xsl:when>
         <xsl:otherwise>
          <xsl:element            name = "span">
           <xsl:attribute         name = "class">
            <xsl:text>insertapproved_ad</xsl:text>
           </xsl:attribute>
           <xsl:text>]</xsl:text>
          </xsl:element>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                test = "@RevisionLevel = 'proposed'">
          <xsl:element            name = "span">
           <xsl:attribute         name = "class">
            <xsl:text>insertproposed</xsl:text>
           </xsl:attribute>
           <xsl:text>]</xsl:text>

          </xsl:element>
         </xsl:when>
         <xsl:otherwise>
          <xsl:element            name = "span">
           <xsl:attribute         name = "class">
            <xsl:text>insertapproved</xsl:text>
           </xsl:attribute>
           <xsl:text>]</xsl:text>
          </xsl:element>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:when                    test = "@InsertionOrDeletion = 'Deletion'">
      <xsl:choose>
       <xsl:when                  test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                test = "@existing">
          <xsl:text>]</xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when              test = "@RevisionLevel = 'proposed'">
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteproposed_ad</xsl:text>
             </xsl:attribute>
             <xsl:text>]</xsl:text>
            </xsl:element>
           </xsl:when>
           <xsl:otherwise>
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteapproved_ad</xsl:text>
             </xsl:attribute>
             <xsl:text>]</xsl:text>
            </xsl:element>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                test = "@existing">
          <xsl:text>]</xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when              test = "@RevisionLevel = 'proposed'">
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteproposed</xsl:text>
             </xsl:attribute>
             <xsl:text>]</xsl:text>
            </xsl:element>
           </xsl:when>
           <xsl:otherwise>
            <xsl:element          name = "span">
             <xsl:attribute       name = "class">
              <xsl:text>deleteapproved</xsl:text>
             </xsl:attribute>
             <xsl:text>]</xsl:text>
            </xsl:element>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>]</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
  </xsl:choose>
 </xsl:template>



 <!--
 =====================================================================
 Template to add the link anchor to an element that has a cdr:id
 attribute
 ===================================================================== -->
 <xsl:template                    name = "addIdLinkTarget">
  <xsl:param                      name = "id"
                                select = "./@cdr:id"/>

  <xsl:attribute                  name = "id">
   <!--
   If the node is coming from another document we need to adjust the id -->
   <xsl:if                        test = "ancestor::MiscellaneousDocLink">
    <xsl:text>_md</xsl:text>
   </xsl:if>
   <xsl:value-of                select = "$id"/>
  </xsl:attribute>
 </xsl:template>


 <!--
 ======================================================================
 Template to add the link anchor to the citations listed within the
 text linking to the citation within the reference section.
 ====================================================================== -->
 <xsl:template                    name = "addCitationLink">
  <xsl:param                      name = "sectionID"/>

  <xsl:element                    name = "a">
   <xsl:attribute                 name = "href">
    <xsl:text>#CL</xsl:text>
    <xsl:value-of               select = "$sectionID"/>
    <xsl:text>_</xsl:text>
    <xsl:value-of               select = "@refidx"/>
   </xsl:attribute>

   <xsl:attribute                 name = "title">
    <xsl:choose>
     <xsl:when                    test = ". = ''">
      <xsl:text>CITATION PLACEHOLDER</xsl:text>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "."/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>

   <xsl:attribute                 name = "class">
    <xsl:text>citationLink</xsl:text>
   </xsl:attribute>
   <xsl:choose>
    <xsl:when                     test = "@iod = 'Insertion'">
     <xsl:element                 name = "span">
      <xsl:attribute              name = "class">
       <xsl:choose>
        <xsl:when                 test = "@RevisionLevel = 'proposed'">
         <xsl:text>insertproposed</xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>insertapproved</xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:attribute>
      <xsl:value-of             select = "@refidx"/>
     </xsl:element>
    </xsl:when>
    <xsl:when                     test = "@iod = 'Deletion'">
     <xsl:element                 name = "span">
      <xsl:attribute              name = "class">
       <xsl:choose>
        <xsl:when                 test = "@RevisionLevel = 'proposed'">
         <xsl:text>deleteproposed</xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>deleteapproved</xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:attribute>
      <xsl:value-of             select = "@refidx"/>
     </xsl:element>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of              select = "@refidx"/>
    </xsl:otherwise>
   </xsl:choose>

  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Template to add the link anchor to the citations listed within the
 text linking to the citation within the reference section.
 ====================================================================== -->
 <xsl:template                    name = "getSectionId">
  <xsl:for-each                 select = "ancestor-or-self::*">
   <xsl:if                        test = "name(..) = 'Summary'">
    <xsl:value-of               select = "@cdr:id"/>
   </xsl:if>
  </xsl:for-each>
 </xsl:template>


 <!--
 ======================================================================
 Renaming the iod element to a class to apply CSS markup
 ====================================================================== -->
 <xsl:template                   match = "@iod">
  <xsl:attribute                  name = "class">
   <xsl:value-of                select = "."/>
  </xsl:attribute>
 </xsl:template>
 <xsl:template                   match = "@iod"
                                  mode = "compcactNo">
  <xsl:attribute                  name = "class">
   <xsl:value-of                select = "."/>
  </xsl:attribute>
 </xsl:template>

</xsl:transform>
