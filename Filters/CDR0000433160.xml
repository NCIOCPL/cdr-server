<?xml version='1.0' encoding='utf-8'?>
<!-- Filter title: Denormalization Filter (1/1): Media -->
<!--
  BZIssue::4781 - Have certain links to unpublished docs ignored
-->
<!--
==================================================================
Filter to Denormalize Media XML
================================================================== -->
<xsl:transform               xmlns:xsl = 'http://www.w3.org/1999/XSL/Transform'
                             xmlns:cdr = 'cips.nci.nih.gov/cdr'
                               version = '1.0'>

 <xsl:include href = "cdr:name:Module: Summary Denormalization"/>

 <xsl:output                    method = "xml"
                  omit-xml-declaration = "no"
                              encoding = "utf-8"/>

 <!-- Stylesheet level parameters passed in from the caller -->
 <xsl:param                       name = "isPP"
                                select = "'N'"/>
 <xsl:param                       name = "isQC"
                                select = "'N'"/>

 <!--
 =================================================================
 Copy control information and generate current date
 ================================================================= -->
 <xsl:template                   match = "Media">
  <xsl:copy>
   <xsl:apply-templates         select = "document('cdrutil:/docid')"/>
   <xsl:apply-templates         select = "document('cdrx:/*/CdrCtl')"/>

   <xsl:apply-templates/>

  </xsl:copy>
 </xsl:template>


 <!--
 ==============================================================
 Denormalize terminology which doesn't involve parent hierarchy.
 ============================================================== -->
 <xsl:template                   match = "Diagnosis | Topic">
  <!--
  =============================================================
  Find the terminology document's preferred name.
  ============================================================= -->
  <xsl:variable                   name = "termId"
                                select = "@cdr:ref"/>
  <xsl:variable                   name = "termDoc"
                                select = "document(concat('cdr:',
                                                          $termId,
                                                          '/lastp'))"/>
  <xsl:element                    name = "{name()}">
   <Term>
    <xsl:for-each               select = "@*">
     <xsl:attribute               name = "{name()}">
      <xsl:value-of             select = "."/>
     </xsl:attribute>
    </xsl:for-each>
    <xsl:copy-of               select = "$termDoc/Term/PreferredName"/>
   </Term>
  </xsl:element>
 </xsl:template>


 <!--
 ==============================================================
 Denormalize Media link
 ============================================================== -->
 <xsl:template                   match = "MediaID">
  <!--
  ========================================================
  Find the Media Title.
  ======================================================== -->
  <xsl:variable                   name = "mediaId"
                                select = "@cdr:ref"/>
  <xsl:variable                   name = "mediaDoc"
                                select = "document(concat('cdr:',
                                                          $mediaId,
                                                          '/lastp'))"/>
  <xsl:element                    name = "{name()}">
   <Media>
    <xsl:for-each               select = "@*">
     <xsl:attribute               name = "{name()}">
      <xsl:value-of             select = "."/>
     </xsl:attribute>
    </xsl:for-each>
    <xsl:copy-of               select = "$mediaDoc/Media/MediaTitle"/>
   </Media>
  </xsl:element>
 </xsl:template>


 <!--
 =================================================================
 Template to denormalize the Glossary elements
 Ignore errors if the filter is run as a PublishPreview or QC
 report.
 ================================================================= -->
 <xsl:template                   match = "Glossary">
  <xsl:variable                   name = "glossID"
                                select = "@cdr:ref"/>

  <xsl:variable                   name = "glossDoc">
   <xsl:choose>
    <xsl:when                     test = "$isPP = 'Y'
                                          or
                                          $isQC = 'Y'">
     <xsl:copy-of               select = "document(concat('cdrx:', $glossID,
                                                           '/lastp'))"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:copy-of               select = "document(concat('cdr:', $glossID,
                                                           '/lastp'))"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>

  <xsl:element                    name = "{name()}">
   <GlossaryTermName>
   <xsl:attribute                 name = "cdr:ref">
    <xsl:value-of               select = "@cdr:ref"/>
   </xsl:attribute>

   <xsl:copy-of                 select = "$glossDoc/GlossaryTermName/*"/>
   </GlossaryTermName>
  </xsl:element>
 </xsl:template>


 <!--
 ==================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of of something
 ================================================================== -->
 <xsl:template              match = "@*|node()">
  <xsl:copy>
   <xsl:apply-templates    select = "@*|node()"/>
  </xsl:copy>
 </xsl:template>
</xsl:transform>
