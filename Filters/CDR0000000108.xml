<?xml version='1.0' encoding='utf-8'?>
<!-- $Id$ -->
<!-- Filter title: Denormalization Filter (1/1): InScope Protocol -->
<!--
================================================================
Denormalization Filter: InScopeProtocol
Written by Volker Englisch, 2002-04-01

BZIssue::4809 - Invalid warning messages in Status and Error Report

================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
                          xmlns:cdrscr = "cips.nci.nih.gov/cdr/script"
                           xmlns:exslt = "http://www.exslt.org/functions"
               exclude-result-prefixes = "cdrscr"
            extension-element-prefixes = "exslt"
                               version = "1.0">

 <xsl:output                    method = "xml" 
                  omit-xml-declaration = "no"
                              encoding = "UTF-8"/> 

 <xsl:include href = "cdr:name:Module: PersonLocations Denormalization"/>
 <xsl:include href = "cdr:name:Module: Denormalize and Upcode Protocol Terminology"/>

 <xsl:variable                    name = "pa_hp" 
                                select = "/InScopeProtocol
                                          /ProtocolAbstract/Professional |
                                          /ScientificProtocolInfo
                                          /ProtocolAbstract/Professional"/>
 <xsl:variable                    name = "pa_p" 
                                select = "/InScopeProtocol
                                          /ProtocolAbstract/Patient |
                                          /ScientificProtocolInfo
                                          /ProtocolAbstract/Patient"/>
 <xsl:variable                    name = "org_loc" 
                                select = "/Organization/OrganizationLocations
                                          /OrganizationLocation/Location"/>
 <xsl:variable                    name = "hpDisc"
                                select = "concat(
                                          'Protocol Health Professional ',
                                          'Abstract Disclaimer;Protocol ',
                                          'health professional abstract ',
                                          'disclaimer')"/>
 <xsl:variable                    name = "hpResearchDisc"
                                select = "concat(
                                          'Professional Disclaimer;',
                                          'Research study disclaimer ',
                                          '- Professional')"/>
 <xsl:variable                    name = "patDisc"
                                select = "concat(
                                          'Protocol patient abstract ',
                                          'disclaimer;Protocol patient ',
                                          'abstract disclaimer')"/>
 <xsl:variable                    name = "patResearchDisc"
                                select = "concat(
                                          'Patient Disclaimer;',
                                          'Research study disclaimer ',
                                          '- Patient')"/>
 <xsl:variable                    name = "protNum"
                                select = "translate(/InScopeProtocol/
                                                     ProtocolIDs/
                                                     PrimaryID/
                                                     IDString, ', ', '__')"/>
 <xsl:variable                    name = "docVerifDate"
                                select = "/InScopeProtocol/VerificationInfo
                                           /VerificationDate"/>
 <xsl:variable                    name = "lastModDate"
                                select = "/InScopeProtocol/DateLastModified"/>
 <xsl:param                       name = "pubProcDate"
                                select = "''"/>

 <!--
 ==================================================================
 Copy everything AS IS and invoke matched templates by default.
 ================================================================== -->
 <xsl:template                   match = "InScopeProtocol |
                                          ScientificProtocolInfo">
  <xsl:copy>
   <xsl:apply-templates         select = "document('cdrutil:/docid')"/>
   <xsl:apply-templates         select = "document('cdr:/*/CdrCtl')"/>

   <xsl:apply-templates/>

   <xsl:variable                  name = "url"
                                select = "concat('cdrutil:/verification-date/',
                                                 $docVerifDate, '/',
                                                 $lastModDate)"/>

   <xsl:variable                  name = "calcVerifDate"
                                select = "document($url)"/>
   <!-- 
   We need to populate a new element that is a calculated value for
   the verification date.  If this value comes back as NULL because
   the published document is a brand new publishing event for this
   document we need to populate the date with the date of the 
   publishing event from the pub_proc table.  This value is passed
   to the filter as a parameter.
   ================================================================ -->
   <VerificationDateCalculated>
    <xsl:choose>
     <xsl:when                    test = "$calcVerifDate != ''">
      <xsl:value-of             select = "$calcVerifDate"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "$pubProcDate"/>
     </xsl:otherwise>
    </xsl:choose>
   </VerificationDateCalculated>
  </xsl:copy>
 </xsl:template>


 <!--
 ==============================================================
 Template Professional sections
 Copy all nodes and add the ProfessionalDisclaimer
 ============================================================== -->
 <xsl:template                   match = "Professional">
  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "child::node()">
    <xsl:copy-of                select = "."/>
   </xsl:for-each>

   <!-- 
   Adding the Professional Disclaimer from the Misc Documents 
   ========================================================== -->
   <ProfessionalDisclaimer>
    <xsl:choose>
     <xsl:when                    test = "/InScopeProtocol/
                                           ProtocolDetail/
                                           StudyType = 'Research study'">
      <xsl:variable               name = "miscDoc1" 
                                select = "document(concat('cdr:name:',
                                                          $hpResearchDisc,
                                                          '/lastp'))"/>
      <xsl:apply-templates      select = "$miscDoc1/MiscellaneousDocument
                                                   /MiscellaneousDocumentText">
       <xsl:with-param            name = "miscDocId"
                                select = "'_ProtHPDisclaimer'"/>
      </xsl:apply-templates>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable               name = "miscDoc1" 
                                select = "document(concat('cdr:name:',
                                                          $hpDisc,
                                                          '/lastp'))"/>
      <xsl:apply-templates      select = "$miscDoc1/MiscellaneousDocument
                                                   /MiscellaneousDocumentText">
       <xsl:with-param            name = "miscDocId"
                                select = "'_ProtHPDisclaimer'"/>
      </xsl:apply-templates>
     </xsl:otherwise>
    </xsl:choose>
   </ProfessionalDisclaimer>
  </xsl:element>
 </xsl:template>


 <!--
 ==================================================================
 MiscellaneousDocumentText Template
 ================================================================== -->
 <xsl:template                   match = "MiscellaneousDocumentText">
  <xsl:param                      name = "miscDocId"/>
  <xsl:apply-templates          select = "Section/Para|Para"
                                  mode = "miscDoc">
   <xsl:with-param                name = "miscDocId" 
                                select = "$miscDocId"/>
  </xsl:apply-templates>
 </xsl:template>


 <!--
 ==============================================================
 Template Patient sections
 Copy all nodes, perform denormalization and add the 
 PatientDisclaimer

 Note:  The only links in the Patient section are Glossary 
        Links.  These are denormalized on the fly for the QC
        reports and the vendors are to normalize these on their
        own.  Therefore there is no need to denormalize these 
        links and all children can be copied as is.
 ============================================================== -->
 <xsl:template                   match = "Patient">
  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "child::node()">

    <!-- 
    ==========================================================
    Adding the misc document for EligibilityText, copying all
    other elements as is.
    ========================================================== -->
    <xsl:choose>
     <xsl:when                    test = "name() = 'EligibilityText'">
      <xsl:element                name = "{name()}">
       <xsl:for-each            select = "child::node()">
        <xsl:copy-of            select = "."/>
       </xsl:for-each>
       <!--
       Include the Patient Abstract Eligibility Misc Document
       ====================================================== -->
       <xsl:variable              name = "miscEligiDoc" 
                                select = "document(concat('cdr:CDR0000372868',
                                                          '/lastp'))"/>

       <xsl:apply-templates     select = "$miscEligiDoc/MiscellaneousDocument
                                                   /MiscellaneousDocumentText">
        <xsl:with-param           name = "miscDocId"
                                select = "'_EligibilityDisclaimer'"/>
       </xsl:apply-templates>
      </xsl:element>
     </xsl:when>
     <xsl:otherwise>
      <xsl:copy-of                select = "."/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:for-each>

   <!-- 
   Adding the Patient Disclaimer from the Misc Documents 
   ========================================================== -->
   <PatientDisclaimer>
    <xsl:choose>
     <xsl:when                    test = "/InScopeProtocol/
                                           ProtocolDetail/
                                           StudyType = 'Research study'">
      <xsl:variable               name = "miscDoc2" 
                                select = "document(concat('cdr:name:',
                                                          $patResearchDisc,
                                                          '/lastp'))"/>
      <xsl:apply-templates      select = "$miscDoc2/MiscellaneousDocument
                                                   /MiscellaneousDocumentText">
       <xsl:with-param            name = "miscDocId"
                                select = "'_ProtPatientDisclaimer'"/>
      </xsl:apply-templates>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable               name = "miscDoc2" 
                                select = "document(concat('cdr:name:',
                                                          $patDisc,
                                                          '/lastp'))"/>
      <xsl:apply-templates      select = "$miscDoc2/MiscellaneousDocument
                                                   /MiscellaneousDocumentText">
       <xsl:with-param            name = "miscDocId"
                                select = "'_ProtPatientDisclaimer'"/>
      </xsl:apply-templates>
     </xsl:otherwise>
    </xsl:choose>
   </PatientDisclaimer>
  </xsl:element>
 </xsl:template>


 <!--
 ==================================================================
 Template for displaying RelatedProtocols section.
 If no publishable version of the protocol exists, a pseudo-protocol
 fragment is being created to allow the users to preview the 
 entered information.  The vendor filter will have to filter out 
 this protocol to prevent it from going out to the vendor.
 An attribute Publishable="No" has been introduced to identify these
 invalid protocols.
 ================================================================== -->
 <xsl:template                  match = "RelatedProtocols | RelatedWebsites">
    <xsl:choose>
     <xsl:when                   test = "name() = 'RelatedProtocols'">
      <xsl:variable              name = "relProtRef"
                               select = "@cdr:ref"/>
      <xsl:variable              name = "prot_uri"
                               select = "concat('cdrx:', $relProtRef,
                                                '/lastp')"/>
      <xsl:variable              name = "protocolDoc"
                               select = "document($prot_uri)"/>

      <!--  
      Do not display the RelatedProtocols element if that protocol
      is not marked as publishable                                
      ============================================================ -->
      <xsl:choose>
      <xsl:when                  test = "$protocolDoc/InScopeProtocol">
       <xsl:element              name = "{name()}">
        <xsl:variable            name = "docID"
                               select = "@cdr:ref | @ref"/>
        <xsl:variable            name = "pubVersion"
                               select = "document(concat('cdrutil:/get-pv-num/',
                                                       @cdr:ref | @ref))"/>
        <xsl:if                  test = "$pubVersion = 0">
         <xsl:attribute          name = "Publishable">
          <xsl:value-of        select = "'No'"/>
         </xsl:attribute>
         <xsl:message         terminate = "no">
          <xsl:text>&lt;LI class="warning"&gt;</xsl:text>
          <xsl:value-of          select = "name()"/>
          <xsl:text> (</xsl:text>
          <xsl:value-of          select = "concat('CDR', number(
                                             substring-after($docID, 'CDR')))"/>
          <xsl:text>)&lt;BR/&gt;</xsl:text>
          <xsl:text>Publishable Version of InScopeProtocol </xsl:text>
          <xsl:text>does not exist.&lt;BR/&gt;&lt;/LI&gt;</xsl:text>
         </xsl:message> 
        </xsl:if>
        <InScopeProtocol>
         <xsl:for-each         select = "@*">
          <xsl:attribute         name = "{name()}">
           <xsl:value-of         select = "."/>
          </xsl:attribute>
         </xsl:for-each>
         <xsl:copy-of          select = "$protocolDoc/InScopeProtocol/
                                         ProtocolIDs"/>
         <xsl:for-each         select = "$protocolDoc/InScopeProtocol/
                                         ProtocolTitle">
          <xsl:copy-of         select = "."/>
         </xsl:for-each>
        </InScopeProtocol>
       </xsl:element>
      </xsl:when>
      <xsl:when                  test = "$protocolDoc/CTGovProtocol">
       <xsl:element              name = "{name()}">
        <xsl:variable            name = "docID"
                               select = "@cdr:ref | @ref"/>
        <xsl:variable            name = "pubVersion"
                               select = "document(concat('cdrutil:/get-pv-num/',
                                                       @cdr:ref | @ref))"/>
        <xsl:if                  test = "$pubVersion = 0">
         <xsl:attribute          name = "Publishable">
          <xsl:value-of        select = "'No'"/>
         </xsl:attribute>
         <xsl:message         terminate = "no">
          <xsl:text>&lt;LI class="warning"&gt;</xsl:text>
          <xsl:value-of          select = "name()"/>
          <xsl:text> (</xsl:text>
          <xsl:value-of          select = "concat('CDR', number(
                                             substring-after($docID, 'CDR')))"/>
          <xsl:text>)&lt;BR/&gt;</xsl:text>
          <xsl:text>Publishable Version of CTGovProtocol </xsl:text>
          <xsl:text>does not exist.&lt;BR/&gt;&lt;/LI&gt;</xsl:text>
         </xsl:message> 
        </xsl:if>
        <CTGovProtocol>
         <xsl:for-each         select = "@*">
          <xsl:attribute         name = "{name()}">
           <xsl:value-of         select = "."/>
          </xsl:attribute>
         </xsl:for-each>
         <xsl:copy-of          select = "$protocolDoc/CTGovProtocol/
                                         IDInfo"/>
         <xsl:copy-of          select = "$protocolDoc/CTGovProtocol/
                                         BriefTitle"/>
         <xsl:copy-of          select = "$protocolDoc/CTGovProtocol/
                                         OfficialTitle"/>
        </CTGovProtocol>
       </xsl:element>
      </xsl:when>
      <!-- Create the information for protocols that are not publishable -->
      <xsl:otherwise>
       <xsl:element              name = "{name()}">
        <xsl:attribute           name = "Publishable">
         <xsl:value-of         select = "'No'"/>
        </xsl:attribute>
        <InScopeProtocol>
         <xsl:for-each         select = "@*">
          <xsl:attribute         name = "{name()}">
           <xsl:value-of       select = "."/>
          </xsl:attribute>
         </xsl:for-each>
         <ProtocolIDs><PrimaryID><IDString>
          <xsl:text>***WARNING: Document is not publishable. ***</xsl:text>
         </IDString></PrimaryID></ProtocolIDs>
         <ProtocolTitle>
          <xsl:attribute         name = "Type">
           <xsl:text>Professional</xsl:text>
          </xsl:attribute>
          <xsl:text>***WARNING: Document is not publishable. ***</xsl:text>
         </ProtocolTitle>
         <ProtocolTitle>
          <xsl:attribute         name = "Type">
           <xsl:text>Patient</xsl:text>
          </xsl:attribute>
          <xsl:text>***WARNING: Document is not publishable. ***</xsl:text>
         </ProtocolTitle>
         <ProtocolTitle>
          <xsl:attribute         name = "Type">
           <xsl:text>Original</xsl:text>
          </xsl:attribute>
          <xsl:text>***WARNING: Document is not publishable. ***</xsl:text>
         </ProtocolTitle>

        </InScopeProtocol>
       </xsl:element>
      </xsl:otherwise>
     </xsl:choose>


      <!-- 
      Do display the RelatedProtocolsForQC element even if that protocol
      is not marked as publishable but indicate this as a warning
      message                                                      
      ================================================================== -->

       <!-- 
       Don't stop processing if the link cannot be resolved. 
       Note:  The message is never displayed with the terminate=No 
              attribute but it is caught as part of the validation 
              (The handling of the message = No is implementation 
               dependend)
       =========================================================== -->
       <xsl:if                    test = "not($protocolDoc/InScopeProtocol)
                                          and
                                          not($protocolDoc/CTGovProtocol)">
        <xsl:message         terminate = "no">
         <xsl:text>&lt;LI class="warning"&gt;</xsl:text>
         <xsl:value-of          select = "name()"/>
         <xsl:text> (</xsl:text>
         <xsl:value-of          select = "concat('CDR', number(
                                        substring-after($relProtRef, 'CDR')))"/>
     <xsl:text>)&lt;BR/&gt;</xsl:text>
     <xsl:text>Publishable Version of linked Document </xsl:text>
     <xsl:text>does not exist.&lt;BR/&gt;&lt;/LI&gt;</xsl:text>
        </xsl:message> 
       </xsl:if>
     </xsl:when>
     <xsl:otherwise>
      <xsl:copy>
       <xsl:copy-of            select = "."/>
      </xsl:copy>
     </xsl:otherwise>
    </xsl:choose>
 </xsl:template>


 <!--
 ==============================================================
 Template Published Results section
 ============================================================== -->
 <xsl:template                  match = "Citation |
                                         RelatedCitation">
  <Citation>
   <xsl:attribute                name = "cdr:ref">
    <xsl:value-of              select = "@cdr:ref"/>
   </xsl:attribute>
   <xsl:variable                 name = "citRef"
                               select = "@cdr:ref"/>
   <xsl:variable                 name = "citInfo" 
                               select = "document(concat('cdr:', $citRef,
                                                            '/lastp'))"/>
   <!--
   Pick up the author's last name and initials or the collective name
   to create the author list for sorting the resulting attribute value
   =================================================================== -->
   <xsl:variable                 name = "alist">
    <xsl:for-each              select = "$citInfo/Citation/PDQCitation/
                                           AuthorList/Author             |
                                         $citInfo/Citation/PubmedArticle/
                                           NCBIArticle/Article/
                                           AuthorList/Author             |
                                         $citInfo/Citation/PubmedArticle/
                                           MedlineCitation/Article/
                                           AuthorList/Author">
     <xsl:value-of              select = "LastName | CollectiveName"/>    
     <xsl:value-of              select = "Initials | FirstName"/>
    </xsl:for-each>
   </xsl:variable>

   <!-- 
   This new attribute is introduced in order to sort by publication
   year across different citation types
   ================================================================ -->
   <xsl:attribute                name = "pubyear">
    <xsl:value-of              select = "$citInfo/Citation/PDQCitation/
                                         PublicationDetails/
                                         PublicationYear      |
                                         $citInfo/Citation/PubmedArticle//
                                         PubDate/Year"/>
   </xsl:attribute>
   <xsl:attribute                name = "authorlist">
    <xsl:value-of              select = "translate($alist, ' ', '')"/>
   </xsl:attribute>

   <xsl:apply-templates        select = "$citInfo/Citation/PDQCitation | 
                                         $citInfo/Citation/PubmedArticle"/>

  </Citation>
 </xsl:template>



 <!--
 ==============================================================
 Template PublishedIn section
 ============================================================== -->
 <xsl:template                  match = "PublishedIn">
  <xsl:element                   name = "{name()}">
   <xsl:for-each               select = "@*">
    <xsl:attribute               name = "{name()}">

     <xsl:value-of             select = "."/>
    </xsl:attribute>
   </xsl:for-each>

   <xsl:variable                 name = "citRef"
                               select = "@cdr:ref"/>
   <xsl:variable                 name = "citInfo" 
                               select = "document(concat('cdr:', $citRef,
                                                            '/lastp'))"/>
   <xsl:copy-of                select = "$citInfo/Citation"/>

  </xsl:element>
 </xsl:template>


 <!--
 ==============================================================
 Template for Protocol Admin section
 ============================================================== -->
 <xsl:template                  match = "LeadOrganizationID">
  <xsl:call-template             name = "getOrganization"/>
 </xsl:template>


 <!--
 ===================================================================
 Extract the information for one lead organization or private 
 practice site.
 =================================================================== -->
 <xsl:template                   match = "ProtocolSites">
  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "@*">
    <xsl:attribute                name = "{name()}">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:for-each>

   <xsl:for-each                select = "OrgSite/
                                           OrgSiteID |
                                          PrivatePracticeSite/
                                           PrivatePracticeSiteID">
    <xsl:choose>
     <xsl:when                    test = "name() = 'OrgSiteID'">
      <xsl:call-template          name = "getOrganization"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:call-template          name = "getPrivatePracticeSite"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:for-each>

  </xsl:element>
 </xsl:template>



 <!--
 ==============================================================
 Template for Protocol Admin section
 ============================================================== -->
 <xsl:template                   match = "ResponsibleOrganization/
                                         Organization">
  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "../@*">
    <xsl:attribute                name = "{name()}">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:for-each>

   <xsl:variable                  name = "orgID"
                                select = "@cdr:ref"/>
   <xsl:variable                  name = "org"
                                select = "document(concat('cdr:', $orgID, 
                                                          '/last'))"/>
   <Organization>
    <xsl:for-each               select = "@*">
     <xsl:attribute               name = "{name()}">
      <xsl:value-of             select = "."/>
     </xsl:attribute>
    </xsl:for-each>

    <xsl:copy-of                select = "$org/Organization/
                                          OrganizationNameInformation"/>
   </Organization>
  </xsl:element>
 </xsl:template>


 <!--
 ============================================================= 
 Create the Para template including the renamed attribute for 
 the paragraph IDs.
 ============================================================= -->
 <xsl:template                   match = "Para"
                                 mode  = "miscDoc">
  <xsl:param                     name  = "miscDocId"/>
  <Para>
   <xsl:attribute                 name = "id">
    <xsl:value-of               select = "$miscDocId"/>
    <xsl:value-of               select = "./@cdr:id"/>
   </xsl:attribute>
   <!--
   ==========================================================
   Need to pass the miscDocId allowing to modify the cdr:xref
   element of the misc document added to the EligibilityText
   section 
   ========================================================== -->
   <xsl:apply-templates>
    <xsl:with-param               name = "miscDocId"
                                select = "$miscDocId"/>
   </xsl:apply-templates>
  </Para>
 </xsl:template>


 <!--
 ============================================================= 
 Create the Para template including the renamed attribute for 
 the paragraph IDs.
 Need to add a mode to the paragraph displaying the misc 
 document text for the EligibilityText element in order to 
 being able and modify the cdr:xref attribute.
 ============================================================= -->
 <xsl:template                   match = "ExternalRef">
  <xsl:param                      name = "miscDocId"/>
  <xsl:element                    name = "{name()}">
   <xsl:choose>
    <xsl:when                     test = "$miscDocId = 
                                                    '_ProtPatientDisclaimer'
                                          and
                                          . = 'Health Professional version'">
     <xsl:apply-templates       select = "node() | @*" 
                                  mode = "eText"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates       select = "node() | @*"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:element>
 </xsl:template>


 <!--
 ===============================================================
 Create the Cancer.gov link that displayes the HP version of the
 current document by modifying the cdr:xref attribute.
 =============================================================== -->
 <xsl:template                   match = "@cdr:xref" 
                                  mode = "eText">
  <xsl:attribute                  name = "{name()}">
   <xsl:value-of                select = "concat(., 'clinicaltrials/',
                                                     $protNum)"/>
  </xsl:attribute>
 </xsl:template>


 <!--
 ===================================================================
 Called Templates
 =================================================================== --> 

 <!--
 ===================================================================
 Upcoding the Parent Names for the address block.
 =================================================================== -->
 <xsl:template                    name = "upcode-parentname">  
  <xsl:param                      name = "ParentDoc"/> 
  <OrganizationName>
   <xsl:value-of                select = "$ParentDoc/Organization/
                                          OrganizationNameInformation/
                                          OfficialName/Name"/>
  </OrganizationName>

  <xsl:if                         test = "$ParentDoc/Organization/
                                           OrganizationParent/
                                           ParentOrganization/@cdr:ref">
   <xsl:variable                  name = "nextParentID" 
                                select = "$ParentDoc/Organization/
                                           OrganizationParent/
                                           ParentOrganization/@cdr:ref"/>
   <xsl:variable                  name = "nextParentDoc" 
                                select = "document(concat('cdr:',
                                                          $nextParentID,
                                                          '/last'))"/>

   <xsl:call-template             name = "upcode-parentname">    
    <xsl:with-param               name = "ParentDoc"
                                select = "$nextParentDoc"/>
   </xsl:call-template>
  </xsl:if>
 </xsl:template>


 <!--
 =========================================================================
 Default Template
 ========================================================================= -->
 <xsl:template                   match = "node() | @*">
  <xsl:copy>
   <xsl:apply-templates         select = "@* | node()" />
  </xsl:copy>
 </xsl:template>

</xsl:transform>
