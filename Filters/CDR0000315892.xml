<?xml version="1.0" ?>
<!-- Filter title: Clean up Insertion and Deletion -->
<!--
================================================================

Filter to clean up Insertion/Deletion clean-up that had been
duplicated in the previous filter of the filter set.

BZIssue::4919 - [Summary] QC Report Bugs

================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr">

 <xsl:output                    method = "xml"
                              encoding = "utf-8"/>

 <!--
 =================================================================
 Drive the copy processing logic.
   If the parameter iod (insertion_or_deletion) has been passed
   the element we've just visited was either an Insertion or a
   Deletion element.  We want to mark the child now so that we
   can later suppress the display of these elements, i.e. a
   ListItem element
 ================================================================== -->
 <xsl:template                   match = "*">
  <xsl:param                      name = "iod"/>

  <xsl:copy>
   <xsl:copy-of                 select = "@*"/>

   <!-- Add the extra attribute
   ============================ -->
   <xsl:if                        test = "$iod">
    <xsl:attribute                name = "iod">
     <xsl:value-of              select = "$iod"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>
  </xsl:copy>
 </xsl:template>


 <!--
 =================================================================
 ================================================================== -->
 <xsl:template                   match = "CitationLink[@cdr:ref='CDR9999999999']">
  <xsl:copy>
   <xsl:for-each                select = "@*[name(.) != 'cdr:ref']">
    <xsl:attribute                name = "{name()}">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:for-each>
  </xsl:copy>
  <!-- Do nothing, remove the attribute -->
 </xsl:template>


 <!--
 =================================================================
 For QC reports, we keep Deletion/Insertion tags of any given
 RevisonLevel only around text node.
 ================================================================== -->
 <xsl:template                   match = "Insertion | Deletion">

  <!-- Does this node have any element descendant other than
       Insertion/Deletion? In other words, are we hitting a
       wrapper of any text node? -->
  <!--xsl:variable                   name = "hasOtherDescendants"
                                select = "descendant::*[
                                            name() != 'Insertion' and
                                            name() != 'Deletion'
                                                     ]"/ -->
  <!-- There are two ways to look at this to do the clean-up
       a) Are there any decendants to the Insertion/Deletion
          nodes that are Insertion or Deletion?
          - Yes: We're hitting an outside Insertion/Deletion and
                 not the new text-wrapper  ==> remove this one
          - No:  We're hitting the inside Insertion/Deletion and
                 we need to keep this one.
       b) Are there any decendants within the Insertion/Deletion
          other then Insertion or Deletion decendents?
          The result is the same as under (a)
       ========================================================== -->

  <xsl:variable                   name = "hasOtherDescendants"
                                select = "descendant::*[
                                            self::Insertion or
                                                self::Deletion]"/>
  <xsl:variable                   name = "hasOtherDescendants2"
                                select = "descendant::*[
                                            not(self::Insertion and
                                                self::Deletion)]"/>

  <xsl:choose>
   <xsl:when                      test = "$hasOtherDescendants">
    <xsl:apply-templates>
     <xsl:with-param              name = "iod"
                                select = "name()"/>
    </xsl:apply-templates>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                  name = "{name()}">
     <xsl:copy-of               select = "@*"/>
     <xsl:apply-templates/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

</xsl:transform>
