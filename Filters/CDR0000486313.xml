<?xml version="1.0" ?>
<!-- Filter title: Denormalization Filter: DrugInfoSummary -->
<!--
===============================================================
Filter to denormalize Drug Information Summary data.
    Written by Volker Englisch, 2006-05-02

BZIssue::4781 - Have certain links to unpublished docs ignored
=============================================================== -->
<xsl:transform               xmlns:xsl = 'http://www.w3.org/1999/XSL/Transform'
                             xmlns:cdr = 'cips.nci.nih.gov/cdr'
                               version = '1.0'>

 <xsl:output                    method = 'xml'
                  omit-xml-declaration = 'no'
                              encoding = 'utf-8'/>

 <xsl:include href = "cdr:name:Module: Multimedia Denormalization"/>

 <!-- Stylesheet level parameter pubProcDate passed in from the caller -->
 <xsl:param                       name = "pubProcDate"
                                select = "''"/>
 <xsl:param                       name = "isPP"
                                select = "'N'"/>
 <xsl:param                       name = "isQC"
                                select = "'N'"/>

 <!--
 =================================================================
 Copy control information and generate current date
 ================================================================= -->
 <xsl:template                    match = "DrugInformationSummary">
  <xsl:copy>
   <xsl:apply-templates          select = "document('cdrutil:/docid')"/>
   <xsl:apply-templates          select = "document('cdrx:/*/CdrCtl')"/>

   <xsl:apply-templates/>

   <!--
   We need to populate a new element that is a calculated value for
   the verification date.  If this value comes back as NULL because
   the published document is a brand new publishing event for this
   document we need to populate the date with the date of the
   publishing event from the pub_proc table.  This value is passed
   to the filter as a parameter.
   ================================================================ -->
   <xsl:if                        test = "$pubProcDate">
    <DatePubProc>
     <xsl:value-of              select = "$pubProcDate"/>
    </DatePubProc>
   </xsl:if>
  </xsl:copy>
 </xsl:template>


 <!--
 =================================================================
 Test if a SummarySection is empty (no children, only white space)

 Such an element may appear if a complete SummarySection has been
 marked with the proposed insertion element and therefore all
 content gets stripped but the SummarySection tags itself are left
 untouched.
 ================================================================= -->
 <xsl:template                   match = "SummarySection">
  <xsl:choose>
   <xsl:when                      test = "normalize-space(.)">
    <xsl:copy>
     <xsl:apply-templates       select = "node() | @*"/>
    </xsl:copy>
   </xsl:when>
   <xsl:otherwise>
    <!-- Do Nothing:  SummarySection is empty!  -->
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =================================================================
 Template to denormalize the Term elements
 ================================================================= -->
 <xsl:template                   match = "TerminologyLink |
                                          ApprovedIndication">
  <xsl:variable                   name = "termID"
                                select = "@cdr:ref"/>
  <xsl:variable                   name = "termDoc"
                                select = "document(concat('cdr:',$termID,
                                                           '/lastp'))"/>
  <xsl:element                    name = "{name()}">
   <Term>
    <xsl:for-each               select = "@*">
     <xsl:attribute               name = "{name()}">
      <xsl:value-of             select = "."/>
     </xsl:attribute>
    </xsl:for-each>
    <xsl:copy-of                select = "$termDoc/Term/*"/>
   </Term>
  </xsl:element>
 </xsl:template>


 <!--
 =================================================================
 Template to denormalize the Glossary elements
 We need to allow the PublishPreview output to proceed even if a
 mandatory GlossaryLink doesn't exist.
 ================================================================= -->
 <xsl:template                   match = "GlossaryLink">
  <xsl:variable                   name = "glossID"
                                select = "@cdr:ref"/>

  <xsl:variable                   name = "glossDoc"
                                select = "document(concat('cdrx:', $glossID,
                                                           '/lastp'))"/>

  <xsl:element                    name = "{name()}">
   <GlossaryTermName>
    <xsl:attribute                name = "cdr:ref">
     <xsl:value-of              select = "@cdr:ref"/>
    </xsl:attribute>

    <xsl:apply-templates        select = "$glossDoc/GlossaryTermName/*"/>
   </GlossaryTermName>
  </xsl:element>

 </xsl:template>



 <!--
 ======================================================================
 Denormalize MediaLink
 ====================================================================== -->
 <xsl:template                    match = "MediaID">
  <xsl:copy>
   <!-- xsl:attribute                 name = "cdr:ref">
    <xsl:value-of               select = "@cdr:ref"/>
   </xsl:attribute -->
  <xsl:variable                   name = "mediaID"
                                select = "@cdr:ref"/>

  <xsl:variable                   name = "mediaDoc"
                                select = "document(concat('cdr:', $mediaID,
                                                           '/lastp'))"/>


  <xsl:element                    name = "Media">
   <xsl:attribute                 name = "cdr:ref">
    <xsl:value-of               select = "@cdr:ref"/>
   </xsl:attribute>
   <xsl:copy-of                  select = "$mediaDoc/Media/PhysicalMedia"/>
  </xsl:element>
  </xsl:copy>
 </xsl:template>


 <!--
 ======================================================================
 Denormalize EmbeddedVideo element

 Note:  Summaries are convering VideoID to MediaID at this point
        Included "Module: Multimedia Denormalization" as replacement
 ====================================================================== -->
 <!--
 <xsl:template                    match = "VideoID">
  <xsl:copy>
  <xsl:variable                   name = "videoID"
                                select = "@cdr:ref"/>

  <xsl:variable                   name = "videoDoc"
                                select = "document(concat('cdr:', $videoID,
                                                           '/lastp'))"/>


  <xsl:element                    name = "Media">
   <xsl:attribute                 name = "cdr:ref">
    <xsl:value-of               select = "@cdr:ref"/>
   </xsl:attribute>
   <xsl:copy-of                  select = "$videoDoc/Media/*"/>
  </xsl:element>
  </xsl:copy>
 </xsl:template>
 -->


 <!--
 ======================================================================
 Denormalize Organization Information
 ====================================================================== -->
 <xsl:template                    match = "Manufacturer">
  <xsl:call-template               name = "getOrganization"/>
 </xsl:template>

 <!--
 =================================================================
 Template to denormalize the DrugReferenceDescription elements
 ================================================================= -->
 <xsl:template                   match = "DrugReferenceDescription">
  <xsl:variable                   name = "miscID"
                                select = "cdr:escape-uri(@cdr:ref)"/>
  <xsl:variable                   name = "miscDoc"
                                select = "document(concat('cdr:',$miscID,
                                                           '/lastp'))"/>
  <xsl:element                    name = "{name()}">
   <MiscellaneousDocument>
   <xsl:attribute                 name = "cdr:ref">
    <xsl:value-of               select = "@cdr:ref"/>
   </xsl:attribute>

   <xsl:copy-of                 select = "$miscDoc/MiscellaneousDocument/*"/>
   </MiscellaneousDocument>
  </xsl:element>
 </xsl:template>


 <!--
 ==================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of of something
 ================================================================== -->
 <xsl:template                    match = "@*|node()">
  <xsl:copy>
   <xsl:apply-templates          select = "@*|node()"/>
  </xsl:copy>
 </xsl:template>

</xsl:transform>
