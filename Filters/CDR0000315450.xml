<?xml version="1.0"?>
<xsl:transform           xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                         xmlns:cdr = "cips.nci.nih.gov/cdr"
           exclude-result-prefixes = "cdr"
                           version = "1.0">

 <xsl:output                method = "xml"
              omit-xml-declaration = "no"
                          encoding = "UTF-8"/>

 <xsl:include href = "cdr:name:Module: Global Filter Templates"/>


 <!-- *
 ====================================================================
 Root element.
 ==================================================================== -->
 <xsl:template               match = "/">
  <xsl:apply-templates      select = "Protocol |
                                      Person   |
                                      PDQBoardMemberInfo"/>
 </xsl:template>


 <!-- 
 ===================================================================
 The Vendor Filter Templates module removes these elements (because
 this is needed for the InScopeProtocol vendor output.  However, we
 need to keep these here for the Person output.
 =================================================================== --> 
 <xsl:template  match = "DocId | PdqKey">
  <xsl:copy-of  select = "."/>
 </xsl:template>

 <!-- Vendor Output Protocols
 =======================================================================
 Re-arrange the order of the organization names if so requested.
 ======================================================================= -->
 <xsl:template              match = "ContactDetail">
  <!-- 
  ===================================================
  Carry over the ctOffice attribute to allow deleting 
  Street Information from Vendor output
  =================================================== -->
  <xsl:for-each            select = "@*">
   <xsl:attribute            name = "{name()}">
    <xsl:value-of          select = "."/>
   </xsl:attribute>
  </xsl:for-each>

  <xsl:choose>
   <xsl:when                 test = "OrganizationName
                                      [@OrderParentNameFirst = 'Yes']">
    <ContactDetail>
     <xsl:apply-templates  select = "OrganizationName">
      <xsl:sort            select = "position()"
                            order = "descending"/>
     </xsl:apply-templates>
     <xsl:apply-templates  select = "PostalAddress | 
                                     TollFreePhone |
                                     Phone | Fax   | 
                                     Email | WebSite"/>
    </ContactDetail>
   </xsl:when>
   <xsl:otherwise>
    <xsl:copy>
     <xsl:apply-templates/>
    </xsl:copy>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- QC Reports Person
 =======================================================================
 Re-arrange the order of the organization names if so requested.
 ======================================================================= -->
 <xsl:template              match = "Organization">
  <!--
  The Vendor Filter needs to display the PersonOrganizationName element.
  However, after the sorting of the OrganizationName elements the position
  of the organization name is undefined for those organizations that include 
  the parent name.  It could be - based on the OrderParentNameFirst 
  attribute - the first or last OrganizationName element.
  Therefore, I'm making a copy of the organization name and the attributes
  here before the sort which can then be picked up by the following vendor
  filter.
  ======================================================================== -->
  <PersonOrganizationName>
   <xsl:for-each           select = "OrganizationName[1]/@*">
    <xsl:attribute           name = "{name()}">
     <xsl:value-of         select = "."/>
    </xsl:attribute>
   </xsl:for-each>
   <xsl:value-of           select = "OrganizationName[1]"/>
  </PersonOrganizationName>

  <xsl:choose>
   <xsl:when                 test = "OrganizationName
                                      [@OrderParentNameFirst = 'Yes']">
    <Organization>
     <xsl:for-each         select = "@*">
      <xsl:attribute         name = "{name()}">
       <xsl:value-of       select = "."/>
      </xsl:attribute>
     </xsl:for-each>

     <xsl:apply-templates  select = "OrganizationName">
      <xsl:sort            select = "position()"
                            order = "descending"/>
     </xsl:apply-templates>

      <xsl:apply-templates select = "OrganizationDetails   |
                                     OrganizationLocations |
                                     OrganizationAffiliations |
                                     Status                |
                                     OrganizationType"/>
    </Organization>
   </xsl:when>
   <xsl:otherwise>
    <xsl:copy-of           select = "."/>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =======================================================================
 Template to print out the OrganizationName elements
 ======================================================================= -->
 <xsl:template              match = "OrganizationName">
  <OrganizationName>
   <xsl:value-of       select = "."/>
  </OrganizationName>
 </xsl:template>


 <!-- 
 ===================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of of something 
 ==================================================================== -->
 <xsl:template              match = "@* | node()">
  <xsl:copy>
   <xsl:apply-templates    select = "@* | node()"/>
  </xsl:copy> 
 </xsl:template>

</xsl:transform>
