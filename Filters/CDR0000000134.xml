<?xml version="1.0" ?>
<!-- Filter title: Vendor Filter: Term -->
<!--
BZIssue::4703 - Suppress Clin. Trials search string
BZIssue::4778 - Display multiple OtherNameTypes
OCECDR-3588: Links from Drug Dictionary to NCI Thesaurus
OCECDR-3906: Vendor Filter change to text in Drug Dictionary definition
             to remove Closed Trials link
-->
<!--
===================================================================
Filter to create the vendor Terminology XML
=================================================================== -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
                               version = "1.0">

 <xsl:output                    method = "xml"
                  omit-xml-declaration = "no"/>

 <xsl:include  href = "cdr:name:Module: Vendor Filter Templates"/>

 <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
 <xsl:param                       name = "DateFirstPub"
                                select = "''"/>
 <xsl:variable                    name = "whoAmI"
                                select = "'Term'"/>

 <!-- *
 ====================================================================
 Root element.
 ==================================================================== -->
 <xsl:template                   match = "*">
  <xsl:apply-templates/>
 </xsl:template>


 <!--
 ======================================================================
 Copy DocId, PreferredName, OtherTermName, OtherNameType
 ====================================================================== -->
 <xsl:template                   match = "Term">
  <xsl:variable                   name = "cname">
   <xsl:if                        test = "NCIThesaurusConcept
                                          and
                                          not(NCIThesaurusConcept[
                                                             @Public='No'])">
    <xsl:value-of               select = "normalize-space(
                                                     NCIThesaurusConcept)"/>
   </xsl:if>
  </xsl:variable>
  <xsl:element                    name = '{name()}'>
   <xsl:attribute                 name = "id">
    <xsl:value-of               select = "DocId"/>
   </xsl:attribute>
   <xsl:attribute                 name = "LegacyPDQID">
    <xsl:value-of               select = "PdqKey"/>
   </xsl:attribute>
   <xsl:if                        test = "not($cname = '')">
    <xsl:attribute                name = "NCIThesaurusConceptID">
     <xsl:value-of              select = "$cname"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates         select = "PreferredName"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "OtherName"/>
   <xsl:apply-templates         select = "Definition"/>
   <xsl:apply-templates         select = "TermType/TermTypeName"/>
   <xsl:apply-templates         select = "SemanticType"/>
   <xsl:copy-of                 select = "CTGovInterventionType"/>
   <xsl:apply-templates         select = "TermRelationship"/>
   <xsl:if                        test = "TermType/TermTypeName !=
                                                 'Obsolete term'">
    <xsl:apply-templates         select = "MenuInformation"/>
   </xsl:if>

   <!--
   ===================================================================
   Copy Date First Published and Date Last Modified
   =================================================================== -->
   <xsl:variable                  name = "ctlFirstPub">
    <xsl:choose>
     <xsl:when                    test = "contains(CdrDocCtl/FirstPub/Date,
                                                   'T')">
      <xsl:value-of             select = "substring-before(CdrDocCtl/
                                            FirstPub/Date,'T')"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "CdrDocCtl/FirstPub/Date"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:variable>
   <xsl:choose>
    <xsl:when                     test = "not($ctlFirstPub='')">
     <DateFirstPublished>
      <xsl:value-of             select = "$ctlFirstPub"/>
     </DateFirstPublished>
    </xsl:when>
    <xsl:otherwise>
     <xsl:call-template           name = "getDateFirstPub">
      <xsl:with-param             name = "date"
                                select = "$DateFirstPub"/>
     </xsl:call-template>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates         select = "DateLastModified"
                                  mode = "copy"/>
   <!--
   ===================================================================
   Adding information needed for the dictionary API.  It will only be
   used for Cancer.gov but not for the PDQ partners.
   Don't create the NCITName element if the concept ID is empty. It
   would create an empty element.
   =================================================================== -->
   <xsl:element                   name = "CGovInfo">
    <!-- Add link to DIS URL -->
    <xsl:call-template            name = "getDISLink"/>
    <xsl:if                       test = "not($cname = '')">
     <xsl:call-template           name = "getNCITName">
      <xsl:with-param             name = "cname"
                                select = "$cname"/>
     </xsl:call-template>
    </xsl:if>
   </xsl:element>
  </xsl:element>
 </xsl:template>



 <!--
 ===================================================================
 Template to display the OtherName elements.
 Only display the other name if it is not identical to the Preferred
 Name.
 =================================================================== -->
 <xsl:template                   match = "OtherName">
  <xsl:if                         test = "translate(OtherTermName,
                                             'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                                             'abcdefghijklmnopqrstuvwxyz') !=
                                          translate(../PreferredName,
                                             'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                                             'abcdefghijklmnopqrstuvwxyz')">
   <xsl:for-each                select = "OtherNameType">
    <OtherName>
     <OtherTermName>
      <xsl:value-of              select = "normalize-space(../OtherTermName)"/>
     </OtherTermName>
     <OtherNameType>
      <xsl:value-of              select = "."/>
     </OtherNameType>
    </OtherName>
   </xsl:for-each>
  </xsl:if>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the Definition node but only if the
 ReviewStatus is "Reviewed".
 =================================================================== -->
 <xsl:template                   match = "Definition">
  <xsl:if                         test = "ReviewStatus = 'Reviewed'">
   <xsl:copy>
    <xsl:apply-templates        select = "DefinitionText"/>
    <DefinitionType>
     <xsl:value-of              select = "DefinitionType"/>
    </DefinitionType>
   </xsl:copy>
  </xsl:if>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the DefinitionText node (without attributes)
 and add three external Ref attributes.
 Two attributes are contructed to display a clinical trials query
 listing documents either active or closed documents using this drug.
 The third external Ref lists the NCI Thesaurus entry for the given
 concept ID
 These new Ref attributes should not be displayed if the Term
 is listed with a TermTypeName = 'Drug Combination'.
 =================================================================== -->
 <xsl:template                   match = "DefinitionText">
  <xsl:copy>
   <xsl:apply-templates           mode = "copy"/>

    <xsl:variable                name = "docNormId"
                               select = "number(
                                           substring-before(
                                           concat(
                                           substring-after(/Term/DocId, 'CDR'),
                                                               '#'), '#'))"/>
 <xsl:variable                  name = "sqlQuery">
    SELECT distinct t.doc_id
      FROM query_term_pub t
      JOIN query_term_pub d
        ON t.doc_id = d.int_val
       AND d.path = '/DrugInformationSummary/DrugInfoMetaData' +
                    '/TerminologyLink/@cdr:ref'
      JOIN query_term_pub c
        ON c.doc_id = d.doc_id
       AND c.path = '/DrugInformationSummary/DrugInfoMetaData' +
                    '/DrugInfoType/@Combination'
     WHERE t.doc_id = ?
   </xsl:variable>

   <xsl:variable                  name = "queryRows"
                                select = "document(cdr:escape-uri(
                                             concat('cdrutil:/sql-query/',
                                                    $sqlQuery,
                                                    '~', $docNormId)))"/>

   <xsl:variable                  name = "conceptId">
    <xsl:value-of               select = "normalize-space(
                                            ../../NCIThesaurusConcept)"/>
   </xsl:variable>


   <!--
   Construct the URL for NCI "active clinical trials" link.
   We only do this if the concept ID exists and is published.
   See https://tracker.nci.nih.gov/browse/OCECDR-1806.
   ======================================================== -->
   <xsl:if                       test = "not($conceptId = '')
                                        and
                                        not(/Term/NCIThesaurusConcept
                                            [@Public = 'No'])">

    <!--
    Add a wrapper so this block can be easily stripped for downstream
    consumers which will create these links using more sophisticated
    logic.
    See https://tracker.nci.nih.gov/browse/OCECDR-4892 and
    https://github.com/NCIOCPL/drug-dictionary-api/issues/34.
    ================================================================== -->
    <ExtraDefinitionLinks>

     <!--
     If the SQL query found a DrugInfo Summary with a term link to this
     document, we need to suppress the display of the clinical search
     string.
     [Need a citation for this requirement.]
     ================================================================== -->
     <xsl:if                        test = "not($queryRows/SqlResult/row)
                                           and
                                           not(/Term/TermType/TermTypeName
                                           = 'Drug Combination')">

      <xsl:text> Check for </xsl:text>
      <xsl:element                 name = "ExternalRef">
       <xsl:attribute              name = "xref">
        <xsl:text>https://www.cancer.gov/about-cancer/treatment</xsl:text>
        <xsl:text>/clinical-trials/intervention/</xsl:text>
        <xsl:value-of            select = "$conceptId"/>
       </xsl:attribute>
       <xsl:text>active clinical trials</xsl:text>
      </xsl:element>
      <xsl:text> using this agent.</xsl:text>
     </xsl:if>

     <!--
     Add the URL for NCI concept ID.
     ======================================================== -->
     <xsl:text> (</xsl:text>
     <xsl:element                  name = "ExternalRef">
      <xsl:attribute               name = "xref">
       <xsl:text>https://ncit.nci.nih.gov/</xsl:text>
       <xsl:text>ncitbrowser/ConceptReport.jsp?</xsl:text>
       <xsl:text>dictionary=NCI%20Thesaurus&#x26;code=</xsl:text>
       <xsl:value-of             select = "$conceptId"/>
      </xsl:attribute>
      <xsl:value-of              select = "../DefinitionSource/
                                           DefinitionSourceName"/>
     </xsl:element>
     <xsl:text>)</xsl:text>
    </ExtraDefinitionLinks>
   </xsl:if>
  </xsl:copy>
 </xsl:template>


 <!--
 ===================================================================
 Template for TermTypeName
 =================================================================== -->
 <xsl:template                   match = "TermTypeName">
  <xsl:if                         test = ". =
                                             'Protocol selection criteria' or
                                          . =
                                             'Obsolete term'               or
                                          . =
                                             'Header term'                or
                                          . =
                                             'Semantic type'">

  <TermTypeName>
   <xsl:value-of                select = "."/>
  </TermTypeName>
  </xsl:if>
 </xsl:template>


 <!--
 ===================================================================
 =================================================================== -->
 <xsl:template                   match = "SemanticType">
  <SemanticType>
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "Term/@cdr:ref"/>
   </xsl:attribute>
   <xsl:value-of                select = "Term/PreferredName"/>
  </SemanticType>
 </xsl:template>


 <!--
 ===================================================================
 Copy Term Relationship (Parent TermId,PreferredName,ParentType
 =================================================================== -->
 <xsl:template                   match = "TermRelationship">
  <TermRelationship>
   <xsl:apply-templates         select = "ParentTerm | RelatedTerm"/>
  </TermRelationship>
 </xsl:template>


 <!--
 ===================================================================
 Copy Term Relationship (Parent TermId,PreferredName,ParentType
 =================================================================== -->
 <xsl:template                   match = "ParentTerm">
  <ParentTerm>
   <ParentTermName>
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "TermId/Term/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "TermId/Term/PreferredName"/>
   </ParentTermName>

   <xsl:apply-templates         select = "ParentType"
                                  mode = "copy"/>
  </ParentTerm>
 </xsl:template>


 <!--
 ===================================================================
 Copy Term Relationship (Parent TermId,PreferredName,ParentType
 =================================================================== -->
 <xsl:template                   match = "RelatedTerm">
  <RelatedTerm>
   <RelatedTermName>
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "TermId/Term/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "TermId/Term/PreferredName"/>
   </RelatedTermName>
   <xsl:apply-templates         select = "RelationshipType"
                                  mode = "copy"/>
  </RelatedTerm>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the MenuInformation element
 =================================================================== -->
 <xsl:template                   match = "MenuInformation">
  <!--
  Testing if a MenuStatus = 'Online' child element exists and if the
  number of Public menuitems is not zero in order to determine if we will
  need the MenuInformation wrapper element.
  ======================================================================= -->
  <xsl:if                         test = "MenuItem[MenuStatus = 'Online']
                                          and
                                          count(MenuItem) &gt;
                                           count(MenuItem[@Public])">
  <MenuInformation>
   <xsl:apply-templates         select = "MenuItem[MenuStatus = 'Online']"/>
  </MenuInformation>
  </xsl:if>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the MenuItem element as long as it is public.
 =================================================================== -->
 <xsl:template                   match = "MenuItem">
  <xsl:if                         test = "not(@Public)">
   <MenuItem>
    <xsl:if                       test = "@SortOrder">
     <xsl:attribute               name = "SortOrder">
      <xsl:value-of             select = "@SortOrder"/>
     </xsl:attribute>
    </xsl:if>

    <xsl:apply-templates        select = "MenuType"
                                  mode = "copy"/>
    <xsl:apply-templates        select = "MenuParent"/>
    <xsl:apply-templates        select = "DisplayName"
                                  mode = "copy"/>
   </MenuItem>
  </xsl:if>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the MenuParent element
 =================================================================== -->
 <xsl:template                   match = "MenuParent">
  <MenuParent>
   <xsl:attribute name = "ref">
    <xsl:value-of select = "Term/@cdr:ref"/>
   </xsl:attribute>

   <xsl:apply-templates select = "Term/PreferredName"/>
  </MenuParent>
 </xsl:template>


 <!--
 ===================================================================
 Template to retrieve and display the URL for the linked
 DrugInfo Summary
 =================================================================== -->
 <xsl:template                    name = "getDISLink">
  <xsl:variable                   name = "docNormId"
                                select = "number(
                                           substring-before(
                                           concat(
                                           substring-after(/Term/DocId, 'CDR'),
                                                               '#'), '#'))"/>
  <xsl:variable                   name = "sqlQuery">
    SELECT t.doc_id, u.value AS "URL", d.value AS "TITLE"
      FROM query_term_pub t
      JOIN query_term_pub u
        ON t.doc_id = u.doc_id
       AND u.path = '/DrugInformationSummary/DrugInfoMetaData/URL/@cdr:xref'
      JOIN query_term_pub d
        ON t.doc_id = d.doc_id
       AND d.path = '/DrugInformationSummary/Title'
      JOIN active_doc a
        ON a.id = d.doc_id
     WHERE t.path = '/DrugInformationSummary/DrugInfoMetaData/TerminologyLink/@cdr:ref'
       AND t.int_val = ?
  </xsl:variable>

  <xsl:variable                   name = "queryRows"
                                select = "document(cdr:escape-uri(
                                            concat('cdrutil:/sql-query/',
                                                   $sqlQuery,
                                                   '~', $docNormId)))"/>
  <!--
  <xsl:copy-of select = "$queryRows"/>
  -->
  <!--
  Only create the variable if a link exists
  ================================================================== -->
  <xsl:if                         test = "count($queryRows/SqlResult/row) &gt; 0">
   <xsl:element                   name = "DISUrl">
    <xsl:value-of               select = "$queryRows
                                            /SqlResult
                                            /row
                                            /col[@name='URL']"/>
   </xsl:element>
   <xsl:element                   name = "DISTitle">
    <xsl:value-of               select = "$queryRows
                                            /SqlResult
                                            /row
                                            /col[@name='TITLE']"/>
   </xsl:element>
  </xsl:if>
 </xsl:template>


 <!--
 ===================================================================
 Template to retrieve and display the URL for the linked
 DrugInfo Summary
 =================================================================== -->
 <xsl:template                    name = "getNCITName">
  <xsl:param                      name = "cname"
                                select = "''"/>
  <xsl:element                    name = "NCITName">
   <xsl:value-of                select = "document(concat('cdrutil:ncit-pn/', $cname))"/>
  </xsl:element>
 </xsl:template>
</xsl:transform>
