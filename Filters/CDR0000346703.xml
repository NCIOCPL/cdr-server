<CdrDoc Type='Filter' Id='CDR0000346703'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">CTGovProtocol QC Report</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>

<!--
 ================================================================
     $Id: CDR0000346703.xml,v 1.8 2007-02-05 22:43:12 venglisc Exp $

     Filter to create a CTGovProtocol QC Report.
     Input: from Denormalization Filter: CTGovProtocol

     $Log: not supported by cvs2svn $
     Revision 1.1  2003/11/20 19:49:47  bkline
     First draft of CTGovProtocol QC report filter.
 ================================================================
  -->

<xsl:transform               xmlns:xsl = 'http://www.w3.org/1999/XSL/Transform'
                               version = '1.0'
                             xmlns:cdr = 'cips.nci.nih.gov/cdr'>
                        
 <xsl:output                    method = 'html'
                        doctype-public = '-//IETF//DTD HTML//EN'/>

 <xsl:include  href = "cdr:name:Module: Attribute Sets"/>
 <xsl:include  href = "cdr:name:Module: QC Filter Templates"/>
 <xsl:include  href = "cdr:name:Module: Protocol Processing Details"/>

 <xsl:variable                    name = "docID"
                                select = "document('cdrutil:/docid')"/>
 <xsl:variable                    name = "whoAmI"
                                select = "'CTGovQc'"/>
 <!-- 
 =================================================================
 Template to display the CTGovProtocol QC Report
 ================================================================= -->
 <xsl:template                   match = "/">
  <html>
   <head>
    <xsl:variable                 name = "cdrdocs" 
                                select = "document('cdrx:/*/CdrCtl')"/>

    <TITLE>
     <xsl:value-of              select = "concat('CDR', 
                                           number(
                                           substring-after($docID, 'CDR')))"/>
     <xsl:text>: </xsl:text>
     <xsl:value-of              select = "substring-before(
                                           concat($cdrdocs/CdrDocCtl/
                                                  DocTitle, ';'), ';')"/> 
    </TITLE>
    <style                        type = 'text/css'>
     body { font-family: Arial; font-size: 12pt; line-height: 14pt; }
     h1   { font-size: 13.5pt; font-weight: bold; }
     h2   { font-size: 12pt; font-weight: bold; }
     tr   { margin-top: 45em; }
     th   { text-align: left; font-weight: bold; font-size: 12pt; 
            line-height: 14pt; }
     th.h { text-align: left; font-weight: bold; font-size: 13.5pt; }
     td   { font-size: 12pt; line-heignt: 14pt; }
     p    { font-size: 12pt;  }
     tr.intervention
          { padding-bottom: 5pt; }
     li   { font-size: 12pt; }
     .big { font-size: 14pt; font-weight: bold; }
     .sum { font-size: 14pt; font-weight: bold; padding-bottom: -10pt; }
   li.org { vertical-align: top; }
    </style>
   </head>
   <body>
   <b>
     <center class="big">
      <xsl:text>CT.Gov Protocol Content</xsl:text>
      <br/>
      <xsl:text>QC Report</xsl:text>
     </center>
     <center>
      <xsl:value-of             select = 'document(concat("cdrutil:/date/",
                                                          "%25B %25#d, %25Y ",
                                                          "%25#I:%25M%25p"))'/>
     </center>@@NOPDQINDEXING@@
   </b>
   <p/>

   <!-- 
   ====================================================================
   Display Name Header, and PersonNameInformation
   ==================================================================== -->
   <span class="big">
    <xsl:value-of               select = "concat('CDR', 
                                           number(
                                           substring-after($docID, 'CDR')))"/>
   </span>
   <p/>

   <xsl:apply-templates        select = 'CTGovProtocol'/>

   </body>
  </html>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'CTGovProtocol'>
  <xsl:apply-templates          select = 'RequiredHeader'/>
  <xsl:apply-templates          select = 'IDInfo'/>
  <xsl:apply-templates          select = 'BriefTitle'/>
  <xsl:apply-templates          select = 'OfficialTitle'/>
  <xsl:apply-templates          select = 'BriefSummary'/>
  <xsl:apply-templates          select = 'DetailedDescription'/>
  <xsl:apply-templates          select = 'CTEligibility'/>
  <p/>
  <table        xsl:use-attribute-sets = "table">
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"Start Date"'/>
    <xsl:with-param               name = 'data'
                                select = 'StartDate'/>
   </xsl:call-template>
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"End Date"'/>
    <xsl:with-param               name = 'data'
                                select = 'EndDate'/>
   </xsl:call-template>
  </table>
  <p/>

  <xsl:apply-templates          select = 'CTGovIndexing'/>

  <xsl:if                         test = 'Phase'>
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Phase</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:for-each              select = "Phase">
      <xsl:value-of             select = "."/>
      <br/>
     </xsl:for-each>
    </td>
   </tr>
   </table>
   <p/>
  </xsl:if>

  <xsl:apply-templates          select = 'PDQIndexing'/>
  <xsl:apply-templates          select = 'Sponsors'/>
  <xsl:apply-templates          select = 'OverallStatus'/>

  <hr/>
  <span class="big">Location</span>
   <ol bottom-margin="0">
    <xsl:apply-templates          select = 'Location'/>
   </ol>
  <hr/>
  <xsl:apply-templates          select = 'ProtocolProcessingDetails'/>
  <xsl:call-template              name = 'recordInfo'/>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'RequiredHeader'>
  <table        xsl:use-attribute-sets = "table">
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"Download Date"'/>
    <xsl:with-param               name = 'data'
                                select = 'DownloadDate'/>
   </xsl:call-template>
  </table>
  <p/>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'IDInfo'>
  <span class="big">ID Information</span>
  <table        xsl:use-attribute-sets = "table">
   <xsl:for-each                select = 'OrgStudyID'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Org Study ID"'/>
    </xsl:call-template>
   </xsl:for-each>
   <xsl:for-each                select = 'SecondaryID'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Secondary ID"'/>
    </xsl:call-template>
   </xsl:for-each>
   <xsl:for-each                select = 'NCTID'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"NCTID"'/>
    </xsl:call-template>
   </xsl:for-each>
  </table>
  <p/>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'BriefTitle'>
  <xsl:if                         test = 'normalize-space() != ""'>
  <span class="big">Brief Title</span>
   <br/>
   <xsl:value-of                select = 'normalize-space()'/>
   <p/>
  </xsl:if>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'OfficialTitle'>
  <xsl:if                         test = 'normalize-space() != ""'>
  <span class="big">Official Title</span>
   <br/>
   <xsl:value-of                select = 'normalize-space()'/>
   <p/>
  </xsl:if>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'BriefSummary'>
  <xsl:if                         test = 'normalize-space() != ""'>
  <span class="big">Brief Summary</span>
   <xsl:apply-templates         select = 'Para | ItemizedList'/>
   <p/>
  </xsl:if>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'DetailedDescription'>
  <xsl:if                         test = 'normalize-space() != ""'>
  <span class="big">Detailed Description</span>
   <xsl:apply-templates         select = 'Para | ItemizedList'/>
   <p/>
  </xsl:if>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'Para'>
  <xsl:if                         test = 'normalize-space() != ""'>
   <p>
    <xsl:value-of               select = 'normalize-space()'/>
   </p>
  </xsl:if>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'ItemizedList'>
  <ul>
   <xsl:apply-templates         select = 'ListItem'/>
  </ul>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'ListItem'>
  <xsl:if                         test = 'normalize-space() != ""'>
   <li>
    <xsl:value-of               select = '.'/>
   </li>
  </xsl:if>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'CTEligibility'>
  <span class="big">CTGov Eligibility</span> 
  <br/>
  <xsl:for-each                 select = 'CTCriteria'>
   <b>Criteria</b>
   <br/>
   <xsl:apply-templates         select = 'Para | ItemizedList'/>
  </xsl:for-each>

  <table        xsl:use-attribute-sets = "table">
   <xsl:for-each                select = 'CTExpectedEnrollment'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Expected Enrollment"'/>
    </xsl:call-template>
   </xsl:for-each>
   <xsl:for-each                select = 'CTGender'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Gender"'/>
    </xsl:call-template>
   </xsl:for-each>
   <xsl:for-each                select = 'CTMinimumAge'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Minimum Age"'/>
    </xsl:call-template>
   </xsl:for-each>
   <xsl:for-each                select = 'CTMaximumAge'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Maximum Age"'/>
    </xsl:call-template>
   </xsl:for-each>
  </table>
  <p/>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'CTGovIndexing'>
  <span class="big">CTGov Indexing</span> 

  <table        xsl:use-attribute-sets = "table">
   <xsl:for-each                select = 'CTStudyDesign'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Study Design"'/>
    </xsl:call-template>
   </xsl:for-each>
   <xsl:for-each                select = 'CTCondition'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Condition"'/>
    </xsl:call-template>
   </xsl:for-each>

   <table       xsl:use-attribute-sets = "table">
    <tr>
     <td colspan="2">
      <b>CT Intervention</b>
     </td>
    </tr>
    <xsl:apply-templates        select = 'CTIntervention'/>
   </table>
  </table>
  <p/>
 </xsl:template>


 <!-- 
 =================================================================
 Template to display the multiple occurring CTIntervention
 ================================================================= -->
 <xsl:template                   match = "CTIntervention">
  <tr>
   <td          xsl:use-attribute-sets = "cell1iof2">
   </td>
   <td          xsl:use-attribute-sets = "cell2iof2">
    <b>Intervention Type</b>
   </td>
   <td          xsl:use-attribute-sets = "cell2of2">
    <xsl:value-of               select = "CTInterventionType"/>
   </td>
  </tr>
  <tr class="intervention">
   <td          xsl:use-attribute-sets = "cell1iof2">
   </td>
   <td          xsl:use-attribute-sets = "cell2iof2">
    <b>Intervention Name</b>
   </td>
   <td          xsl:use-attribute-sets = "cell2of2">
    <xsl:value-of               select = "CTInterventionName"/>
   </td>
  </tr>
 </xsl:template>

 
 <!-- 
 =================================================================
 Template to display the PDQIndexing information
 ================================================================= -->
 <xsl:template                   match = 'PDQIndexing'>
  <span class="big">PDQ Indexing</span> 

  <table        xsl:use-attribute-sets = "table">
   <xsl:for-each                select = 'StudyType'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Study Type"'/>
    </xsl:call-template>
    <xsl:call-template            name = 'blankRow'/>
   </xsl:for-each>
  </table>

  <xsl:apply-templates          select = "StudyCategory"/>
  <p/>

  <table        xsl:use-attribute-sets = "table">
   <xsl:if                        test = 'Condition/Term/PreferredName'>
    <xsl:call-template            name = 'blankRow'/>
    <xsl:call-template            name = 'blankRow'/>
    <tr>
     <th                       colspan = '2'>Condition</th>
    </tr>
    <xsl:for-each               select = 'Condition/Term/PreferredName'>
     <tr>
      <td                      colspan = '2'>
       <xsl:value-of            select = 'normalize-space()'/>
      </td>
     </tr>
    </xsl:for-each>
   </xsl:if>
   <xsl:if                        test = 'Gene/Term/PreferredName'>
    <xsl:call-template            name = 'blankRow'/>
    <xsl:call-template            name = 'blankRow'/>
    <tr>
     <th                       colspan = '2'>Gene</th>
    </tr>
    <xsl:for-each               select = 'Gene/Term/PreferredName'>
     <tr>
      <td                      colspan = '2'>
       <xsl:value-of            select = 'normalize-space()'/>
      </td>
     </tr>
    </xsl:for-each>
   </xsl:if>
   <xsl:if                        test = 'ProtocolDesign'>
    <xsl:call-template            name = 'blankRow'/>
    <xsl:for-each               select = 'ProtocolDesign'>
     <xsl:call-template           name = 'makeTableRow'>
      <xsl:with-param             name = 'label'
                                select = '"Protocol Design"'/>
     </xsl:call-template>
    </xsl:for-each>
   </xsl:if>
  </table>
  <p/>

  <xsl:apply-templates         select = 'Eligibility'/>

  <table        xsl:use-attribute-sets = "table">
   <xsl:call-template             name = 'blankRow'/>
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"Entered by"'/>
    <xsl:with-param               name = 'data'
                                select = 'EnteredBy'/>
   </xsl:call-template>
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"Entered Date"'/>
    <xsl:with-param               name = 'data'
                                select = 'EntryDate'/>
   </xsl:call-template>
  </table>
  <p/>
 </xsl:template>


 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'StudyCategory'>
  <table        xsl:use-attribute-sets = "table">
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"Study Category Type"'/>
    <xsl:with-param               name = 'data'
                                select = 'StudyCategoryType'/>
   </xsl:call-template>
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"Study Category Name"'/>
    <xsl:with-param               name = 'data'
                                select = 'StudyCategoryName'/>
   </xsl:call-template>

   <xsl:apply-templates         select = 'Intervention'/>

  </table>
  <hr width = "15%"/>
 </xsl:template>


 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'Eligibility'>
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <th                         colspan = '2'
                                 class = 'h'>Eligibility Criteria</th>
   </tr>
   <xsl:call-template              name = 'makeTableRow'>
    <xsl:with-param                name = 'label'
                                select = '"Healthy Volunteers?"'/>
    <xsl:with-param                name = 'data'
                                select = 'HealthyVolunteers'/>
   </xsl:call-template>
   <xsl:call-template              name = 'makeTableRow'>
    <xsl:with-param                name = 'label'
                                select = '"Low Age"'/>
    <xsl:with-param                name = 'data'
                                select = 'LowAge'/>
   </xsl:call-template>
   <xsl:call-template              name = 'makeTableRow'>
    <xsl:with-param                name = 'label'
                                select = '"High Age"'/>
    <xsl:with-param                name = 'data'
                                select = 'HighAge'/>
   </xsl:call-template>
   <xsl:call-template              name = 'makeTableRow'>
    <xsl:with-param                name = 'label'
                                select = '"Age Range"'/>
    <xsl:with-param                name = 'data'
                                select = 'AgeText'/>
   </xsl:call-template>
  </table>
  <p/>

  <table        xsl:use-attribute-sets = "table">
   <xsl:if                        test = 'Diagnosis/
                                          Term/
                                          PreferredName'>
    <tr>
     <td          xsl:use-attribute-sets = "cell1of2">
      <b>Diagnosis</b>
     </td>
     <td          xsl:use-attribute-sets = "cell2of2">
      <xsl:for-each               select = "Diagnosis/Term/PreferredName">
       <xsl:sort                   select = 'normalize-space()'/>
       <li>
        <xsl:value-of             select = "."/>
       </li>
      </xsl:for-each>
     </td>
    </tr>
   </xsl:if>
  </table>
  <p/>

  <table        xsl:use-attribute-sets = "table">
   <xsl:if                        test = 'ExclusionCriteria/
                                          Term/
                                          PreferredName'>
    <tr>
     <th                       colspan = '2'>Exclusion Criteria</th>
    </tr>
    <xsl:for-each               select = 'ExclusionCriteria/
                                          Term/
                                          PreferredName'>
     <tr>
      <td                      colspan = '2'>
       <xsl:value-of            select = 'normalize-space()'/>
      </td>
     </tr>
    </xsl:for-each>
   </xsl:if>
  </table>
 
  <table        xsl:use-attribute-sets = "table">
   <tr>
     <td          xsl:use-attribute-sets = "cell1of2">
     <b>Comment</b>
    </td>
     <td          xsl:use-attribute-sets = "cell2of2">
     <xsl:choose>
      <xsl:when                   test = 'normalize-space(Comment) != ""'>
       <xsl:value-of            select = 'normalize-space(Comment)'/>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>No comments at this time</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </td>
   </tr>
  </table>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'Sponsors'>
  <span class="big">Sponsors</span>

  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <b>Lead Sponsor</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of              select = 'LeadSponsor/Organization/
                                          OrganizationNameInformation/
                                          OfficialName/Name'/>
     <xsl:for-each              select = "LeadSponsor/Organization">
      <xsl:call-template          name = "createCdrQcLink"/>
     </xsl:for-each>
    </td>
   </tr>


   <xsl:choose>
    <xsl:when                     test = 'Collaborator'>
     <xsl:for-each              select = 'Collaborator'>
      <xsl:call-template          name = 'makeTableRow'>
       <xsl:with-param            name = 'label'
                                select = '"Collaborator"'/>
       <xsl:with-param            name = 'data'>
        <xsl:value-of           select = 'Organization/
                                          OrganizationNameInformation/
                                          OfficialName/Name'/>
        <xsl:if                   test = 'Organization/@cdr:ref != ""'>
         <xsl:value-of          select = 'concat(" [", Organization/@cdr:ref,
                                                  "]")'/>
        </xsl:if>
       </xsl:with-param>
      </xsl:call-template>
     </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
     <xsl:call-template           name = 'makeTableRow'>
      <xsl:with-param             name = 'label'
                                select = '"Collaborator"'/>
      <xsl:with-param             name = 'data'
                                select = '"&#160;"'/>
     </xsl:call-template>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:for-each                select = 'OverallOfficial'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Overall Official"'/>
     <xsl:with-param              name = 'data'>
      <xsl:call-template          name = 'assemblePersonalName'/>
     </xsl:with-param>
    </xsl:call-template>
    <xsl:if                       test = 'Role != ""'>
     <xsl:call-template           name = 'makeTableRow'>
      <xsl:with-param             name = 'label'
                                select = '"&#160;"'/>
      <xsl:with-param             name = 'data'
                                select = 'Role'/>
     </xsl:call-template>
    </xsl:if>
    <xsl:if                       test = 'Affiliation != ""'>
     <xsl:call-template           name = 'makeTableRow'>
      <xsl:with-param             name = 'label'
                                select = '"&#160;"'/>
      <xsl:with-param             name = 'data'
                                select = 'Affiliation'/>
     </xsl:call-template>
    </xsl:if>
   </xsl:for-each>
   <xsl:for-each                select = 'OverallContact'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Overall Contact"'/>
     <xsl:with-param              name = 'data'>
      <xsl:call-template          name = 'assemblePersonalName'/>
     </xsl:with-param>
    </xsl:call-template>
   </xsl:for-each>
   <xsl:for-each                select = 'OverallContactBackup'>
    <xsl:call-template            name = 'makeTableRow'>
     <xsl:with-param              name = 'label'
                                select = '"Overall Contact Backup"'/>
     <xsl:with-param              name = 'data'>
      <xsl:call-template          name = 'assemblePersonalName'/>
     </xsl:with-param>
    </xsl:call-template>
   </xsl:for-each>
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"PDQ Sponsor"'/>
    <xsl:with-param               name = 'data'
                                select = 'PDQSponsorship'/>
   </xsl:call-template>
  </table>
  <p/>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'OverallStatus'>
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <th                          class = 'h'
                                 width = '35%'>Overall Status</th>
    <td                          width = '65%'>
     <xsl:value-of              select = 'normalize-space()'/>
    </td>
   </tr>
  </table>
  <p/>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'Location'>
  <li class="org">
   <table       xsl:use-attribute-sets = "table">
    <tr>
     <td        xsl:use-attribute-sets = "cell1of2">
      <b>Facility Name</b>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <!--
      This little trick of sticking the table data into an extra table
      is necessary to align the label of the list (the numbering) to 
      the top of the line if a cell contains multiple lines
                                                        VE, 2006-04-07
      ================================================================ -->
      <table       xsl:use-attribute-sets = "table">
       <tr>
        <td>
         <xsl:value-of          select = 'Facility/Name/Organization/
                                          OrganizationNameInformation/
                                          OfficialName/Name'/>
         <xsl:if                  test = "Facility/Name/Organization/@cdr:ref">
          <xsl:for-each         select = "Facility/Name/Organization">
           <xsl:call-template     name = "createCdrQcLink"/>
          </xsl:for-each>
         </xsl:if>
        </td>
       </tr>
      </table>
     </td>
    </tr>
   </table>

   <table       xsl:use-attribute-sets = "table">
    <tr>
     <th                       colspan = '3'>Address</th>
    </tr>
    <xsl:if                       test = "Facility/PostalAddress/
                                          Street">
    <tr>
     <td        xsl:use-attribute-sets = "cell1iof2">
     </td>
     <td        xsl:use-attribute-sets = "cell2iof2">
      <b>Street</b>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:for-each             select = "Facility/PostalAddress/
                                          Street">
       <xsl:value-of            select = "."/>
      </xsl:for-each>
     </td>
    </tr>
    </xsl:if>
    <tr>
     <td        xsl:use-attribute-sets = "cell1iof2">
     </td>
     <td        xsl:use-attribute-sets = "cell2iof2">
      <b>City</b>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:value-of             select = "Facility/PostalAddress/
                                          City"/>
     </td>
    </tr>
    <xsl:if                       test = "Facility/PostalAddress/
                                          PoliticalSubUnit_State">
    <tr>
     <td        xsl:use-attribute-sets = "cell1iof2">
     </td>
     <td        xsl:use-attribute-sets = "cell2iof2">
      <b>State/Political Unit</b>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:value-of             select = "Facility/PostalAddress/
                                          PoliticalSubUnit_State/
                                          PoliticalSubUnitFullName"/>

        <xsl:for-each           select = "Facility/
                                           PostalAddress/
                                           PoliticalSubUnit_State">
         <xsl:call-template       name = "createCdrQcLink"/>
        </xsl:for-each>
     </td>
    </tr>
    </xsl:if>
    <tr>
     <td        xsl:use-attribute-sets = "cell1iof2">
     </td>
     <td        xsl:use-attribute-sets = "cell2iof2">
      <b>Country</b>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:value-of             select = "Facility/PostalAddress/
                                          Country/
                                          CountryFullName"/>

        <xsl:for-each           select = "Facility/
                                          PostalAddress/
                                          Country">
         <xsl:call-template       name = "createCdrQcLink"/>
        </xsl:for-each>
     </td>
    </tr>
    <tr>
     <td        xsl:use-attribute-sets = "cell1iof2">
     </td>
     <td        xsl:use-attribute-sets = "cell2iof2">
      <b>ZIP/Postal Code</b>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:for-each             select = "Facility/PostalAddress/
                                          PostalCode_ZIP">
       <xsl:value-of            select = "."/>
      </xsl:for-each>
     </td>
    </tr>
   </table>
   <p/>

   <table       xsl:use-attribute-sets = "table">
    <tr>
     <td        xsl:use-attribute-sets = "cell1of2">
      <b>Facility Status</b>
     </td>
     <td        xsl:use-attribute-sets = "cell2of2">
      <xsl:value-of             select = "Status"/>
     </td>
    </tr>
   </table>
   <p/>

   <xsl:apply-templates         select = "Contact"/>
   <xsl:apply-templates         select = "ContactBackup"/>


    <table      xsl:use-attribute-sets = "table">
     <xsl:for-each              select = 'Investigator'>
      <tr>
       <td      xsl:use-attribute-sets = "cell1of2">
        <u>INVESTIGATOR</u>
       </td>
       <td      xsl:use-attribute-sets = "cell2of2">
        <xsl:call-template        name = 'assemblePersonalName'/>
       </td>
      </tr>
      <xsl:if                     test = 'normalize-space(Role) != ""'>
       <xsl:call-template         name = 'makeTableRow'>
        <xsl:with-param           name = 'label'
                                select = '"&#160;"'/>
        <xsl:with-param           name = 'data'
                                select = 'Role'/>
       </xsl:call-template>
      </xsl:if>
     </xsl:for-each>
    </table>

  </li>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                   match = 'Intervention'>
  <tr>
   <td          xsl:use-attribute-sets = "cell1of2">
    <b>Intervention Type</b>
   </td>
   <td          xsl:use-attribute-sets = "cell2of2">
    <xsl:value-of               select = "InterventionType/
                                          Term/
                                          PreferredName"/>
   </td>
  </tr>
  <tr>
   <td          xsl:use-attribute-sets = "cell1of2">
    <b>Intervention Name</b>
   </td>
   <td          xsl:use-attribute-sets = "cell2of2">
    <xsl:for-each               select = "InterventionNameLink/
                                          Term/
                                          PreferredName">
     <li>
      <xsl:value-of             select = "."/>
      <!-- xsl:value-of         select = 'normalize-space()'/ -->
     </li>
    </xsl:for-each>
   </td>
  </tr>
 </xsl:template>


 <!-- 
 =================================================================
 Display the Facility Contact information
 ================================================================= -->
 <xsl:template                   match = "Contact |
                                          ContactBackup">
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <td         xsl:use-attribute-sets = "cell1of2">
     <u>
      <b>
       <xsl:choose>
        <xsl:when                 test = "name() = 'Contact'">
         <xsl:text>CTGov Contact</xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>CTGov Contact Backup</xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </b>
     </u>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:for-each              select = 'PersonNameInformation'>
      <xsl:variable               name = 'firstTwo'
                                select = 'normalize-space(
                                          concat(GivenName, " ", 
                                                 MiddleInitial))'/>
      <xsl:variable               name = 'firstThree'
                                select = 'normalize-space(
                                          concat($firstTwo, " ",
                                                 Surname,
                                                 SurName))'/>
      <xsl:variable               name = 'combo'>
       <xsl:value-of            select = '$firstThree'/>
       <xsl:if                    test = 'normalize-space(ProfessionalSuffix)
                                           != "" and $firstThree != ""'>
        <xsl:text>, </xsl:text>
       </xsl:if>
       <xsl:value-of            select = 'ProfessionalSuffix'/>
      </xsl:variable>
      <xsl:value-of             select = 'normalize-space($combo)'/>
     </xsl:for-each>

     <xsl:if                      test = "../Contact/@cdr:ref |
                                          ../ContactBackup/@cdr:ref">
      <xsl:for-each             select = "../Contact |
                                          ../ContactBackup">
       <xsl:call-template         name = "createCdrQcLink"/>
      </xsl:for-each>
     </xsl:if>
    </td>
   </tr>
  </table>

  <table        xsl:use-attribute-sets = "table">
   <xsl:call-template             name = 'getContactRows'/>
  </table>
  <p/>
 </xsl:template>


 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                    name = 'getContactRows'>
  <tr>
   <td          xsl:use-attribute-sets = "cell1iof2">
   </td>
   <td          xsl:use-attribute-sets = "cell2iof2">
    <b>Phone</b>
   </td>
   <td          xsl:use-attribute-sets = "cell2of2">
  <xsl:for-each                 select = 'Phone'>
     <xsl:value-of              select = 'normalize-space()'/>
     <xsl:if                      test = 'normalize-space(../PhoneExt) != ""'>
      <xsl:value-of             select = 'concat(" ext. ", ../PhoneExt)'/>
     </xsl:if>
  </xsl:for-each>
   </td>
  </tr>
  <xsl:if                         test = "Fax">
   <tr>
    <td         xsl:use-attribute-sets = "cell1iof2">
    </td>
    <td         xsl:use-attribute-sets = "cell2iof2">
     <b>Fax</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of              select = "Fax"/>
    </td>
   </tr>
   </xsl:if>
   <xsl:if                        test = "TollFreePhone">
    <tr>
    <td         xsl:use-attribute-sets = "cell1iof2">
    </td>
    <td         xsl:use-attribute-sets = "cell2iof2">
     <b>Toll Free Phone</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:value-of              select = "TollFreePhone"/>
    </td>
   </tr>
  </xsl:if>
  <xsl:if                         test = "Email">
   <tr>
    <td         xsl:use-attribute-sets = "cell1iof2">
    </td>
    <td         xsl:use-attribute-sets = "cell2iof2">
     <b>Email</b>
    </td>
    <td         xsl:use-attribute-sets = "cell2of2">
     <xsl:for-each              select = 'Email'>
      <xsl:call-template          name = "createEmailLink">
       <xsl:with-param            name = "email"
                                select = "."/>
      </xsl:call-template>
     </xsl:for-each>
    </td>
   </tr>
  </xsl:if>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                    name = 'makeIndentedRow'>
  <xsl:param                      name = 'label'/>
  <xsl:param                      name = 'data'
                                select = '.'/>
  <xsl:call-template              name = 'makeTableRow'>
   <xsl:with-param                name = 'label'
                                select = 'concat("&#160;&#160;&#160;&#160;",
                                                 "&#160;&#160;&#160;&#160;",
                                                 $label)'/>
   <xsl:with-param                name = 'data'
                                select = '$data'/>
  </xsl:call-template>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                    name = 'blankRow'>
  <tr>
   <td                         colspan = '2'>&#160;</td>
  </tr>
 </xsl:template>


 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                    name = 'makeTableRow'>
  <xsl:param                      name = 'label'/>
  <xsl:param                      name = 'data'
                                select = '.'/>
  <tr>
   <th                           width = '35%'
                                valign = 'top'>
    <xsl:value-of               select = '$label'/>
   </th>
   <td                           width = '65%'>
    <xsl:choose>
     <xsl:when                    test = 'normalize-space($data) != ""'>
      <xsl:value-of             select = 'normalize-space($data)'/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>&#160;</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </td>
  </tr>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                    name = 'assemblePersonalName'>
  <xsl:for-each                 select = 'PersonNameInformation'>
   <xsl:variable                  name = 'firstTwo'
                                select = 'normalize-space(
                                          concat(GivenName, " ", 
                                                 MiddleInitial))'/>
   <xsl:variable                  name = 'firstThree'
                                select = 'normalize-space(
                                          concat($firstTwo, " ",
                                                 Surname,
                                                 SurName))'/>
   <xsl:variable                  name = 'combo'>
    <xsl:value-of               select = '$firstThree'/>
    <xsl:if                        test = 'normalize-space(ProfessionalSuffix)
                                           != "" and $firstThree != ""'>
     <xsl:text>, </xsl:text>
    </xsl:if>
    <xsl:value-of               select = 'ProfessionalSuffix'/>
   </xsl:variable>
   <xsl:value-of                select = 'normalize-space($combo)'/>
  </xsl:for-each>
  <xsl:if                         test = '@cdr:ref != ""'>
   <xsl:value-of                select = 'concat(" [", @cdr:ref, "]")'/>
  </xsl:if>
 </xsl:template>

 <!-- 
 =================================================================
 ================================================================= -->
 <xsl:template                    name = 'recordInfo'>
  <table        xsl:use-attribute-sets = "table">
   <tr>
    <th                        colspan = '2'>
     <span class="big">Record Information</span>
    </th>
   </tr>
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"Updated by"'/>
    <xsl:with-param               name = 'data'
                                select = '"@@UPDATEDBY@@"'/>
   </xsl:call-template>
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"Date"'/>
    <xsl:with-param               name = 'data'
                                select = '"@@UPDATEDDATE@@"'/>
   </xsl:call-template>
   <xsl:call-template             name = 'blankRow'/>
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"Verification Date"'/>
    <xsl:with-param               name = 'data'
                                select = 'VerificationDate'/>
   </xsl:call-template>
   <xsl:call-template             name = 'makeTableRow'>
    <xsl:with-param               name = 'label'
                                select = '"Last Changed Date"'/>
    <xsl:with-param               name = 'data'
                                select = 'LastChangedDate'/>
   </xsl:call-template>
  </table>
 </xsl:template>
</xsl:transform>]]>
</CdrDocXml>
</CdrDoc>