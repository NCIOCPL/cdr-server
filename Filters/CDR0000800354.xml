<?xml version="1.0" ?>
<!-- Filter title: Index Drug Dictionary -->

<!--
    Create one "terms" node for the document's preferred name (yes,
    "terms" should be singular, but we're stuck with it now), as well
    for each of the drug's other names.

    These will be converted to json by the Python dictionary loader
    and fed to ElasticSearch.
-->

<xsl:transform              xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                              version = "1.0">

 <xsl:output                   method = "xml"
                             encoding = "utf-8"/>

 <!-- Don't index anything if we have no definitions. -->
 <xsl:template                  match = "/">
  <nodes>
   <xsl:if                       test = "Term/Definition/DefinitionText">
    <xsl:apply-templates       select = "Term"/>
   </xsl:if>
  </nodes>
 </xsl:template>

 <!-- Assemble the nodes for the document. -->
 <xsl:template                  match = "Term">

  <!-- Prepare variables for values we'll need in multiple places. -->
  <xsl:variable                  name = "id">
   <xsl:call-template            name = "extract-id-integer">
    <xsl:with-param              name = "cdr-id"
                               select = "@id"/>
   </xsl:call-template>
  </xsl:variable>
  <xsl:variable                  name = "preferred-name">
   <xsl:value-of               select = "normalize-space(PreferredName)"/>
  </xsl:variable>
  <xsl:variable                  name = "pretty-url-name">
   <xsl:call-template            name = "pretty-url-name"/>
  </xsl:variable>

  <!-- First assemble the main node for this drug term. -->
  <node                      doc_type = "terms">
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "$id"/>
   </xsl:attribute>
   <term_id>
    <xsl:value-of              select = "$id"/>
   </term_id>
   <name>
    <xsl:value-of              select = "$preferred-name"/>
   </name>
   <first_letter            processor = "lowercase_first_letter">
    <xsl:value-of              select = "$preferred-name"/>
   </first_letter>
   <type>DrugTerm</type>
   <term_name_type>PreferredName</term_name_type>
   <pretty_url_name         processor = "clean_pretty_url">
    <xsl:value-of              select = "$pretty-url-name"/>
   </pretty_url_name>
   <xsl:apply-templates        select = "OtherName"/>
   <xsl:apply-templates        select = "Definition/DefinitionText">
    <xsl:with-param              name = "name"
                               select = "'definition'"/>
   </xsl:apply-templates>
   <xsl:variable                 name = "dis-url">
    <xsl:value-of              select = "normalize-space(CGovInfo/DISUrl)"/>
   </xsl:variable>
   <xsl:variable                 name = "dis-title">
    <xsl:value-of              select = "normalize-space(CGovInfo/DISTitle)"/>
   </xsl:variable>
   <xsl:if                       test = "$dis-url != ''">
    <xsl:if                      test = "$dis-title != ''">
     <drug_info_summary_link>
      <url>
       <xsl:value-of           select = "$dis-url"/>
      </url>
      <text>
       <xsl:value-of           select = "$dis-title"/>
      </text>
     </drug_info_summary_link>
    </xsl:if>
   </xsl:if>
   <xsl:variable                 name = "cid">
    <xsl:value-of              select = "@NCIThesaurusConceptID"/>
   </xsl:variable>
   <xsl:variable                 name = "normalized-cid">
    <xsl:value-of              select = "normalize-space($cid)"/>
   </xsl:variable>
   <xsl:if                       test = "$normalized-cid != ''">
    <nci_concept_id>
     <xsl:value-of             select = "$normalized-cid"/>
    </nci_concept_id>
   </xsl:if>
   <xsl:variable                 name = "ncit-name">
    <xsl:value-of              select = "normalize-space(CGovInfo/NCITName)"/>
   </xsl:variable>
   <xsl:if                       test = "not($ncit-name = '')">
    <nci_concept_name>
     <xsl:value-of             select = "$ncit-name"/>
    </nci_concept_name>
   </xsl:if>
  </node>

  <!-- Now create a separate node for each other name. -->
  <xsl:for-each                select = "OtherName">
   <xsl:variable                 name = "other-term-name">
    <xsl:value-of              select = "normalize-space(OtherTermName)"/>
   </xsl:variable>
   <node                     doc_type = "terms">
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "$id"/>
     <xsl:text>-</xsl:text>
     <xsl:value-of             select = "position()"/>
    </xsl:attribute>
    <term_id>
     <xsl:value-of             select = "$id"/>
    </term_id>
    <name>
     <xsl:value-of             select = "$other-term-name"/>
    </name>
    <first_letter           processor = "lowercase_first_letter">
     <xsl:value-of             select = "$other-term-name"/>
    </first_letter>
    <type>DrugAlias</type>
    <term_name_type>
     <xsl:call-template          name = "other-name-type"/>
    </term_name_type>
    <pretty_url_name        processor = "clean_pretty_url">
     <xsl:value-of             select = "$pretty-url-name"/>
    </pretty_url_name>
    <preferred_name>
     <xsl:value-of             select = "$preferred-name"/>
    </preferred_name>
   </node>
  </xsl:for-each>
 </xsl:template>

 <!-- Create two versions of the definition: with and without markup.
      Drugs should only have one definition.
 -->
 <xsl:template                  match = "DefinitionText">
  <xsl:param                     name = "name"/>
  <xsl:element                   name = "{$name}">
   <text>
    <xsl:apply-templates       select = "*|text()"/>
   </text>
   <html>
    <xsl:apply-templates       select = "*|text()"
                                 mode = "html"/>
   </html>
  </xsl:element>
 </xsl:template>

 <!-- Mark up links inside the definition. -->
 <xsl:template                  match = "ExternalRef"
                                 mode = "html">
  <xsl:text>&lt;a ref="</xsl:text>
  <xsl:value-of                select = "@xref"/>
  <xsl:text>"&gt;</xsl:text>
  <xsl:value-of                select = "text()"/>
  <xsl:text>&lt;/a&gt;</xsl:text>
 </xsl:template>

 <!-- Information to be embedded in the main term node. -->
 <xsl:template                  match = "OtherName">
  <aliases                       type = "array-member">
   <type>
    <xsl:call-template           name = "other-name-type"/>
   </type>
   <name>
    <xsl:value-of              select = "normalize-space(OtherTermName)"/>
   </name>
  </aliases>
 </xsl:template>

 <!-- Extract significant digits from the CDR ID, without CDR0* prefix. -->
 <xsl:template                   name = "extract-id-integer">
  <xsl:param                     name = "cdr-id"/>
  <xsl:variable                  name = "digits"
                               select = "substring($cdr-id, 4)"/>
  <xsl:variable                  name = "nonzero"
                               select = "translate($digits, '0', '')"/>
  <xsl:variable                  name = "first"
                               select = "substring($nonzero, 1, 1)"/>
  <xsl:variable                  name = "zeros"
                               select = "substring-before($digits, $first)"/>
  <xsl:value-of                select = "substring-after($digits, $zeros)"/>
 </xsl:template>

 <!-- Strip out all the spaces (including internal) from the type name. -->
 <xsl:template                  name = "other-name-type">
  <xsl:variable                 name = "type">
   <xsl:value-of              select = "normalize-space(OtherNameType)"/>
  </xsl:variable>
  <xsl:value-of               select = "translate($type, ' ', '')"/>
 </xsl:template>

 <!-- Use the NCI Thesaurus name for the URL if we have such a name. -->
 <xsl:template                   name = "pretty-url-name">
  <xsl:variable                  name = "ncit-name"
                               select = "normalize-space(CGovInfo/NCITName)"/>
  <xsl:choose>
   <xsl:when                     test = "$ncit-name != ''">
    <xsl:value-of              select = "$ncit-name"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:value-of              select = "normalize-space(PreferredName)"/>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

 <!-- Suppress default attribute copying rule. -->
 <xsl:template                  match = "@*"/>

</xsl:transform>
