<?xml version="1.0" ?>
<!-- Filter title: Index Drug Dictionary -->

<!--
    Create one "terms" node for the document (yes, "terms" should be
    singular, but we're stuck with it now), as well as "expand" and
    "autocomplete" per-term nodes.

    These will be converted to json by the Python dictionary loader
    and fed to ElasticSearch.
-->

<xsl:transform              xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                              version = "1.0">

 <xsl:output                   method = "xml"
                             encoding = "utf-8"/>

 <!-- Don't index anything if we have no definitions. -->
 <xsl:template                  match = "/">
  <nodes>
   <xsl:if                       test = "Term/Definition/DefinitionText">
    <xsl:apply-templates       select = "Term"/>
   </xsl:if>
  </nodes>
 </xsl:template>

 <!-- Assemble the nodes for the document. -->
 <xsl:template                  match = "Term">

  <!-- Prepare variables for values we'll need in multiple places. -->
  <xsl:variable                  name = "id">
   <xsl:call-template            name = "extract-id-integer">
    <xsl:with-param              name = "cdr-id"
                               select = "@id"/>
   </xsl:call-template>
  </xsl:variable>
  <xsl:variable                  name = "definition">
   <xsl:apply-templates        select = "Definition[1]/DefinitionText">
    <xsl:with-param              name = "name"
                               select = "'e_definition'"/>
   </xsl:apply-templates>
  </xsl:variable>
  <xsl:variable                  name = "pretty-url-name">
   <xsl:call-template            name = "pretty-url-name"/>
  </xsl:variable>

  <!-- First assemble the main node for this drug term. -->
  <node                      doc_type = "terms">
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "$id"/>
   </xsl:attribute>
   <term_id>
    <xsl:value-of              select = "$id"/>
   </term_id>
   <term_name>
    <xsl:value-of              select = "normalize-space(PreferredName)"/>
   </term_name>
   <xsl:if                       test = "@NCIThesaurusConceptID != ''">
    <nci_concept_id>
     <xsl:value-of             select = "@NCIThesaurusConceptID"/>
    </nci_concept_id>
   </xsl:if>
   <xsl:apply-templates        select = "OtherName"/>
   <xsl:apply-templates        select = "Definition/DefinitionText">
    <xsl:with-param              name = "name"
                               select = "'definition'"/>
   </xsl:apply-templates>
   <pretty_url_name         processor = "clean_pretty_url">
    <xsl:value-of              select = "$pretty-url-name"/>
   </pretty_url_name>
   <xsl:call-template            name = "related-resource"/>
  </node>

  <!-- An autocomplete node for the preferred name and for each OtherName. -->
  <node                      doc_type = "autocomplete">
   <a_term_id>
    <xsl:value-of              select = "$id"/>
   </a_term_id>
   <autocomplete_name>
    <xsl:value-of              select = "normalize-space(PreferredName)"/>
   </autocomplete_name>
  </node>
  <xsl:for-each                select = "OtherName">
   <node                     doc_type = "autocomplete">
    <a_term_id>
     <xsl:value-of             select = "$id"/>
    </a_term_id>
    <autocomplete_name>
     <xsl:value-of             select = "normalize-space(OtherTermName)"/>
    </autocomplete_name>
   </node>
  </xsl:for-each>

  <!-- An expand node for the preferred name and for each US brand name. -->
  <xsl:call-template             name = "expand">
   <xsl:with-param               name = "id"
                               select = "$id"/>
   <xsl:with-param               name = "preferred"
                               select = "'true'"/>
   <xsl:with-param               name = "name"
                               select = "normalize-space(PreferredName)"/>
   <xsl:with-param               name = "definition"
                               select = "$definition"/>
     <xsl:with-param             name = "pretty-url-name"
                               select = "$pretty-url-name"/>
  </xsl:call-template>
  <xsl:for-each                select = "OtherName">
   <xsl:if                       test = "OtherNameType = 'US brand name'">
    <xsl:call-template           name = "expand">
     <xsl:with-param             name = "id"
                               select = "$id"/>
     <xsl:with-param             name = "preferred"
                               select = "'false'"/>
     <xsl:with-param             name = "name"
                               select = "normalize-space(OtherTermName)"/>
     <xsl:with-param             name = "definition"
                               select = "$definition"/>
     <xsl:with-param             name = "pretty-url-name"
                               select = "$pretty-url-name"/>
    </xsl:call-template>
   </xsl:if>
  </xsl:for-each>
 </xsl:template>

 <!-- Create two versions of the definition: with and without markup.
      Drugs should only have one definition.
 -->
 <xsl:template                  match = "DefinitionText">
  <xsl:param                     name = "name"/>
  <xsl:element                   name = "{$name}">
   <text>
    <xsl:apply-templates       select = "*|text()"/>
   </text>
   <html>
    <xsl:apply-templates       select = "*|text()"
                                 mode = "html"/>
   </html>
  </xsl:element>
 </xsl:template>

 <!-- Mark up links inside the definition. -->
 <xsl:template                  match = "ExternalRef"
                                 mode = "html">
  <xsl:text>&lt;a ref="</xsl:text>
  <xsl:value-of                select = "@xref"/>
  <xsl:text>"&gt;</xsl:text>
  <xsl:value-of                select = "text()"/>
  <xsl:text>&lt;/a&gt;</xsl:text>
 </xsl:template>

 <!-- Add an expand node for a term name or alias. -->
 <xsl:template                   name = "expand">
  <xsl:param                     name = "id"/>
  <xsl:param                     name = "preferred"/>
  <xsl:param                     name = "name"/>
  <xsl:param                     name = "definition"/>
  <xsl:param                     name = "pretty-url-name"/>
  <node                      doc_type = "expand">
   <e_term_id>
    <xsl:value-of              select = "$id"/>
   </e_term_id>
   <expand_name>
    <xsl:value-of              select = "$name"/>
   </expand_name>
   <first_letter            processor = "lowercase_first_letter">
    <xsl:value-of              select = "$name"/>
   </first_letter>
   <xsl:copy-of                select = "$definition"/>
   <e_term_name>
    <xsl:value-of              select = "$name"/>
   </e_term_name>
   <is_termname>
    <xsl:attribute               name = "type">
     <xsl:value-of             select = "$preferred"/>
    </xsl:attribute>
   </is_termname>
   <e_pretty_url_name         process = "clean_pretty_url">
    <xsl:value-of              select = "$pretty-url-name"/>
   </e_pretty_url_name>
  </node>
 </xsl:template>

 <!-- Assemble the related resources. -->
 <xsl:template                   name = "related-resource">
  <xsl:variable                  name = "url"
                               select = "normalize-space(CGovInfo/DISUrl)"/>
  <xsl:if                        test = "$url != ''">
   <related_resources            type = "array-member">
    <type>DrugSummary</type>
    <url>
     <xsl:value-of             select = "$url"/>
    </url>
    <text>
     <xsl:variable               name = "dis-title"
                               select = "normalize-space(CGovInfo/DISTitle)"/>
     <xsl:choose>
      <xsl:when                  test = "$dis-title != ''">
       <xsl:value-of           select = "$dis-title"/>
      </xsl:when>
      <xsl:otherwise>
       <xsl:value-of           select = "normalize-space(PreferredName)"/>
      </xsl:otherwise>
     </xsl:choose>
    </text>
   </related_resources>
  </xsl:if>
 </xsl:template>

 <xsl:template                   name = "pretty-url-name">
  <xsl:variable                  name = "ncit-name"
                               select = "normalize-space(CGovInfo/NCITName)"/>
  <xsl:choose>
   <xsl:when                     test = "$ncit-name != ''">
    <xsl:value-of              select = "$ncit-name"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:value-of              select = "normalize-space(PreferredName)"/>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

 <xsl:template                  match = "OtherName">
  <alias                         type = "array-member">
   <name>
    <xsl:value-of              select = "normalize-space(OtherTermName)"/>
   </name>
   <type>
    <xsl:value-of              select = "normalize-space(OtherNameType)"/>
   </type>
  </alias>
 </xsl:template>

 <!-- Extract significant digits from the CDR ID, without CDR0* prefix. -->
 <xsl:template                   name = "extract-id-integer">
  <xsl:param                     name = "cdr-id"/>
  <xsl:variable                  name = "digits"
                               select = "substring($cdr-id, 4)"/>
  <xsl:variable                  name = "nonzero"
                               select = "translate($digits, '0', '')"/>
  <xsl:variable                  name = "first"
                               select = "substring($nonzero, 1, 1)"/>
  <xsl:variable                  name = "zeros"
                               select = "substring-before($digits, $first)"/>
  <xsl:value-of                select = "substring-after($digits, $zeros)"/>
 </xsl:template>

 <!-- Suppress default attribute copying rule. -->
 <xsl:template                  match = "@*"/>

</xsl:transform>
