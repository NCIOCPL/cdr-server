<?xml version='1.0' encoding='utf-8'?>
<!-- $Id$ -->
<!-- Filter title: Delete PermaTargId -->
 <!-- 
 =======================================================================
 $Id$

 Strip a PermaTargId from a document if it has the passed value.

 Called when a particular PermaTargId must be deleted from a doc.

 Pass:
    delTargValue - Value of the PermaTargId attribute to be processed.
                   We delete the whole attribute node, not just the value.

 Author: Alan Meyer.

 =======================================================================
 -->

<xsl:transform  version = '1.0'
                xmlns:xsl = 'http://www.w3.org/1999/XSL/Transform'
                xmlns:cdr = 'cips.nci.nih.gov/cdr'>
 <xsl:output    method = 'xml'
                encoding = 'utf-8'/>

 <xsl:param     name = "delTargValue"/>

 <!-- ==================================================================
 Copy almost everything straight through.
 ======================================================================= -->
 <xsl:template match = '@*|node()'>
   <xsl:copy>
       <xsl:apply-templates select = '@*|node()'/>
   </xsl:copy>
 </xsl:template>

 <!-- Delete our requested attribute using empty template.
Note: I originally used match = '*[@PermaTargId = $delTargValue]'
      That works in Saxon, but Sablotron does not allow a variable to
      be used in a predicate this way.
      So I had to get all of the nodes with PermaTargId attributes and
      examine each attribute, finding the PermaTargIds among them.
 -->
 <xsl:template        match  = '*[@PermaTargId]'>
   <xsl:element       name   = '{name()}'>
     <xsl:for-each    select = '@*'>
       <xsl:choose>
         <!-- Sablotron also failed to work with a single test of:
                'name()="PermaTargId" and . = $delTargValue'
              So I had to break those up into two nested choose/when/otherwise
              constructs.
         -->
         <xsl:when    test   = 'name() = "PermaTargId"'>
           <xsl:choose>
             <xsl:when test = '. = $delTargValue'>
               <!-- Do nothing with this node.  All other nodes are copied -->
             </xsl:when>
             <xsl:otherwise>
               <xsl:copy/>
             </xsl:otherwise>
           </xsl:choose>
           <!-- Do nothing with this node.  All other nodes are copied -->
         </xsl:when>
         <xsl:otherwise>
           <xsl:copy/>
         </xsl:otherwise>
       </xsl:choose>   
     </xsl:for-each>
     <xsl:apply-templates select = 'node()'/>
   </xsl:element>
 </xsl:template>
</xsl:transform>
