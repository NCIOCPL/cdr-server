<?xml version="1.0" ?>
<!-- Filter title: Drug Information Summary for Drupal CMS -->
<xsl:transform version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method = "xml"/>
  <xsl:param    name = "section"/>

  <xsl:template match="/DrugInformationSummary">
<!-- Use the correct element name from the start, instead of relying on
     regular expression hacking
        <DrugInformationSummary> -->
        <div class="rxbodyfield">
          <div class="contentzone">

            <xsl:apply-templates    select = "DrugInfoTitle"/>
            <xsl:apply-templates    select = "DrugInfoMetaData/
                                       PronunciationInfo"/>
            <xsl:apply-templates    select = "DrugInfoMetaData"/>
            <div class="accordion">
              <xsl:apply-templates    select = "*[not(child::DrugInfoDescription)]
                                         [not(self::DrugInfoTitle)]
                                         [not(self::DateFirstPublished)]
                                         [not(self::DateLastModified)]"/>
            </div>
          </div>
<!-- This is from the original code.
          </DrugInformationSummary>
          Use div tag instead.
-->
        </div>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "DrugInfoMetaData">

    <xsl:apply-templates         select = "DrugInfoDescription"/>
    <!-- Table only displayed for DIS, not for DCS -->
    <xsl:if                        test = "not(/DrugInformationSummary/
                                               DrugInfoMetaData/
                                               DrugInfoType/
                                               @Combination = 'Yes')">
      <xsl:apply-templates       select = "USBrandNames"/>
      <xsl:apply-templates       select = "FDAApproved"/>
    </xsl:if>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "USBrandNames">
    <div class="two-columns brand-fda">
      <div class="column1">US Brand Name(s)</div>
      <div class="column2">
        <xsl:for-each             select = "USBrandName">
          <xsl:value-of            select = "."/>
          <xsl:if                    test = "not(position() = last())">
            <br />
          </xsl:if>
        </xsl:for-each>
      </div>
    </div>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "FDAApproved">
    <div class="two-columns brand-fda">
      <div class="column1">FDA Approved</div>
      <div class="column2">
        <xsl:value-of             select = "."/>
      </div>
    </div>
  </xsl:template>
  
  <!--
  Template to remove display of SectionMetaData
  ================================================================ -->
  <xsl:template                  match = "DrugInfoDescription">
    <p>
      <xsl:apply-templates/>
    </p>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "DrugInfoTitle">
    <!--<h1>
      <xsl:apply-templates/>
    </h1>-->
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template match="PronunciationInfo">
    <div>
      <!-- Filter the MediaLinks to match only audio files and only English pronunciations -->
      <xsl:apply-templates select="MediaLink[@type='audio/mpeg' and @language='en']" mode="audio" />
      <xsl:if test="count(MediaLink) &gt; 0 and count(TermPronunciation) &gt; 0">&#160;</xsl:if>
      <!--<xsl:apply-templates select="TermPronunciation" />-->
      <xsl:if                     test = "TermPronunciation">
        <xsl:text>(</xsl:text>
        <xsl:value-of            select = "TermPronunciation"/>
        <xsl:text>)</xsl:text>
      </xsl:if>
    </div>
  </xsl:template>
  <!--<xsl:template                  match = "PronunciationInfo">
    <div>
      <xsl:element                 name = "a">
        <xsl:attribute              name = "href">
          --><!--
       Next Line For Testing on DEV only !!! 
       ===================================== --><!--
          <xsl:text>http://www.cancer.gov</xsl:text>
          <xsl:text>/PublishedContent/Media/CDR/Media/</xsl:text>
          <xsl:value-of            select = "number(
                                           substring-after(
                                            MediaLink[@language = 'en']/@ref,
                                            'CDR'))"/>
          <xsl:choose>
            <xsl:when                test = "MediaLink[@language = 'en']/@type
                                           = 'audio/mpeg'">
              <xsl:text>.mp3</xsl:text>
            </xsl:when>
          </xsl:choose>
        </xsl:attribute>
        --><!--
      Next Line For Testing on DEV only - hard coded Server name !!! 
      ===================================== --><!--
        <img width="16" height="16" border="0" alt="listen"
            src="http://www.cancer.gov/images/audio-icon.gif"></img>
      </xsl:element>

      <xsl:if                     test = "TermPronunciation">
        <xsl:text>&#160;&#160;(</xsl:text>
        <xsl:value-of            select = "TermPronunciation"/>
        <xsl:text>)</xsl:text>
      </xsl:if>
    </div>
  </xsl:template>-->


  <!--
  Template for Top SummarySections
  ================================================================ -->
  <xsl:template                  match = "SummarySection">
    <xsl:param                     name = "topSection"
                                 select = "'sub'"/>
    <xsl:apply-templates>
      <xsl:with-param          name = "topSection"
                             select = "$topSection"/>
    </xsl:apply-templates>
  </xsl:template>

  <!--
  Display the Keypoints as Titles within the text
  ================================================================ -->
  <xsl:template                  match = "KeyPoint">
    <xsl:element                   name = "h3">
      <xsl:attribute                name = "id">
        <xsl:value-of              select = "@id"/>
      </xsl:attribute>
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>


  <!--
  Create the section titles
  ================================================================ -->
  <xsl:template                  match = "Title">
    <xsl:param                     name = "topSection"
                                 select = "'title'"/>
    <h2>
      <xsl:apply-templates/>
    </h2>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "Para">
    <xsl:param                     name = "topSection"
                                 select = "'para'"/>
    <xsl:element                   name = "p">
      <xsl:attribute                name = "id">
        <xsl:value-of              select = "@id"/>
      </xsl:attribute>
      <xsl:attribute                name = "tabindex">
        <xsl:text>-1</xsl:text>
      </xsl:attribute>
      <xsl:apply-templates>
        <xsl:with-param          name = "topSection"
                               select = "$topSection"/>
      </xsl:apply-templates>
    </xsl:element>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "ItemizedList">
    <xsl:param                     name = "topSection"
                                 select = "'il'"/>
    <xsl:element                   name = "ul">
      <xsl:attribute                name = "id">
        <xsl:value-of              select = "@id"/>
      </xsl:attribute>
      <xsl:apply-templates>
        <xsl:with-param          name = "topSection"
                               select = "$topSection"/>
      </xsl:apply-templates>
    </xsl:element>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "OrderedList">
    <xsl:param                     name = "topSection"
                                 select = "'ol'"/>
    <xsl:element                   name = "ol">
      <xsl:attribute                name = "id">
        <xsl:value-of              select = "@id"/>
      </xsl:attribute>
      <xsl:apply-templates       select = "@Style"/>
      <xsl:apply-templates>
        <xsl:with-param          name = "topSection"
                               select = "$topSection"/>
      </xsl:apply-templates>
    </xsl:element>
  </xsl:template>

  <!--
  Ordered lists will be displayed as is
  Unordered lists will be displayed without style and without 
  compact mode.  No 'dash', no 'bullet'.  
  Style="simple" will be converted into class="no-bullets" (indentation?)
  and eventually converted to some sort of address block when available
  ================================================================ -->
  <xsl:template                  match = "@Style">
    <xsl:choose>
      <xsl:when                      test = ". = 'bullet'"/>
      <!-- Arabic (i.e. class="decimal") is the default.  
         Don't need to include this in the HTML output -->
      <xsl:when                      test = ". = 'Arabic'"/>
      <xsl:otherwise>
        <xsl:attribute                 name = "class">
          <xsl:choose>
            <xsl:when                    test = ". = 'LAlpha'">
              <xsl:text>lower-alpha</xsl:text>
            </xsl:when>
            <xsl:when                    test = ". = 'LRoman'">
              <xsl:text>lower-roman</xsl:text>
            </xsl:when>
            <xsl:when                    test = ". = 'UAlpha'">
              <xsl:text>upper-alpha</xsl:text>
            </xsl:when>
            <xsl:when                    test = ". = 'URoman'">
              <xsl:text>upper-roman</xsl:text>
            </xsl:when>
            <xsl:when                    test = ". = 'circle'">
              <xsl:text>list-circle</xsl:text>
            </xsl:when>
            <xsl:when                    test = ". = 'square'">
              <xsl:text>list-square</xsl:text>
            </xsl:when>
            <xsl:when                    test = ". = 'dash'">
              <xsl:text>list-dash</xsl:text>
            </xsl:when>
            <xsl:when                    test = ". = 'simple'">
              <xsl:text>pdq-address-block</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>style_undefined</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:attribute>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <!--
  ================================================================ -->
  <xsl:template                  match = "ListItem">
    <xsl:param                     name = "topSection"
                                 select = "'li'"/>
    <li>
      <xsl:apply-templates>
        <xsl:with-param          name = "topSection"
                               select = "$topSection"/>
      </xsl:apply-templates>
    </li>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "ListTitle">
    <xsl:element                   name = "p">
      <xsl:attribute                name = "class">
        <xsl:text>pdq-list-title</xsl:text>
      </xsl:attribute>

      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>
  
  <!--
  Template to display the citations in the Reference Section
  ================================================================ -->
  <xsl:template                  match = "ReferenceSection">
    <xsl:param                     name = "topSection"
                                 select = "'ref'"/>
    <h6>References</h6>

    <ol>
      <xsl:for-each              select = "Citation">
        <li>

          <xsl:element               name = "a">
            <xsl:attribute            name = "name">
              <xsl:value-of          select = "$topSection"/>
              <xsl:text>.</xsl:text>
              <xsl:value-of          select = "@idx"/>
            </xsl:attribute>
            <!-- Little Problem -->
            <xsl:text> </xsl:text>
          </xsl:element>

          <xsl:value-of            select = "."/>
          <xsl:if                    test = "@PMID">
            <xsl:element              name = "a">
              <xsl:attribute           name = "href">
                <xsl:text>http://www.ncbi.nlm.nih.gov/entrez/query.fcgi</xsl:text>
                <xsl:text>?cmd=Retrieve&amp;db=PubMed&amp;list_uids=</xsl:text>
                <xsl:value-of          select = "@PMID"/>
                <xsl:text>&amp;dopt=Abstract</xsl:text>
              </xsl:attribute>
              <xsl:text>[PUBMED Abstract]</xsl:text>
            </xsl:element>
          </xsl:if>
        </li>
      </xsl:for-each>
    </ol>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "Reference">
    <xsl:param                     name = "topSection"
                                 select = "'cit'"/>
    <xsl:text>[</xsl:text>
    <xsl:element                  name = "a">
      <xsl:attribute               name = "href">
        <xsl:text>#</xsl:text>
        <xsl:value-of             select = "$topSection"/>
        <xsl:text>.</xsl:text>
        <xsl:value-of             select = "@refidx"/>
      </xsl:attribute>
      <xsl:value-of             select = "@refidx"/>
    </xsl:element>
    <xsl:text>]</xsl:text>
  </xsl:template>

  <!--
  Template to markup bold text
  ================================================================ -->
  <xsl:template                  match = "Strong">
   <xsl:element                   name = "strong">
    <xsl:apply-templates/>
   </xsl:element>
  </xsl:template>


  <!--
  Elements that will by default be marked up for display in italics
  ================================================================ -->
  <xsl:template                  match = "Emphasis |
                                          ForeignWord |
                                          GeneName |
                                          ScientificName">
   <xsl:element                   name = "em">
    <xsl:if                       test = "name() = 'GeneName'">
     <xsl:attribute               name = "class">
      <xsl:text>gene-name</xsl:text>
     </xsl:attribute>
    </xsl:if>

    <xsl:apply-templates/>
   </xsl:element>
  </xsl:template>


  <!--
  ================================================================ -->
  <xsl:template                  match = "GlossaryTermRef">
    <xsl:element                   name = "a">
      <xsl:attribute                name = "class">
        <xsl:text>definition</xsl:text>
      </xsl:attribute>
      <xsl:attribute                name = "href">
        <!--
     Next Line For Testing on DEV only !!! 
     ===================================== -->
        <!--<xsl:text>http://www.cancer.gov</xsl:text>-->
        <xsl:text>/Common/PopUps/popDefinition.aspx?id=</xsl:text>
        <xsl:value-of              select = "number(
                                           substring-after(@href, 'CDR'))"/>
        <xsl:text>&amp;version=Patient&amp;language=English</xsl:text>
      </xsl:attribute>
      <xsl:attribute                name = "onclick">
        <xsl:text>javascript:popWindow('defbyid','</xsl:text>
        <xsl:value-of              select = "@href"/>
        <xsl:text>&amp;version=Patient&amp;language=English'); </xsl:text>
        <xsl:text>return(false);</xsl:text>
      </xsl:attribute>
      <xsl:apply-templates/>
    </xsl:element>
    <xsl:if test="following-sibling::node()">
      <xsl:for-each select="following-sibling::node()">
        <xsl:if test="name() !='' and position()=1">&#160;</xsl:if>
      </xsl:for-each>
    </xsl:if>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "SummaryRef | DrugRef">
    <xsl:element                   name = "a">
      <xsl:attribute                name = "href">
        <!--
     Next Line For Testing on DEV only !!! 
     ===================================== -->
        <!--<xsl:text>http://www.cancer.gov</xsl:text>-->
        <xsl:value-of              select = "@url"/>
      </xsl:attribute>
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "ExternalRef">
    <xsl:element                   name = "a">
      <xsl:attribute                name = "href">
        <!--
     Next Line For Testing on DEV only !!! 
     ===================================== -->
        <xsl:value-of              select = "@xref"/>
      </xsl:attribute>
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template match="MediaLink" mode="audio">
    <div inlinetype="rxvariant" templatename="pdqSnMediaAudioPlayer" objectid="{@ref}">
      Placeholder slot
    </div>
  </xsl:template>
  <!--<xsl:template                  match = "MediaLink">
    <xsl:element                   name = "figure">
      <xsl:attribute                name = "class">
        <xsl:text>image-center</xsl:text>
      </xsl:attribute>

      --><!--
   Display the 'Enlarge' button
   ============================= --><!--
      <xsl:element                   name = "a">
        <xsl:attribute                name = "class">
          <xsl:text>article-image-enlarge</xsl:text>
        </xsl:attribute>
        <xsl:attribute                name = "target">
          <xsl:text>_blank</xsl:text>
        </xsl:attribute>
        <xsl:attribute                name = "href">
          --><!--
     Next Line For Testing on DEV only !!! 
     ===================================== --><!--
          <xsl:text>http://www.cancer.gov</xsl:text>
          <xsl:text>/images/cdr/live/CDR</xsl:text>
          <xsl:value-of              select = "number(
                                           substring-after(@ref, 'CDR'))"/>
          <xsl:text>.jpg</xsl:text>
        </xsl:attribute>
        <xsl:text>Enlarge</xsl:text>
      </xsl:element>

      --><!--
    Display the Image
    ============================= --><!--
      <xsl:element                  name = "img">
        <xsl:attribute               name = "__id">
          <xsl:value-of             select = "@id"/>
        </xsl:attribute>
        <xsl:attribute               name = "alt">
          <xsl:value-of             select = "@alt"/>
        </xsl:attribute>
        <xsl:attribute               name = "src">
          --><!--
     Next Line For Testing on DEV only !!! 
     ===================================== --><!--
          <xsl:text>http://www.cancer.gov</xsl:text>
          <xsl:text>/images/cdr/live/CDR</xsl:text>
          <xsl:value-of              select = "number(
                                           substring-after(@ref, 'CDR'))"/>
          <xsl:text>.jpg</xsl:text>
        </xsl:attribute>
      </xsl:element>


      <xsl:element                 name = "figcaption">
        <xsl:element                 name = "div">
          <xsl:attribute              name = "class">
            <xsl:text>caption-container</xsl:text>
          </xsl:attribute>

          <xsl:apply-templates/>
        </xsl:element>
      </xsl:element>
    </xsl:element>
  </xsl:template>-->


  <!--
  ================================================================ -->
  <xsl:template                  match = "DrugInfoDisclaimer">
    <xsl:element                   name = "aside">
      <xsl:attribute                name = "class">
        <xsl:text>dis-disclaimer</xsl:text>
      </xsl:attribute>
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>


  <!-- *************** TABLES ********************************** -->
  <!--
  Template for Tables
  ================================================================ -->
  <xsl:template                  match = "Table">
    <!-- Provide the 'Enlarge' link -->
    <xsl:if                       test = "not(/DrugInformationSummary/
                                               DrugInfoMetaData/
                                               DrugInfoType/
                                               @Combination = 'Yes')">
      <xsl:element                   name = "p">
        <xsl:attribute                name = "class">
          <xsl:text>table-enlarge</xsl:text>
        </xsl:attribute>

        <xsl:element                  name = "a">
          <xsl:attribute                name = "href">
            <xsl:text>/DADA</xsl:text>
          </xsl:attribute>
          <xsl:text>Enlarge</xsl:text>
        </xsl:element>
      </xsl:element>
    </xsl:if>

    <!-- Display the Table -->
    <xsl:element                   name = "table">
      <xsl:choose>
        <xsl:when                    test = "/DrugInformationSummary/
                                               DrugInfoMetaData/
                                               DrugInfoType/
                                               @Combination = 'Yes'">
          <xsl:attribute                name = "class">
            <xsl:text>drug-combination</xsl:text>
          </xsl:attribute>
        </xsl:when>
        <xsl:otherwise>
          <xsl:attribute                name = "class">
            <xsl:text>table-default</xsl:text>
          </xsl:attribute>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:apply-templates        select = "Title"
                                    mode = "table"/>
      <xsl:apply-templates        select = "TGroup"/>
    </xsl:element>
  </xsl:template>

  <!--
  Template for Table Caption/Title
  ================================================================ -->
  <xsl:template                  match = "Title"
                                  mode = "table">
    <xsl:element                   name = "caption">
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>

  <!--
  Template for colgroup
  ================================================================ -->
  <xsl:template                  match = "TGroup">
    <xsl:element                   name = "colgroup">
      <xsl:for-each               select = "ColSpec">
        <xsl:element                 name = "col">
          <xsl:attribute              name = "width">
            <xsl:value-of            select = "@ColWidth"/>
          </xsl:attribute>
        </xsl:element>
      </xsl:for-each>
    </xsl:element>
    <xsl:apply-templates        select = "THead"/>
    <xsl:apply-templates        select = "TFoot"/>
    <xsl:apply-templates        select = "TBody"/>
  </xsl:template>

  <!--
  Template for Table Caption/Title
  ================================================================ -->
  <xsl:template                  match = "THead">
    <xsl:element                   name = "thead">
      <xsl:apply-templates        select = "Row">
        <xsl:with-param              name = "header"
                                   select = "'Y'"/>
      </xsl:apply-templates>
    </xsl:element>
  </xsl:template>

  <!--
  Template for Table Caption/Title
  ================================================================ -->
  <xsl:template                  match = "TBody">
    <xsl:element                   name = "tbody">
      <xsl:apply-templates        select = "Row"/>
    </xsl:element>
  </xsl:template>

  <!--
  Template for Table Caption/Title
  ================================================================ -->
  <xsl:template                  match = "TFoot">
    <xsl:element                   name = "tfoot">
      <xsl:apply-templates        select = "Row"/>
    </xsl:element>
  </xsl:template>

  <!--
  Template for Table Caption/Title
  ================================================================ -->
  <xsl:template                  match = "Row">
    <xsl:param                     name = "header"
                                 select = "'N'"/>
    <xsl:element                   name = "tr">
      <xsl:apply-templates        select = "entry">
        <xsl:with-param              name = "header"
                                   select = "$header"/>
      </xsl:apply-templates>
    </xsl:element>
  </xsl:template>

  <!--
  Template for Table Caption/Title
  ================================================================ -->
  <xsl:template                  match = "entry">
    <xsl:param                     name = "header"
                                 select = "'N'"/>
    <xsl:choose>
      <xsl:when                     test = "$header = 'Y'">
        <xsl:element                 name = "th">
          <xsl:attribute              name = "scope">
            <xsl:text>col</xsl:text>
          </xsl:attribute>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:element                 name = "td">
          <xsl:if                     test = "position() = 1">
            <xsl:attribute             name = "class">
              <xsl:text>drug-combo-letter</xsl:text>
            </xsl:attribute>
          </xsl:if>

          <xsl:apply-templates/>
        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>



  <!--
========================================================================
    NAMED TEMPLATES
======================================================================== -->
  <!--
  Template to remove display of SectionMetaData
  ================================================================ -->
  <xsl:template                   name = "keypointsbox">
    <xsl:if test = "descendant::KeyPoint">
      <div class="keyPoints">
        <h4>Key Points for This Section</h4>
        <ul>
          <xsl:for-each               select = "descendant::KeyPoint">
            <li>
              <xsl:element                name = "a">
                <xsl:attribute             name = "href">
                  <xsl:text>#</xsl:text>
                  <xsl:value-of           select = "@id"/>
                </xsl:attribute>
                <xsl:value-of            select = "."/>
              </xsl:element>
            </li>
          </xsl:for-each>
        </ul>
      </div>
    </xsl:if>
  </xsl:template>

  <!--
  Template to remove display of SectionMetaData
  ================================================================ -->
  <xsl:template                   name = "toc">
    <!-- xsl:for-each              select = "descendant::Title" -->
    <xsl:apply-templates select = "SummarySection" mode = "toc"/>
  </xsl:template>

  <!--
  ================================================================ -->
  <xsl:template                  match = "SummarySection[Title]" mode = "toc">
    <ul>
      <xsl:apply-templates select = "Title" mode = "toc"/>
      <xsl:apply-templates select = "SummarySection" mode = "toc"/>
    </ul>
  </xsl:template>


  <!--
  ================================================================ -->
  <xsl:template                  match = "Title" mode = "toc">
    <li>
      <xsl:element                name = "a">
        <xsl:attribute             name = "href">
          <xsl:text>#</xsl:text>
          <xsl:value-of          select = "../@id"/>
        </xsl:attribute>
        <xsl:value-of            select = "."/>
      </xsl:element>

    </li>
  </xsl:template>



</xsl:transform>
