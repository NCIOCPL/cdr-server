<?xml version="1.0"?>
<!-- Filter title: Vendor Filter: InScopeProtocol - Sort ProtocolSite -->
<!-- Creator:  Volker Englisch
     Created:  11/07/2002        
     Comment:  This filter is the first part of a two part filtering
               process.  This part (Vendor Filter: InScopeProtocol -
               Sort ProtocolSite) is sorting ProtocolSite and ProtPerson
               Elements and combining the ProtPerson fragments from
               identical ProtocolSite fragments.
               The second part (Vendor Filter: InScopeProtocol - Remove
               Duplicate ProtocolSite) ensures that each 
               ProtocolSite/ProtPerson combination only
               appears once in the resulting output. -->

<!-- 
 ==================================================================
 $Id$
 ================================================================== -->
<xsl:transform              xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                            xmlns:cdr = "cips.nci.nih.gov/cdr"
              exclude-result-prefixes = "cdr"
                              version = "1.0">

 <xsl:output                   method = "xml" 
                 omit-xml-declaration = "no"
                             encoding = "UTF-8"/>


 <!--
 ================================================================
 Default rule, copying back out everything just as we got it.
 ================================================================ -->
 <xsl:template                  match = "@*|comment()|*|
                                         processing-instruction()|text()">
  <xsl:copy>
   <xsl:apply-templates        select = "@*|comment()|*|
                                         processing-instruction()|text()"/>
  </xsl:copy>
 </xsl:template>

 <!--
 ===================================================================
 Template to sort the ProtocolSite elements and only display unique
 entries. 
 =================================================================== -->
 <xsl:template                  match = "ProtocolSites">
    <xsl:copy>
     <xsl:apply-templates      select = "ProtocolSite
                                         [not(.=preceding::ProtocolSite)]">
       <xsl:sort               select = "concat(./SiteName | 
                                                        ./ProtPerson/
                                                          PersonNameInformation/
                                                          SurName,  
                                                '@@@', 
                                                ./@ref,
                                                '@@@',
                                                ./@contactinfo)"/>
     </xsl:apply-templates>

    </xsl:copy>
 </xsl:template>


 <!--  
 ===================================================================
 Template to collect all persons associated with a single site.  In 
 the case of a site being displayed twice this is producing two 
 identical entries.
 Example:
   ORIGINAL          FIRST FILTER         SECOND FILTER
   Site A#F1    \     Site A        \      
     Person a   |       Person a    |     Site A
     Person b   |       Person b    |       Person a
   Site B       |       Person d    |       Person b
     Person c   |==>  Site A        |==>    Person d
   Site A#F2    |       Person a    |     Site B
     Person a   |       Person b    |       Person c
     Person d   /       Person d    |
                      Site B        |
                        Person c    /
 The duplicates are being trimmed in the second filter of this process.
 =================================================================== -->
 <xsl:template                  match = "ProtocolSite">
    <xsl:variable                name = "siteID"   
                               select = "substring-before
                                         (concat(@ref, '#'), '#')"/>
  <ProtocolSite>
   <xsl:attribute                name = "ref">
    <xsl:value-of              select = "$siteID"/>
   </xsl:attribute>

   <xsl:attribute                name = "sitetype">
    <xsl:value-of              select = "./@sitetype"/>
   </xsl:attribute>

   <xsl:if                        test = "@SuppressContactInformation">
    <xsl:attribute                name = "SuppressContactInformation">
     <xsl:value-of              select = "@SuppressContactInformation"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:copy-of                select = "SiteName"/>
   <xsl:for-each               select = "/Protocol/ProtocolAdminInfo
                                         /ProtocolSites
                                         /ProtocolSite[
                                           substring(@ref, 1, 13)=$siteID]
                                         /ProtPerson">
    <xsl:sort/>
    <xsl:apply-templates       select = "."/>
   </xsl:for-each>

  </ProtocolSite>
 </xsl:template>

</xsl:transform>
