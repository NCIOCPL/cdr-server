<?xml version="1.0"?>
<!-- $Id$ -->
<!-- Filter title: Global Change: Org Status -->
<!-- 
 ==================================================================

 Global Change: Org Status

 This filter has to change the value in:

   /InScopeProtocol/ProtocolAdminInfo/ProtocolLeadOrg
   /ProtocolSites/OrgSite/OrgSiteStatus

 But only when the OrgSiteStatus contains a particular value, and 
 only when the OrgSiteStatus is found in the same OrgSite as

   /InScopeProtocol/ProtocolAdminInfo/ProtocolLeadOrg
   /ProtocolSites/OrgSite/OrgSiteID/@cdr:ref

 that contains a passed value.

 So three mandatory values are passed in:

 1. A cdr document ID to match against the OrgSiteID/@cdr:ref (orgId).

 2. An existing value of OrgSiteStatus to find (oldStatus).

 3. A new value for OrgSiteStatus to replace the existing one when
    a match is found (newStatus).

 Additionally, if multiple Lead Organizations exist, it is now possible 
 to specify the Lead Org, under which the org status should be changed.
 It is also possible to specify that the status should only be changed
 under a specified Lead Org for a particular SpecificPerson.  However, 
 this functionallity fails if a SpecificPerson is NOT the only person
 under that specified organization.
 If no leadOrgId is provided but a personId the value of the personId 
 will be ignored.
 
 The two additional optional values are passed in as:
 
 4. A lead organization ID matching LeadOrganizationID/@cdr:ref 
    (leadOrgId)

 5. An ID for the person matching Person/@cdr:ref (personId).
 ================================================================== -->
<xsl:transform              xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                            xmlns:cdr = "cips.nci.nih.gov/cdr"
                              version = "1.0">

 <xsl:output                   method = "xml" 
                 omit-xml-declaration = "no"/>

 <!--
 ================================================================
 Passed in by the caller.
 Parameter 1, 2, and 3 are mandatory.
  ================================================================ -->
 <xsl:param                      name = "orgId"/>
 <xsl:param                      name = "oldStatus"/>
 <xsl:param                      name = "newStatus"/>
 <xsl:param                      name = "leadOrgId"/>
 <xsl:param                      name = "personId"/>
<!--  Leave this section for testing
 <xsl:param                      name = "orgId"     select = "'CDR0000029635'"/>
 <xsl:param                      name = "oldStatus" select = "'Approved-not yet active'"/>
 <xsl:param                      name = "newStatus" select = "'XXXClosedXXX'"/>
 <xsl:param                      name = "leadOrgId" select = "'CDR0000035676'"/>
 <xsl:param                      name = "personId"  select = "'CDR0000025323'"/>
-->
 <!--
 ================================================================
 Default rule, copying back out everything just as we got it.
 ================================================================ -->
 <xsl:template                  match = "@*|comment()|*|
                                         processing-instruction()|text()">
  <xsl:copy>
   <xsl:apply-templates        select = "@*|comment()|*|
                                         processing-instruction()|text()"/>
  </xsl:copy>
 </xsl:template>

 <!--
 ===================================================================
 Template to change the Organization status.
 =================================================================== -->
 <xsl:template                  match = "/InScopeProtocol/ProtocolAdminInfo
                                         /ProtocolLeadOrg/ProtocolSites
                                         /OrgSite/OrgSiteStatus">
  <xsl:variable                  name = "thisOrgLink"
                               select = "../OrgSiteID/@cdr:ref"/>

  <!-- Saving the current status in order to set it back to what it was
       for protocol sites that don't change -->
  <xsl:variable                  name = "keepStatus"
                               select = "."/>

  <!-- Select the org ID without the fragment ID -->
  <xsl:variable                  name = "thisOrgId">
   <xsl:choose>
    <xsl:when                    test = "contains($thisOrgLink, '#')">
     <xsl:value-of             select = "substring-before($thisOrgLink, '#')"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of             select = "$thisOrgLink"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>

  <!-- Select the LeadOrg ID without the fragment ID  -->
  <xsl:variable                  name = "thisLeadOrgId"
                               select = "substring-before(
                                         concat(
                                         ../../../LeadOrganizationID/@cdr:ref, 
                                                                  '#'),'#')"/>

  <!-- 
  =========================================================
  Change the status for the specified Organization
  if a LeadOrgId is provided and the organization IDs match
  (The default clause is run when NO LeadOrgId is provided)
  ========================================================= -->
  <xsl:choose>
   <xsl:when                     test = "$leadOrgId">

     <!-- 
     Both optional parameters - leadOrgId and personId are provided.
     If the person is NOT the only SpecificContact for this site
     terminate the update with an error message.
     ============================================================== -->
     <xsl:choose>
      <xsl:when                  test = "$leadOrgId = $thisLeadOrgId">

       <!-- 
       personId is provided and leadOrgId is provided
       a) terminate update if an organization status should be changed
          for which more then one SpecificPerson exists and the orgId
          matches.
       b) perform update if exactly one SpecificPerson exists and the 
          ordId and specified oldStatus matches.
          Do nothing and display the original data if one doesn't match.
       c) Copy as is if personId and orgId don't match.
       =============================================================== -->
       <xsl:choose>
        <xsl:when                test = "$personId">
         <xsl:for-each         select = "../OrgSiteContact/
                                         SpecificPerson">
          <xsl:choose>
           <xsl:when             test = "last() != 1 
                                         and
                                         substring-before(
                                           concat(Person/@cdr:ref,'#'),'#')
                                           = $personId 
                                         and 
                                         $thisLeadOrgId = $leadOrgId
                                         and
                                         $thisOrgId = $orgId">
            <xsl:message    terminate = "yes">
             <xsl:text>Multiple contact persons for this OrgSite: </xsl:text> 
              <xsl:value-of    select = "$orgId"/><xsl:text>.</xsl:text>
             <xsl:text>  Change was not made.</xsl:text>
            </xsl:message>
           </xsl:when>
           <!-- (b) Print changed status element if variables match 
                    and exactly one investigator is listed          -->
           <xsl:when             test = "last() = 1 
                                         and
                                         substring-before(
                                           concat(Person/@cdr:ref,'#'),'#')
                                           = $personId 
                                         and 
                                         $thisLeadOrgId = $leadOrgId
                                         and
                                         $thisOrgId = $orgId">
            <OrgSiteStatus>
             <xsl:choose>
              <xsl:when          test = "$keepStatus = $oldStatus">
               <xsl:value-of   select = "$newStatus"/>
              </xsl:when>
              <xsl:otherwise>
               <xsl:value-of   select = "$keepStatus"/>
              </xsl:otherwise>
             </xsl:choose>
            </OrgSiteStatus>
           </xsl:when>
           <!-- (c) Print status element as is by default 
                    However, this can only be done after all SpecificPerson
                    elements have been tested and fell through.  For the 
                    very last person of the bunch we then can print again
                    the original status. Otherwise multiple status records
                    would get printed if multiple SpecificPersons existed
            =============================================================  -->
           <xsl:otherwise>
            <xsl:if              test = "position() = last()">
             <OrgSiteStatus>
              <xsl:value-of     select = "$keepStatus"/>
             </OrgSiteStatus>
            </xsl:if>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:for-each>

         <!-- 
         Need to ensure that the status element for an OrgSite
         without a SpecificPerson element is not being dropped
         and is displayed properly.
         ======================================================== -->
         <xsl:if                 test = "not(../OrgSiteContact/
                                         SpecificPerson)">
          <OrgSiteStatus>
           <xsl:value-of     select = "$keepStatus"/>
          </OrgSiteStatus>
         </xsl:if>
        </xsl:when>

       <!-- personId is not provided but leadOrgId is provided
            ================================================== -->
        <xsl:when                test = ". = $oldStatus and 
                                         $thisOrgId = $orgId">
         <OrgSiteStatus>
          <xsl:value-of        select = "$newStatus"/>
         </OrgSiteStatus>
        </xsl:when>
        <xsl:otherwise>
         <xsl:copy>
          <xsl:apply-templates select = "@*|comment()|*|
                                         processing-instruction()|text()"/>
         </xsl:copy>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <!-- 
      Copy input to output as is - No changes necessary        
      ========================================================= -->
      <xsl:otherwise>  <!-- "$leadOrgId NOT $thisLeadOrgId" -->
       <xsl:copy>
        <xsl:apply-templates   select = "@*|comment()|*|
                                         processing-instruction()|text()"/>
       </xsl:copy>
      </xsl:otherwise>
     </xsl:choose>
   </xsl:when>
   <!-- 
   ========================================================
   THE DEFAULT - leadOrgId is empty
   Only the parameters orgId, newStatus, oldStatus are 
   provided and all orgId occurences for all LeadOrgs are 
   updated.
   Note:  personId is not tested if leadOrgId is empty.  
          The filter behaves as if both leadOrgId and personId
          were empty.
   ======================================================== -->
   <xsl:otherwise>
    <!-- 
    organizationIds match:  Change the status 
    =============================================================== -->
    <xsl:choose>
     <xsl:when                   test = ". = $oldStatus and 
                                         $thisOrgId = $orgId">
      <OrgSiteStatus>
       <xsl:value-of           select = "$newStatus"/>
      </OrgSiteStatus>
     </xsl:when>
     <!-- 
     organizationIds don't match: No changes necessary, copy as is.        
     ============================================================== -->
     <xsl:otherwise>
      <xsl:copy>
       <xsl:apply-templates    select = "@*|comment()|*|
                                         processing-instruction()|text()"/>
      </xsl:copy>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>
</xsl:transform>
