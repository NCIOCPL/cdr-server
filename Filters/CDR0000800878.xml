<?xml version="1.0" ?>
<!-- Filter title: Denormalization Filter: Video -->
<!--
================================================================

 Filter to denormalize EmbeddedVideo elements.
 The Embedded Video needs to be denormalized before the Insertion
 Deletion wrapper filter runs.

 Written by Volker Englisch, 2020-03-17

================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
                               version = "1.0">

 <xsl:output                    method = "xml"
                              encoding = "utf-8"/>

  <!--
 Parameters passed via the Web interface
 ================================================================= -->
 <xsl:param                       name = "DisplayPubImages"
                                select = "'Y'"/>


 <!--
 =================================================================
 Template to denormalize the Multimedia elements
 ================================================================= -->
 <!-- xsl:template                   match = "MediaID | VideoID" -->
 <xsl:template                   match = "VideoID">
  <xsl:variable                   name = "MediaID"
                                select = "@cdr:ref"/>
  <xsl:variable                   name = "imgVersion">
   <xsl:choose>
    <xsl:when                     test = "$DisplayPubImages = 'N'">
     <xsl:text>/last</xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>/lastp</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>

  <xsl:variable                   name = "MediaInfo"
                                select = "document(concat('cdr:',$MediaID,
                                                           $imgVersion))"/>
  <xsl:element                    name = "VideoID">
   <xsl:attribute                 name = "cdr:ref">
    <xsl:value-of               select = "@cdr:ref"/>
   </xsl:attribute>
   <xsl:apply-templates         select = "$MediaInfo/*"/>
   <!--
   <xsl:copy-of                  select = "$MediaInfo/*[not(self::Media/ProcessingStatuses)]"/>
  -->
  </xsl:element>
 </xsl:template>

 <!--
 =================================================================
 Template to strip elements we won't need
 ================================================================= -->
 <xsl:template                   match = "MediaSource |
                                          ProcessingStatuses |
                                          ProposedUse"/>

 <!--
 =================================================================
 Identity Template
 ================================================================= -->
 <xsl:template                   match = "@*|node()">
  <xsl:copy>
   <xsl:apply-templates         select = "@*|node()"/>
  </xsl:copy>
 </xsl:template>

</xsl:transform>
