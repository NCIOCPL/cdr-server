To build the CDR server, run nmake with no explicit target (but
see the notes below about building debugging versus non-debugging
versions of the server).
To install, run nmake with the target install.
If the components that the makefile expects to find are not on the D:
drive, add DRV=x: to the invocation of nmake, with x being the drive
where you are building.  For more details, see documentation in the
makefile itself.

If you are building a new Windows CDR Server, on which the third
party libraries needed by CdrServer.exe have not yet been installed,
follow these steps (if this is on your own workstation, you can
substitute c: for d: if you don't have a usable d: drive):

 1. Install Mozilla build tools
  - Go to https://wiki.mozilla.org/MozillaBuild.
  - Download the latest installer, MozillaBuildSetup-x.x.exe.
  - Run the installer, putting the tools in d:\usr\mozilla-build.
    The installer installs a great many linux/cygwin style tools, including
    its own bash and make.

 2. Build NSPR ("Netscape Portable Runtime libraries"; needed by JavaScript)
  - Go to http://ftp.mozilla.org/pub/mozilla.org/nspr/releases/
  - Navigate to latest release and download latest source tarball
    (e.g. nspr-4.7.1.tar.gz)
  - Unpack and move to d:\usr\nspr
  - Switch to d:\usr\mozilla-build
  - Unset your HOME environment variable, i.e., "set HOME=" (no quotes)
    (this disables any customization of PATH done in your .bash_profile)
  - Run start-msvc9.bat (matches Visual Studio 2008)
  - cd /d/usr/nspr/mozilla/nsprpub
  - ./configure
  - make
  - exit bash shell
  - cd \usr\nspr
  - xcopy mozilla\nsprpub\dist\include\nspr include /s
    (answer D when asked about the target)
  - mkdir lib
  - copy mozilla\nsprpub\dist\lib\libnspr4.lib lib

 3. Build Javascript (used by Sablotron's XSL/T engine)
  - Go to http://ftp.mozilla.org/pub/mozilla.org/js/
  - Download the latest source tarball (e.g. js-1.7.0.tar.gz)
  - Unpack and move to d:\usr\js
  - cd d:\usr\js\src
  - copy js.mak to js.vs2008.mak
  - edit js.vs2008.mak (see cdr/Server/js.vs2008.patch in CVS)
     (But don't count on using the patch file because the next version of
      js.mak could be different.  It's in CVS only as an example.)
     * find the block that defines the project files for "js - Win32 Release"
       Clues are:
        The block starts with "!IF  "$(CFG)" == "js - Win32 Release"
        There may be a comment saying "Begin Project"
        Symbols are defined for:
          OUTDIR=.\Release
          INTDIR=.\Release
          ALL
          CLEAN
        These symbols are also defined in other blocks for 
          "js - Win32 Debug"
          "jsshell - Win32 Release" (and Debug)
          "jskwgen - Win32 Release" (and Debug)
          "fdlibm - Win32 Release" (and Debug)
        We're only interested in "js - Win32 Release"
     * in that block:
        - add definition NSPR=../../nspr
        - for definition of CPP_PROJ:
           * replace /GX with /EHca
           * remove /YX
           * add:
              * Tell javascript where header files will be
              - /I $(NSPR)/include
              * Ignore warnings on deprecated function names
              - /D_CRT_SECURE_NO_DEPRECATE
              - /D_CRT_NONSTDC_NO_DEPRECATE
              * Compile js for multi-threading
              - /DJS_THREADSAFE
        - add $(INTDIR)\jsiter.obj to definition of LINK32_OBJS
        - add $(NSPR)/lib/libnspr4.lib to LINK32 arguments, i.e.,
              $(LINK32) @<<
              $(LINK32_FLAGS) $(LINK32_OBJS) $(NSPR)/lib/libnspr4.lib
   - nmake -f js.vs2008.mak CFG="js - Win32 Release" > errs
   - examine errs file for problems
   - cd ..
   - mkdir bin
   - copy src\Release\js32.dll bin
   - copy ..\nspr\mozilla\nsprpub\dist\bin\libnspr4.dll bin

 4. Build Sablotron (note that we're no longer including iconv; it's not
    needed for our purposes, according to the Sablotron FAQ -
    http://www.gingerall.org/sablotron_faq.html - which says "On windows
    you can either use character sets supported by Sablotron itself only
    (UTF-8, UTF-16, ISO-8859-1, and windows-1250 for input and UTF-8 for
    output) or you must link your sablot.dll with iconv.dll (precompiled
    sablot+iconv binary is avilable)"; we're using utf-8 for input and
    output, and ISO-8859-1 for collation, and collation is handled by the
    Microsoft runtime libraries anyway; this is a good thing, as setting
    up a build environment for iconv on Windows is not trivial).  We're
    using a copy of the Sablotron 1.0.3 source code which we've patched
    ourselves, as the Sablotron teams support for the package is defunct.
  - Go to d:\usr
  - cvs co sablot
  - edit makefile_include.msvc
      Make same changes as for js.vs2008.mak
       - replace /GX with /EHca
       - remove /YX
      Add to CFLAGS to suppress warnings.
       - /D_CRT_SECURE_NO_DEPRECATE
       - /D_CRT_NONSTDC_NO_DEPRECATE
  - cd sablot
  - nmake -f makefile.msvc > errs
  - examine errs file for problems

 5. Install expat
  - go to http://sourceforge.net/projects/expat
  - download the latest expat_win32bin package (an .exe file)
  - run the executable package, installing to d:\usr\expat
  - add d:\usr\expat\bin to the system search path

 6. Install xerces.
  - go to http://xml.apache.org/xerces-c/download.cgi
  - download xerces-c-x.x.x-x86-windows-vc-y.z.zip (where x.x.x is the
    latest release version of the package, and y.z matches the
    version of the Visual Studio compiler we're using; for example,
    xerces-c-3.0.0-x86-windows-vc-9.0.zip for VS2008)
  - unpack the zipfile
  - move the unpacked files to d:\usr\xercesc

 7. Install regex++
  - go to http://www.boostpro.com/products/free
  - download the latest BoostPro installer
  - launch the installer
  - agree to the licences
  - select Multithread (DLL) for VS 9.0
  - uncheck all packages except Boost Headers and Regex
  - set installation target as d:\usr\regex
  - answer "yes" when asked about adding binaries to the PATH

 8. Ensure that there is a path to each of the dlls. Add to the path:
  - d:\usr\xerces\bin
  - d:\usr\sablot\bin
  - d:\usr\js\bin
  - d:\usr\regex\lib

 9. Check out and build the server source code
  - cvs checkout cdr/server
  - cd cdr\server
  - nmake -f Makefile.vs2008 DRV=d: [or c:, b: for Bach, f: for Franck]

In addition to the DLLs installed by the steps above, the following 
two DLLs must be copied to the search path, if they are not already
installed:

    msvcp90.dll
    msvcr90.dll

============================================================================
             !!!INFORMATION BELOW HERE IS OUT OF DATE!!!
============================================================================

Debugging Sablotron
-------------------

Here's how to build Sablotron for debugging:

 1. Download latest source bundle.
 2. Unpack.
 3. Change to top directory of bundle
 4. set EXPAT=d:\usr\expat\source
 5. set EXPAT_LIB=..\libs\libexpat.lib
 6. set JS=d:\usr\js
 7. set ICONV=d:\usr\iconv
 8. ln d:/usr/iconv/lib/iconv.lib d:/usr/iconv/src/iconv.lib
 9. nmake -f Makefile.nt DBG=1
10. Check out a fresh set of CDR Server sources.
11. nmake SABLOT=d:/path/to/debug/version/of/Sablotron

============================================================================

I have modified the Makefile for the CDR server to split the debugging
and production builds.  Now by default "nmake" builds a binary which
will work on any of the three servers (BACH, FRANCK, or MAHLER), but
without debugging symbols.  To build a debug version of CdrServer.exe,
use "nmake DBG=1".  I have split Cdr.lib into Cdr.lib and Cdrd.lib, but
I don't have separate directories for the object modules, so you need to
make sure that you do a "make clean" between builds if you're switching
back and forth between debug and production in the same directory.  The
simpler and safer approach is to use separate directories for different
builds.  More frequently now I just create a new temporary directory
from cvs when I want to build the server.

When all the third-party packages are in sync between the three machines
you can just copy the production binary for CdrServer.exe directly from
MAHLER.  This even works most of the time when the third-party packages
are not all in sync, but not all of the time.  The approach which always
works is to use Alan's DRV variable to point the makefile at the machine
for which the target is being built.  So for example, if I want to build
a new server for BACH, and I'm not sure the third-party packages are all
compatible between BACH and MAHLER, I do the following:

 1. Open a connection to MAHLER (telnet or Terminal Server).
 2. Map a drive to \\BACH\d$ (for example B:).
 3. Change to B:\tmp.
 4. Check out the server code (cvs co server).
 5. Change to the server directory.
 6. Invoke "nmake DRV=B:".
 7. Open a connection to BACH.
 8. Stop the CDR service.
 9. Copy the new CdrServer.exe to d:\cdr\bin.
10. Restart the CDR service.
11. Clean up the temporary build directory.

The extra steps toward the end are necessary because of course the "NET
START" and "NET STOP" commands in the _install target rule wouldn't work
on BACH if invoked on MAHLER.

============================================================================

The dependencies for the server are listed below:

  * icu (Unicode support package needed by xml4c, below)
    you can skip this if you're using the binary drop for xml4c
    download latest sources from:
        http://www.alphaworks.ibm.com/aw.nsf/download/xml4c or
        http://oss.software.ibm.com/icu/download/
    unpack to /usr/icu
    use /usr/icu/source/allinone/allinone.dsw workspace to build everything
        (Build/Batch Build/Rebuild All)
    make sure /usr/icu/bin/Release is in the search path (or Debug, for
        debugging)
    
  * xml4c (XML parser used directly by CDR Server)
    download latest sources from:
        http://www.alphaworks.ibm.com/aw.nsf/download/xml4c or
    unpack to /usr/xml4c
    use /usr/xml4c/Projects/Win32/VC6/xerces-all/xerces-all.dsw to
        build everything
    alternate approach, if you're certain you won't need to debug from 
        source code, is to pick up the latest binary drop for Win32;
        if you do this, you don't need (or want) /usr/icu/bin/Release
        in your search path
    make sure /usr/xml4c/bin is in your search path

  * expat (parser used by Sablotron's XSL/T processor)
    download latest sources from:
        http://sourceforge.net/projects/expat
    unpack to /usr/expat
    use /usr/expat/source/expat.dsw to build everything
    copy /usr/expat/source/lib/Release/expat.dll to /cdr/bin

  * js (javascript interpreter; used by sablotron)
    download latest sources from:
        ftp://ftp.mozilla.org/pub/mozilla.org/js/
        (on mmdb2 or cdrdev you can just use 'cvs update' in /usr/js/src)
    unpack to /usr/js
    cd /usr/js/src
    open jsinterp.c
    add #include "jsiter.c" at top of file
    save and close jsiterp.c
    build in /usr/js/src with 'nmake -f js.mak CFG="js - Win32 Release"'
    build in /usr/js/src with 'nmake -f js.mak CFG="js - Win32 Debug"'
    copy /usr/js/src/Release/js32.dll to /cdr/bin
    copy /usr/js/src/Debug/jsshell.exe to /cdr/bin

  * iconv (encoding support for sablotron)
    download latext libiconv from:
        http://gnuwin32.sourceforge.net/packages/libiconv.htm
    unpack to /usr/libiconv
    build in /usr/libiconv with 'nmake -f Makefile.msvc DLL=1 MFLAGS=-MD'
    copy /usr/libiconv/lib/iconv.dll to /cdr/bin

  * sablot (XSL/T parser)
    download latest sources from:
        http://www.gingerall.com/charlie/ga/xml/p_sab.xml
    unpack to /usr/sablot
    tweak src/Makefile.nt so ICONV and JS paths are correct
    build the release library using (all on one line):
        nmake EXPAT=D:\usr\Expat\Source\lib \
              EXPAT_LIB=release\expat.lib \
              ICONV=d:\cdr\bin \
              JS=d:\cdr\bin \
              -f Makefile.nt
        
    if you are debugging, unpack to /cdrdbg/sablot and build with
        nmake EXPAT=D:\usr\Expat\Source\lib \
              EXPAT_LIB=debug\expat.lib \
              ICONV=d:\cdr\bin \
              JS=d:\cdr\bin \
              -f Makefile.nt

  * regex (regular expression library)
    download latest sources from:
        http://ourworld.compuserve.com/homepages/John_Maddock/regexpp.htm
    unpack to /usr/regex
    use /usr/regex/libs/regex/build/vc6.mak to build the libraries
    copy vc6\vc6-re300l.dll to \cdr\bin
