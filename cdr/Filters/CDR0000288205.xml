<CdrDoc Type='Filter' Id='CDR0000288205'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Global Change: Insert Participating Org</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>

<!-- 
 ==================================================================
 Global Change: Insert Participating Org
 =======================================
 Created:   Volker Englisch, 2003-04-11
 
 This filter has to add a new participating organization to an 
 InScopeProtocol.
 The filter is typically invoked on all protocols with a particular
 lead organization after a new organization joins the group led by 
 that lead org.

 There are three mandatory values passed in and three additional optional
 values:
 1. leadOrgID:    This is the value of the parent organization for which a
                  participant will be added.
                  If the parent does not exist then no changes to the document
                  will be performed.
                  This ID has to match against LeadOrganizationID[@cdr:ref]. 
 2. newOrgSiteID: This is the value of the new participant to be added to the 
                  existing ProtocolSites fragment (if exist) or added as the
                  first participating site for the lead organization.
                  If the participant organization already exists under the 
                  specified parent organization the filter returns with an 
                  error.
 3. newPersonID:  This is the value of the person to be added as the specific
                  contact person under the new participant.  The value is 
                  entered as is (i.e. including fragment ID if specified).

 The three optional values are passed in as:
 4. coop:         This is the value that - if exists - specifies an optional 
                  attribute named CoopMember for the OrgSite element.
                  Valid entries are Main or Affiliate.
                  This would result in the output
                    <OrgSite CoopMember="Main">
 5. setRole:      This is the value that - if exists - overwrites the default
                  Role of Principal investigator for the SpecificPerson.
 6. setSpecificPhone:  This is the value that - if exists - specifies the 
                  default SpecificPhone element.

 ================================================================== -->
<xsl:transform              xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                            xmlns:cdr = "cips.nci.nih.gov/cdr"
                              version = "1.0">

 <xsl:output                   method = "xml" 
                 omit-xml-declaration = "no"/>

 <!--
 ================================================================
 Passed in by the caller.
 Parameter 1, 2, and 3 are mandatory.
  ================================================================ -->
 <xsl:param                      name = "leadOrgID"/>
 <xsl:param                      name = "newOrgSiteID"/>
 <xsl:param                      name = "newPersonID"/>
 <xsl:param                      name = "coop"/>
 <xsl:param                      name = "setRole"/>
 <xsl:param                      name = "setSpecificPhone"/>
 <!--
 ===================================================================
 Template to detect if the Lead org has already participants.
 =================================================================== -->
 <xsl:template                  match = "/InScopeProtocol/ProtocolAdminInfo
                                         /ProtocolLeadOrg">
  <ProtocolLeadOrg>
   <xsl:for-each               select = "@*">
    <xsl:attribute               name = "{name()}">
     <xsl:value-of             select = "."/>
    </xsl:attribute>
   </xsl:for-each>
  <xsl:apply-templates/>
  </ProtocolLeadOrg>
 </xsl:template>



<!--
 ===================================================================
 Template to add the new participant Organization if other 
 participants already exist.
 If this is the first participant for the lead org the 
 LeadOrgPersonnel template is used instead.
 =================================================================== -->
 <xsl:template                   match = "ProtocolSites">
   <xsl:call-template  name = "addSite"/>
 </xsl:template>


<!--
 ===================================================================
 Template to add the new participant Organization if no other 
 participants exist.
 The template will first output all LeadOrgPersonnel fragments and 
 then attach the new ProtocolSites fragment by calling the addSite
 template.
 =================================================================== -->
 <xsl:template                   match = "LeadOrgPersonnel">
  <LeadOrgPersonnel>
   <xsl:for-each               select = "@*">
    <xsl:attribute               name = "{name()}">
     <xsl:value-of             select = "."/>
    </xsl:attribute>
   </xsl:for-each>
   <xsl:apply-templates/>
  </LeadOrgPersonnel>

  <xsl:if                        test = "../LeadOrganizationID[@cdr:ref = 
                                                                   $leadOrgID]
                                          and
                                          not(../ProtocolSites)">
   <xsl:call-template            name = "addSite"/>
  </xsl:if>

 </xsl:template>



<!--
 ===================================================================
 Template to add the new participant Organization.
 =================================================================== -->
 <xsl:template                   name = "addSite">

  <!-- ERROR CHECK
       If the new participating site already exists for this parent
       terminate the process with an error message
       This is done by going through all parent/participant 
       combinations and checking the new combinations existence.
       ============================================================ -->
  <xsl:for-each                select = "/InScopeProtocol/ProtocolAdminInfo
                                         /ProtocolLeadOrg
                                         /ProtocolSites
                                         /OrgSite/OrgSiteID">
   <xsl:if                        test = "../../../LeadOrganizationID
                                             [@cdr:ref = $leadOrgID]
                                          and 
                                          substring-before( 
                                          concat(@cdr:ref, '#'), '#')  
                                           = substring-before(
                                             concat($newOrgSiteID, '#'), '#')">
    <xsl:message             terminate = "yes">
     <xsl:text>&lt;b&gt;Error:  New participating site (</xsl:text>
     <xsl:value-of              select = "$newOrgSiteID"/>
     <xsl:text>) already exists for this parent (</xsl:text>
     <xsl:value-of              select = "$leadOrgID"/>
     <xsl:text>)!&lt;/b&gt;</xsl:text>
    </xsl:message>
   </xsl:if>
  </xsl:for-each>
  <!-- ERROR CHECK END ============================================== -->


  <!-- Add the new participating site to the end of the list of 
       already existing sites
       ============================================================== -->
  <ProtocolSites>

  <!-- If multiple LeadOrgs exist only add the new site to the parent 
       specified.                                              
       The other LeadOrgs are displayed as is.                        
       ============================================================== -->
   <xsl:choose>
    <xsl:when                     test = "../LeadOrganizationID
                                          /@cdr:ref = $leadOrgID">

    <!-- If we are coming in to the addSite template through the ProtocolSites
         template instead of the LeadOrgPersonnel template we know that the
         LeadOrg has already at least one ProtocolSite.  
         The if block ensures that these old sites will be displayed first. 
         =================================================================== -->
     <xsl:if                      test = "not(name() = 'LeadOrgPersonnel')">
      <xsl:apply-templates/>
     </xsl:if>

    <!-- ============================================================
         Insert the new Site Information
         ============================================================ -->
     <OrgSite>
      <xsl:if                     test = "($coop = 'Main') or 
                                         ($coop = 'Affiliate')">
       <xsl:attribute             name = "CoopMember">
        <xsl:value-of           select = "$coop"/>
       </xsl:attribute>
      </xsl:if>
      <OrgSiteID  cdr:ref="{$newOrgSiteID}"/> 
                                            <!-- Organization entered by Usr-->
      <OrgSiteStatus>                       <!-- Status = Status of LeadOrg -->
       <xsl:value-of            select = "../LeadOrgProtocolStatuses
                                          /CurrentOrgStatus/StatusName"/>
      </OrgSiteStatus>
      <OrgSiteContact>
       <SpecificPerson>
        <Person                cdr:ref = "{$newPersonID}"/> 
                                            <!-- Person Entered by User    -->

       <!-- Role User entry is optional.  Default = Principle Investigator -->
       <!-- What to do if invalid Role has been entered????                -->
        <xsl:choose>
         <xsl:when                test = "$setRole">
          <Role>
           <xsl:value-of        select = "$setRole"/>
          </Role>
         </xsl:when>
         <xsl:otherwise>
          <Role>Principal investigator</Role>
         </xsl:otherwise>
        </xsl:choose>

        <xsl:if                   test = "$setSpecificPhone">
         <SpecificPhone>
          <xsl:value-of         select = "$setSpecificPhone"/>
         </SpecificPhone>
        </xsl:if>
       </SpecificPerson>
      </OrgSiteContact>
     </OrgSite>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates/>
    </xsl:otherwise>
   </xsl:choose>
  </ProtocolSites>
 </xsl:template>


 <!--
 ================================================================
 Default rule, copying back out everything just as we got it.
 ================================================================ -->
 <xsl:template                  match = "@*|comment()|*|
                                         processing-instruction()|text()">
  <xsl:copy>
   <xsl:apply-templates        select = "@*|comment()|*|
                                         processing-instruction()|text()"/>
  </xsl:copy>
 </xsl:template>

</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>