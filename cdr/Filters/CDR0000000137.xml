<CdrDoc Type='Filter' Id='CDR0000000137'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Vendor Filter: GlossaryTerm</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
  
  
<!--======================================================================
             Filter to create Vendor XML for Glossary
    ====================================================================== -->
  <xsl:transform             xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr" 
               exclude-result-prefixes = "cdr">
    
  <xsl:include href = "cdr:name:Module: Vendor Filter Templates"/>
  <xsl:include href = "cdr:name:Module: Global Filter Templates"/>
    
  <xsl:output                   method = "xml" 
                  omit-xml-declaration = "no" 
                                indent = "yes"/>  

  <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
  <xsl:param                      name = "DateFirstPub"
                                select = "''"/>

  <!-- =================================================================== 
         Copy DocId, TermName,TermDefinition, Term Pronunciation
        ================================================================= -->
   
 <xsl:template                   match = "GlossaryTerm">
  <xsl:text    disable-output-escaping = "yes">
&lt;!DOCTYPE GlossaryTerm &gt;</xsl:text>

  <xsl:element                    name = '{name()}'>
   <xsl:for-each                select = "document('cdrutil:/docid')">
    <xsl:attribute                name = "id">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:for-each>
   <xsl:if                        test = "PdqKey">
    <xsl:attribute                name = "LegacyPDQID">
     <xsl:value-of              select = "PdqKey"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "@Dictionary">
    <xsl:attribute                name = "Dictionary">
     <xsl:value-of              select = "@Dictionary"/>
    </xsl:attribute>
   </xsl:if>


   <xsl:apply-templates         select = "TermName" 
                                  mode = "copy"/>
   <xsl:apply-templates         select = "SpanishTermName" 
                                  mode = "copy"/>
   <xsl:apply-templates         select = "TermPronunciation" 
                                  mode = "copy"/>
   <xsl:apply-templates         select = "TermDefinition"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "SpanishTermDefinition"
                                  mode = "copy"/>

<!-- ===================================================================
            Copy Date First Published and Date Last Modified
     ================================================================== -->
   <xsl:variable                  name = "CtrlBlk" 
                                select = "document('cdr:/*/CdrCtl')"/>
   <xsl:choose>
    <xsl:when                     test = "$CtrlBlk/CdrDocCtl/FirstPub/Date">
      <DateFirstPublished>
      <xsl:value-of             select = "substring-before ($CtrlBlk/
                                            CdrDocCtl/FirstPub/Date,'T')"/>
      </DateFirstPublished>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template          name = "getDateFirstPub">
        <xsl:with-param           name = "date"
                                select = "$DateFirstPub"/>
      </xsl:call-template>    
    </xsl:otherwise>
   </xsl:choose>
   <xsl:apply-templates         select = "DateLastModified" 
                                  mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!-- 
 =====================================================================
 The TermDefinition and SpanishTermDefinition can contain inline 
 markup and needs to be handled with a template
 ===================================================================== -->
 <xsl:template                   match = "TermDefinition |
                                          SpanishTermDefinition"
                                  mode = "copy">
  <xsl:element                    name = "{name()}">
   <xsl:if                        test = "@Audience">
    <xsl:attribute                name = "Audience">
     <xsl:value-of              select = "@Audience"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates           mode = "copy"/>
  </xsl:element>
 </xsl:template>

</xsl:transform>]]>
</CdrDocXml>
</CdrDoc>