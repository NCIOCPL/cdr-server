<CdrDoc Type='Filter' Id='CDR0000000137'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Vendor Filter: GlossaryTerm</DocTitle>
<DocComment>CVS-V1.22: Adding GlossaryTerm Message (Bug 1891)</DocComment><ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
<!--
================================================================
$Id: CDR0000000137.xml,v 1.23 2006-10-20 21:49:52 venglisc Exp $

Filter to create Vendor XML for Glossary

$Log: not supported by cvs2svn $
================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr">
    
 <xsl:include href = "cdr:name:Module: Vendor Filter Templates"/>
    
 <xsl:output                    method = "xml" 
                  omit-xml-declaration = "no"/>  

 <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
 <xsl:param                       name = "DateFirstPub"
                                select = "''"/>

 <xsl:variable                    name = "whoAmI"
                                select = "'GlossaryTerm'"/>
 <!-- 
 =================================================================== 
 Copy DocId, TermName,TermDefinition, Term Pronunciation
 =================================================================== -->
 <xsl:template                   match = "GlossaryTerm">
  <xsl:text    disable-output-escaping = "yes">
&lt;!DOCTYPE GlossaryTerm &gt;</xsl:text>

  <xsl:variable                   name = "termName"
                                select = "normalize-space(TermName)"/>
  <xsl:element                    name = '{name()}'>
   <xsl:for-each                select = "document('cdrutil:/docid')">
    <xsl:attribute                name = "id">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:for-each>
   <xsl:if                        test = "PdqKey">
    <xsl:attribute                name = "LegacyPDQID">
     <xsl:value-of              select = "PdqKey"/>
    </xsl:attribute>
   </xsl:if>
   <!--
   Test to make sure the TermName exists and hasn't been removed
   because it was within markup
   ============================================================= -->
   <xsl:if                        test = "$termName = ''">
    <xsl:message             terminate = "no">
     <xsl:text>&lt;LI&gt;&lt;b&gt;Error:&lt;/b&gt; TermName</xsl:text>
     <xsl:text> does not exist.&lt;BR/&gt;</xsl:text>
    </xsl:message> 
   </xsl:if>

   <xsl:apply-templates         select = "TermName" 
                                  mode = "copy"/>
  
   <xsl:apply-templates         select = "TermPronunciation" 
                                  mode = "copy"/>
   
   <xsl:for-each                select = "TermDefinition">
    <TermDefinition>
     <xsl:apply-templates       select = "DefinitionText"/>
     <xsl:apply-templates       select = "Dictionary"
                                  mode = "copy"/>
     <xsl:apply-templates       select = "Audience"
                                  mode = "copy"/> 
    </TermDefinition>
   </xsl:for-each>

   <xsl:apply-templates         select = "MediaLink |
                                          TermDefinition/
                                          MediaLink |
                                          SpanishTermDefinition/
                                          MediaLink"/>
  
   <!-- xsl:for-each                select = "MediaLink">
    <xsl:apply-templates        select = "."/>
   </xsl:for-each -->

   <xsl:apply-templates         select = "SpanishTermName"
                                  mode = "copy"/>
   <xsl:for-each                select = "SpanishTermDefinition">
   
    <SpanishTermDefinition>
     <xsl:apply-templates      select  = "DefinitionText"/>
     <xsl:apply-templates       select = "Dictionary"
                                  mode = "copy"/>
     <xsl:apply-templates       select = "Audience"
                                  mode = "copy"/> 
    </SpanishTermDefinition>
   </xsl:for-each>


   <!-- 
   ===================================================================
   Copy Date First Published and Date Last Modified
   =================================================================== -->
   <xsl:variable                  name = "CtrlBlk" 
                                select = "document('cdr:/*/CdrCtl')"/>
   <xsl:choose>
    <xsl:when                     test = "$CtrlBlk/CdrDocCtl/FirstPub/Date">
     <DateFirstPublished>
      <xsl:value-of             select = "substring-before ($CtrlBlk/
                                            CdrDocCtl/FirstPub/Date,'T')"/>
     </DateFirstPublished>
    </xsl:when>
    <xsl:otherwise>
     <xsl:call-template           name = "getDateFirstPub">
      <xsl:with-param             name = "date"
                                select = "$DateFirstPub"/>
     </xsl:call-template>    
    </xsl:otherwise>
   </xsl:choose>
   <xsl:apply-templates         select = "DateLastModified" 
                                  mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!-- 
 =====================================================================
 The TermDefinition and SpanishTermDefinition can contain inline 
 markup and needs to be handled with a template
 ===================================================================== -->
 <xsl:template                    match = "DefinitionText">
  <xsl:element                     name = "{name()}">
   <xsl:apply-templates            mode = "copy"/>
  </xsl:element>
 </xsl:template>
</xsl:transform>]]>
</CdrDocXml>
</CdrDoc>