<CdrDoc Type='Filter' Id='CDR0000343376'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Copy XML for Person 2</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml      version = "1.0"?>
<!--
 ================================================================
     $Id: CDR0000343376.xml,v 1.8 2005-02-24 21:04:11 venglisc Exp $

     Filter to prepare Person addresses by using global templates
        Written by Volker Englisch

     $Log: not supported by cvs2svn $
 ================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr">

 <xsl:include  href = "cdr:name:Module: Global Filter Templates"/>
 <xsl:include  href = "cdr:name:Module: Vendor Phone Templates"/>
 <xsl:include  href = "cdr:name:Module: Vendor Address Templates"/>

 <xsl:output                    method = "xml" 
                  omit-xml-declaration = "no"/>


 <!-- 
 ==========================================================================
 Main template
 ========================================================================== -->
 <xsl:template                   match = "*">
  <xsl:copy>
   <xsl:apply-templates/>
  </xsl:copy>
 </xsl:template>


 <!-- 
 ==========================================================================
 Template to create the PersonLocations information by using the global
 address templates.
 ========================================================================== -->
 <xsl:template                   match = "PersonLocations">
  <xsl:copy>
  <xsl:variable                   name = "contactFID"
                                select = "PrivatePractice/
                                          PrivatePracticeLocation/@cdr:id |
                                          Home/@cdr:id"/>

  <xsl:for-each                 select = "PrivatePractice/
                                          PrivatePracticeLocation
                                            [@cdr:id = $contactFID] |
                                          Home
                                            [@cdr:id = $contactFID]">
   <xsl:element                   name = "{name()}">
    <xsl:for-each               select = "@*">
     <xsl:attribute               name = "{name()}">
      <xsl:value-of             select = "."/>
     </xsl:attribute>
    </xsl:for-each>
    <xsl:if                       test = "../@PreviousLocation">
     <xsl:attribute               name = "PreviousLocation">
      <xsl:value-of             select = "../@PreviousLocation"/>
     </xsl:attribute>
    </xsl:if>

    <xsl:call-template            name = "getHomePrivatePractice"/>
   </xsl:element>
  </xsl:for-each>

  <xsl:apply-templates          select = "OtherPracticeLocation"/>

  <xsl:copy-of                  select = "CIPSContact"/>
  <xsl:for-each                 select = "UpdateMode">
   <xsl:copy-of                 select = "."/>
  </xsl:for-each>
  </xsl:copy>
 </xsl:template>


 <!--
 =======================================================================
 Template for OtherPracticeLocation
 ======================================================================= -->
 <xsl:template                   match = "OtherPracticeLocation">
  <xsl:variable                   name = "orgAddressFID"
                                select = "substring-after(
                                          OrganizationLocation/
                                          Organization/@cdr:ref, '#')"/>
  <OtherPracticeLocation>
   <xsl:for-each                select = "@*">
    <xsl:attribute                name = "{name()}">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:for-each>

   <OrganizationLocation>
    <!-- 
         The OrganizationName had been saved in the previous sort of the
         Organization parents to hold the actual name since it can not 
         be determined after the sort if the first or last entry of the 
         OrganizationName element is the true org name
         =============================================================== -->
    <xsl:choose>
     <xsl:when                    test = "OrganizationLocation/
                                          PersonOrganizationName/
                                          @IncludeParentName">
      <xsl:for-each             select = "OrganizationLocation/
                                          Organization/
                                          OrganizationName">
       <OrganizationName>
        <xsl:if                   test = "../../
                                          PersonOrganizationName = .">
        <xsl:attribute            name = "cdr:ref">
         <xsl:value-of          select = "../@cdr:ref"/>
        </xsl:attribute>
        </xsl:if>
        <xsl:value-of           select = "."/>
       </OrganizationName>
      </xsl:for-each>
     </xsl:when>
     <xsl:otherwise>
      <OrganizationName> 
       <xsl:attribute             name = "cdr:ref">
        <xsl:value-of           select = "OrganizationLocation/
                                          Organization/
                                          @cdr:ref"/>
       </xsl:attribute>
       <xsl:value-of            select = "OrganizationLocation/
                                          PersonOrganizationName"/>
      </OrganizationName>
     </xsl:otherwise>
    </xsl:choose>

    <xsl:call-template            name = "getPostalAddress">
     <xsl:with-param              name = "orgAddressFID"
                                select = "$orgAddressFID"/>
    </xsl:call-template>
    <xsl:call-template            name = "getPersonOrgPhone">
     <xsl:with-param              name = "orgAddressFID"
                                select = "$orgAddressFID"/>
    </xsl:call-template>
    <xsl:call-template            name = "getPersonOrgTollFreePhone">
     <xsl:with-param              name = "orgAddressFID"
                                select = "$orgAddressFID"/>
    </xsl:call-template>
    <xsl:call-template            name = "getPersonOrgFax">
     <xsl:with-param              name = "orgAddressFID"
                                select = "$orgAddressFID"/>
    </xsl:call-template>
    <xsl:call-template            name = "getPersonOrgEmail">
     <xsl:with-param              name = "orgAddressFID"
                                select = "$orgAddressFID"/>
    </xsl:call-template>
    <xsl:call-template            name = "getPersonOrgWebSite">
     <xsl:with-param              name = "orgAddressFID"
                                select = "$orgAddressFID"/>
    </xsl:call-template>
   </OrganizationLocation>

   <xsl:copy-of                 select = "PersonTitle"/>
   <xsl:copy-of                 select = "PersonRole"/>

   <xsl:for-each                select = "ComplexAffiliation">
    <ComplexAffiliation>
     <xsl:copy-of               select = "Organization/
                                          Organization/
                                          OrganizationName"/>
     <xsl:copy-of               select = "RoleAtAffiliatedOrganization"/>
    </ComplexAffiliation>
   </xsl:for-each>
  </OtherPracticeLocation>
 </xsl:template>


 <!--
 =======================================================================
 Template to Rename element name
 ======================================================================= -->
 <xsl:template                   match = "BoardContactOrganizationName">
  <OrganizationName>
   <xsl:apply-templates/>
  </OrganizationName>
 </xsl:template>
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>