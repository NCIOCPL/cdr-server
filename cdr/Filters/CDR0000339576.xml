<CdrDoc Type='Filter' Id='CDR0000339576'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Module: InLine Markup Formatter</DocTitle>
<DocComment>CVS-V1.9: Add DocRef Element (Bug 1080)</DocComment><ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml      version = "1.0"?>
<!--
================================================================
$Id: CDR0000339576.xml,v 1.28 2008-12-10 22:15:48 venglisc Exp $

Filter handling all In-Line Markup elements of Summary Docs
Written by Volker Englisch, 2004-07-16

$Log: not supported by cvs2svn $
================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr">

 <xsl:param                       name = "thisDocID"
                                select = "document('cdrutil:/docid')"/>
  
 <!-- 
 ======================================================================
 Display a Summary Reference or ProtocolRef
 These elements should display the QC report of the particular document
 ====================================================================== -->
 <xsl:template                   match = "SummaryRef         | 
                                          ProtocolRef">
  <a>
   <xsl:attribute                 name = "href">
    <!--
    For reformatted patient summaries run a different QC report
    =========================================================== -->
    <xsl:choose>
     <xsl:when                    test = "Summary
                                           /LinkedSummaryAudience = 'Patients'
                                          and
                                          (Summary/LinkedKeyPoints
                                           or
                                           Summary/LinkedSummaryType = 
                                           concat('Complementary and ',
                                                  'alternative medicine'))">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;ReportType=pat',
                                                 '&amp;Session=guest')"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>

   <xsl:choose>
    <xsl:when                         test = "name() = 'SummaryRef'
                                              and
                                              SummaryRefText">
     <xsl:apply-templates             select = "SummaryRefText"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates/>
    </xsl:otherwise>
   </xsl:choose>
  </a>

 </xsl:template>


 <!-- 
 ======================================================================
 Display a SummaryFragmentRef or LOEFragmentRef.
 These elements should be created as links to sections within the 
 document.
 ====================================================================== -->
 <xsl:template                   match = "SummaryFragmentRef |
                                          LOEFragmentRef">
  <a>
   <xsl:attribute                 name = "class">
    <xsl:text>idLink</xsl:text>
   </xsl:attribute>
   <xsl:attribute                 name = "href">
    <xsl:choose>
     <xsl:when                    test = "$thisDocID = 
                                            substring-before(@cdr:href, '#')">
      <xsl:value-of             select = "concat('#', 
                                            substring-after(@cdr:href, '#'))"/>
     </xsl:when>
     <xsl:otherwise>
    <xsl:value-of               select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', 
                                             substring-before(@cdr:href, '#'),
                                                 '&amp;Session=guest',
                                                 '#',
                                             substring-after(@cdr:href, '#'))"/>      
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>
   <xsl:attribute                 name = "title">
    <xsl:value-of               select = "name()"/>
   </xsl:attribute>

   <xsl:apply-templates/>
  </a>
 </xsl:template>


 <!-- 
 ======================================================================
 Display a Documentation Reference as a hyperlink
 ====================================================================== -->
 <xsl:template                   match = "DocumentationRef   |
                                          DocumentationLink">
  <xsl:variable                   name = "docRef"
                                select = "@cdr:href"/>
  <a>
   <xsl:attribute                 name = "href">
    <xsl:text>/cgi-bin/cdr/Filter.py?DocId=</xsl:text>
    <xsl:value-of               select = "$docRef"/>  
    <xsl:text>&amp;Filter=name:Documentation+Help+Screens+Filter</xsl:text>
   </xsl:attribute>
   <xsl:apply-templates/>
  </a>
 </xsl:template>


 <!-- 
 ======================================================================
 Display a Documentation Reference as a hyperlink
 ====================================================================== -->
 <xsl:template                   match = "DocumentationFragmentRef   |
                                          DocumentationFragmentLink">
  <xsl:variable                   name = "docRef"
                                select = "substring-before(@cdr:href, '#')"/>
  <xsl:variable                   name = "docFrag"
                                select = "substring-after(@cdr:href, '#')"/>
  <a>
   <xsl:attribute                 name = "href">
    <xsl:text>/cgi-bin/cdr/Filter.py?DocId=</xsl:text>
    <xsl:value-of               select = "$docRef"/> 
    <xsl:text>#</xsl:text>
    <xsl:value-of               select = "$docFrag"/> 
    <xsl:text>&amp;Filter=name:Documentation+Help+Screens+Filter</xsl:text>
   </xsl:attribute>
   <xsl:apply-templates/>
  </a>
 </xsl:template>


 <!-- 
 ======================================================================
 Link to DrugInfoSummaries
 ====================================================================== -->
 <xsl:template                   match = "DrugSummaryRef">
  <xsl:choose>
   <xsl:when                      test = "Deletion">
    <a>
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <span class="deleteDisRef">
      <xsl:value-of           select = "."/>
     </span>
    </a>
   </xsl:when>
   <xsl:when                      test = "Insertion">
    <a>
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <span class="insertDisRef">
      <xsl:value-of           select = "."/>
     </span>
    </a>
   </xsl:when>
   <xsl:otherwise>
    <a>
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <xsl:value-of              select = "."/>
    </a>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ===================================================================
 Decide which version of the GlossaryTermRef/LOERef to display
 =================================================================== -->
 <xsl:template                   match = "GlossaryTermRef | LOERef">
  <xsl:choose>
   <xsl:when                      test = "/Summary/SummaryMetaData/
                                          SummaryAudience = 
                                                          'Health professionals'
                                          and 
                                          /Summary/SummaryMetaData/
                                          SummaryType != 
                                       'Complementary and alternative medicine'
                                          and
                                          /Summary/SummaryMetaData/
                                          SummaryLanguage = 'English'">
    <xsl:apply-templates        select = "."  
                                  mode = "HPE"/>
   </xsl:when>
   <xsl:when                      test = "/Summary/
                                          SummaryMetaData/SummaryAudience =
                                          'Health professionals' 
                                          and 
                                          /Summary/SummaryMetaData/
                                          SummaryLanguage = 'Spanish'">
    <xsl:apply-templates        select = "."  
                                  mode = "HPS"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                    test = "$whoAmI = 'ProtHPQc'">
      <xsl:apply-templates      select = "."  
                                  mode = "HPE"/>
     </xsl:when>
     <xsl:when                    test = "$whoAmI = 'ProtPatQc'">
      <xsl:apply-templates      select = "."  
                                  mode = "PE"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates      select = "."  
                                  mode = "PE"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose> 
 </xsl:template>


 <!-- 
 ======================================================================
 Link to glossaryTermRefs - Patients RS and Protocol
 Note: Patient Version Summaries are not being reviewed by an
       Advisory board according to MB.  I'm not implementing a 
       different style for advisory-board markup for this template.
                                                       VE, 2005-05-10
 ====================================================================== -->
 <xsl:template                   match = "GlossaryTermRef | LOERef"
                                  mode = "PE">
  <xsl:choose>
   <xsl:when                      test = "Deletion">
    <a>
     <xsl:attribute               name = "href">
      <xsl:choose>
       <xsl:when                  test = "name() = 'LOERef'">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <span class="deleteGlossaryTerm">
      <xsl:value-of           select = "."/>
     </span>
    </a>
   </xsl:when>
   <xsl:otherwise>
    <a>
     <xsl:attribute               name = "href">
      <xsl:choose>
       <xsl:when                  test = "name() = 'LOERef'">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:attribute>
     <xsl:attribute               name = "target">
      <xsl:text>_blank</xsl:text>
     </xsl:attribute>
     <xsl:value-of              select = "."/>
    </a>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

   
 <!-- 
 ======================================================================
 Link to glossaryTermRefs - Patients BU
 Note: Patient Version Summaries are not being reviewed by an
       Advisory board according to MB.  I'm not implementing a 
       different style for advisory-board markup for this template.
                                                       VE, 2005-05-10
 ====================================================================== -->
 <xsl:template                   match = "GlossaryTermRef | LOERef"
                                  mode = "PEBU">
  <xsl:choose>
   <xsl:when                      test = "Deletion">
    <xsl:if                       test = "Deletion/@RevisionLevel = 'proposed'">
      <a>
       <xsl:attribute             name = "href">
        <xsl:choose>
         <xsl:when                test = "name() = 'LOERef'">
          <xsl:value-of         select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:attribute>
       <span class="deleteGlossaryTerm">
        <xsl:value-of           select = "."/>
       </span>
      </a>
    </xsl:if>
   </xsl:when>
   <xsl:otherwise>
    <a>
     <xsl:attribute               name = "href">
      <xsl:choose>
       <xsl:when                  test = "name() = 'LOERef'">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=set:QC+',
                                                 'GlossaryTermName+',
                                                 'with+Concept+Set')"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:attribute>
     <xsl:value-of              select = "."/>
    </a>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

   
 <!-- 
 ======================================================================
 Link to glossaryTermRefs - English Health Professional
 ====================================================================== -->
 <xsl:template                   match = "GlossaryTermRef | LOERef"
                                  mode = "HPE" >
  <xsl:choose>
   <xsl:when                      test = "Deletion">
    <xsl:choose>
     <xsl:when                    test = "Deletion/@Source = 'advisory-board'">
      <a>
       <xsl:attribute             name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
<!--
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=name:Glossary',
                                                 '+Term+Display+for+HP',
                                                 '+Summaries')"/>
-->
       </xsl:attribute>
       <span class="deleteGlossaryTerm_ad">
        <xsl:value-of           select = "."/>
       </span>
      </a>
     </xsl:when>
     <xsl:otherwise>
      <a>
       <xsl:attribute             name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
<!--
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=name:Glossary',
                                                 '+Term+Display+for+HP',
                                                 '+Summaries')"/>
-->
       </xsl:attribute>
       <span class="deleteGlossaryTerm">
        <xsl:value-of           select = "."/>
       </span>
      </a>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                    test = "Insertion/@Source = 'advisory-board'">
      <a>
       <xsl:attribute             name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
<!--
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                'DocId=', @cdr:href,
                                                 '&amp;Filter=name:Glossary',
                                                 '+Term+Display+for+HP',
                                                 '+Summaries')"/>
-->
       </xsl:attribute>
       <span class="insertGlossaryTerm_ad">
        <xsl:value-of           select = "."/>
       </span>
      </a>
     </xsl:when>
     <xsl:otherwise>
      <a>
       <xsl:attribute             name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
<!--
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                'DocId=', @cdr:href,
                                                 '&amp;Filter=name:Glossary',
                                                 '+Term+Display+for+HP',
                                                 '+Summaries')"/>
-->
       </xsl:attribute>
       <xsl:value-of            select = "."/>
      </a>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ======================================================================
 Link to glossaryTermRefs - Spanish Health Professional
 ====================================================================== -->
 <xsl:template                   match = "GlossaryTermRef | LOERef"
                                  mode = "HPS" >
  <xsl:choose>
   <xsl:when                      test = "Deletion">
    <xsl:choose>
     <xsl:when                    test = "Deletion/@Source = 'advisory-board'">
      <a>
       <xsl:attribute             name = "href">














      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
<!--
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=name:Glossary',
                                                 '+Term+Display+for+HPS',
                                                 '+Summaries')"/>
-->
       </xsl:attribute>
       <span class="deleteGlossaryTerm_ad">
        <xsl:value-of           select = "."/>
       </span>
      </a>
     </xsl:when>
     <xsl:otherwise>
      <a>
       <xsl:attribute             name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
<!--
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=name:Glossary',
                                                 '+Term+Display+for+HPS',
                                                 '+Summaries')"/>
-->
       </xsl:attribute>
       <span class="deleteGlossaryTerm">
        <xsl:value-of           select = "."/>
       </span>
      </a>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                    test = "Insertion/@Source = 'advisory-board'">
      <a>
       <xsl:attribute             name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
<!--
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=name:Glossary',
                                                 '+Term+Display+for+HPS',
                                                 '+Summaries')"/>
-->
       </xsl:attribute>
       <span class="insertGlossaryTerm_ad">
        <xsl:value-of            select = "."/>
       </span>
      </a>
     </xsl:when>
     <xsl:otherwise>
      <a>
       <xsl:attribute             name = "href">
      <xsl:value-of             select = "concat('/cgi-bin/cdr/QcReport.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Session=guest')"/>
<!--
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=name:Glossary',
                                                 '+Term+Display+for+HPS',
                                                 '+Summaries')"/>
-->
       </xsl:attribute>
       <xsl:value-of            select = "."/>
      </a>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 =====================================================================
 Display Itemized Lists for KeyPoints
 ===================================================================== -->
 <xsl:template                   match = "KeyPointsList[@Style='bullet'] |
                                          KeyPointsList[@Style='dash']">
  <ul>
   <xsl:attribute                 name = "class">
    <xsl:choose>
     <xsl:when                    test = "@Style = 'bullet'">        
      <xsl:text>disc</xsl:text>   
     </xsl:when>
     <xsl:when                    test = "@Style = 'dash'">
      <xsl:text>square</xsl:text>      
     </xsl:when>
    </xsl:choose> 
   </xsl:attribute>



   <xsl:for-each                select = "ListItem">
    <!-- Don't display empty list items -->
    <xsl:if                       test = "not(. = '')">
     <li>
      <xsl:apply-templates/>
     </li>
    </xsl:if>
   </xsl:for-each>
  </ul>
 </xsl:template>


 <!-- 
 =====================================================================
 Display a Subscript 
 ===================================================================== -->
 <xsl:template                   match = "Subscript">
  <sub>
   <xsl:apply-templates/>
  </sub>
 </xsl:template>


 <!-- 
 =====================================================================
 Display a Superscript 

 ===================================================================== -->
 <xsl:template                   match = "Superscript">
  <sup>
   <xsl:apply-templates/>
  </sup>
 </xsl:template>


 <!-- 
 =====================================================================
 Display tables in old format
 ===================================================================== -->
 <xsl:template                   match = "TT">
  <pre><xsl:apply-templates/></pre>
 </xsl:template>


 <!-- 
 =====================================================================
 Create a link to another document or website 
 ===================================================================== -->
 <xsl:template                   match = "ExternalRef">
  <xsl:variable                   name = "nlink" 
                                select = "@cdr:xref"/>
  <a href="{$nlink}">
   <xsl:apply-templates/>
  </a>
 </xsl:template>


 <!-- 
 =====================================================================
 Display Strong 
 ===================================================================== -->
 <xsl:template                   match = "Strong">
  <b>
   <xsl:apply-templates/>
  </b>
 </xsl:template>


 <!-- 
 =====================================================================
 Display Strong within a list but only if it's listed as the very 
 first element within a listitem (used as a "ListItemTitle")
 ===================================================================== -->
 <xsl:template                   match = "Strong"
                                  mode = "compactNo">
  <xsl:choose>
  <xsl:when                       test = "name(..) = 'ListItem'
                                          and 
                                          preceding-sibling::text() = ''">
    <p class="itemtitle">
     <xsl:apply-templates/>
    </p>
   </xsl:when>
   <xsl:otherwise>
    <b>
     <xsl:apply-templates/>
    </b>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 =====================================================================
 Display Emphasis, ScientificName, ForeignWord, GeneName
 ===================================================================== -->
 <xsl:template                   match = "Emphasis       | 
                                          ScientificName |
                                          ForeignWord    | 
                                          GeneName">
  <i>
   <xsl:apply-templates/>
  </i>
 </xsl:template>


 <!-- 
 =====================================================================
 Display a Note element without markup
 ===================================================================== -->
 <xsl:template                   match = "Note"
                                  mode = "R">
  <i>
   <xsl:text> [</xsl:text>

   <xsl:choose>
    <xsl:when                     test = "//SummaryLanguage = 'Spanish'"> 
     <xsl:text>Nota: </xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>Note: </xsl:text>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates/>

   <xsl:text>] </xsl:text>
  </i>
 </xsl:template> 


 <!-- 
 =====================================================================
 Display a note with mark-up (Redline/Strikeout)
 ===================================================================== -->
 <xsl:template                   match = "Note" 
                                  mode = "RS">
  <i>
   <!-- 
   Display the left bracket for the Note
   =================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "Insertion/@Source = 'advisory-board'
                                          or 
                                          Deletion/@Source = 'advisory-board'">
     <xsl:choose>
      <xsl:when                   test = "Insertion/@RevisionLevel='approved'
                                          or
                                          Insertion/@RevisionLevel='publish'">
       <span class="insertapproved_ad">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Insertion/@RevisionLevel ='proposed'">
       <span class="insertproposed_ad">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">
       <span class="deleteapproved_ad">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'proposed'">
       <span class="deleteproposed_ad">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text> [</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when                   test = "Insertion/@RevisionLevel='approved'
                                          or
                                          Insertion/@RevisionLevel='publish'">
       <span class="insertapproved">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Insertion/@RevisionLevel ='proposed'">
       <span class="insertproposed">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">
       <span class="deleteapproved">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'proposed'">
       <span class="deleteproposed">
        <xsl:text> [</xsl:text>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text> [</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>


   <!--
   Display the Spanish "Nota: " string properly marked up
   ========================================================================= -->
   <xsl:choose>
    <xsl:when                     test = "//SummaryLanguage ='Spanish'"> 
     <xsl:choose>
      <xsl:when                   test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
       <xsl:choose>
        <xsl:when                 test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertapproved_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Insertion/@RevisionLevel 
                                                                  = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertproposed_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteapproved_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteproposed_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>Nota: </xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
       <xsl:choose>
        <xsl:when                 test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertapproved'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Insertion/@RevisionLevel 
                                                                  = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertproposed'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteapproved'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteproposed'"/>
          <xsl:with-param         name = "myString"
                                select = "'Nota: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>Nota: </xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>

    <!--
    Display the "Note: " string properly marked up
    ======================================================================== -->
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when                   test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
       <xsl:choose>
        <xsl:when                 test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertapproved_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Insertion/@RevisionLevel 
                                                                  = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertproposed_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">

         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteapproved_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteproposed_ad'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>Note: </xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
       <xsl:choose>
        <xsl:when                 test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertapproved'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Insertion/@RevisionLevel 
                                                                  = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'insertproposed'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel = 'publish'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"

                                select = "'deleteapproved'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:when                 test = "Deletion/@RevisionLevel = 'proposed'">
         <xsl:call-template       name = "setCSS">
          <xsl:with-param         name = "myCSS"
                                select = "'deleteproposed'"/>
          <xsl:with-param         name = "myString"
                                select = "'Note: '"/>
         </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>Note: </xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>

   <!--
   Display the text properly marked up
   ====================================================================== -->
   <xsl:apply-templates/>

   <!-- 
   Display the right bracket for the Note
   =================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "Insertion/@Source = 'advisory-board' 
                                          or
                                          Deletion/@Source = 'advisory-board'">
     <xsl:choose>
      <xsl:when                   test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
       <span class="insertapproved_ad">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Insertion/@RevisionLevel ='proposed'">
       <span class="insertproposed_ad">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel='publish'">
       <span class="deleteapproved_ad">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'proposed'">
       <span class="deleteproposed_ad">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>] </xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when                   test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
       <span class="insertapproved">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Insertion/@RevisionLevel ='proposed'">
       <span class="insertproposed">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'approved'
                                          or
                                          Deletion/@RevisionLevel='publish'">
       <span class="deleteapproved">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:when                   test = "Deletion/@RevisionLevel = 'proposed'">
       <span class="deleteproposed">
        <xsl:text>] </xsl:text>
       </span>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>] </xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>
  </i>
 </xsl:template> 


 <!-- 
 =====================================================================
 Template to display the text with appropriate markup.
 ===================================================================== -->
 <xsl:template                    name = "setCSS">
  <xsl:param                      name = "myCSS"/>
  <xsl:param                      name = "myString"/>
  <span class="{$myCSS}">
   <xsl:value-of                select = "$myString"/>
  </span>
 </xsl:template>


 <!-- 
 =====================================================================
 Display a note with markup (Bold/Underline)   
 ===================================================================== -->
 <xsl:template                   match = "Note" 
                                  mode = "BU">
  <!-- Don't display empty Note elements -->
  <xsl:if                         test = "not(.='')">
   <i>
    <!-- 
    Display the left bracket for the Note
    =================================================================== -->
    <xsl:choose>
     <xsl:when                    test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel ='publish'">
        <span class="insertapproved_ad">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Insertion/@RevisionLevel ='proposed'">
        <span class="insertproposed_ad">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>

       <xsl:when                  test = "Deletion/@RevisionLevel = 'proposed'">
        <span class="deleteproposed_ad">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <xsl:if                   test = "not(Deletion/@RevisionLevel 
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel 
                                                 = 'publish')">
         <xsl:text> [</xsl:text>
        </xsl:if>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel ='publish'">
        <span class="insertapproved">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Insertion/@RevisionLevel ='proposed'">
        <span class="insertproposed">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Deletion/@RevisionLevel = 'proposed'">
        <span class="deleteproposed">
         <xsl:text> [</xsl:text>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <xsl:if                   test = "not(Deletion/@RevisionLevel 
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel 
                                                 = 'publish')">
         <xsl:text> [</xsl:text>
        </xsl:if>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>

    <!--
    Display the Spanish "Nota: " string properly marked up
    ======================================================================== -->
    <xsl:choose>
     <xsl:when                    test = "//SummaryLanguage ='Spanish'"> 
      <xsl:choose>
       <xsl:when                  test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertapproved_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>

         </xsl:when>
         <xsl:when                test = "Insertion/@RevisionLevel ='proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertproposed_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Deletion/@RevisionLevel = 'proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'deleteproposed_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:otherwise>
          <xsl:if                 test = "not(Deletion/@RevisionLevel 
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel
                                                 = 'publish')">
           <xsl:text>Nota: </xsl:text>
          </xsl:if>
         </xsl:otherwise>
        </xsl:choose>

       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertapproved'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Insertion/@RevisionLevel ='proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertproposed'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Deletion/@RevisionLevel = 'proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'deleteproposed'"/>
           <xsl:with-param        name = "myString"
                                select = "'Nota: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:otherwise>
          <xsl:if                 test = "not(Deletion/@RevisionLevel 
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel
                                                 = 'publish')">
           <xsl:text>Nota: </xsl:text>
          </xsl:if>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>

     <!--
     Display the "Note: " string properly marked up
     ======================================================================= -->
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertapproved_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Insertion/@RevisionLevel ='proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertproposed_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Deletion/@RevisionLevel = 'proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'deleteproposed_ad'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:otherwise>
          <xsl:if                 test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel 
                                                 = 'publish')">
           <xsl:text>Note: </xsl:text>
          </xsl:if>
         </xsl:otherwise>
        </xsl:choose>

       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertapproved'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Insertion/@RevisionLevel ='proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'insertproposed'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:when                test = "Deletion/@RevisionLevel = 'proposed'">
          <xsl:call-template      name = "setCSS">
           <xsl:with-param        name = "myCSS"
                                select = "'deleteproposed'"/>
           <xsl:with-param        name = "myString"
                                select = "'Note: '"/>
          </xsl:call-template>
         </xsl:when>
         <xsl:otherwise>
          <xsl:if                 test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel 
                                                 = 'publish')">
           <xsl:text>Note: </xsl:text>
          </xsl:if>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>

    <!--
    Display the text properly marked up
    ====================================================================== -->
    <xsl:choose>
     <xsl:when                    test = "Insertion/@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
        <span class="insertapproved_ad">
         <xsl:apply-templates/>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <span class="insertproposed_ad">
         <xsl:apply-templates/>
        </span>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:when                    test = "Deletion/@Source = 'advisory-board'">
      <span class="deleteproposed_ad">
       <xsl:apply-templates/>
      </span>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates/>
     </xsl:otherwise>
    </xsl:choose>

    <!-- 
    Display the right bracket for the Note
    =================================================================== -->
    <xsl:choose>
     <xsl:when                    test = "Insertion/@Source = 'advisory-board'
                                          or
                                          Deletion/@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
        <span class="insertapproved_ad">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Insertion/@RevisionLevel ='proposed'">
        <span class="insertproposed_ad">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Deletion/@RevisionLevel = 'proposed'">
        <span class="deleteproposed_ad">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <xsl:if                   test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel 
                                                 = 'publish')">  
          <xsl:text>] </xsl:text>
        </xsl:if>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "Insertion/@RevisionLevel = 'approved'
                                          or
                                          Insertion/@RevisionLevel = 'publish'">
        <span class="insertapproved">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Insertion/@RevisionLevel ='proposed'">
        <span class="insertproposed">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:when                  test = "Deletion/@RevisionLevel = 'proposed'">
        <span class="deleteproposed">
         <xsl:text>] </xsl:text>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <xsl:if                   test = "not(Deletion/@RevisionLevel
                                                 = 'approved')
                                          and
                                          not(Deletion/@RevisionLevel 
                                                 = 'publish')">  
          <xsl:text>] </xsl:text>
        </xsl:if>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>

   </i>
  </xsl:if>
 </xsl:template> 


 <!-- 
 =====================================================================
 Display TOC Summary Title with Deletion and Insertion
 ===================================================================== -->
 <xsl:template                   match = "SummaryTitle"
                                  mode = "TOC">
  <h2>
   <xsl:apply-templates />
  </h2>
  <xsl:apply-templates          select = "../AltTitle"
                                  mode = "TOC"/>
 </xsl:template> 

 <!-- 
 =====================================================================
 Display summary alt titles in TOC.
 ===================================================================== -->
 <xsl:template                   match = "AltTitle"
                                  mode = "TOC">
  <xsl:apply-templates/>
  <br/>
 </xsl:template>


 <!-- 
 =====================================================================
 Display summary titles in TOC.
 ===================================================================== -->
 <xsl:template                   match = "Title" 
                                  mode = "TOC">
  <xsl:apply-templates/>

 </xsl:template>


 <!-- 
 =====================================================================
 Display SummarySection in TOC.
 ===================================================================== -->
 <xsl:template                    name = "TocSummarySection">
  <xsl:param                      name = "level"/> 

  <xsl:if                         test = "Title"> 
   <li>
    <xsl:apply-templates        select = "Title"
                                  mode = "TOC"/>
   </li>
  </xsl:if>                   

  <xsl:if                         test = "SummarySection and
                                            $level &lt; 3">
   <ul Class="lnone">
    <xsl:for-each               select = "SummarySection">
      <xsl:call-template          name = "TocSummarySection">
       <xsl:with-param            name = "level"
                                select = "$level + 1"/>
      </xsl:call-template>
    </xsl:for-each>
   </ul>
  </xsl:if>
 </xsl:template>


 <!--
 ================================================================
 Template to create a target element for SummaryFragmetRef
 elements.  The SummarySection cdr:id attribute is being attached
 to the Title element (H1, H2, ...) in the HTML output. 
 For SummarySections without a title the SummaryFragmentRef would
 not work.  We need to create a target for the link - using a 
 <span id=NNN> to make the links work.
 ================================================================ -->
 <xsl:template                   match = "SummarySection">
  <xsl:variable                   name = "title"
                                select = "child::Title"/>

  <xsl:choose>
   <xsl:when                      test = "count($title) = 0">
    <span>
     <xsl:call-template             name = "addIdLinkTarget">
      <xsl:with-param               name = "id"
                                  select = "@cdr:id"/>
     </xsl:call-template>
     <xsl:apply-templates/>
    </span>
   </xsl:when>
   <xsl:otherwise>
    <xsl:apply-templates/>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ============================================================
 Display titles for Patient Summaries
 ============================================================= -->
 <xsl:template                   match = "Title"
                                  mode = "PT">
  <xsl:variable                   name = "ancestors"
                                select = "ancestor::SummarySection"/>

  <xsl:choose>
   <xsl:when                      test = "count($ancestors) = 2">
    <h3>
     <xsl:call-template             name = "addIdLinkTarget">
      <xsl:with-param               name = "id"
                                  select = "../@cdr:id"/>
     </xsl:call-template>
     <xsl:apply-templates/>
    </h3>
   </xsl:when>
   <xsl:when                      test = "count($ancestors) &gt; 2">
    <h4>
     <xsl:call-template             name = "addIdLinkTarget">
      <xsl:with-param               name = "id"
                                  select = "../@cdr:id"/>
     </xsl:call-template>
     <xsl:apply-templates/>
    </h4>
   </xsl:when>
  </xsl:choose>
 </xsl:template>


 <!-- 
 =====================================================================
 Display a summary section title depending on how many 
 SummarySection in its ancestors. We may have to use
 a mode here to avoid unintended usage in documents that
 are not summaries, but with Title.
 Fixed RMK 2003-10-14.
 ===================================================================== -->
 <xsl:template                   match = "Title"
                                  mode = "HT">
  <xsl:variable                   name = "ancestors"
                                select = "ancestor::SummarySection"/>
  <xsl:choose>
   <xsl:when                      test = "count($ancestors) = 1">
    <!-- The first level header is already displayed as SectionTitle -->
    <!-- h2><xsl:apply-templates/></h2 -->
   </xsl:when>
   <xsl:when                      test = "count($ancestors) = 2">
    <h3>
     <xsl:call-template             name = "addIdLinkTarget">
      <xsl:with-param               name = "id"
                                  select = "../@cdr:id"/>
     </xsl:call-template>
     <xsl:apply-templates/></h3>
   </xsl:when>
   <xsl:otherwise>
    <h4>
     <xsl:call-template             name = "addIdLinkTarget">
      <xsl:with-param               name = "id"
                                  select = "../@cdr:id"/>
     </xsl:call-template>
     <xsl:apply-templates/></h4>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>
 

 <!-- 
 =====================================================================
 Display Paragraphs 
 ===================================================================== -->
 <xsl:template                   match = "Para">
  <p>
   <xsl:call-template             name = "addIdLinkTarget"/>
   <xsl:apply-templates/>
  </p>
 </xsl:template>


 <!-- 
 ===============================================================
 Display Paragraphs in a ListItem of a compacted list
 =============================================================== -->
 <xsl:template                   match = "Para"
                                  mode = "compactNo">
  <xsl:if                         test = "preceding-sibling::self = 'Para'">
   [FIX ME]
  </xsl:if>

  <p class="nospace">
   <xsl:apply-templates           mode = "compactNo"/>
  </p>
 </xsl:template> 


  <!-- 
 =====================================================================
 Display an itemized list
 ===================================================================== -->
 <xsl:template                   match = "ItemizedList">
  <!-- Ensure that Para and List are separated by a blank 
       line for Compact=No -->
  <xsl:if                         test = "not(preceding-sibling::self = 'Para')
                                          and
                                          ../../@Compact
                                          or
                                          preceding-sibling::self = ''">
   <p/>
  </xsl:if>
  <xsl:apply-templates          select = "ListTitle"/>
  <!-- Handle ListItem now. -->
  <ul>
   <xsl:attribute                 name = "class">
    <xsl:choose>
     <xsl:when                    test = "@Style = 'bullet'">        
      <xsl:text>disc</xsl:text>   
     </xsl:when>
     <xsl:when                    test = "@Style = 'dash'">
      <xsl:text>square</xsl:text>      
     </xsl:when>
     <xsl:when                    test = "@Style = 'simple'">
      <xsl:text>lnone</xsl:text>     
     </xsl:when> 
    </xsl:choose> 
   </xsl:attribute>
   <xsl:call-template             name = "addIdLinkTarget">
    <xsl:with-param               name = "id"
                                select = "@cdr:id"/>
   </xsl:call-template>


   <xsl:choose>
    <xsl:when                     test = "@Compact">
     <xsl:apply-templates       select = "ListItem"
                                  mode = "compactNo"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates       select = "ListItem"/>
    </xsl:otherwise>
   </xsl:choose>
  </ul>  
 </xsl:template>  


 <!-- 
 =====================================================================
 Display an itemized list - NEW
 ===================================================================== -->
 <xsl:template                   match = "ItemizedList"
                                  mode = "compactNo">
  <!-- Ensure that Para and List are separated by a blank line for Compact=No-->
  <xsl:if                         test = "not(preceding-sibling::self = 'Para')
                                          and
                                          ../../@Compact">
   <p/>
  </xsl:if>
  <xsl:apply-templates          select = "ListTitle"/>
  <!-- Handle ListItem now. -->
  <ul>
   <xsl:attribute                 name = "class">
    <xsl:choose>
     <xsl:when                    test = "@Style = 'bullet'">        
      <xsl:text>disc</xsl:text>   
     </xsl:when>
     <xsl:when                    test = "@Style = 'dash'">
      <xsl:text>square</xsl:text>      
     </xsl:when>
     <xsl:when                    test = "@Style = 'simple'">
      <xsl:text>lnone</xsl:text>     
     </xsl:when>
    </xsl:choose> 
   </xsl:attribute>
   <xsl:call-template             name = "addIdLinkTarget">
    <xsl:with-param               name = "id"
                                select = "@cdr:id"/>
   </xsl:call-template>

   <xsl:choose>
    <xsl:when                     test = "@Compact">
     <xsl:apply-templates       select = "ListItem"
                                  mode = "compactNo"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates       select = "ListItem"/>
    </xsl:otherwise>
   </xsl:choose>
  </ul>  
 </xsl:template>  


 <!-- 
 =====================================================================
 Display an ordered list
 ===================================================================== -->
 <xsl:template                   match = "OrderedList">
  <!-- Ensure that Para and List are separated by a blank line for Compact=No-->
  <xsl:if                         test = "not(preceding-sibling::self = 'Para')
                                          and
                                          ../../@Compact">
   <p/>
  </xsl:if>
  <xsl:apply-templates          select = "ListTitle"/>
  <ol>
   <xsl:attribute                 name = "Class">
    <xsl:choose>
     <xsl:when                    test = "@Style = 'UAlpha'">        
      <xsl:text>A</xsl:text>

     </xsl:when>
     <xsl:when                    test = "@Style = 'LAlpha'">
      <xsl:text>little-alpha</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'URoman'">
      <xsl:text>I</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'LRoman'">
      <xsl:text>little-roman</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'Arabic'">
      <xsl:text>d</xsl:text>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>none</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>
   <xsl:call-template             name = "addIdLinkTarget">
    <xsl:with-param               name = "id"
                                select = "@cdr:id"/>
   </xsl:call-template>

   <xsl:choose>
    <xsl:when                     test = "@Compact">
     <xsl:apply-templates       select = "ListItem"
                                  mode = "compactNo"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates       select = "ListItem"/>
    </xsl:otherwise>
   </xsl:choose>
  </ol>
 </xsl:template>        
 

 <!-- 
 =====================================================================
 Display an ordered list
 ===================================================================== -->
 <xsl:template                   match = "OrderedList"
                                  mode = "compactNo">
  <!-- Ensure that Para and List are separated by a blank line for Compact=No-->
  <xsl:if                         test = "not(preceding-sibling::self = 'Para')
                                          and
                                          ../../@Compact">
   <p/>
  </xsl:if>
  <xsl:apply-templates          select = "ListTitle"/>
  <ol>
   <xsl:attribute                 name = "Class">
    <xsl:choose>
     <xsl:when                    test = "@Style = 'UAlpha'">        
      <xsl:text>A</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'LAlpha'">
      <xsl:text>little-alpha</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'URoman'">
      <xsl:text>I</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'LRoman'">
      <xsl:text>little-roman</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'Arabic'">
      <xsl:text>d</xsl:text>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>none</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>
   <xsl:call-template             name = "addIdLinkTarget">
    <xsl:with-param               name = "id"
                                select = "@cdr:id"/>
   </xsl:call-template>

   <xsl:choose>
    <xsl:when                     test = "@Compact">
     <xsl:apply-templates       select = "ListItem"
                                  mode = "compactNo"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:apply-templates       select = "ListItem"/>
    </xsl:otherwise>
   </xsl:choose>
  </ol>
 </xsl:template>        
 

 <!-- 
 =====================================================================
 Display a list item but suppress items without content.
 ===================================================================== -->
 <xsl:template                   match = "ListItem">
  <xsl:if                         test = "not(. = '')">
   <li>
    <xsl:choose>
     <xsl:when                    test = "../@Compact">
      <xsl:apply-templates/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates        mode = "compactNo"/>
     </xsl:otherwise>
    </xsl:choose>
   </li>
  </xsl:if>
 </xsl:template>


 <!-- 
 =====================================================================
 Display a list item within a compacted list but suppress items 
 without content.
 ===================================================================== -->
 <xsl:template                   match = "ListItem"
                                  mode = "compactNo">
  <xsl:if                         test = "not(. = '')">
   <xsl:choose>
    <xsl:when                     test = "position() = last()">

     <li>

      <xsl:apply-templates/>
     </li>
    </xsl:when>
    <xsl:otherwise>
     <li class="addspace">
      <xsl:apply-templates/>
     </li>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:if>
 </xsl:template>


 <!-- 
 ======================================================================
 Template handling ListTitle
 ====================================================================== -->
 <xsl:template                   match = "ListTitle">
  <xsl:choose>
   <xsl:when                      test = "name(../..) = 'SummarySection'">
    <p class="listtitletop">
     <xsl:apply-templates/>
    </p>
   </xsl:when>
   <xsl:otherwise>
    <p class="listtitle">
     <xsl:apply-templates/>
    </p>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ======================================================================
 Template to replace the MediaID element with a little table as a 
 place holder for the image
 ====================================================================== -->
 <xsl:template                   match = "MediaID">
  <!-- xsl:param                      name = "DisplayImages"
                                select = "''"/ -->
  <xsl:choose>
   <xsl:when                      test = "$DisplayImages = 'Y'">
    <xsl:apply-templates        select = "."
                                  mode = "summary"/>
   </xsl:when>
   <xsl:otherwise>
  <center>
   <table width="100%" border="0" 
          style="background-color: #CCFFFF" colspacing="3">
    <xsl:call-template            name = "addIdLinkTarget">
     <xsl:with-param              name = "id"
                                select = "../@cdr:id"/>
    </xsl:call-template>
    <tr>
     <td width="30%" align="right" valign="top">
      <br/>
      <b>Image:</b>
     </td>
     <td width="70%" align="left">
      <br/>
      <xsl:text> </xsl:text>
      <xsl:value-of             select = "Media/
                                          MediaTitle"/>
      <xsl:text> </xsl:text>
      <br/><br/>
     </td>
    </tr>
   </table>
  </center>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ======================================================================
 Template to replace the MediaID element with a little table as a 
 place holder for the image
 ====================================================================== -->
 <xsl:template                   match = "MediaID"
                                  mode = "summary">
  <center>
   <table width="100%" border="0" 
          style="background-color: #CCCCFF" colspacing="3">
    <xsl:call-template            name = "addIdLinkTarget">
     <xsl:with-param              name = "id"
                                select = "../@cdr:id"/>
    </xsl:call-template>
    <tr>
     <td align="right" valign="top">
      <br/>
      <b>
       <xsl:choose>
        <xsl:when                 test = "Media/MediaTitle">
         <xsl:value-of            select = "Media/MediaTitle"/>
        </xsl:when>
        <xsl:otherwise>
         <xsl:value-of            select = "."/>
        </xsl:otherwise>
       </xsl:choose>
      </b>
     </td>
     <td align="left">
      <br/>
      <xsl:element                name = "img">
       <xsl:attribute             name = "src">
        <xsl:text>http://mahler.nci.nih.gov/cgi-bin/cdr/</xsl:text>
        <xsl:text>GetCdrImage.py?</xsl:text>
        <xsl:text>id=</xsl:text>

        <xsl:value-of           select = "@cdr:ref"/>
        <xsl:text>.jpg</xsl:text>
       </xsl:attribute>
      </xsl:element>
      <br/><br/>
     </td>
    </tr>
   </table>
  </center>
 </xsl:template>


 <!-- 
 ======================================================================
 Template to replace the MediaID element with a little table as a 
 place holder for the image
 ====================================================================== -->
 <xsl:template                   match = "MediaID"
                                  mode = "gtc">
  <center>
   <table width="100%" border="0" 
          style="background-color: #CCCCFF" colspacing="3">
    <xsl:call-template            name = "addIdLinkTarget">
     <xsl:with-param              name = "id"
                                select = "../@cdr:id"/>
    </xsl:call-template>
    <tr>
     <td width="30%" align="right" valign="top">
      <br/>
      <b>
       <xsl:choose>
        <xsl:when                 test = "Media/MediaTitle">
         <xsl:value-of            select = "Media/MediaTitle"/>
        </xsl:when>
        <xsl:otherwise>
         <xsl:value-of            select = "."/>
        </xsl:otherwise>
       </xsl:choose>
      </b>
     </td>
     <td width="70%" align="left">
      <br/>
      <xsl:element                name = "img">
       <xsl:attribute             name = "src">
        <xsl:text>http://mahler.nci.nih.gov/cgi-bin/cdr/</xsl:text>
        <xsl:text>GetCdrImage.py?</xsl:text>
        <xsl:text>id=</xsl:text>

        <xsl:value-of           select = "@cdr:ref"/>
        <xsl:text>-250.jpg</xsl:text>
       </xsl:attribute>
      </xsl:element>
      <br/><br/>
     </td>
    </tr>
   </table>
  </center>
 </xsl:template>


 <!-- 
 ======================================================================
 Display CitationLinks
 ====================================================================== -->
 <xsl:template                   match = "Citation">
  <xsl:variable                   name = "nextRef" 
                                select = "position()+1"/>
  <xsl:variable                   name = "firstRef" 
                                select = "position()-1"/>
  <xsl:variable                   name = "ref" 
                                select = "."/>
  <xsl:variable                   name = "sectionID">
   <xsl:call-template             name = "getSectionId"/>
  </xsl:variable>

  <!--
  Displaying the Left Bracket of a list of citations with marked up 
  ================================================================= -->
  <xsl:if                         test = "name(../node()[$firstRef])
                                            != 'Citation'">
   <xsl:choose>
    <xsl:when                     test = "@InsertionOrDeletion = 'Insertion'">
     <xsl:choose>
      <xsl:when                   test = "@Source = 'advisory-board'">
       <xsl:choose>
        <xsl:when                 test = "@RevisionLevel = 'proposed'">
         <span class="insertproposed_ad">
          <xsl:text>[</xsl:text>
         </span>
        </xsl:when>
        <xsl:otherwise>
         <span class="insertapproved_ad">
          <xsl:text>[</xsl:text>
         </span>

        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
       <xsl:choose>
        <xsl:when                 test = "@RevisionLevel = 'proposed'">
         <span class="insertproposed">
          <xsl:text>[</xsl:text>
         </span>
        </xsl:when>
        <xsl:otherwise>
         <span class="insertapproved">
         <xsl:text>[</xsl:text>
         </span>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:when                     test = "@InsertionOrDeletion = 'Deletion'">
     <xsl:choose>
      <xsl:when                   test = "@Source = 'advisory-board'">
       <xsl:choose>
        <xsl:when                 test = "@existing">
         <xsl:text>[</xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:choose>
          <xsl:when               test = "@RevisionLevel = 'proposed'">
           <span class="deleteproposed_ad">
            <xsl:text>[</xsl:text>
           </span>
          </xsl:when>
          <xsl:otherwise>
           <span class="deleteapproved_ad">
            <xsl:text>[</xsl:text>
           </span>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>    
      <xsl:otherwise>
       <xsl:choose>
        <xsl:when                 test = "@existing">
         <xsl:text>[</xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:choose>
          <xsl:when               test = "@RevisionLevel = 'proposed'">
           <span class="deleteproposed">
            <xsl:text>[</xsl:text>
           </span>
          </xsl:when>
          <xsl:otherwise>
           <span class="deleteapproved">
            <xsl:text>[</xsl:text>
           </span>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>[</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:if>
                    
  <!--
  Displaying the citation ID with marked up 
  ========================================= -->
  <xsl:choose>
   <xsl:when                      test = "@InsertionOrDeletion
                                            = 'Deletion'">
    <xsl:choose>
     <xsl:when                    test = "@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <span class="deleteproposed_ad">
         <xsl:call-template        name = "addCitationLink">
          <xsl:with-param          name = "sectionID"
                                 select = "$sectionID"/>
         </xsl:call-template>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <span class="deleteapproved_ad">
         <xsl:call-template        name = "addCitationLink">
          <xsl:with-param          name = "sectionID"
                                 select = "$sectionID"/>
         </xsl:call-template>
        </span>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <span class="deleteproposed">
         <xsl:call-template        name = "addCitationLink">
          <xsl:with-param          name = "sectionID"
                                 select = "$sectionID"/>
         </xsl:call-template>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <span class="deleteapproved">
         <xsl:call-template        name = "addCitationLink">
          <xsl:with-param          name = "sectionID"
                                 select = "$sectionID"/>
         </xsl:call-template>
        </span>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when> 
   <xsl:when                      test = "@InsertionOrDeletion
                                            = 'Insertion'">
    <xsl:choose>
     <xsl:when                    test = "@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <span class="insertproposed_ad">
         <xsl:call-template        name = "addCitationLink">
          <xsl:with-param          name = "sectionID"
                                 select = "$sectionID"/>
         </xsl:call-template>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <span class="insertapproved_ad">
         <xsl:call-template        name = "addCitationLink">
          <xsl:with-param          name = "sectionID"
                                 select = "$sectionID"/>
         </xsl:call-template>
        </span>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when> 
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <span class="insertproposed">
         <xsl:call-template        name = "addCitationLink">
          <xsl:with-param          name = "sectionID"
                                 select = "$sectionID"/>
         </xsl:call-template>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <span class="insertapproved">
         <xsl:call-template        name = "addCitationLink">
          <xsl:with-param          name = "sectionID"
                                 select = "$sectionID"/>
         </xsl:call-template>
        </span>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise> 
    </xsl:choose>  	    
   </xsl:when>
   <xsl:otherwise>
         <xsl:call-template        name = "addCitationLink">
          <xsl:with-param          name = "sectionID"
                                 select = "$sectionID"/>
         </xsl:call-template>
   </xsl:otherwise>
  </xsl:choose>

  <!--
  Displaying the comma of a list of citations with marked up 
  ========================================================== -->
  <xsl:choose>
   <xsl:when                      test = "name(../node()[$nextRef]) 
                                            = 'Citation'">
    <xsl:choose>
     <xsl:when                     test = "@InsertionOrDeletion = 'Insertion'">
      <xsl:choose>
       <xsl:when                   test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                 test = "@RevisionLevel = 'proposed'">
          <span class="insertproposed_ad">
           <xsl:text>, </xsl:text>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <span class="insertapproved_ad">
           <xsl:text>, </xsl:text>
          </span>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                 test = "@RevisionLevel = 'proposed'">
          <span class="insertproposed">
           <xsl:text>, </xsl:text>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <span class="insertapproved">
          <xsl:text>, </xsl:text>
          </span>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:when                     test = "@InsertionOrDeletion = 'Deletion'">
      <xsl:choose>
       <xsl:when                   test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                 test = "@existing">
          <xsl:text>, </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when               test = "@RevisionLevel = 'proposed'">
            <span class="deleteproposed_ad">
             <xsl:text>, </xsl:text>
            </span>
           </xsl:when>
           <xsl:otherwise>
            <span class="deleteapproved_ad">
             <xsl:text>, </xsl:text>
            </span>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>    
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                 test = "@existing">
          <xsl:text>, </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when               test = "@RevisionLevel = 'proposed'">
            <span class="deleteproposed">
             <xsl:text>, </xsl:text>
            </span>
           </xsl:when>
           <xsl:otherwise>
            <span class="deleteapproved">
             <xsl:text>, </xsl:text>


            </span>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>, </xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
          
   <!--
   Displaying the Right Bracket of a list of citations with marked up 
   ================================================================== -->
   <xsl:when                      test = "name(../node()[$nextRef])
                                            != 'Citation'">
    <xsl:choose>
     <xsl:when                     test = "@InsertionOrDeletion = 'Insertion'">
      <xsl:choose>
       <xsl:when                   test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                 test = "@RevisionLevel = 'proposed'">
          <span class="insertproposed_ad">
           <xsl:text>]</xsl:text>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <span class="insertapproved_ad">
           <xsl:text>]</xsl:text>
          </span>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                 test = "@RevisionLevel = 'proposed'">
          <span class="insertproposed">
           <xsl:text>]</xsl:text>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <span class="insertapproved">
          <xsl:text>]</xsl:text>
          </span>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:when                     test = "@InsertionOrDeletion = 'Deletion'">
      <xsl:choose>
       <xsl:when                   test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                 test = "@existing">
          <xsl:text>]</xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when               test = "@RevisionLevel = 'proposed'">
            <span class="deleteproposed_ad">
             <xsl:text>]</xsl:text>
            </span>
           </xsl:when>
           <xsl:otherwise>
            <span class="deleteapproved_ad">
             <xsl:text>]</xsl:text>
            </span>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>    
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                 test = "@existing">
          <xsl:text>]</xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when               test = "@RevisionLevel = 'proposed'">
            <span class="deleteproposed">
             <xsl:text>]</xsl:text>
            </span>
           </xsl:when>
           <xsl:otherwise>
            <span class="deleteapproved">
             <xsl:text>]</xsl:text>
            </span>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>]</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ======================================================================
 Display the inline Citation as numbered links to the Reference section
 (e.g. [2, 4, 5])
 ====================================================================== -->
 <xsl:template                   match = "Citation"
                                  mode = "compactNo">
  <xsl:variable                   name = "nextRef" 
                                select = "position()+1"/>
  <xsl:variable                   name = "firstRef" 
                                select = "position()-1"/>
  <xsl:variable                   name = "ref" 
                                select = "."/>

  <!--
  Displaying the Left Bracket of a list of citations with markup 
  ================================================================= -->
  <xsl:if                         test = "name(../node()[$firstRef])
                                                            != 'Citation'">
   <xsl:choose>
    <xsl:when                     test = "@InsertionOrDeletion = 'Insertion'">
     <xsl:choose>
      <xsl:when                   test = "@Source = 'advisory-board'">
       <xsl:choose>
        <xsl:when                 test = "@RevisionLevel = 'proposed'">
         <span class="insertproposed_ad">
          <xsl:text>[</xsl:text>
         </span>
        </xsl:when>
        <xsl:otherwise>
         <span class="insertapproved_ad">
          <xsl:text>[</xsl:text>
         </span>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
       <xsl:choose>
        <xsl:when                 test = "@RevisionLevel = 'proposed'">
         <span class="insertproposed">
          <xsl:text>[</xsl:text>
         </span>
        </xsl:when>
        <xsl:otherwise>
         <span class="insertapproved">
         <xsl:text>[</xsl:text>
         </span>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:when                     test = "@InsertionOrDeletion = 'Deletion'">
     <xsl:choose>
      <xsl:when                   test = "@Source = 'advisory-board'">
       <xsl:choose>
        <xsl:when                 test = "@existing">
         <xsl:text>[</xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:choose>
          <xsl:when               test = "@RevisionLevel = 'proposed'">
           <span class="deleteproposed_ad">
            <xsl:text>[</xsl:text>
           </span>
          </xsl:when>

          <xsl:otherwise>
           <span class="deleteapproved_ad">
            <xsl:text>[</xsl:text>
           </span>
          </xsl:otherwise>

         </xsl:choose>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>    
      <xsl:otherwise>
       <xsl:choose>
        <xsl:when                 test = "@existing">
         <xsl:text>[</xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:choose>
          <xsl:when               test = "@RevisionLevel = 'proposed'">
           <span class="deleteproposed">
            <xsl:text>[</xsl:text>
           </span>
          </xsl:when>
          <xsl:otherwise>
           <span class="deleteapproved">
            <xsl:text>[</xsl:text>
           </span>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>[</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:if>
                    
  <!--
  Convert the Citation into a number linking to the Reference Section
  =================================================================== -->
  <xsl:choose>
   <xsl:when                      test = "@InsertionOrDeletion
                                            = 'Deletion'">
    <xsl:choose>
     <xsl:when                    test = "@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <span class="deleteproposed_ad">
         <xsl:value-of          select = "@refidx"/>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <span class="deleteapproved_ad">
         <xsl:value-of          select = "@refidx"/>
        </span>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <span class="deleteproposed">
         <xsl:value-of          select = "@refidx"/>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <span class="deleteapproved">
         <xsl:value-of          select = "@refidx"/>
        </span>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when> 
   <xsl:when                      test = "@InsertionOrDeletion
                                            = 'Insertion'">
    <xsl:choose>
     <xsl:when                    test = "@Source = 'advisory-board'">
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <span class="insertproposed_ad">
         <xsl:value-of          select = "@refidx"/>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <span class="insertapproved_ad">
         <xsl:value-of          select = "@refidx"/>
        </span>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when> 
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when                  test = "@RevisionLevel = 'proposed'">
        <span class="insertproposed">
         <xsl:value-of          select = "@refidx"/>
        </span>
       </xsl:when>
       <xsl:otherwise>
        <span class="insertapproved">
         <xsl:value-of          select = "@refidx"/>
        </span>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise> 
    </xsl:choose>  	    
   </xsl:when>
   <xsl:otherwise>
    <xsl:value-of               select = "@refidx"/>
   </xsl:otherwise>
  </xsl:choose>

  <!--
  Displaying the comma of a list of citations with markup 
  ========================================================== -->
  <xsl:choose>
   <xsl:when                      test = "name(../node()[$nextRef]) 
                                            = 'Citation'">
    <xsl:choose>
     <xsl:when                     test = "@InsertionOrDeletion = 'Insertion'">
      <xsl:choose>
       <xsl:when                   test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                 test = "@RevisionLevel = 'proposed'">
          <span class="insertproposed_ad">
           <xsl:text>, </xsl:text>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <span class="insertapproved_ad">
           <xsl:text>, </xsl:text>
          </span>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                 test = "@RevisionLevel = 'proposed'">
          <span class="insertproposed">
           <xsl:text>, </xsl:text>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <span class="insertapproved">

          <xsl:text>, </xsl:text>
          </span>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:when                     test = "@InsertionOrDeletion = 'Deletion'">
      <xsl:choose>
       <xsl:when                   test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                 test = "@existing">
          <xsl:text>, </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when               test = "@RevisionLevel = 'proposed'">
            <span class="deleteproposed_ad">
             <xsl:text>, </xsl:text>

            </span>
           </xsl:when>
           <xsl:otherwise>
            <span class="deleteapproved_ad">
             <xsl:text>, </xsl:text>
            </span>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>    
       <xsl:otherwise>

        <xsl:choose>
         <xsl:when                 test = "@existing">
          <xsl:text>, </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when               test = "@RevisionLevel = 'proposed'">
            <span class="deleteproposed">
             <xsl:text>, </xsl:text>
            </span>
           </xsl:when>
           <xsl:otherwise>
            <span class="deleteapproved">
             <xsl:text>, </xsl:text>
            </span>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>, </xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
          
   <!--
   Displaying the Right Bracket of a list of citations with markup 
   ================================================================== -->
   <xsl:when                      test = "name(../node()[$nextRef])
                                            != 'Citation'">
    <xsl:choose>
     <xsl:when                     test = "@InsertionOrDeletion = 'Insertion'">
      <xsl:choose>
       <xsl:when                   test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                 test = "@RevisionLevel = 'proposed'">
          <span class="insertproposed_ad">
           <xsl:text>]</xsl:text>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <span class="insertapproved_ad">
           <xsl:text>]</xsl:text>
          </span>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                 test = "@RevisionLevel = 'proposed'">
          <span class="insertproposed">
           <xsl:text>]</xsl:text>
          </span>
         </xsl:when>
         <xsl:otherwise>
          <span class="insertapproved">
          <xsl:text>]</xsl:text>
          </span>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:when                     test = "@InsertionOrDeletion = 'Deletion'">
      <xsl:choose>
       <xsl:when                   test = "@Source = 'advisory-board'">
        <xsl:choose>
         <xsl:when                 test = "@existing">
          <xsl:text>]</xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when               test = "@RevisionLevel = 'proposed'">
            <span class="deleteproposed_ad">
             <xsl:text>]</xsl:text>
            </span>
           </xsl:when>
           <xsl:otherwise>
            <span class="deleteapproved_ad">

             <xsl:text>]</xsl:text>
            </span>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>

       </xsl:when>    
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                 test = "@existing">
          <xsl:text>]</xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when               test = "@RevisionLevel = 'proposed'">
            <span class="deleteproposed">
             <xsl:text>]</xsl:text>
            </span>
           </xsl:when>
           <xsl:otherwise>
            <span class="deleteapproved">
             <xsl:text>]</xsl:text>
            </span>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>]</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
  </xsl:choose>
 </xsl:template>


 <!-- 
 =====================================================================
 Template to add the link anchor to an element that has a cdr:id 
 attribute 
 ===================================================================== -->
 <xsl:template                    name = "addIdLinkTarget">
  <xsl:param                      name = "id"
                                select = "./@cdr:id"/>

  <xsl:attribute                  name = "id">
   <xsl:value-of                select = "$id"/>
  </xsl:attribute>
 </xsl:template>


 <!--
 ======================================================================
 Template to add the link anchor to the citations listed within the 
 text linking to the citation within the reference section.
 ====================================================================== -->
 <xsl:template                    name = "addCitationLink">
  <xsl:param                      name = "sectionID"/>
         <a>
          <xsl:attribute           name = "href">
           <xsl:text>#CL</xsl:text>
           <xsl:value-of         select = "$sectionID"/>
           <xsl:text>_</xsl:text>
           <xsl:value-of         select = "@refidx"/>
          </xsl:attribute>
          <xsl:attribute           name = "title">
           <xsl:value-of         select = "."/>
          </xsl:attribute>
          <xsl:attribute           name = "class">
           <xsl:text>citationLink</xsl:text>
          </xsl:attribute>     
          <xsl:value-of          select = "@refidx"/>
         </a>
 </xsl:template>


 <!--
 ======================================================================
 Template to add the link anchor to the citations listed within the 
 text linking to the citation within the reference section.
 ====================================================================== -->
 <xsl:template                    name = "getSectionId">
  <xsl:for-each                 select = "ancestor-or-self::*">
   <xsl:if                        test = "name(..) = 'Summary'">
    <xsl:value-of               select = "@cdr:id"/>
   </xsl:if>
  </xsl:for-each>
 </xsl:template>


 <!-- 
 ======================================================================
 Default Template
 Any node that is a child of a list or para with mode "compactNo"
 will need to be redirected to he template without a mode.  This task 
 is performed here by calling itself without a mode.
 ====================================================================== -->
 <xsl:template                   match = "@*"
                                  mode = "compactNo">
  <xsl:attribute                  name = "{name()}">
   <xsl:value-of                select = "."/>
  </xsl:attribute>
 </xsl:template>

 <xsl:template                   match = "*"
                                  mode = "compactNo">
  <xsl:apply-templates          select = "."/> 
 </xsl:template>
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>