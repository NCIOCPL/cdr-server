<CdrDoc Type='Filter' Id='CDR0000339576'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Module: InLine Markup Formatter</DocTitle>
<DocComment>CVS-V1.5: Fixed TOC Title (Bug 942)</DocComment><ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml      version = "1.0"?>
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr">
  
 <!-- 
 ======================================================================
 Display a Summary Reference, SummaryFragmentRef or LOEFragmentRef or 
 ProtocolRef
 ====================================================================== -->
 <xsl:template                 match = "SummaryRef | ProtocolRef |
                                        SummaryFragmentRef | 
                                        LOEFragmentRef">
  <u><xsl:apply-templates/></u>
 </xsl:template>


 <!-- 
 ======================================================================
 Link to glossaryTermRefs -Old
 ====================================================================== 
    <xsl:template              match = "GlossaryTermRef | LOERef">
                                                                             
     <xsl:choose>
     <xsl:when                  test = "Deletion">
      <a>
      <xsl:attribute            name = "href">
       <xsl:value-of          select = "concat('/cgi-bin/cdr/Filter.py?',
                                               'DocId=', @cdr:href,
                                               '&amp;Filter=name:Glossary',
                                               '+Term+Display+for+Patient',
                                               '+Summaries')"/>
      </xsl:attribute>
      <strike>
      <xsl:value-of           select = "."/>
      </strike>
     </a>
    </xsl:when>
    <xsl:otherwise>
     <a>
      <xsl:attribute            name = "href">
       <xsl:value-of          select = "concat('/cgi-bin/cdr/Filter.py?',
                                               'DocId=', @cdr:href,
                                               '&amp;Filter=name:Glossary',
                                               '+Term+Display+for+Patient',
                                               '+Summaries')"/>
      </xsl:attribute>
      <xsl:value-of           select = "."/>
     </a>
     </xsl:otherwise>
     </xsl:choose>
      </xsl:template-->

  
 <!-- 
 ======================================================================
 Link to glossaryTermRefs - Patients
 ====================================================================== -->
 <xsl:template                 match = "GlossaryTermRef | LOERef"
                                mode = "PE">
  <xsl:choose>
   <xsl:when                    test = "Deletion">
    <a>
     <xsl:attribute             name = "href">
      <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                               'DocId=', @cdr:href,
                                               '&amp;Filter=name:Glossary',
                                               '+Term+Display+for+Patient',
                                               '+Summaries')"/>
     </xsl:attribute>
     <strike>
      <xsl:value-of           select = "."/>
     </strike>
    </a>
   </xsl:when>
   <xsl:otherwise>
    <a>
     <xsl:attribute            name = "href">
      <xsl:value-of          select = "concat('/cgi-bin/cdr/Filter.py?',
                                               'DocId=', @cdr:href,
                                               '&amp;Filter=name:Glossary',
                                               '+Term+Display+for+Patient',
                                               '+Summaries')"/>
     </xsl:attribute>
     <xsl:value-of           select = "."/>
    </a>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

   
 <!-- 
 ======================================================================
 Link to glossaryTermRefs - English Health Professional
 ====================================================================== -->
 <xsl:template                match = "GlossaryTermRef | LOERef"
                               mode = "HPE" >
  <xsl:choose>
   <xsl:when                   test = "Deletion">
    <a>
     <xsl:attribute            name = "href">
      <xsl:value-of          select = "concat('/cgi-bin/cdr/Filter.py?',
                                               'DocId=', @cdr:href,
                                               '&amp;Filter=name:Glossary',
                                               '+Term+Display+for+HP',
                                               '+Summaries')"/>
     </xsl:attribute>
     <strike>
      <xsl:value-of          select = "."/>
     </strike>
    </a>
   </xsl:when>
   <xsl:otherwise>
    <a>
     <xsl:attribute            name = "href">
      <xsl:value-of          select = "concat('/cgi-bin/cdr/Filter.py?',
                                               'DocId=', @cdr:href,
                                               '&amp;Filter=name:Glossary',
                                               '+Term+Display+for+HP',
                                               '+Summaries')"/>
     </xsl:attribute>
     <xsl:value-of           select = "."/>
    </a>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ======================================================================
 Link to glossaryTermRefs - Spanish Health Professional
 ====================================================================== -->
 <xsl:template                match = "GlossaryTermRef | LOERef"
                                        mode = "HPS" >
  <xsl:choose>
   <xsl:when                   test = "Deletion">
    <a>
     <xsl:attribute            name = "href">
      <xsl:value-of          select = "concat('/cgi-bin/cdr/Filter.py?',
                                               'DocId=', @cdr:href,
                                               '&amp;Filter=name:Glossary',
                                               '+Term+Display+for+HPS',
                                               '+Summaries')"/>
     </xsl:attribute>
     <strike>
      <xsl:value-of          select = "."/>
     </strike>
    </a>
   </xsl:when>
   <xsl:otherwise>
    <a>
     <xsl:attribute            name = "href">
      <xsl:value-of          select = "concat('/cgi-bin/cdr/Filter.py?',
                                               'DocId=', @cdr:href,
                                               '&amp;Filter=name:Glossary',
                                               '+Term+Display+for+HPS',
                                               '+Summaries')"/>
     </xsl:attribute>
     <xsl:value-of           select = "."/>
    </a>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 =====================================================================
 Display Itemized Lists for KeyPoints
 ===================================================================== -->
 <xsl:template                 match = "KeyPointsList[@Style='bullet'] |
                                       KeyPointsList[@Style='dash']">
  <ul>
   <xsl:attribute               name = "class">
    <xsl:choose>
     <xsl:when                  test = "@Style = 'bullet'">        
      <xsl:text>disc</xsl:text>   
     </xsl:when>
     <xsl:when                  test = "@Style = 'dash'">
      <xsl:text>square</xsl:text>      
     </xsl:when>
    </xsl:choose> 
   </xsl:attribute>

   <xsl:for-each              select = "ListItem">
    <!-- Don't display empty list items -->
    <xsl:if                     test = "not(. = '')">
     <li>
      <xsl:apply-templates/>
     </li>
    </xsl:if>
   </xsl:for-each>
  </ul>
 </xsl:template>


 <!-- 
 =====================================================================
 Display an itemized list
 ===================================================================== -->
 <xsl:template                   match = "ItemizedList">   
  <xsl:apply-templates          select = "ListTitle"/>
 
  <!-- Handle ListItem now. -->
  <ul>
   <xsl:attribute                 name = "class">
    <xsl:choose>
     <xsl:when                    test = "@Style = 'bullet'">        
      <xsl:text>disc</xsl:text>   
     </xsl:when>
     <xsl:when                    test = "@Style = 'dash'">
      <xsl:text>square</xsl:text>      
     </xsl:when>
     <xsl:when                    test = "@Style = 'simple'">
      <xsl:text>lnone</xsl:text>     
     </xsl:when> 
    </xsl:choose> 
   </xsl:attribute>

   <xsl:for-each                select = "ListItem"> 
    <!-- Don't display empty list items -->
    <xsl:if                       test = "not(. = '')">
     <xsl:call-template           name = "ItemizedListItem"/>
    </xsl:if>
   </xsl:for-each>    
  </ul>  
 </xsl:template>  


 <!-- 
 =====================================================================
 Display an ordered list 
 ===================================================================== -->
 <xsl:template                   match = "OrderedList">   
  <xsl:apply-templates          select = "ListTitle"/> 
    

  <!-- Handle ListItem now. -->
  <ol>
   <xsl:attribute                 name = "Class">
    <xsl:choose>
     <xsl:when                    test = "@Style = 'UAlpha'">        
      <xsl:text>A</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'LAlpha'">
      <xsl:text>little-alpha</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'URoman'">
      <xsl:text>I</xsl:text>
     </xsl:when>
     <xsl:when                    test = "@Style = 'LRoman'">
      <xsl:text>little-roman</xsl:text>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>d</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:attribute>

   <xsl:for-each                select = "ListItem">
    <li>  
     <xsl:apply-templates/>
     <!-- Take care of extra attribute compact. -->
     <xsl:if                      test = "position() != last() 
                                          and
                                          ../@Compact = 'No'">
      <br />
      <br /> 
     </xsl:if>
    </li>
   </xsl:for-each>
  </ol>
 </xsl:template>        
 

 <!-- 
 =====================================================================
 Display a Subscript 
 ===================================================================== -->
 <xsl:template                   match = "Subscript">
  <sub>
   <xsl:apply-templates/>
  </sub>
 </xsl:template>


 <!-- 
 =====================================================================
 Display a Superscript 
 ===================================================================== -->
 <xsl:template                   match = "Superscript">
  <sup>
   <xsl:apply-templates/>
  </sup>
 </xsl:template>


 <!-- 
 =====================================================================
 Display Strong 
 ===================================================================== -->
 <xsl:template                   match = "Strong">
  <b>
   <xsl:apply-templates/>
  </b>
 </xsl:template>


 <!-- 
 =====================================================================
 Display Emphasis, ScientificName, ForeignWord, GeneName
 ===================================================================== -->
 <xsl:template                   match = "Emphasis | ScientificName |
                                          ForeignWord | GeneName">
  <i>
   <xsl:apply-templates/>
  </i>
 </xsl:template>


 <!-- 
 =====================================================================
 Display a Note element without markup
 ===================================================================== -->
 <xsl:template               match = "Note"
                              mode = "R">
  <i>
   <xsl:text> [</xsl:text>

   <xsl:choose>
    <xsl:when                 test = "//SummaryLanguage = 'Spanish'"> 
     <xsl:text>Nota: </xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>Note: </xsl:text>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates/>

   <xsl:text>] </xsl:text>
  </i>
 </xsl:template> 


 <!-- 
 =====================================================================
 Display a note with mark-up (Redline/Strikeout)
 ===================================================================== -->
 <xsl:template               match = "Note" 
                              mode = "RS">
  <i>
  <xsl:choose>
   <xsl:when                  test = "Insertion/@RevisionLevel='approved'
                                      or
                                      Insertion/@RevisionLevel='publish'">
    <font color="RED">
     <xsl:text> [</xsl:text>
    </font>
   </xsl:when>
   <xsl:when                 test  = "Insertion/@RevisionLevel='proposed'">
    <font color="FUCHSIA">
     <xsl:text> [</xsl:text>
    </font>
   </xsl:when>
   <xsl:when                 test  = "Deletion/@RevisionLevel='approved'
                                      or
                                      Deletion/@RevisionLevel='publish'">
    <strike>
     <xsl:text> [</xsl:text>
    </strike>
   </xsl:when>
   <xsl:when                 test  = "Deletion/@RevisionLevel='proposed'">
    <strike>
     <font color="FUCHSIA">
      <xsl:text> [</xsl:text>
     </font>
    </strike>
   </xsl:when>
   <xsl:otherwise>
    <xsl:text> [</xsl:text>
   </xsl:otherwise>
  </xsl:choose>
  <xsl:choose>
   <xsl:when                 test = "//SummaryLanguage ='Spanish'"> 
    <xsl:choose>
     <xsl:when                 test  = "Insertion/@RevisionLevel='approved'
                                        or
                                        Insertion/@RevisionLevel='publish'">
      <font color="RED">
       <xsl:text>Nota: </xsl:text>
      </font>
     </xsl:when>
     <xsl:when                 test  = "Insertion/@RevisionLevel='proposed'">
      <font color="FUCHSIA">
       <xsl:text>Nota: </xsl:text>
      </font>
     </xsl:when>
     <xsl:when                 test  = "Deletion/@RevisionLevel='approved'
                                        or
                                        Deletion/@RevisionLevel='publish'">
      <strike>
       <xsl:text>Nota: </xsl:text>
      </strike>
     </xsl:when>
     <xsl:when                 test  = "Deletion/@RevisionLevel='proposed'">
      <strike>
       <font color="FUCHSIA">
        <xsl:text>Nota: </xsl:text>
       </font>
      </strike>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>Nota: </xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                 test  = "Insertion/@RevisionLevel='approved'
                                        or
                                        Insertion/@RevisionLevel='publish'">
      <font color="RED">
       <xsl:text>Note: </xsl:text>
      </font>
     </xsl:when>
     <xsl:when                 test  = "Insertion/@RevisionLevel='proposed'">
      <font color="FUCHSIA">
       <xsl:text>Note: </xsl:text>
      </font>
     </xsl:when>
     <xsl:when                 test  = "Deletion/@RevisionLevel='approved'
                                        or
                                        Deletion/@RevisionLevel='publish'">
      <strike>
       <xsl:text>Note: </xsl:text>
      </strike>
     </xsl:when>
     <xsl:when                 test  = "Deletion/@RevisionLevel='proposed'">
      <strike>
       <font color="FUCHSIA">
        <xsl:text>Note: </xsl:text>
       </font>
      </strike>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>Note: </xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
  <xsl:choose>
   <xsl:when                 test  = "Insertion/@RevisionLevel='proposed'
                                      or
                                      Deletion/@RevisionLevel='proposed'">
     <font color="FUCHSIA">
      <xsl:apply-templates/>
     </font>
   </xsl:when>
   <xsl:otherwise>
     <xsl:apply-templates/>
   </xsl:otherwise>
  </xsl:choose>

  <xsl:choose>
   <xsl:when                 test  = "Insertion/@RevisionLevel='approved'
                                      or
                                      Insertion/@RevisionLevel='publish'">
    <font color="RED">
     <xsl:text>] </xsl:text>
    </font>
   </xsl:when>
   <xsl:when                 test  = "Insertion/@RevisionLevel='proposed'">
    <font color="FUCHSIA">
     <xsl:text>] </xsl:text>
    </font>
   </xsl:when>
   <xsl:when                 test  = "Deletion/@RevisionLevel='approved'
                                      or
                                      Deletion/@RevisionLevel='publish'">
    <strike>
     <xsl:text>] </xsl:text>
    </strike>
   </xsl:when>
   <xsl:when                 test  = "Deletion/@RevisionLevel='proposed'">
    <strike>
     <font color="FUCHSIA">
      <xsl:text>] </xsl:text>
     </font>
    </strike>
   </xsl:when>
   <xsl:otherwise>
    <xsl:text>] </xsl:text>
   </xsl:otherwise>
  </xsl:choose>
  </i>
 </xsl:template> 


 <!-- 
 =====================================================================
 Display a note with markup (Bold/Underline)   
 ===================================================================== -->
 <xsl:template               match = "Note" 
                              mode = "BU">
  <!-- Don't display emply Note elements -->
  <xsl:if                     test = "not(.='')">
   <xsl:choose>
    <xsl:when                test  =  "Insertion/@RevisionLevel='approved'
                                       or
                                       Insertion/@RevisionLevel='publish'">
     <b>
      <u>
       <i>
        <xsl:text> [</xsl:text>
       </i>
      </u>
     </b>
    </xsl:when>
    <xsl:when                test  = "Insertion/@RevisionLevel='proposed'">
     <b>
      <i>
       <xsl:text> [</xsl:text>
      </i>
     </b>
    </xsl:when>
    <xsl:when                test  = "Deletion/@RevisionLevel='proposed'">
     <strike>
      <xsl:text> [</xsl:text>
     </strike>
    </xsl:when>
    <xsl:otherwise>
     <xsl:if                 test  = "not(Deletion/@RevisionLevel='approved')
                                      and
                                      not(Deletion/@RevisionLevel='publish')">
      <i>
       <xsl:text> [</xsl:text>
      </i>
     </xsl:if>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:choose>
    <xsl:when                 test = "//SummaryLanguage ='Spanish'"> 
     <xsl:choose>
      <xsl:when               test = "Insertion/@RevisionLevel='approved'
                                      or
                                      Insertion/@RevisionLevel='publish'">
       <b>
        <u>
         <i>
          <xsl:text>Nota: </xsl:text>
         </i>
        </u>
       </b>
      </xsl:when>
      <xsl:when               test = "Insertion/@RevisionLevel='proposed'">
       <b>
        <i>
         <xsl:text>Nota: </xsl:text>
        </i>
       </b>
      </xsl:when>
      <xsl:when               test = "Deletion/@RevisionLevel='proposed'">
       <strike>
        <i>
         <xsl:text>Nota: </xsl:text>
        </i>
       </strike>
      </xsl:when>
      <xsl:otherwise>
       <xsl:if                test = "not(Deletion/@RevisionLevel='approved')
                                      and
                                      not(Deletion/@RevisionLevel='publish')">
       <i>
         <xsl:text>Nota: </xsl:text>
        </i>
       </xsl:if>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when               test = "Insertion/@RevisionLevel='approved'
                                      or
                                      Insertion/@RevisionLevel='publish'">
       <b>
        <u>
         <i>
          <xsl:text>Note: </xsl:text>
         </i>
        </u>
       </b>
      </xsl:when>
      <xsl:when               test = "Insertion/@RevisionLevel='proposed'">
       <b>
        <i>
         <xsl:text>Note: </xsl:text>
        </i>
       </b>
      </xsl:when>
      <xsl:when               test = "Deletion/@RevisionLevel='proposed'">
       <strike>
        <i>
         <xsl:text>Note: </xsl:text>
        </i>
       </strike>
      </xsl:when>
      <xsl:otherwise>
       <xsl:if                test = "not(Deletion/@RevisionLevel='approved')
                                      and
                                      not(Deletion/@RevisionLevel='publish')">
        <i>
         <xsl:text>Note: </xsl:text>
        </i>
       </xsl:if>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>

   <i>
    <xsl:apply-templates/>
   </i>
   <xsl:choose>
    <xsl:when                 test = "Insertion/@RevisionLevel='approved'
                                      or
                                      Insertion/@RevisionLevel='publish'">
     <b>
      <u>
       <i>
        <xsl:text>] </xsl:text>
       </i>
      </u>
     </b>
    </xsl:when>
    <xsl:when                 test = "Insertion/@RevisionLevel='proposed'">
     <b>
      <i>
       <xsl:text>] </xsl:text>
      </i>
     </b>
    </xsl:when>
    <xsl:when                 test = "Deletion/@RevisionLevel='proposed'">
     <strike>
      <i>
       <xsl:text>] </xsl:text>
      </i>
     </strike>
    </xsl:when>
    <xsl:otherwise>
     <xsl:if                  test = "not(Deletion/@RevisionLevel='approved')
                                      and
                                      not(Deletion/@RevisionLevel='publish')">  
      <i>
       <xsl:text>] </xsl:text>
      </i>
     </xsl:if>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:if>
 </xsl:template> 


 <!-- 
 ======================================================================
 Template handling ListTitle
 ====================================================================== -->
 <xsl:template               match = "ListTitle">    
  <!--<br/>-->
  <b>
   <i>
    <xsl:apply-templates /> 
   </i>
  </b>      
 </xsl:template>


 <!-- 
 =====================================================================
 Template handling ListItem in ItemizedList
 ===================================================================== -->  
 <xsl:template                name = "ItemizedListItem">
   <li>
   <xsl:apply-templates />
   <xsl:if                    test = "position() != last() 
                                      and
                                      ../@Compact = 'No'">
    <br/>
    <br/>
   </xsl:if>

  </li>
 </xsl:template>


 <!-- 
 =====================================================================
 Display TOC Summary Title with Deletion and Insertion
 ===================================================================== -->
 <xsl:template               match = "SummaryTitle"
                              mode = "TOC">
  <h2>
   <xsl:apply-templates />
  </h2>
 </xsl:template> 

 <!-- 
 =====================================================================
 Display summary titles in TOC.
 ===================================================================== -->
 <xsl:template               match = "Title" 
                              mode = "TOC">
  <xsl:apply-templates/>
 </xsl:template>


 <!-- 
 =====================================================================
 Display SummarySection in TOC.
 ===================================================================== -->
 <xsl:template                name = "TocSummarySection">
  <xsl:param                  name = "level"/> 

  <xsl:if                     test = "Title"> 
   <li>
    <xsl:apply-templates    select = "Title"
                              mode = "TOC"/>
   </li>
  </xsl:if>                   
   
  <xsl:if                     test = "SummarySection and
                                        $level &lt; 3">
   <ul Class="lnone">
    <xsl:for-each           select = "SummarySection">
   <!--  <xsl:if                test   =  "not(Title/Deletion)">-->
      <xsl:call-template      name = "TocSummarySection">
       <xsl:with-param        name = "level"
                            select = "$level + 1"/>
      </xsl:call-template>
   <!--  </xsl:if>-->
    </xsl:for-each>
   </ul>
  </xsl:if>
 </xsl:template>

  <!--
      ============================================================
            Display titles for Patient Summaries
      ============================================================= -->

   <xsl:template              match= "Title"
                              mode = "PT">
   <xsl:variable              name = "ancestors"
                              select = "ancestor::SummarySection"/>
  
   <xsl:choose>
    <xsl:when                  test = "count($ancestors) = 2">
    <h3><xsl:apply-templates/></h3>
   </xsl:when>
   <xsl:when                   test = "count($ancestors) &gt; 2">
   <h4><xsl:apply-templates/></h4>
   </xsl:when>
   </xsl:choose>
   </xsl:template>


 <!-- 
 =====================================================================
 Display a summary section title depending on how many 
 SummarySection in its ancestors. We may have to use
 a mode here to avoid unintended usage in documents that
 are not summaries, but with Title.
 Fixed RMK 2003-10-14.
 ===================================================================== -->
 <xsl:template               match = "Title"
                              mode = "RB">

  <xsl:variable               name = "ancestors"
                            select = "ancestor::SummarySection"/>
  <xsl:choose>
   <xsl:when                  test = "count($ancestors) = 1">
    <h2><xsl:apply-templates/></h2>
   </xsl:when>
   <xsl:when                  test = "count($ancestors) = 2">
    <h3><xsl:apply-templates/></h3>
   </xsl:when>
   <xsl:otherwise>
    <h4><xsl:apply-templates/></h4>
   </xsl:otherwise>
  </xsl:choose>

 </xsl:template>
 

 <!-- 
 ===============================================================
 Display Paragraphs in a ListItem - not approved yet
 =============================================================== -->
 <xsl:template               match = "ListItem/Para">
  <br />
  <br />
  <xsl:apply-templates/>
  <nobr />
 </xsl:template> 


 <!-- 
 =====================================================================
 Display Paragraphs 
 ===================================================================== -->
 <xsl:template               match = "Para">
  <p>
   <xsl:apply-templates/>
  </p>
 </xsl:template>


 <!-- 
 =====================================================================
 Display tables in old format
 ===================================================================== -->
 <xsl:template               match = "TT">
  <pre>
   <xsl:apply-templates/>
  </pre>
 </xsl:template>


 <!-- 
 =====================================================================
 Create a link to another document or website 
 ===================================================================== -->
 <xsl:template               match = "ExternalRef">
  <xsl:variable               name = "nlink" 
                            select = "@cdr:xref"/>
  <a href="{$nlink}">
   <xsl:apply-templates/>
  </a>
 </xsl:template>


 <!-- 
 =====================================================================
 Display references 
 ===================================================================== -->
 <xsl:template               match = "ReferenceListXX">
  <xsl:if                     test = "Reference">
   <xsl:choose>
    <xsl:when                 test = "//SummaryLanguage='Spanish'">        
     <h3>Referencias:</h3>
    </xsl:when>
    <xsl:otherwise>
     <h3>References:XX</h3>        
    </xsl:otherwise>     
   </xsl:choose>
      
   <ol>
    <xsl:for-each           select = "Reference">
     <li>
      <xsl:apply-templates  select = "."/>
      <br/>
      <br/>
     </li>
    </xsl:for-each>
   </ol>
  </xsl:if>
 </xsl:template>


 <!-- 
 ================================================================
 Display Comments - Bold/UnderLine
 ================================================================ -->
 <xsl:template              match = "CommentX" 
                             mode = "BU">
  <i>
   <b>
    <xsl:text>[Comment: </xsl:text>
    <xsl:apply-templates/>
    <xsl:text>] </xsl:text>
   </b>
  </i>
 </xsl:template>

</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>