<CdrDoc Type='Filter' Id='CDR0000257551'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Global Change: Org Status</DocTitle>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>

<!-- 
 ==================================================================

 Global Change: Org Status

 This filter has to change the value in:

   /InScopeProtocol/ProtocolAdminInfo/ProtocolLeadOrg
   /ProtocolSites/OrgSite/OrgSiteStatus

 But only when the OrgSiteStatus contains a particular value, and 
 only when the OrgSiteStatus is found in the same OrgSite as

   /InScopeProtocol/ProtocolAdminInfo/ProtocolLeadOrg
   /ProtocolSites/OrgSite/OrgSiteID/@cdr:ref

 that contains a passed value.

 So three values are passed in:

 1. A cdr document ID to match against the OrgSiteID/@cdr:ref (orgId).

 2. An existing value of OrgSiteStatus to find (oldStatus).

 3. A new value for OrgSiteStatus to replace the existing one when
    a match is found (newStatus).

 ================================================================== -->

<xsl:transform              xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                            xmlns:cdr = "cips.nci.nih.gov/cdr"
                              version = "1.0">

 <xsl:output                   method = "xml" 
                 omit-xml-declaration = "no"/>

 <!--
 ================================================================
 Passed in by the caller.
 ================================================================ -->
 <xsl:param                      name = "orgId"/>
 <xsl:param                      name = "oldStatus"/>
 <xsl:param                      name = "newStatus"/>

 <!--
 ================================================================
 Default rule, copying back out everything just as we got it.
 ================================================================ -->
 <xsl:template                  match = "@*|comment()|*|
                                         processing-instruction()|text()">
  <xsl:copy>
   <xsl:apply-templates        select = "@*|comment()|*|
                                         processing-instruction()|text()"/>
  </xsl:copy>
 </xsl:template>

 <!--
 ===================================================================
 Template to change the Organization status.
 =================================================================== -->
 <xsl:template                  match = "/InScopeProtocol/ProtocolAdminInfo
                                         /ProtocolLeadOrg/ProtocolSites
                                         /OrgSite/OrgSiteStatus">
  <xsl:variable                  name = "thisOrgLink"
                               select = "../OrgSiteID/@cdr:ref"/>
  <xsl:variable                  name = "thisOrgId">
   <xsl:choose>
    <xsl:when                    test = "contains($thisOrgLink, '#')">
     <xsl:value-of             select = "substring-before($thisOrgLink, '#')"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of             select = "$thisOrgLink"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <xsl:choose>
   <xsl:when                     test = ". = $oldStatus and 
                                         $thisOrgId = $orgId">
    <OrgSiteStatus>
     <xsl:value-of             select = "$newStatus"/>
    </OrgSiteStatus>
   </xsl:when>
   <xsl:otherwise>
    <xsl:copy>
     <xsl:apply-templates      select = "@*|comment()|*|
                                         processing-instruction()|text()"/>
    </xsl:copy>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>