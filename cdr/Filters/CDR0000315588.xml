<CdrDoc Type='Filter' Id='CDR0000315588'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Module: Vendor Cleanup Templates</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
<xsl:transform           xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                         xmlns:cdr = "cips.nci.nih.gov/cdr"
           exclude-result-prefixes = "cdr"
                           version = "1.0">

  <xsl:output               method = "xml" 
              omit-xml-declaration = "no"
                          encoding = "UTF-8"/>


 <!-- *
 ====================================================================
 Assemble the PersonNameInformation for a person.
 (Eliminating the StandardProfessionalSuffix element)
 ==================================================================== -->
 <xsl:template               match = "PersonNameInformation">
   <PersonNameInformation>
    <xsl:apply-templates    select = "GivenName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "MiddleInitial"
                              mode = "copy"/>
    <xsl:apply-templates    select = "SurName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Prefix"
                              mode = "copy"/>
    <xsl:apply-templates    select = "GenerationSuffix"
                              mode = "copy"/>

    <!-- 
    If the ProfessionalSuffix element is prepared for the vendor output
    it's created from the Standard/Custom-ProfessionalSuffix elements
    (when clause).
    However, if the ProfessionalSuffic element is only to be copied -
    because it's the second pass of this filter module - the element 
    only needs to be copied as is (otherwise clause).
    ==================================================================== -->
    <xsl:choose>
     <xsl:when                test = "ProfessionalSuffix/
                                        StandardProfessionalSuffix |
                                      ProfessionalSuffix/
                                        CustomProfessionalSuffix">
      <ProfessionalSuffix>
       <xsl:for-each        select = "ProfessionalSuffix/
                                        StandardProfessionalSuffix |
                                      ProfessionalSuffix/
                                        CustomProfessionalSuffix">
        <!-- Clean up the periods of the Custom Prof Suffix  -->
        <xsl:choose>
         <xsl:when            test = "name() = 'CustomProfessionalSuffix'">
          <xsl:value-of     select = "translate(node(), '.', '')"/>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of     select = "."/>
         </xsl:otherwise>
        </xsl:choose>
        <xsl:if               test = "position() != last()">
         <xsl:text>, </xsl:text>
        </xsl:if>
       </xsl:for-each>
      </ProfessionalSuffix>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates  select = "ProfessionalSuffix"
                              mode = "copy"/>
     </xsl:otherwise>
    </xsl:choose>

    <xsl:apply-templates    select = "NameFormat"
                              mode = "copy"/>
   </PersonNameInformation>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:id with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:id"
                              mode = "copy">
   <xsl:attribute             name = "id">
    <xsl:value-of           select = "."/>
   </xsl:attribute>
 </xsl:template>

 <!--
 ====================================================================
 Drop the cdr namespace in cdr:ref with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:ref"
                              mode = "copy">
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "."/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:xref with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:xref"
                              mode = "copy">
   <xsl:attribute             name = "xref">
    <xsl:value-of           select = "."/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:ref with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@PreviousLocation"
                              mode = "copy">
   <xsl:attribute             name = "status">
    <xsl:value-of           select = "'Inactive--Contact information may not be current'"/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the PdqKey attribute with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@PdqKey"
                              mode = "copy">
 </xsl:template>


 <!--
 ====================================================================
 Drop the MailAbstractTo attribute which is needed for mailers only
 ==================================================================== -->
 <xsl:template               match = "@MailAbstractTo"
                              mode = "copy"/>

 <!--
 ====================================================================
 Drop the CIPSContact attribute which is needed for mailers only.
 Ditto for MailAbstractTo.
 ==================================================================== -->
 <xsl:template               match = "@CIPSContact | @MailAbstractTo"
                              mode = "copy"/>


 <!--
 Drop ref attribute for the PublishedResult element.  This attribute
 is included for the QC reports only.
 ===================================================================== -->
 <xsl:template               match = "PublishedResults/@ref"
                              mode = "copy"/>
                               

 <!-- 
 =====================================================================
 Suppress nodes with or without copy mode that are not to be displayed
 in vendor output.
 ===================================================================== -->
 <xsl:template               match = "Comment | PdqKey | Fax |
                                      PoliticalSubUnitShortName |
                                      DocId | CdrDocCtl |
                                      OrganizationDetails |
                                      ProtocolDesign"/>  
  
 <xsl:template               match = "Comment | PdqKey | Fax |
                                      PoliticalSubUnitShortName |
                                      CIPSContact |
                                      OrganizationDetails |
                                      ProtocolDesign"
                              mode = "copy"/>


 <!-- 
 =====================================================================
 Don't export protocol lead organizations with status of "Withdrawn."
 ===================================================================== -->
 <xsl:template               match = "ProtocolLeadOrg
                                      [LeadOrgProtocolStatus/
                                       StatusName = 'Withdrawn']"/>
 <xsl:template               match = "ProtocolLeadOrg
                                      [LeadOrgProtocolStatus/
                                       StatusName = 'Withdrawn']"
                              mode = "copy"/>

 <!-- 
 =====================================================================
 Suppress LeadOrgPersonnel which are not public.
 ===================================================================== -->
 <xsl:template               match = "ProtPerson[@Public = 'No']"/>
 <xsl:template               match = "ProtPerson[@Public = 'No']"
                              mode = "copy"/>

 <!-- 
 =====================================================================
 Don't keep LeadOrgPersonnel whose only role is 'Update person'.
 NOTE: We don't have business rules from the users for what to do
       if more than one PersonRole with values other than 'Update
       person' are present, so we just pass them all through, making
       the resulting output invalid (since the DTD only allows one
       occurrence here).
 ===================================================================== -->
 <xsl:template               match = "LeadOrgPersonnel/ProtPerson"
                              mode = "copy">
  <xsl:if                     test = "(PersonRole != 'Update person') or
                                      (PersonRole = 'Update person' and
                                       count(PersonRole) &gt; 1)">
   <ProtPerson>
    <xsl:if                   test = "@ref">
     <xsl:copy-of           select = "@ref"/>
    </xsl:if>
    <xsl:if                   test = "@status">
     <xsl:copy-of           select = "@status"/>
    </xsl:if>
    <xsl:apply-templates    select = "PersonNameInformation"
                              mode = "copy"/>
    <xsl:for-each           select = "PersonRole">
     <xsl:if                  test = ". != 'Update person'">
      <xsl:apply-templates  select = "."
                              mode = "copy"/>
     </xsl:if>
    </xsl:for-each>
    <xsl:apply-templates    select = "Contact"
                              mode = "copy"/>
   </ProtPerson>
  </xsl:if>  
 </xsl:template>

 <!--
 ====================================================================
 Drop the Email and Phone elements with attribute Public = 'No'.
 Note:  Since the QC report needs these displayed it is being 
        filtered out at the last step creating the vendor output.
 ==================================================================== -->
 <xsl:template               match = "Email | 
                                      Phone"
                              mode = "copy">
  <xsl:if                     test = "not(@Public)">
   <xsl:element               name = "{name()}">
    <xsl:value-of           select = "."/>
   </xsl:element>
  </xsl:if>
 </xsl:template>

 <xsl:template               match = "Email |
                                      Phone">
  <xsl:if                     test = "not(@Public)">
   <xsl:element               name = "{name()}">
    <xsl:value-of           select = "."/>
   </xsl:element>
  </xsl:if>
 </xsl:template>


 <!-- 
 =====================================================================
 Suppress Protocol Title with Audience Attribute of Original from 
 vendor output.
 ===================================================================== -->
 <xsl:template               match = "ProtocolTitle[@Audience = 'Original']"
                              mode = "copy"/>  

 <!--
 =========================================================================
 Identify if an element with an href attribute points to a non-publishable
 document.  If it does remove the element tags and display a warning
 message.
 ========================================================================= -->
 <xsl:template               match = "ProtocolRef | LOERef |
                                      SummaryRef  | GlossaryTermRef"
                              mode = "copy">
  <xsl:variable               name = "pubVersion"
                            select = "document(concat('cdrutil:/get-pv-num/',
                                                       @cdr:href | @href))"/>

  <xsl:choose>
   <xsl:when                  test = "$pubVersion = 0">
    <xsl:message         terminate = "no">
     <xsl:text>Publishable Version of document </xsl:text>
     <xsl:value-of         select = "@cdr:href | @href"/>
     <xsl:text> does not exist.&lt;BR/&gt;</xsl:text>
    </xsl:message> 
    <xsl:value-of           select = "concat(' ', .)"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element              name = "{name()}">
     <xsl:attribute           name = "href">
      <xsl:value-of         select = "@cdr:href | @href"/>
     </xsl:attribute>
     <xsl:apply-templates     mode = "copy"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>

 </xsl:template>


</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>