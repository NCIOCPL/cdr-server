<CdrDoc Type='Filter' Id='CDR0000315588'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Module: Vendor Cleanup Templates</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
<xsl:transform           xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                         xmlns:cdr = "cips.nci.nih.gov/cdr"
           exclude-result-prefixes = "cdr"
                           version = "1.0">

  <xsl:output               method = "xml" 
              omit-xml-declaration = "no"
                          encoding = "UTF-8"/>


 <!-- *
 ====================================================================
 Assemble the PersonNameInformation for a person.
 (Eliminating the StandardProfessionalSuffix element)
 ==================================================================== -->
 <xsl:template               match = "PersonNameInformation">
   <PersonNameInformation>
    <xsl:apply-templates    select = "GivenName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "MiddleInitial"
                              mode = "copy"/>
    <xsl:apply-templates    select = "SurName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Prefix"
                              mode = "copy"/>
    <xsl:apply-templates    select = "GenerationSuffix"
                              mode = "copy"/>

    <!-- 
    If the ProfessionalSuffix element is prepared for the vendor output
    it's created from the Standard/Custom-ProfessionalSuffix elements
    (when clause).
    However, if the ProfessionalSuffic element is only to be copied -
    because it's the second pass of this filter module - the element 
    only needs to be copied as is (otherwise clause).
    ==================================================================== -->
    <xsl:choose>
     <xsl:when                test = "ProfessionalSuffix/
                                        StandardProfessionalSuffix |
                                      ProfessionalSuffix/
                                        CustomProfessionalSuffix">
      <ProfessionalSuffix>
       <xsl:for-each        select = "ProfessionalSuffix/
                                        StandardProfessionalSuffix |
                                      ProfessionalSuffix/
                                        CustomProfessionalSuffix">
        <!-- Clean up the periods of the Custom Prof Suffix  -->
        <xsl:choose>
         <xsl:when            test = "name() = 'CustomProfessionalSuffix'">
          <xsl:value-of     select = "translate(node(), '.', '')"/>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of     select = "."/>
         </xsl:otherwise>
        </xsl:choose>
        <xsl:if               test = "position() != last()">
         <xsl:text>, </xsl:text>
        </xsl:if>
       </xsl:for-each>
      </ProfessionalSuffix>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates  select = "ProfessionalSuffix"
                              mode = "copy"/>
     </xsl:otherwise>
    </xsl:choose>

    <xsl:apply-templates    select = "NameFormat"
                              mode = "copy"/>
   </PersonNameInformation>
 </xsl:template>


 <!-- *
 ====================================================================
 Update the ProtocolSite elements containing the attribute 
 SuppressContactInformation="Yes" to suppress Street, Phone, and Email 
 elements.
 Since the OrgSite and PrivatePracticeSite elements are already 
 converted to a ProtocolSite element at this point this is taking 
 care of both address types.
 Two templates are needed:
 a) Template to remove the SuppressContactInformation attribute itself
 b) Template to remove the elements not to be displayed if attribute
    exists.
 ==================================================================== -->
 <!-- a) Template to remove SuppressContactInformation attribute -->
 <xsl:template                   match = "ProtocolSite
                                            [@SuppressContactInformation]"
                                  mode = "copy">
  <xsl:copy>
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "@ref"/>
   </xsl:attribute>
   <xsl:attribute                 name = "sitetype">
    <xsl:value-of               select = "@sitetype"/>
   </xsl:attribute>
   <xsl:apply-templates           mode = "copy"/>
  </xsl:copy>
 </xsl:template>

 <!-- b) Template to remove elements not to be displayed if (a) matches -->
 <xsl:template                   match = "ProtocolSite
                                            [@SuppressContactInformation]/
                                            ProtPerson/
                                            Contact/
                                            ContactDetail/
                                            PostalAddress/
                                            Street             |
                                          ProtocolSite
                                            [@SuppressContactInformation]/
                                            ProtPerson/
                                            Contact/
                                            ContactDetail/
                                            Phone              |
                                          ProtocolSite
                                            [@SuppressContactInformation]/
                                            ProtPerson/
                                            Contact/
                                            ContactDetail/
                                            TollFreePhone      |
                                          ProtocolSite
                                            [@SuppressContactInformation]/
                                            ProtPerson/
                                            Contact/
                                            ContactDetail/
                                            WebSite            |
                                          ProtocolSite
                                            [@SuppressContactInformation]/
                                            ProtPerson/
                                            Contact/
                                            ContactDetail/
                                            Email"
                                  mode = "copy"/>


 <!-- *
 ====================================================================
 Update the ClinicalTrialsOffice elements containing the attribute 
 ctOffice="Yes" to suppress Street element.
 Two templates are needed:
 a) Template to remove the ctOffice attribute itself
 b) Template to remove the Street element not to be displayed if attribute
    exists.
 ==================================================================== -->
 <!-- a) Template to remove ctOffice attribute -->
 <xsl:template                   match = "Contact
                                            [@ctOffice]"
                                  mode = "copy">
  <xsl:copy>
   <xsl:apply-templates           mode = "copy"/>
  </xsl:copy>
 </xsl:template>

 <!-- b) Template to remove Street element if (a) matches -->
 <xsl:template                   match = "Contact
                                            [@ctOffice]/
                                            ContactDetail/
                                            PostalAddress/
                                            Street"
                                  mode = "copy"/>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:id with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:id"
                              mode = "copy">
   <xsl:attribute             name = "id">
    <xsl:value-of           select = "."/>
   </xsl:attribute>
 </xsl:template>

 <!--
 ====================================================================
 Drop the cdr namespace in cdr:ref with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:ref"
                              mode = "copy">
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "."/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:xref with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:xref"
                              mode = "copy">
   <xsl:attribute             name = "xref">
    <xsl:value-of           select = "."/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:ref with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@PreviousLocation"
                              mode = "copy">
   <xsl:attribute             name = "status">
    <xsl:value-of           select = "'Inactive--Contact information may not be current'"/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the PdqKey attribute with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@PdqKey"
                              mode = "copy">
 </xsl:template>


 <!--
 ====================================================================
 Drop the MailAbstractTo attribute which is needed for mailers only
 ==================================================================== -->
 <xsl:template               match = "@MailAbstractTo"
                              mode = "copy"/>

 <!--
 ====================================================================
 Drop the AddressType attribute which was introduced for QC reports.
 ==================================================================== -->
 <xsl:template               match = "@AddressType"
                              mode = "copy">
 </xsl:template>


 <!--
 ====================================================================
 Drop the CIPSContact attribute which is needed for mailers only.
 Ditto for MailAbstractTo.
 ==================================================================== -->
 <xsl:template               match = "@CIPSContact | @MailAbstractTo"
                              mode = "copy"/>


 <!--
 Drop ref attribute for the PublishedResult element.  This attribute
 is included for the QC reports only.
 ===================================================================== -->
 <xsl:template               match = "PublishedResults/@ref"
                              mode = "copy"/>
                               

 <!--
 Drop native attribute for the TollFreePhone element.  This attribute
 is included for the QC reports only.
 ===================================================================== -->
 <xsl:template               match = "TollFreePhone/@native |
                                      PostalAddress/@native"
                              mode = "copy"/>
                               

 <!-- 
 =====================================================================
 Suppress nodes with or without copy mode that are not to be displayed
 in vendor output.
 ===================================================================== -->
 <xsl:template               match = "Fax |
                                      DocId |
                                      PdqKey | 
                                      Comment |
                                      CdrDocCtl |
                                      CIPSContact |
                                      ProtocolDesign |
                                      StandardWording |
                                      OrganizationDetails |
                                      PoliticalSubUnitShortName |
                                      AdministrativeInformation"/>  
  
 <xsl:template               match = "Fax |
                                      DocId |
                                      PdqKey | 
                                      Comment |
                                      CdrDocCtl |
                                      CIPSContact |
                                      ProtocolDesign |
                                      StandardWording |
                                      OrganizationDetails |
                                      PoliticalSubUnitShortName |
                                      AdministrativeInformation"
                              mode = "copy"/>


 <!-- 
 =====================================================================
 Suppress PoliticalUnitShortName nodes with or without copy mode.  
 However, keep the element for the PoliticalSubUnit document type.
 ===================================================================== -->
 <xsl:template               match = "PoliticalSubUnitShortName">
  <xsl:if                     test = "name(..) = 'PoliticalSubUnit'">
   <xsl:copy>
    <xsl:apply-templates/>
   </xsl:copy>
  </xsl:if>
 </xsl:template>
  
 <xsl:template               match = "PoliticalSubUnitShortName"
                              mode = "copy">
  <xsl:if                     test = "name(..) = 'PoliticalSubUnit'">
   <xsl:copy>
    <xsl:apply-templates      mode = "copy"/>
   </xsl:copy>
  </xsl:if>
 </xsl:template>


 <!-- 
 =====================================================================
 Don't export protocol lead organizations with status of "Withdrawn."
 ===================================================================== -->
 <xsl:template               match = "ProtocolLeadOrg
                                      [LeadOrgProtocolStatus/
                                       StatusName = 'Withdrawn']"/>
 <xsl:template               match = "ProtocolLeadOrg
                                      [LeadOrgProtocolStatus/
                                       StatusName = 'Withdrawn']"
                              mode = "copy"/>

 <!-- 
 =====================================================================
 Don't display LeadOrgPersonnel with Public="No" attribute.
 ===================================================================== -->
 <xsl:template               match = "LeadOrgPersonnel/
                                      ProtPerson[@Public = 'No']"
                              mode = "copy">
 </xsl:template>


 <!-- 
 =====================================================================
 Don't keep LeadOrgPersonnel whose only role is 'Update person'
 and ensure that the Public="No" attribute does not exist.

 NOTE: We don't have business rules from the users for what to do
       if more than one PersonRole with values other than 'Update
       person' are present, so we just pass them all through, making
       the resulting output invalid (since the DTD only allows one
       occurrence here).
 ===================================================================== -->
 <xsl:template               match = "LeadOrgPersonnel/
                                      ProtPerson[not(@Public)]"
                              mode = "copy">
  <xsl:if                     test = "(PersonRole != 'Update person') or
                                      (PersonRole = 'Update person' and
                                       count(PersonRole) &gt; 1)">
   <ProtPerson>
    <xsl:if                   test = "@ref">
     <xsl:copy-of           select = "@ref"/>
    </xsl:if>
    <xsl:if                   test = "@status">
     <xsl:copy-of           select = "@status"/>
    </xsl:if>
    <xsl:apply-templates    select = "PersonNameInformation"
                              mode = "copy"/>
    <xsl:for-each           select = "PersonRole">
     <xsl:if                  test = ". != 'Update person'">
      <xsl:apply-templates  select = "."
                              mode = "copy"/>
     </xsl:if>
    </xsl:for-each>
    <xsl:apply-templates    select = "Contact"
                              mode = "copy"/>
   </ProtPerson>
  </xsl:if>  
 </xsl:template>

 <!--
 ====================================================================
 Drop the Email and Phone elements with attribute Public = 'No'.
 Note:  Since the QC report needs these displayed it is being 
        filtered out at the last step creating the vendor output.
 ==================================================================== -->
 <xsl:template               match = "Email | 
                                      Phone"
                              mode = "copy">
  <xsl:if                     test = "not(@Public)">
   <xsl:element               name = "{name()}">
    <xsl:value-of           select = "."/>
   </xsl:element>
  </xsl:if>
 </xsl:template>

 <xsl:template               match = "Email |
                                      Phone">
  <xsl:if                     test = "not(@Public)">
   <xsl:element               name = "{name()}">
    <xsl:value-of           select = "."/>
   </xsl:element>
  </xsl:if>
 </xsl:template>


 <!--
 ====================================================================
 Drop the WebSite element with attribute native = 'no'.
 Note:  Since the QC report needs this displayed it is being 
        filtered out at the last step creating the vendor output.
 ==================================================================== -->
 <xsl:template               match = "WebSite"
                              mode = "copy">
  <xsl:if                     test = "not(@native)">
   <xsl:element               name = "{name()}">
    <xsl:attribute            name = "xref">
     <xsl:value-of          select = "@xref"/>
    </xsl:attribute>
    <xsl:value-of           select = "."/>
   </xsl:element>
  </xsl:if>
 </xsl:template>
 <xsl:template               match = "WebSite">
  <xsl:if                     test = "not(@native)">
   <xsl:element               name = "{name()}">
    <xsl:attribute            name = "xref">
     <xsl:value-of          select = "@xref"/>
    </xsl:attribute>
    <xsl:value-of           select = "."/>
   </xsl:element>
  </xsl:if>
 </xsl:template>


 <!-- 
 =====================================================================
 Suppress Protocol Title with Audience Attribute of Original from 
 vendor output.
 ===================================================================== -->
 <xsl:template               match = "ProtocolTitle[@Audience = 'Original']"
                              mode = "copy"/>  

 <!-- 
 =====================================================================
 Suppress the ProtocolIDs/OtherID node from vendor output but only
 if the IDType is "CTEP ID".
 ===================================================================== -->
 <xsl:template               match = "ProtocolIDs/
                                      OtherID[IDType = 'CTEP ID']"
                              mode = "copy"/>

 <!--
 =========================================================================
 Identify if an element with an href attribute points to a non-publishable
 document.  If it does remove the element tags and display a warning
 message.
 ========================================================================= -->
 <xsl:template               match = "ProtocolRef | LOERef |
                                      SummaryRef  | GlossaryTermRef"
                              mode = "copy">
  <xsl:variable               name = "pubVersion"
                            select = "document(concat('cdrutil:/get-pv-num/',
                                                       @cdr:href | @href))"/>

  <xsl:choose>
   <xsl:when                  test = "$pubVersion = 0">
    <xsl:message         terminate = "no">
     <xsl:text>Publishable Version of document </xsl:text>
     <xsl:value-of         select = "@cdr:href | @href"/>
     <xsl:text> does not exist.&lt;BR/&gt;</xsl:text>
    </xsl:message> 
    <xsl:value-of           select = "concat(' ', .)"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element              name = "{name()}">
     <xsl:attribute           name = "href">
      <xsl:value-of         select = "@cdr:href | @href"/>
     </xsl:attribute>
     <xsl:apply-templates     mode = "copy"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>

 </xsl:template>


</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>