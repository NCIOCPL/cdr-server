<CdrDoc Type='Filter' Id='CDR0000000150'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Vendor Filter: InScopeProtocol</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>

<xsl:transform           xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                         xmlns:cdr = "cips.nci.nih.gov/cdr"
           exclude-result-prefixes = "cdr"
                           version = "1.0">

  <xsl:include href = "cdr:name:Module: Vendor Filter Templates"/>
  
 <xsl:output                method = "xml"
              omit-xml-declaration = "no"
                          encoding = "UTF-8"
                            indent = 'yes'/>
  
  <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
  <xsl:param                      name = "DateFirstPub"
                                select = "''"/> 

 <!--
 ====================================================================
 Root element.
 ==================================================================== -->
 <xsl:template               match = "/">
  <xsl:text disable-output-escaping="yes">&lt;!DOCTYPE Protocol &gt;</xsl:text>
  <xsl:apply-templates      select = "InScopeProtocol"/>
 </xsl:template>

 <!--
 ====================================================================
 Document element.
 ==================================================================== -->
 <xsl:template               match = "InScopeProtocol">

  <Protocol>
  <xsl:attribute              name = "id">
    <xsl:value-of           select = "DocId"/>
  </xsl:attribute>
  <xsl:attribute              name = "LegacyPDQID">
    <xsl:value-of           select = "PdqKey"/>
  </xsl:attribute>

   <ProtocolIDs>
     <xsl:apply-templates     select = "ProtocolIDs/PrimaryID"/>
     <xsl:apply-templates     select = "ProtocolIDs/OtherID"/>
   </ProtocolIDs>

   <xsl:apply-templates     select = "FundingInfo"/>
   <xsl:apply-templates     select = "ProtocolSponsors"/>
   <xsl:apply-templates     select = "ReimbursementApproval"
                              mode = "copy"/>

   <!-- Rename the ProtocolTitle Type attribute to Audience. -->
   <xsl:if                    test = "ProtocolTitle[@Type='Professional']">
    <ProtocolTitle        Audience = "Professional">
     <xsl:value-of          select = "ProtocolTitle[@Type='Professional']"/>
    </ProtocolTitle>
   </xsl:if>
   <xsl:if                    test = "ProtocolTitle[@Type='Patient']">
    <ProtocolTitle        Audience = "Patient">
     <xsl:value-of          select = "ProtocolTitle[@Type='Patient']"/>
    </ProtocolTitle>
   </xsl:if>
 
   <!-- Use custom templates for these. -->
   <xsl:apply-templates     select = "ProtocolAbstract"/>
   <xsl:apply-templates     select = "ProtocolDetail"/>
 
   <!-- Use generic copy templates for these. -->
   <xsl:apply-templates     select = "Eligibility"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProtocolRelatedLinks"
                              mode = "copy"/>
   <xsl:apply-templates     select = "PublishedResults"/>
   <xsl:apply-templates     select = "ProtocolPhase"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProtocolSpecialCategory"/>

   <!-- Use custom templates for these. -->
   <xsl:apply-templates     select = "ProtocolAdminInfo"/>

<!-- ===================================================================
            Copy Date First Published and Date Last Modified
     ================================================================== -->
  <xsl:choose>
    <xsl:when                     test = "CdrDocCtl/FirstPub/Date">
      <DateFirstPublished>
      <xsl:value-of             select = "substring-before(CdrDocCtl/
                                            FirstPub/Date,'T')"/>
      </DateFirstPublished>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template          name = "getDateFirstPub">
        <xsl:with-param           name = "date"
                                select = "$DateFirstPub"/>
      </xsl:call-template>    
    </xsl:otherwise>
  </xsl:choose>

   <xsl:apply-templates     select = "DateLastModified"
                              mode = "copy"/>
  </Protocol>
 </xsl:template>

 <!--
 ====================================================================
 Protocols have two flavors of abstracts: Professional and Patient.
 ==================================================================== -->
 <xsl:template               match = "ProtocolAbstract">
  <ProtocolAbstract>
   <xsl:apply-templates     select = "Professional"
                              mode = "abstract"/>
   <xsl:apply-templates     select = "Patient"
                              mode = "abstract"/>
  </ProtocolAbstract>
 </xsl:template>



 <!--
 ====================================================================
 Rename the element tags for ProtocolSponsors
 ==================================================================== -->
 <xsl:template               match = "ProtocolSponsors">
  <xsl:for-each             select = "SponsorName">
   <ProtocolSponsor>
    <xsl:value-of          select = "."/>
   </ProtocolSponsor>
  </xsl:for-each>
 </xsl:template>


 <!--
 ====================================================================
 Funding info may contain Comment element in NIHGrantContract or 
 OtherGrantContractInfo elements that should not to displayed.
 ==================================================================== -->
 <xsl:template               match = "FundingInfo">
   <FundingInfo>
    <xsl:for-each           select = "NIHGrantContract">
      <xsl:apply-templates  select = "."/>
    </xsl:for-each>
    <xsl:for-each           select = "OtherGrantContractInfo">
      <xsl:apply-templates  select = "."/>
    </xsl:for-each>
   </FundingInfo>
 </xsl:template>


 <!--
 ====================================================================
 Copy NIHGrantContract info without displaying comment element
 ==================================================================== -->
 <xsl:template               match = "NIHGrantContract">
  <NIHGrantContract>
   <xsl:apply-templates     select = "NIHGrantContractType"
                              mode = "copy"/>
   <xsl:apply-templates     select = "GrantContractNo"
                              mode = "copy"/>
  </NIHGrantContract>
 </xsl:template>


 <!--
 ====================================================================
 Dispaly OtherGrantContractInfo without displaying comment element.
 ==================================================================== -->
 <xsl:template               match = "OtherGrantContractInfo">
  <OtherGrantContractInfo>
   <xsl:apply-templates     select = "GrantContractNo"
                              mode = "copy"/>
  </OtherGrantContractInfo>
 </xsl:template>


 <!--
 ====================================================================
 Assemble the Professional abstract.
 ==================================================================== -->
 <xsl:template               match = "Professional"
                              mode = "abstract">
  <Professional>
   <xsl:apply-templates     select = "Objectives"
                              mode = "copy"/>
   <xsl:apply-templates     select = "Outline"
                              mode = "copy"/>
   <xsl:apply-templates     select = "EntryCriteria"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProjectedAccrual"
                              mode = "copy"/>
   <xsl:apply-templates     select = "EndPoints"
                              mode = "copy"/>
   <xsl:apply-templates     select = "Stratification"
                              mode = "copy"/>
   <xsl:apply-templates     select = "SpecialStudyParameters"
                              mode = "copy"/>
   <xsl:apply-templates     select = "DoseSchedule"
                              mode = "copy"/>
   <xsl:apply-templates     select = "DosageForm"
                              mode = "copy"/>
 
   <xsl:apply-templates     select = "ProfessionalDisclaimer"
                              mode = "copy"/>

  </Professional>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the Patient abstract.
 ==================================================================== -->
 <xsl:template               match = "Patient"
                              mode = "abstract">
  <Patient>
   <Rationale>
    <xsl:apply-templates    select = "Rationale"/>
   </Rationale>
   <Purpose>
    <xsl:apply-templates    select = "Purpose"/>
   </Purpose>
   <EligibilityText>
    <xsl:apply-templates    select = "EligibilityText"/>
   </EligibilityText>
   <TreatmentIntervention>
    <xsl:apply-templates    select = "TreatmentIntervention"/>
   </TreatmentIntervention>
   <xsl:apply-templates     select = "PatientDisclaimer"
                              mode = "copy"/>
  </Patient>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the Protocol detail section.
 ==================================================================== -->
 <xsl:template               match = "Rationale       |
                                      Purpose         |
                                      EligibilityText |
                                      TreatmentIntervention">
   <xsl:apply-templates/>
 </xsl:template>


<!-- ==================================================================== 
     Create the ItemizedList template. 
     ==================================================================== -->
  <xsl:template              match = "ItemizedList">
    <ItemizedList>
      <xsl:attribute          name = "id">
        <xsl:value-of       select = "./@id"/>
      </xsl:attribute>
      <xsl:if                 test = "./@Style">
       <xsl:attribute          name = "Style">
        <xsl:value-of       select = "./@Style"/>
       </xsl:attribute>
      </xsl:if>
      <xsl:if                 test = "./@Compact">
       <xsl:attribute          name = "Compact">
        <xsl:value-of       select = "./@Compact"/>
       </xsl:attribute>
      </xsl:if>
      <xsl:apply-templates/>
    </ItemizedList>
  </xsl:template>
    


<!-- ==================================================================== 
     Create the OrderedList template.
     ==================================================================== -->
  <xsl:template              match = "OrderedList">
    <OrderedList>
      <xsl:attribute          name = "id">
        <xsl:value-of       select = "./@id"/>
      </xsl:attribute>
      <xsl:if                 test = "./@Style">
       <xsl:attribute          name = "Style">
        <xsl:value-of       select = "./@Style"/>
       </xsl:attribute>
      </xsl:if>
      <xsl:apply-templates/>
    </OrderedList>
  </xsl:template>
    


<!-- ==================================================================== 
     Create the ListItems for ItemizedList and OrderedList.
     ==================================================================== -->
  <xsl:template              match = "ListItem">
    <ListItem>
      <xsl:apply-templates/>
    </ListItem>
  </xsl:template>
    

<!-- ==================================================================== 
     Create the ListTitle
     ==================================================================== -->
  <xsl:template              match = "ListTitle">
    <ListTitle>
      <xsl:apply-templates/>
    </ListTitle>
  </xsl:template>
    

 <!--
 ====================================================================
 Assemble the Para element.
 ==================================================================== -->
 <xsl:template               match = "Para">
  <Para>
   <xsl:attribute             name = "id">
    <xsl:value-of           select = "@id"/>
   </xsl:attribute>
   <xsl:apply-templates/>
  </Para>
 </xsl:template>


 <!-- ==============================================================
      Template for extracting Glossary Term definitions for Patient
      Abstract section
      ============================================================== -->
 <xsl:template               match = "GlossaryTermRef">
    <GlossaryTermRef>
      <xsl:attribute          name = "href">
       <xsl:value-of        select = "@cdr:href"/>
      </xsl:attribute>
      <xsl:apply-templates/>
    </GlossaryTermRef>
  </xsl:template>


 <!-- ==============================================================
      Remove the GlossaryTerm entries from the vendor output
      ============================================================== -->
 <xsl:template               match = "GlossaryTerm">
  </xsl:template>


 <!--
 ====================================================================
 Assemble the Protocol detail section.
 ==================================================================== -->
 <xsl:template               match = "ProtocolDetail">
  <ProtocolDetail>
   <xsl:apply-templates     select = "StudyType"
                              mode = "copy"/>
   <xsl:apply-templates     select = "StudyCategory"/>
   <xsl:apply-templates     select = "StudyCondition"
                              mode = "copy"/>
   <xsl:apply-templates     select = "Gene"
                              mode = "copy"/>
  </ProtocolDetail>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the Protocol admin info.
 NOTE: This logic discards the relationship between the individual
       lead organizations for the protocol and the protocol sites
       associated with each of the lead organizations!
 ==================================================================== -->
 <xsl:template               match = "ProtocolAdminInfo">
  <ProtocolAdminInfo>
   <xsl:apply-templates     select = "CurrentProtocolStatus"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProtocolLeadOrg"/>

 <!-- Only display the ProtocolSites for Active Protocols           -->
   <xsl:if                    test = "(/InScopeProtocol/ProtocolAdminInfo/
                                      CurrentProtocolStatus = 
                                      'Active')">

 <!-- Only create the ProtocolSites element if Active Sites exist and only
      if its parent is active as well                               -->
    <xsl:if                   test = "(ProtocolLeadOrg[LeadOrgProtocolStatuses/
                                                       CurrentOrgStatus/
                                                       StatusName = 'Active']/
                                       ProtocolSites/
                                       OrgSite[OrgSiteStatus = 'Active'])">
     <ProtocolSites>
      <xsl:apply-templates  select = "ProtocolLeadOrg/ProtocolSites"/>
     </ProtocolSites>
    </xsl:if>
   </xsl:if>
  </ProtocolAdminInfo>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the information for one lead organization.  Don't pick up
 the protocol sites linked to this lead organization.  They get lumped
 together in one amorphous pile following the lead organizations.
 ==================================================================== -->
 <xsl:template               match = "ProtocolLeadOrg">
  <ProtocolLeadOrg>
   <LeadOrgName>
    <xsl:attribute            name = "ref">
     <xsl:value-of          select = "@ref"/>
    </xsl:attribute>
    <xsl:value-of           select = "OfficialName/Name"/>
   </LeadOrgName>
   <xsl:apply-templates     select = "LeadOrgRole"
                              mode = "copy"/>
   <xsl:apply-templates     select = "LeadOrgProtocolID"
                              mode = "copy"/>
   <LeadOrgProtocolStatus>
    <xsl:apply-templates    select = "LeadOrgProtocolStatuses/
                                      CurrentOrgStatus/StatusName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "LeadOrgProtocolStatuses/
                                      CurrentOrgStatus/StatusDate"
                              mode = "copy"/>
   </LeadOrgProtocolStatus>

   <!-- LeadOrgPersonnel with Public=No attribute is not to be published
        ================================================================ -->
   <xsl:if                    test = "not(LeadOrgPersonnel/@Public = 'No')">
     <LeadOrgPersonnel>
      <xsl:apply-templates    select = "LeadOrgPersonnel"/>
     </LeadOrgPersonnel>
   </xsl:if>

  </ProtocolLeadOrg>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the information for one lead org person.
 Note that in the licensee DTD LeadOrgPersonnel refers to the 
 collection of persons for the lead org, while in the CDR Schema,
 each person has his/her own LeadOrgPersonnel element.

 The Person is only to be displayed if the person's only role is not
 that of an Update person
 ==================================================================== -->
 <xsl:template               match = "LeadOrgPersonnel">
  <xsl:if                     test = "not(PersonRole='Update person') or
                                         (PersonRole='Update person'
                                          and count(PersonRole) &gt; 1)">
  <ProtPerson>
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "Person/@ref"/>
   </xsl:attribute>

   <!-- If the status attribute exists the person's status is inactive
        and a special note has to be displayed to this effect.         -->
   <xsl:if                    test = "Person/@status">
    <xsl:attribute             name = "status">
     <xsl:text>Inactive - Contact information may not be current</xsl:text>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates     select = "Person/PersonNameInformation"/>


   <!-- The PersonRole of Update Person is CIPS internal information
        and not intended for the vendors
        ============================================================ -->
   <xsl:for-each            select = "PersonRole">
    <xsl:if                   test = "not(.='Update person')">
     <xsl:apply-templates   select = "."
                              mode = "copy"/>
    </xsl:if>
   </xsl:for-each>
   <Contact>

    <!-- XXX This is optional in the DTD, and I think it's probably
             meant for generic person elements, so I'm omitting it here.
             We've already got the PersonNameInformation, after all.
    <ContactName/>
    -->

    <ContactDetail>
    
     <!-- XXX Not needed, according to Volker's original filter. 
              Also, the denormalization filter doesn't have this
              information (I don't think), so although the DTD
              has it, it's optional, so I'm leaving it out here.
     <xsl:attribute           name = "id">
      ???
     </xsl:attribute>
     -->

     <!-- Added at Lakshmi's request RMK 2002-09-08. -->
     <xsl:for-each          select = "Person/OrganizationAddressNames/
                                      OrganizationName">
      <OrganizationName>
       <xsl:value-of        select = "."/>
      </OrganizationName>
     </xsl:for-each>

     <PostalAddress>
      <xsl:apply-templates  select = "Person/Street"
                              mode = "copy"/>
      <xsl:apply-templates  select = "Person/City"
                              mode = "copy"/>
      <xsl:apply-templates  select = "Person/CitySuffix"
                              mode = "copy"/>
      <xsl:apply-templates  select = "Person/PoliticalSubUnit_State"/>
      <xsl:apply-templates  select = "Person/Country"/>
      <xsl:apply-templates  select = "Person/PostalCode_ZIP"
                              mode = "copy"/>
      <xsl:apply-templates  select = "Person/PostalCodePosition"
                              mode = "copy"/>
     </PostalAddress>

     <!-- Volker's original had these outside the ContactDetail
          element, but that didn't seem right after looking at
          the DTD. -->
     <!-- Phone with Public=No attribute is not to be published -->
     <!-- ===================================================== -->
     <xsl:apply-templates   select = "Person/Phone"/>
     <xsl:apply-templates   select = "Person/TollFreePhone"
                              mode = "copy"/>

     <!-- Email with Public=No attribute is not to be published -->
     <!-- ===================================================== -->
     <xsl:if                  test = "not(Person/Email/@Public = 'No')">
       <xsl:apply-templates select = "Person/Email"/>
     </xsl:if>
     <xsl:apply-templates   select = "Person/WebSite"
                              mode = "copy"/>

    </ContactDetail>
   </Contact>
  </ProtPerson>
  </xsl:if>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the state element.  This template collapses two element
 layers into one, combining the 'ref' attribute from the parent
 PoliticalSubUnit_State element with the text content of the child
 PoliticalSubUnitFullName element, using a new PoliticalSubUnitName
 name for the combo element.
 ==================================================================== -->
 <xsl:template               match = "PoliticalSubUnit_State">
  <PoliticalSubUnitName>
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "@ref"/>
   </xsl:attribute>
   <xsl:value-of            select = "PoliticalSubUnitFullName"/>
 <!-- XXX Problem in denormalization filter.  Displaying PoliticalSubUnit
      text nodes until problem is fixed 
      =============================================================== -->
   <xsl:value-of            select = "PoliticalSubUnit_State"/>
  </PoliticalSubUnitName>
 </xsl:template>

 <!--
 ====================================================================
 Put together the Country element.
 XXX Note that there is a bug in the denormalization filter for
     this document type, resulting in two Country elements, one
     with a cdr:ref attribute, and the other with a ref attribute.
     This version assumes that the one with the ref attribute will
     be kept.  Fix this template if the assumption is incorrect.
 ==================================================================== -->
 <xsl:template               match = "Country">
  <CountryName>
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "@ref"/>
   </xsl:attribute>
   <xsl:value-of            select = "CountryFullName"/>
  </CountryName>
 </xsl:template>


 <!--
 ====================================================================
 Put together the information for one participating organization.
 The ProtocolSites are only populated if the CurrentProtocolStatus
 is Active.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolSites">

 <!-- Do not display this ProtocolSite if its parent is not active as well -->
 <xsl:if                          test = "(../LeadOrgProtocolStatuses/
                                           CurrentOrgStatus
                                           [StatusName = 'Active'])">

  <xsl:for-each                 select = "OrgSite">
   <xsl:if                        test = "OrgSiteStatus = 'Active'">
    <ProtocolSite                  ref = "{@ref}"
                              sitetype = "Organization">
     <SiteName>
      <xsl:value-of             select = "OfficialName/Name"/>
     </SiteName>

     <!-- ProtPerson -->
     <xsl:apply-templates       select = "OrgSiteContact/SpecificPerson|
                                          OrgSiteContact/GenericPerson"/>
     <!-- /ProtPerson -->

    </ProtocolSite>
   </xsl:if>
  </xsl:for-each>

  <!-- Added code to pick up private practice sites.  RMK 2002-09-06. -->
  <xsl:for-each                 select = "PrivatePracticeSite">
   <xsl:variable                  name = "name"
                                select = "PrivatePracticePerson/
                                          PersonNameInformation"/>
   <ProtocolSite                   ref = "{@ref}"
                              sitetype = "Person">
    <xsl:apply-templates        select = "PrivatePracticePerson"/>
   </ProtocolSite>
  </xsl:for-each>
  </xsl:if>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the output for a specific person identified as the 
 contact for a participating organization.
 ==================================================================== -->
 <xsl:template               match = "SpecificPerson|PrivatePracticePerson">
  <ProtPerson>
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "@ref"/>
   </xsl:attribute>

   <!-- If the status attribute exists the person's status is inactive
        and a special note has to be displayed to this effect.         -->
   <xsl:if                    test = "@status">
    <xsl:attribute            name = "status">
     <xsl:text>Inactive - Contact information may not be current</xsl:text>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates     select = "PersonNameInformation"/>
   <PersonRole>
    <xsl:value-of           select = "Role"/>
   </PersonRole>
   <Contact>
   <!-- This had been entered by Bob but although the DTD allows for a
        status attribute for the Contact element it is not clear where 
        this is coming from.  
        The status attribute for the SpecificPerson template is identifying
        instead if a person is active (default) or inactive (when set) 
        Eliminating the attribute from the contact element.  VE, 10/08/02
    <xsl:if                   test = "$status">
     <xsl:attribute           name = "Status">
      <xsl:value-of         select = "$status"/>
     </xsl:attribute>
    </xsl:if> -->

    <!-- XXX The original filter didn't have this element here at all. -->
    <ContactDetail>

     <!-- Added at Lakshmi's request RMK 2002-09-08. -->
     <xsl:for-each          select = "OrganizationAddressNames/
                                      OrganizationName">
      <OrganizationName>
       <xsl:value-of        select = "."/>
      </OrganizationName>
     </xsl:for-each>

     <PostalAddress>
      <xsl:apply-templates  select = "Street"
                              mode = "copy"/>
      <xsl:apply-templates  select = "City"
                              mode = "copy"/>
      <xsl:apply-templates  select = "CitySuffix"
                              mode = "copy"/>
      <xsl:apply-templates  select = "PoliticalSubUnit_State"/>
      <xsl:apply-templates  select = "Country"/>
      <xsl:apply-templates  select = "PostalCode_ZIP"
                              mode = "copy"/>
      <xsl:apply-templates  select = "PostalCodePosition"
                              mode = "copy"/>
     </PostalAddress>

     <!-- Phone with Public=No attribute is not to be published -->
     <!-- ===================================================== -->
     <xsl:apply-templates   select = "Phone"/> <!-- XXXX not tested (VE) -->
     <xsl:apply-templates   select = "TollFreePhone"
                              mode = "copy"/>

     <!-- Email with Public=No attribute is not to be published -->
     <!-- ===================================================== -->
     <xsl:if                  test = "not(Email/@Public = 'No')">
       <xsl:apply-templates select = "Email"/>
     </xsl:if>
     <xsl:apply-templates   select = "WebSite"
                              mode = "copy"/>

    </ContactDetail>

   </Contact>
  </ProtPerson>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the output for a specific person identified as the 
 contact for a participating organization.
 ==================================================================== -->
 <xsl:template               match = "GenericPerson">
  <ProtPerson>
   <PersonRole>
    <xsl:value-of           select = "PersonTitle"/>
   </PersonRole>
   <Contact>
    <ContactName>
     <xsl:value-of          select = "ContactName"/>
    </ContactName>

    <ContactDetail>

     <!-- Added at Lakshmi's request RMK 2002-09-08. -->
     <xsl:for-each          select = "OrganizationAddressNames/
                                      OrganizationName">
      <OrganizationName>
       <xsl:value-of        select = "."/>
      </OrganizationName>
     </xsl:for-each>

     <PostalAddress>
      <xsl:apply-templates  select = "Street"
                              mode = "copy"/>
      <xsl:apply-templates  select = "City"
                              mode = "copy"/>
      <xsl:apply-templates  select = "CitySuffix"
                              mode = "copy"/>
      <xsl:apply-templates  select = "PoliticalSubUnit_State"/>
      <xsl:apply-templates  select = "Country"/>
      <xsl:apply-templates  select = "PostalCode_ZIP"
                              mode = "copy"/>
      <xsl:apply-templates  select = "PostalCodePosition"
                              mode = "copy"/>
     </PostalAddress>

     <!-- Phone with Public=No attribute is not to be published
          (Does it make sense to list a Generic Person with
           Public=No?)  (VE)
          ===================================================== -->
     <xsl:apply-templates   select = "Phone"/> <!-- XXXX not tested (VE) -->
     <xsl:apply-templates   select = "TollFreePhone"
                              mode = "copy"/>

     <!-- Email with Public=No attribute is not to be published -->
     <!-- ===================================================== -->
     <xsl:if                  test = "not(Email/@Public = 'No')">
       <xsl:apply-templates select = "Email"/>
     </xsl:if>
     <xsl:apply-templates   select = "WebSite"
                              mode = "copy"/>
    </ContactDetail>
   </Contact>
  </ProtPerson>
 </xsl:template>


 <!--
 ====================================================================
 Assemble the PersonNameInformation for a person.
 (Eliminating the StandardProfessionalSuffix element)
 ==================================================================== -->
 <xsl:template               match = "PersonNameInformation">
   <PersonNameInformation>
    <xsl:apply-templates    select = "GivenName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "MiddleInitial"
                              mode = "copy"/>
    <xsl:apply-templates    select = "SurName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Prefix"
                              mode = "copy"/>
    <xsl:apply-templates    select = "GenerationSuffix"
                              mode = "copy"/>
    <ProfessionalSuffix>
     <xsl:for-each          select = "ProfessionalSuffix/
                                        StandardProfessionalSuffix |
                                      ProfessionalSuffix/
                                        CustomProfessionalSuffix">
       <xsl:value-of        select = "."/>
       <xsl:if                test = "position() != last()">
         <xsl:text>, </xsl:text>
       </xsl:if>
     </xsl:for-each>
    </ProfessionalSuffix>
    <xsl:apply-templates    select = "NameFormat"
                              mode = "copy"/>
   </PersonNameInformation>
 </xsl:template>


 <!--
 ====================================================================
 Add citation IDs as attributes
 ==================================================================== -->
 <xsl:template               match = "PublishedResults">
    <xsl:apply-templates    select = "Citation"/>
 </xsl:template>


 <!--
 ====================================================================
 Add citation IDs as attributes
 ==================================================================== -->
 <xsl:template               match = "StudyCategory">
   <StudyCategory>
    <xsl:apply-templates    select = "StudyCategoryName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Intervention"
                              mode = "copy"/>
   </StudyCategory>
 </xsl:template>



 <!--
 ====================================================================
 Remove any comments from the output
 ==================================================================== -->
 <xsl:template               match = "PrimaryID | OtherID">
   <xsl:element               name = "{name()}">
    <xsl:apply-templates    select = "IDType"
                              mode = "copy"/>
    <xsl:apply-templates    select = "IDString"
                              mode = "copy"/>
   </xsl:element>
 </xsl:template>



 <!--
 ====================================================================
 Include the ProtocolSpecialCategory element in the output
 ==================================================================== -->
 <xsl:template               match = "ProtocolSpecialCategory">
   <xsl:element               name = "{name()}">
    <xsl:value-of           select = "SpecialCategory"/>
   </xsl:element>
 </xsl:template>

 <!--
 ====================================================================
 Only display the e-mail if the attribute Public is missing or Yes.
 ==================================================================== -->
 <xsl:template               match = "Email">
    <Email>
     <xsl:value-of          select = "."/>
    </Email>
 </xsl:template>



 <!--
 ====================================================================
 Process the Phone element:
 ++++++++++++++++++++++++++
 The denormalization filter provides three possible phone numbers, 
 the Phone, the TollFreePhone, and the OrgPhone.  The rule for 
 displaying the numbers are: 
 a) The Phone element is always to be displayed if it exists unless the 
    Public=No attribute exists (see option (c) to handle this case).
 b) The TollFreePhone is always to be displayed if it exists.
 c) If the Phone element exists but the Public=No attribute exists 
    as well and the TollFreePhone does not exist display the OrgPhone 
    as the persons Phone element.
 ==================================================================== -->
 <xsl:template               match = "Phone">
    <xsl:choose>
     <xsl:when                test = "not(@Public = 'No')">
       <xsl:apply-templates select = "."
                              mode = "copy"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when              test = "../TollFreePhone">
        <!-- Do not display Phone element since TollFreePhone exists -->
       </xsl:when>
       <xsl:otherwise>
        <xsl:if                test = "../OrgPhone">
         <Phone>
          <xsl:value-of       select = "../OrgPhone"/>
         </Phone>
        </xsl:if>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>
 </xsl:template>




 <!--
 ====================================================================
 Add citation IDs as attributes
 ==================================================================== -->
 <xsl:template               match = "Citation">
  <PublishedResults>
    <xsl:if                   test = "MedlineID">
     <xsl:attribute           name = "MedlineID">
      <xsl:value-of         select = "MedlineID"/>
     </xsl:attribute>
    </xsl:if>
    <xsl:if                   test = "PMID">
     <xsl:attribute           name = "PMID">
      <xsl:value-of         select = "PMID"/>
     </xsl:attribute>
    </xsl:if>
    <xsl:if                   test = "CancerLitID">
     <xsl:attribute           name = "CancerlitID">
      <xsl:choose>
       <xsl:when              test = "contains(CancerLitID, 'ICDB/')">
        <xsl:value-of       select = "substring(CancerLitID, 6)"/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:value-of   select = "CancerLitID"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:attribute>
    </xsl:if>
    <xsl:value-of           select = "CitationText"/>
  </PublishedResults>
 </xsl:template>


 <xsl:template                   match = "Note">
  <xsl:element                    name = "Note">
   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>


<!-- ======================================================================
     WARNING: Overwrite the default action for text node.
     This template must be placed below all templates that match text node,
     to guarantee that this template will be invoked by this filter.
     Therefore, we don't include this template from other filters.
     ===================================================================== -->
 <xsl:template               match = "text()">

  <xsl:choose>
  <!-- For performance concern, we avoid call-template overhead. -->
   <xsl:when                  test = "normalize-space() != ''">
    <xsl:value-of           select = "."/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:call-template        name = "stripSpaceNode"/>
   </xsl:otherwise>
  </xsl:choose>

 </xsl:template>


<!-- ======================================================================
     WARNING: Overwrite the default action for text node with mode "copy".
     This template must be placed below all templates that match text node,
     to guarantee that this template will be invoked by this filter.
     Therefore, we don't include this template from other filters.
     ===================================================================== -->
 <xsl:template               match = "text()"
                              mode = "copy">
  <xsl:choose>
   <!-- For performance concern, we avoid call-template overhead. -->
   <xsl:when                  test = "normalize-space() != ''">
    <xsl:value-of           select = "."/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:call-template        name = "stripSpaceNode"/>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>