<CdrDoc Type='Filter' Id='CDR0000000150'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Vendor Filter: InScopeProtocol</DocTitle>
<DocComment>CVS-V1.73: Fixed Related WebSites (Bug 941)</DocComment><ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml      version = "1.0"?>
<!--
================================================================
$Id: CDR0000000150.xml,v 1.114 2008-12-19 16:03:21 venglisc Exp $

Vendor Filter: InScopeProtocol

$Log: not supported by cvs2svn $
Revision 1.96  2006/07/28 14:15:56  bkline
Captured OfficialProtocolTitle for mailers; will be stripped out for 
vendor document; see request #2333.

Revision 1.95  2006/05/11 19:29:04  venglisc
Modifications to only create a RegistryInfo block if a CTGov ID exists.  
Corrected problem of empty address block for some external sites when a 
person had been indicated as an organization.  Additional minor cleanup.
(Bug 1786)

Revision 1.84  2005/05/03 21:05:49  venglisc
Added code to deal with RSS sites without ExternalSitePI (Bug 1341)

Revision 1.83  2005/01/27 17:03:32  venglisc
Modifycations to handle ExternalSites elements.  Minor formatting changes (Bug 1340)

================================================================ -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr"
                               version = "1.0">

 <xsl:output                    method = "xml"
                  omit-xml-declaration = "no"
                              encoding = "UTF-8"/>
  
 <xsl:include href = "cdr:name:Module: Global Filter Templates"/>
 <xsl:include href = "cdr:name:Module: Citation Formatting"/>
 <xsl:include href = "cdr:name:Module: Vendor Phone Templates"/>
 <xsl:include href = "cdr:name:Module: Vendor Address Templates"/>
  
 <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
 <xsl:param                       name = "DateFirstPub"
                                select = "''"/> 

 <!-- For the purpose of output layout. This is fine only when used with
      indent='yes'. -->
 <xsl:strip-space             elements = "*"/>
 <xsl:preserve-space          elements = "Para PDQProtocolTitle ProtocolTitle"/>

 <!--
 ====================================================================
 Root element.
 ==================================================================== -->
 <xsl:template                   match = "*">
  <xsl:apply-templates/>
 </xsl:template>


 <!--
 ====================================================================
 Document element.
 ==================================================================== -->
 <xsl:template                   match = "InScopeProtocol">

  <Protocol>
   <xsl:attribute                 name = "id">
    <xsl:value-of               select = "DocId"/>
   </xsl:attribute>
   <xsl:attribute                 name = "LegacyPDQID">
    <xsl:value-of               select = "PdqKey"/>
   </xsl:attribute>

   <xsl:apply-templates         select = "ProtocolIDs"/>
   <xsl:apply-templates         select = "FundingInfo"/>
   <xsl:apply-templates         select = "RegulatoryInformation"/>
   <xsl:apply-templates         select = "ProtocolSponsors"/>
   <xsl:apply-templates         select = "ProtocolApproval"/>
   <!-- xsl:apply-templates     select = "FDAINDInfo"
                                  mode = "copy"/ -->

   <!-- 
   ==========================================================
   Output only the Professional and Patient title
   The Type attribute is being renamed to Audience elsewhere. 
   ========================================================== -->
   <xsl:apply-templates         select = "ProtocolTitle[@Type='Professional']"/>
   <xsl:apply-templates         select = "ProtocolTitle[@Type='Patient']"/>
 
   <!--
   ==========================================================
   We need this for mailers.  Will be stripped from vendor
   output.  RMK 2006-07-24.  See Request #2333.
   ========================================================== -->
   <OfficialProtocolTitle>
    <xsl:value-of               select = "ProtocolTitle[@Type='Original']"/>
   </OfficialProtocolTitle>

   <xsl:apply-templates         select = "ProtocolAbstract"/>
   <xsl:apply-templates         select = "ProtocolDetail"/>
   <xsl:apply-templates         select = "Eligibility"/>
   <xsl:apply-templates         select = "ProtocolRelatedLinks"/>
   <xsl:apply-templates         select = "PublishedResults">
    <xsl:sort                   select = "Citation/@pubyear"
                                 order = "descending"
                             data-type = "number"/>
    <xsl:sort                   select = "Citation/@authorlist"/>
   </xsl:apply-templates>
   <xsl:apply-templates         select = "RelatedPublications">
    <xsl:sort                   select = "Citation/@pubyear"
                                 order = "descending"
                             data-type = "number"/>
    <xsl:sort                   select = "Citation/@authorlist"/>
   </xsl:apply-templates>
   <xsl:apply-templates         select = "ProtocolPhase"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "ExpectedEnrollment"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "ProtocolDesign"
                                  mode = "copy"/>

   <xsl:apply-templates         select = "ProtocolSpecialCategory"/>

   <xsl:apply-templates         select = "ProtocolAdminInfo"/>

   <!--
   We can only create the RegistryInfo block if a CTGov-ID exists
   =================================================================== -->
   <xsl:if                        test = "ProtocolIDs/
                                          OtherID/
                                          IDType = 'ClinicalTrials.gov ID'">
    <xsl:call-template            name = "createRegistryInfo"/>
   </xsl:if>

   <!-- 
   ===================================================================
   Copy Date First Published and Date Last Modified
   =================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "CdrDocCtl/FirstPub/Date">
     <DateFirstPublished>
      <xsl:value-of             select = "substring-before(CdrDocCtl/
                                            FirstPub/Date,'T')"/>
     </DateFirstPublished>
    </xsl:when>
    <xsl:otherwise>
     <xsl:call-template           name = "getDateFirstPub">
      <xsl:with-param             name = "date"
                                select = "$DateFirstPub"/>
     </xsl:call-template>    
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates         select = "DateLastModified"
                                  mode = "copy"/>

   <xsl:if                        test = "VerificationDateCalculated">
    <xsl:apply-templates        select = "VerificationDateCalculated"/>
   </xsl:if>
  </Protocol>
 </xsl:template>


 <!--
 ====================================================================
 Template to create the element PDQProtocolTitle
 ==================================================================== -->
 <xsl:template                   match = "ProtocolTitle">
   <PDQProtocolTitle>
    <xsl:attribute                name = "Audience">
     <xsl:value-of              select = "@Type"/>
    </xsl:attribute>
    <xsl:apply-templates/>
   </PDQProtocolTitle>
 </xsl:template>


 <!--
 ====================================================================
 Template to create the element PDQProtocolTitle
 ==================================================================== -->
 <xsl:template                   match = "ProtocolTitle"
                                  mode = "original">
   <xsl:element                   name = "{name()}">
    <xsl:attribute                name = "Type">
     <xsl:choose>
      <xsl:when                   test = "@Type = 'Original'">
       <xsl:text>Official</xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>Short</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:attribute>
    <xsl:apply-templates/>
   </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Display the ProtocolIDs element wrapper for other IDs
 ==================================================================== -->
 <xsl:template                   match = "ProtocolIDs">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates         select = "PrimaryID"/>
   <xsl:apply-templates         select = "OtherID"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Display the Primary and Other protocolIDs
 ==================================================================== -->
 <xsl:template                   match = "PrimaryID | OtherID">
  <xsl:choose>
   <xsl:when                      test = "name() = 'PrimaryID'">
    <xsl:element                  name = "{name()}">
     <xsl:apply-templates       select = "IDType"
                                  mode = "copy"/>
     <xsl:apply-templates       select = "IDString"
                                  mode = "copy"/>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <!--
    Checking how many unique IDs exist vs. how many total IDs exist
    ===============================================================
    <xsl:value-of               select = "count(//OtherID[not(IDString = 
                                          preceding::OtherID/IDString)])"/>
    <xsl:text>&gt;</xsl:text>
    <xsl:value-of               select = "count(//OtherID/IDString)"/>
    <xsl:text>   </xsl:text>
    -->

    <!-- 
    According to LG we want to suppress the CTEP or DCP IDs if the
    same IDString is already listed under a different IDType.  In 
    other words, if for instance the institutional ID and the CTEP 
    ID are identical we drop the CTEP ID.
    =============================================================== -->
    <xsl:if                       test = "not((IDString = 
                                               preceding::OtherID/IDString
                                               or
                                               IDString = 
                                               following::OtherID/IDString
                                               or
                                               IDString = 
                                               ../PrimaryID/IDString)
                                              and
                                              (IDType = 'CTEP ID'
                                               or
                                               IDType = 'DCP ID'))">
     <xsl:element                 name = "{name()}">
      <xsl:apply-templates      select = "IDType"
                                  mode = "copy"/>
      <xsl:apply-templates      select = "IDString"
                                  mode = "copy"/>
     </xsl:element>
    </xsl:if>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ====================================================================
 Funding template to display NIHGrantContract or OtherGrantContractInfo 
 elements
 Comment element will be filtered out globally.
 ==================================================================== -->
 <xsl:template                   match = "FundingInfo">
  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "NIHGrantContract">
    <xsl:apply-templates        select = "."
                                  mode = "copy"/>
   </xsl:for-each>
   <xsl:for-each                select = "OtherGrantContractInfo">
    <xsl:apply-templates        select = "."
                                  mode = "copy"/>
   </xsl:for-each>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 RegulatoryInfo template to display regulatory information and
 ResponsibleParty information (for internal use only)
 ==================================================================== -->
 <xsl:template                   match = "RegulatoryInformation">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates         select = "FDARegulated |
                                          Section801   |
                                          DelayedPosting"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "ResponsibleParty"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 ResponsibleParty information (for internal use only)
 ==================================================================== -->
 <xsl:template                   match = "ResponsibleParty">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates         select = "ResponsiblePerson      |
                                          ResponsibleOrganization"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 ResponsibleParty information (for internal use only)
 ==================================================================== -->
 <xsl:template                   match = "ResponsiblePerson">
  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "Person">
    <xsl:element                  name = "ResponsiblePersonName">
     <xsl:attribute               name = "ref">
      <xsl:value-of             select = "Person/@cdr:ref"/>
     </xsl:attribute>
     <xsl:value-of              select = "Person/
                                          PersonNameInformation/
                                          SurName"/>
     <xsl:text>, </xsl:text>
     <xsl:value-of              select = "Person/
                                          PersonNameInformation/
                                          GivenName"/>
    </xsl:element>
   </xsl:for-each>
   <xsl:apply-templates         select = "SpecificPhone |
                                          SpecificEmail"
                                  mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 ResponsibleParty information (for internal use only)
 ==================================================================== -->
 <xsl:template                   match = "ResponsibleOrganization">
  <xsl:element                    name = "{name()}">
   <xsl:for-each                select = "Organization">
    <ResponsibleOrganizationName>
     <xsl:attribute               name = "ref">
      <xsl:value-of             select = "Organization/@cdr:ref"/>
     </xsl:attribute>
     <xsl:value-of              select = "Organization/
                                          OrganizationNameInformation/
                                          OfficialName/
                                          Name"/> 
    </ResponsibleOrganizationName>
   </xsl:for-each>
   <xsl:apply-templates         select = "PersonTitle   |
                                          SpecificPhone |
                                          SpecificEmail"
                                  mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Rename the element ProtocolSponsors to ProtocolSponsor and eliminate
 the SponsorName child element.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolSponsors">
  <xsl:for-each                 select = "SponsorName">
   <ProtocolSponsor>
    <xsl:apply-templates        select = "."/>
   </ProtocolSponsor>
  </xsl:for-each>
 </xsl:template>


 <!--
 ====================================================================
 Rename the element ReimbursementApprovalType to ReimbursementApproval
 Only the ReimbursementApprovalType element is being picked up from 
 the ProtocolApproval fragment.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolApproval">
  <!-- 
  NOTE:
  The schema allows multiple values here but currently only one value 
  is allowed.  The code will need to be modified to separate multiple
  values with a space, comma, etc. if more values get added in the future
  ======================================================================= -->
  <xsl:for-each                 select = "ReimbursementApprovalType">
   <ReimbursementApproval>
    <xsl:value-of               select = "."/>
   </ReimbursementApproval>
  </xsl:for-each>
 </xsl:template>



 <!--
 ====================================================================
 Protocols have two flavors of abstracts: Professional and Patient.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolAbstract">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates         select = "Professional"/>
   <xsl:apply-templates         select = "Patient"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Assemble the Professional abstract.
 ==================================================================== -->
 <xsl:template                   match = "Professional">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates         select = "Objectives"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "Outcome"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "Outline"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "ArmsOrGroups"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "EntryCriteria"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "ProjectedAccrual"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "EndPoints"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "Stratification"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "SpecialStudyParameters"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "DoseSchedule"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "DosageForm"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "ProfessionalDisclaimer"/>
  </xsl:element>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the Patient abstract.
 ==================================================================== -->
 <xsl:template                   match = "Patient">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates         select = "Rationale"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "Purpose"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "EligibilityText"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "TreatmentIntervention"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "PatientDisclaimer"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Add the default Professional disclaimer and an additional disclaimer
 for NCI supported clinical trials.
 ==================================================================== -->
 <xsl:template                   match = "ProfessionalDisclaimer">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates           mode = "copy"/>

   <!--
   The NCI-supported trials disclaimer only needs to be displayed for
   active protocols since only those list participating sites.
   ===================================================================== -->
   <!-- xsl:if                        test = "../../../ProtocolAdminInfo/
                                           CurrentProtocolStatus = 'Active'">
    <xsl:if                       test = "/InScopeProtocol/ProtocolAdminInfo/
                                           ProtocolLeadOrg/LeadOrganizationID/
                                           Organization/OrganizationType = 
                                         'NCI-supported clinical trials group'">
     <xsl:variable                name = "miscDoc1" 
                                select = "document(concat('cdr:name:',
                                          'Cooperative Group Disclaimer;',
                                          'Protocol site disclaimer',
                                          '/lastp'))"/>
     <xsl:apply-templates       select = "$miscDoc1/MiscellaneousDocument/
                                           MiscellaneousDocumentText/
                                           Section/Para"
                                  mode = "nciDisclaimer"/>
    </xsl:if>
   </xsl:if -->
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Add the default Patient disclaimer and an additional disclaimer
 ==================================================================== -->
 <xsl:template                   match = "PatientDisclaimer">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates           mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Template to create the Para element for the NCI supported clinical 
 trials Disclaimer and modify the Para id.
 ==================================================================== -->
 <!-- xsl:template                   match = "Para"
                                  mode = "nciDisclaimer">
  <Para>
   <xsl:attribute                 name = "id">
    <xsl:text>_ProtNCIDisclaimer</xsl:text>
    <xsl:value-of               select = "@cdr:id"/>
   </xsl:attribute>

   <xsl:apply-templates           mode = "copy"/>
  </Para>
 </xsl:template -->



 <!--
 ====================================================================
 Assemble the Protocol detail section.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolDetail">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates         select = "StudyType"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "StudyCategory"/>
   <xsl:apply-templates         select = "/InScopeProtocol/
                                           ProtocolDesign"/>
   <xsl:apply-templates         select = "Condition"/>
   <xsl:apply-templates         select = "Gene"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Add citation IDs as attributes
 ==================================================================== -->
 <xsl:template                   match = "StudyCategory">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates         select = "StudyCategoryName"
                                  mode = "copy"/>

   <xsl:for-each                select = "Intervention">
    <xsl:if                       test = "InterventionType">
     <Intervention>
      <xsl:apply-templates      select = "InterventionType"/>
      <xsl:apply-templates      select = "InterventionNameLink"/>
     </Intervention>
    </xsl:if>
   </xsl:for-each>

  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Add citation IDs as attributes
 ==================================================================== -->
 <xsl:template                   match = "ProtocolDesign">
  <StudyDesign>
   <xsl:apply-templates/>
  </StudyDesign>
 </xsl:template>


 <!--
 ====================================================================
 Add Intervention term type to output tree
 ==================================================================== -->
 <xsl:template                   match = "InterventionType">
  <xsl:call-template              name = "getTerm">
   <xsl:with-param                name = "elementName"
                                select = "'InterventionType'"/>
  </xsl:call-template>

  <xsl:apply-templates          select = "Term/Term">
   <xsl:with-param                name = "parentName"
                                select = "'InterventionTypeParent'"/>
  </xsl:apply-templates>
 </xsl:template>


 <!--
 ====================================================================
 Add Intervention term type to output tree
 ==================================================================== -->
 <xsl:template                   match = "InterventionNameLink">
  <xsl:call-template              name = "getTerm">
   <xsl:with-param                name = "elementName"
                                select = "'InterventionNameLink'"/>
  </xsl:call-template>
 </xsl:template>


 <!--
 ====================================================================
 Add Condition term type to output tree 
 ==================================================================== -->
 <xsl:template                   match = "Condition">
  <StudyCondition>
   <xsl:call-template             name = "getTerm">
    <xsl:with-param               name = "elementName"
                                select = "'SpecificCondition'"/>
   </xsl:call-template>
   <xsl:apply-templates         select = "Term/Term">
    <xsl:with-param               name = "parentName"
                                select = "'ConditionParent'"/>
   </xsl:apply-templates>
  </StudyCondition>
 </xsl:template>


 <!--
 ====================================================================
 Add the parents of the Terms to the output tree
 ==================================================================== -->
 <xsl:template                   match = "Gene">
  <xsl:element                    name = "{name()}">
   <xsl:call-template             name = "getTerm">
    <xsl:with-param               name = "elementName"
                                select = "'SpecificGene'"/>
   </xsl:call-template>
  </xsl:element>

 </xsl:template>


 <!--
 ====================================================================
 Assemble the Eligibility section.
 ==================================================================== -->
 <xsl:template                   match = "Eligibility">
  <xsl:element                    name = "{name()}">
   <xsl:apply-templates         select = "HealthyVolunteers"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "LowAge"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "HighAge"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "AgeText"
                                  mode = "copy"/>
   <!--
   Gender is a mandatory element in the DTD and must be created
   ============================================================ -->
   <xsl:choose>
    <xsl:when                     test = "Gender">
     <xsl:apply-templates       select = "Gender"
                                  mode = "copy"/>
    </xsl:when>
    <xsl:otherwise>
     <Gender>Not coded</Gender>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates         select = "Diagnosis"/>
   <xsl:apply-templates         select = "ExclusionCriteria"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Add Condition term type to output tree 
 ==================================================================== -->
 <xsl:template                   match = "Diagnosis">
  <xsl:element                    name = "{name()}">
   <xsl:call-template             name = "getTerm">
    <xsl:with-param               name = "elementName"
                                select = "'SpecificDiagnosis'"/>
   </xsl:call-template>
   <xsl:apply-templates         select = "Term/Term">
    <xsl:with-param               name = "parentName"
                                select = "'DiagnosisParent'"/>
   </xsl:apply-templates>
  </xsl:element>
 </xsl:template>



 <!--
 ====================================================================
 Add Condition term type to output tree 
 ==================================================================== -->
 <xsl:template                   match = "ExclusionCriteria">
  <xsl:call-template              name = "getTerm">
   <xsl:with-param                name = "elementName"
                                select = "'ExclusionCriteria'"/>
  </xsl:call-template>
 </xsl:template>



 <!--
 ====================================================================
 Filter the ProtocolRelatedLinks information for the vendors
 Only the RelatedProtocols and RelatedWebsites elements are valid.
 Also, ensure that the ProtocolRelatedLinks element is not copied to 
 the output tree if none of the protocols are publishable.
 Note:  
 If the Publishable attribute exists it is set to "No".  By default, 
 when it does not exist it means "Publishable = Yes".
 ==================================================================== -->
 <xsl:template                   match = "ProtocolRelatedLinks">
  <xsl:choose>
   <xsl:when                      test = "RelatedWebsites">
    <xsl:element                  name = "{name()}">
     <xsl:choose>
      <xsl:when                   test = "count(RelatedProtocols/
                                            InScopeProtocol) &gt;
                                            count(RelatedProtocols/
                                            InScopeProtocol/@Publishable)">
       <xsl:apply-templates     select = "RelatedProtocols | RelatedWebsites"/>
      </xsl:when>
      <xsl:otherwise>
       <xsl:apply-templates     select = "RelatedWebsites"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:element>
   </xsl:when>
   <xsl:otherwise>
    <xsl:if                       test = "count(RelatedProtocols/
                                            InScopeProtocol) &gt;
                                            count(RelatedProtocols/
                                            InScopeProtocol/@Publishable)">
     <xsl:element                 name = "{name()}">
      <xsl:apply-templates      select = "RelatedProtocols"/>
     </xsl:element>
    </xsl:if>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ====================================================================
 Filter the ProtocolRelatedLinks information for the vendors
 Only the RelatedProtocols without a Publishable attribute and 
 RelatedWebsites elements are valid.
 ==================================================================== -->
 <xsl:template                   match = "RelatedProtocols">
  <xsl:if                         test = "not(InScopeProtocol
                                                     [@Publishable])">
   <xsl:element                   name = "{name()}">
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "InScopeProtocol/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "InScopeProtocol/ProtocolIDs/
                                          PrimaryID/IDString"/>
   </xsl:element>
   </xsl:if>
 </xsl:template>


 <!--
 ====================================================================
 Filter the ProtocolRelatedLinks information for the vendors
 Only the RelatedProtocols and RelatedWebsites elements are valid.
 ==================================================================== -->
 <xsl:template                   match = "RelatedWebsites">
  <xsl:element                    name = "{name()}">
   <xsl:attribute                 name = "xref">
    <xsl:value-of               select = "RelatedWebsites/@cdr:xref"/>
   </xsl:attribute>
   <xsl:value-of                select = "RelatedWebsites"/>
  </xsl:element>
 </xsl:template>



 <!--
 ====================================================================
 Add citation IDs as attributes
 ==================================================================== -->
 <xsl:template                   match = "PublishedResults | 
                                          RelatedPublications">
  <xsl:element                    name = "{name()}">
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "./Citation/@cdr:ref"/>
   </xsl:attribute> 
   <xsl:apply-templates         select = "./Citation"/>
  </xsl:element>
 </xsl:template>



 <!--
 ====================================================================
 Include the ProtocolSpecialCategory element in the output
 ==================================================================== -->
 <xsl:template                   match = "ProtocolSpecialCategory">
  <xsl:element                    name = "{name()}">
   <xsl:value-of                select = "SpecialCategory"/>
  </xsl:element>
 </xsl:template>



 <!--
 ====================================================================
 Assemble the Protocol admin info.
 NOTE: This logic discards the relationship between the individual
       lead organizations for the protocol and the protocol sites
       associated with each of the lead organizations!
 ==================================================================== -->
 <xsl:template                   match = "ProtocolAdminInfo">
  <xsl:element                    name = "{name()}">

   <xsl:apply-templates         select = "StartDate"/>
   <xsl:apply-templates         select = "CompletionDate"/>
   <xsl:apply-templates         select = "CurrentProtocolStatus"
                                  mode = "copy"/>

   <!-- Only display the LeadOrg if the Status is not Withdrawn       -->
   <!-- 2003-06-26 RMK: No longer true; implement this logic downstream -->
   <xsl:apply-templates         select = "ProtocolLeadOrg"/>
   <!--
                                        [LeadOrgProtocolStatuses/
                                         CurrentOrgStatus/
                                         StatusName != 'Withdrawn']"/>
   -->

   <!-- Only display the ProtocolSites for Active Protocols           -->
   <xsl:if                        test = "(/InScopeProtocol/ProtocolAdminInfo/
                                          CurrentProtocolStatus = 
                                          'Active')">

   <!-- 
   Only create the ProtocolSites element if Active Sites exist and only
   if its parents LeadOrgProtocolStatus is active as well or if the 
   PrivateProtocolSite is active
   Note:  This IF only controls the ProtocolSites element tag.  The 
          sites to be picked up will be identified within the 
          ProtocolSites template.
   2004-11-29: Adding logic to select participating organizations from 
          ProtocolSites as well as ExternalSites fragments.  VE
   ==================================================================== -->
    <xsl:if                       test = "ExternalSites/
                                          ExternalSite
                                                [ExternalSiteRegStatus
                                                   = 'Active']              |
                                          ExternalSites/
                                          ExternalSite
                                                [ExternalSiteRegStatus
                                                   = 'Approved']            |
                                          (ProtocolLeadOrg
                                                [LeadOrgProtocolStatuses/
                                                 CurrentOrgStatus/
                                                 StatusName = 'Active']/
                                           ProtocolSites/
                                           OrgSiteID
                                                [OrgSiteStatus = 'Active']) |
                                          (ProtocolLeadOrg
                                                [LeadOrgProtocolStatuses/
                                                 CurrentOrgStatus/
                                                 StatusName = 'Active']/
                                           ProtocolSites/
                                           PrivatePracticeSiteID
                                           [PrivatePracticeSiteStatus 
                                                               = 'Active'])">
     <ProtocolSites>
      <xsl:apply-templates      select = "ProtocolLeadOrg/
                                          ProtocolSites     |
                                          ExternalSites"/>
     </ProtocolSites>
    </xsl:if>
   </xsl:if>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Template to display the StartDate.
 According to the specification there should only be one StartDate
 with the attribute of Projected and only one with the attribute of 
 Actual.  If the Actual attribute exists this is the one to be 
 displayed.  Otherwise display the StartDate with the Projected one.  
 ==================================================================== -->
 <xsl:template                   match = "StartDate">
   <xsl:choose>
    <xsl:when                     test = "count(../StartDate) = 2
                                          and
                                          @DateType = 'Actual'">
     <xsl:element                 name = "{name()}">
      <xsl:attribute              name = "DateType">
       <xsl:value-of            select = "@DateType"/>
      </xsl:attribute>
      <xsl:value-of             select = "."/>
     </xsl:element>
    </xsl:when>
    <xsl:when                     test = "count(../StartDate) = 2
                                          and
                                          @DateType = 'Projected'">
     <!-- do nothing, we will pick up the Actual instead -->
    </xsl:when>
    <xsl:otherwise>
     <xsl:element                 name = "{name()}">
     <xsl:attribute               name = "DateType">
      <xsl:value-of             select = "@DateType"/>
     </xsl:attribute>
     <xsl:value-of              select = "."/>
     </xsl:element>
    </xsl:otherwise>
   </xsl:choose>
 </xsl:template>


 <!--
 ====================================================================
 Template to display the CompletionDate. 
 ==================================================================== -->
 <xsl:template                   match = "CompletionDate">
  <CompletionDate>
   <xsl:for-each                select = "@*">
    <xsl:attribute                name = "{name()}">
     <xsl:value-of              select = "."/>
    </xsl:attribute>
   </xsl:for-each>
   <xsl:value-of                select = "."/>
  </CompletionDate>
 </xsl:template>


 <!--
 ====================================================================
 Assemble the information for one lead organization.  Don't pick up
 the protocol sites linked to this lead organization.  They get lumped
 together in one amorphous pile following the lead organizations.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolLeadOrg">
  <xsl:element                    name = "{name()}">
   <LeadOrgName>
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "LeadOrganizationID/
                                          Organization/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "LeadOrganizationID/
                                          Organization/
                                          OrganizationNameInformation/
                                          OfficialName/
                                          Name"/>
   </LeadOrgName>
   <xsl:apply-templates         select = "LeadOrgRole"
                                  mode = "copy"/>
   <xsl:apply-templates         select = "LeadOrgProtocolID"
                                  mode = "copy"/>
   <LeadOrgProtocolStatus>
    <xsl:apply-templates        select = "LeadOrgProtocolStatuses/
                                          CurrentOrgStatus/
                                          StatusName"
                                  mode = "copy"/>
    <xsl:apply-templates        select = "LeadOrgProtocolStatuses/
                                          CurrentOrgStatus/
                                          StatusDate"
                                  mode = "copy"/>
   </LeadOrgProtocolStatus>


   <!-- 
   LeadOrgPersonnel with Public=No attribute is not to be published
   [2003-06-26 RMK: no longer true; needed for protocol abstract
    mailers, so this logic must be applied further downstream.]
   ================================================================ -->
   <LeadOrgPersonnel>
    <xsl:apply-templates        select = "LeadOrgPersonnel"/>
    <xsl:apply-templates        select = "OverallContact"/>
   </LeadOrgPersonnel>
  </xsl:element>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the information for one lead org person.
 Note that in the licensee DTD LeadOrgPersonnel refers to the 
 collection of persons for the lead org, while in the CDR Schema,
 each person has his/her own LeadOrgPersonnel element.

 The Person is only to be displayed if the person's only role is not
 that of an Update person

 [RMK 2003-06-26: Need all lead org personnel for protocol abstract
  mailers; implement this logic further downstream.]
 ==================================================================== -->
 <xsl:template                   match = "LeadOrgPersonnel">
  <xsl:apply-templates          select = "Person"/>
 </xsl:template>

 <!--
 ====================================================================
 Create a ProtPerson element for a lead org or participating org
 person.
 ==================================================================== -->
 <xsl:template                   match = "Person | 
                                          SpecificPerson |
                                          PrivatePracticePerson |
                                          ExternalSitePIID">
  <xsl:variable                   name = "myScope"
                                select = "name()"/>

  <ProtPerson>

   <!-- These will be stripped before the vendors get the data. -->
   <xsl:if                        test = "$myScope = 'Person'">
    <xsl:if                       test = "../@Public = 'No'">
     <xsl:attribute               name = "Public">
      <xsl:value-of             select = "'No'"/>
     </xsl:attribute>
    </xsl:if>
    <xsl:if                       test = "../@cdr:id = ../../MailAbstractTo">
     <xsl:attribute               name = "MailAbstractTo">
      <xsl:value-of             select = "'Y'"/>
     </xsl:attribute>
    </xsl:if>
   </xsl:if>

   <!--
   We do not want to display the person's cdr:ref attribute if the 
   ProtocolSite element is displaying the CTO information
   =============================================================== -->
   <xsl:if                        test = "not(../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact)
                                          or
                                          SpecificPhone">
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "Person/@cdr:ref"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:variable                  name = "contactFID"
                                select = "substring-after(
                                                     Person/@cdr:ref, '#')"/>
   <xsl:variable                  name = "orgAddressFID"
                                select = "substring-after(
                                           Person/PersonLocations/
                                           OtherPracticeLocation
                                            [@cdr:id = $contactFID]/
                                           OrganizationLocation/
                                           Organization/@cdr:ref, '#')"/>
                                        
   <!-- 
   If the status attribute exists the person's status is inactive
   and a special note has to be displayed as an attribute to this
   effect.        
   =============================================================== -->
   <xsl:choose>
    <xsl:when                     test = "Person/
                                           Status[CurrentStatus = 'Inactive']">
     <xsl:attribute               name = "status">
      <xsl:text>Contact information may not be current</xsl:text>
     </xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:for-each              select = "Person/PersonLocations/ 
                                            OtherPracticeLocation
                                            [@cdr:id = $contactFID]">
      <xsl:if                     test = "@PreviousLocation = 'Yes'">
       <xsl:attribute             name = "status">
        <xsl:text>Contact information may not be current</xsl:text>
       </xsl:attribute>
      </xsl:if>
     </xsl:for-each>
    </xsl:otherwise>
   </xsl:choose>

   <!-- 
   If the RSS information contains an ExternalSiteContactName or Title
   element the address needs to be formatted like a ClinicalTrialOffice
   and the PI information must be ignored
   =================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "../../ExternalSiteContact/
                                          ExternalSiteContactName
                                          or
                                          ../../ExternalSiteContact/
                                          ExternalSiteContactTitle">
     <xsl:for-each              select = "../..">
      <xsl:call-template          name = "rssClinicalTrialsOffice"/>
     </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
     <!--
     * If the SpecificPerson has a SpecificPhone, use the specific info.
     * If the SpecificPerson does not have a SpecificPhone but the Org has
       a CTO phone, use the CTO info
     * If the SpecificPerson does not have a SpecificPhone and the Org does
       not have a CTO phone use the phone of the Person record, if available
       otherwise use the Org phone.
     ===================================================================== -->
     <xsl:choose>
      <xsl:when                   test = "$myScope = 'SpecificPerson'">
       <xsl:choose>
        <!--
        Specific Information overwrites CTO information
        =============================================== -->
        <xsl:when                 test = "not(../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactPhone)
                                          or
                                          SpecificPhone">
         <xsl:apply-templates   select = "Person/PersonNameInformation"/>
        </xsl:when>
        <!--
        CTO information exists but without phone number.  Display a
        a warning message and continue
        =========================================================== -->
        <xsl:when                 test = "../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact
                                          and 
                                          not(../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactPhone)">
         <xsl:message        terminate = "no">
          <xsl:text>CTO Office Contact Phone missing &lt;BR/&gt;</xsl:text>
          <xsl:value-of         select = "@cdr:href"/>
         </xsl:message> 

         <xsl:apply-templates   select = "Person/PersonNameInformation"/>

        </xsl:when>
        <xsl:when                 test = "../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact
                                          and 


                                          ../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactPhone">
         <!-- Do Nothing -->
        </xsl:when>
        <!--
        No CTO Information available
        ============================ -->
        <xsl:otherwise>
         <xsl:apply-templates   select = "Person/PersonNameInformation"/>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:when>
      <!-- 
      Private Practice Site 
      ===================== -->
      <xsl:otherwise>
       <xsl:apply-templates       select = "Person/PersonNameInformation"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>

   <!-- 
   Display the PersonRole of the LeadOrg Person element
   and display the Role element of the ProtocolSite person
   as PersonRole element.
   Note: The PersonRole of Update Person is CIPS internal information
         and not intended for the vendors
   [RMK 2003-06-26: Need all roles for the protocol abstract mailers;
    apply this logic further downstream.]
   ================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "$myScope = 'Person'">
     <xsl:for-each              select = "../PersonRole">
      <xsl:apply-templates      select = "."
                                  mode = "copy"/>
     </xsl:for-each>
    </xsl:when>
    <xsl:when                     test = "$myScope = 'SpecificPerson'
                                          and
                                          ../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact
                                          and
                                          not(SpecificPhone)">
     <PersonRole>
      <xsl:choose>
       <xsl:when                  test = "../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactName">
        <xsl:value-of           select = "../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactName"/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:text>Clinical Trials Office</xsl:text>
       </xsl:otherwise>
      </xsl:choose>
     </PersonRole>
    </xsl:when>
    <xsl:when                     test = "$myScope = 'PrivatePracticePerson'">
     <xsl:for-each              select = "../Role">
      <PersonRole>
       <xsl:value-of            select = "."/>
      </PersonRole>
     </xsl:for-each>
    </xsl:when>
    <xsl:when                     test = "$myScope = 'ExternalSitePIID'
                                          and
                                          not(../../ExternalSiteContact/
                                              ExternalSiteContactName)
                                          and
                                          not(../../ExternalSiteContact/
                                          ExternalSiteContactTitle)">
     <PersonRole>
      <xsl:text>Principal investigator</xsl:text>
     </PersonRole>
    </xsl:when>
    <xsl:otherwise>
     <xsl:for-each              select = "Role">
      <PersonRole>
       <xsl:value-of            select = "."/>
      </PersonRole>
     </xsl:for-each>
    </xsl:otherwise>
   </xsl:choose>

   <!--
   Section to collect the Contact information
   ===================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "$myScope != 'ExternalSitePIID'">
     <Contact>
      <ContactDetail>
       <xsl:choose>
        <!-- 
        Handle Persons with PrivatePractice contact     
        ============================================================== -->
        <xsl:when                 test = "Person/PersonLocations/
                                          PrivatePractice/
                                          PrivatePracticeLocation
                                           [@cdr:id = $contactFID] |
                                          Person/PersonLocations/
                                          Home
                                           [@cdr:id = $contactFID]">
         <xsl:for-each          select = "Person/PersonLocations/
                                          PrivatePractice/
                                          PrivatePracticeLocation
                                           [@cdr:id = $contactFID] |
                                          Person/PersonLocations/
                                          Home
                                           [@cdr:id = $contactFID]">
          <xsl:call-template      name = "getHomePrivatePractice"/>
         </xsl:for-each>
        </xsl:when>
        <!-- 
        Pick up the address block and phone numbers for the 
        SpecificPerson that does not have a SpecificPhone for which 
        the CTO information does exist.
        ============================================================= -->
        <xsl:when                 test = "$myScope = 'SpecificPerson'
                                          and
                                          ../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact
                                          and
                                          not(SpecificPhone)">
         <xsl:for-each          select = "../../Organization/
                                          OrganizationLocations/
                                          OrganizationLocation/
                                          Location[@cdr:id = ../../CIPSContact]/
                                          PostalAddress">
          <!-- 
          We are reusing the getExternalAddress template here even though
          this section has nothing to do with the External Sites!     -->
          <xsl:call-template      name = "getExternalAddress"/>
         </xsl:for-each>
         <Phone>
          <xsl:for-each         select = "../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactPhone">
           <xsl:value-of        select = "."/>
           <xsl:if                test = "position() != last()">
            <xsl:text>; </xsl:text>
           </xsl:if>
          </xsl:for-each>
         </Phone>

         <xsl:if                  test = "../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactEmail">
          <Email>
           <xsl:value-of        select = "../../Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactEmail"/>
          </Email>
         </xsl:if>
        </xsl:when>
        <!--
        The fall-back section:  No protocol specific information is 
        specified and there doesn't exist any CTO information
        ================================================================ -->
        <xsl:otherwise>
         <OrganizationName>
          <!--
          Add the OrderParentNameFirst attribute to the OrganizationName
          element.  This will be picked up with a following filter that
          will revert the sort of the OrganizationName element based on 
          its existence
          ============================================================== -->
          <xsl:if                 test = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]/
                                          OrganizationLocation/
                                          Organization/
                                          OrganizationLocations/
                                          OrganizationLocation/
                                          @OrderParentNameFirst">
           <xsl:attribute         name = "OrderParentNameFirst">
            <xsl:value-of       select = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]/
                                          OrganizationLocation/
                                          Organization/
                                          OrganizationLocations/
                                          OrganizationLocation/
                                          @OrderParentNameFirst"/>
           </xsl:attribute>
          </xsl:if>

          <xsl:value-of         select = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]/
                                          OrganizationLocation/
                                          Organization/
                                          OrganizationNameInformation/
                                          OfficialName/Name"/>
<xsl:if               test = "not(Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]/
                                          OrganizationLocation/
                                          Organization/
                                          OrganizationNameInformation/
                                          OfficialName/Name)">
         <xsl:message        terminate = "yes">
          <xsl:text>&lt;ListItem class='Warning'&gt;</xsl:text>
          <xsl:text>Invalid Location Fraqment ID; </xsl:text>
          <xsl:value-of         select = "Person/
                                          PersonNameInformation/
                                          SurName"/>
          <xsl:text>, </xsl:text>
          <xsl:value-of         select = "Person/
                                          PersonNameInformation/
                                          GivenName"/>
          <xsl:text> [</xsl:text>
          <xsl:value-of         select = "$contactFID"/>
          <xsl:text>]; </xsl:text>
          <xsl:text>Fragment ID does not match Person Fragment ID [</xsl:text>
          <xsl:value-of         select = "Person/PersonLocations/
                                          OtherPracticeLocation/
                                          @cdr:id"/>
          <xsl:text>]</xsl:text>
         </xsl:message> 
<xsl:value-of  select = "$contactFID"/>
</xsl:if>

         </OrganizationName>

         <!-- 
         Call a template to collect all parent names for the address
         block display
         =========================================================== -->
         <xsl:if                  test = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]/
                                          OrganizationLocation/
                                          Organization/
                                          OrganizationLocations/
                                          OrganizationLocation/
                                          @IncludeParentName">
          <xsl:for-each         select = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]/
                                          OrganizationLocation/
                                          Organization/
                                          ParentOrganization">
           <xsl:call-template     name = "getParentName"/>
          </xsl:for-each>
         </xsl:if>
                                        
         <!-- 
         Pick up Specific Info if exists or Organization Info  
         (Note:  The for-each loop exists merely to set the scope for the 
                 getPostalAddress, getPersonOrgPhone, ... templates)    
         ================================================================= -->
         <!-- 
         If ProtocolSpecific Phone numbers exists we do NOT want to 
         pick up missing information from the Person/Organization
         record
         This only needs to be considered for the LeadOrgPersonnel
         (i.e. when the template is called as the Person template)
         ========================================================== -->
         <xsl:choose>
          <xsl:when               test = "$myScope = 'Person'">
           <xsl:choose>
            <xsl:when             test = "../ProtocolSpecificContact/
                                             PostalAddress">
             <!-- PostalAddress -->
             <xsl:apply-templates 
                                select = "../ProtocolSpecificContact/
                                             PostalAddress"/>
             <!-- /PostalAddress -->
            </xsl:when>
            <xsl:otherwise>
             <xsl:for-each      select = "Person/PersonLocations/
                                            OtherPracticeLocation
                                             [@cdr:id = $contactFID]">
              <xsl:call-template  name = "getPostalAddress">
               <xsl:with-param    name = "orgAddressFID"
                                select = "$orgAddressFID"/>
              </xsl:call-template>
             </xsl:for-each>
            </xsl:otherwise>
           </xsl:choose>

           <!-- If either the Phone or TollFreePhone exists we do not
                display another phone number from the Person record. -->
           <xsl:choose>         
            <xsl:when             test = "../ProtocolSpecificContact/
                                             TollFreePhone
                                          or
                                          ../ProtocolSpecificContact/
                                             Phone">
             <xsl:if              test = "../ProtocolSpecificContact/
                                             Phone">
              <Phone>
               <xsl:value-of    select = "../ProtocolSpecificContact/
                                             Phone"/>
              </Phone>
             </xsl:if>
             <xsl:if              test = "../ProtocolSpecificContact/
                                             TollFreePhone">
              <TollFreePhone>
               <xsl:value-of    select = "../ProtocolSpecificContact/
                                             TollFreePhone"/>
              </TollFreePhone>
             </xsl:if>
            </xsl:when>
            <!-- 
            The ProtocolSpecific phones do not exist, i.e pick up 
            elsewhere 
            ===================================================== -->
            <xsl:otherwise>
             <xsl:for-each      select = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]">
              <xsl:call-template  name = "getPersonOrgPhone">
               <xsl:with-param    name = "orgAddressFID"
                                select = "$orgAddressFID"/>
              </xsl:call-template>
              <xsl:call-template  name = "getPersonOrgTollFreePhone">
               <xsl:with-param    name = "orgAddressFID"
                                select = "$orgAddressFID"/>
              </xsl:call-template>
             </xsl:for-each>
            </xsl:otherwise>
           </xsl:choose>
           <xsl:choose>
            <xsl:when             test = "../ProtocolSpecificContact/
                                             Email">
             <Email>
              <xsl:value-of     select = "../ProtocolSpecificContact/
                                             Email"/>
             </Email>
            </xsl:when>
            <xsl:otherwise>
             <xsl:for-each      select = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]">
              <xsl:call-template  name = "getPersonOrgEmail">
               <xsl:with-param    name = "orgAddressFID"
                                select = "$orgAddressFID"/>
              </xsl:call-template>
             </xsl:for-each>
            </xsl:otherwise>
           </xsl:choose>

           <xsl:choose>
            <xsl:when             test = "../ProtocolSpecificContact/
                                             WebSite">
             <WebSite>
              <xsl:attribute      name = "xref">
               <xsl:value-of    select = "../ProtocolSpecificContact/
                                          WebSite/@cdr:xref"/>
              </xsl:attribute>
              <xsl:apply-templates 
                                select = "../ProtocolSpecificContact/
                                             WebSite"/>
             </WebSite>
            </xsl:when>
            <xsl:otherwise>
             <xsl:for-each      select = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]">
              <xsl:call-template  name = "getPersonOrgWebSite">
               <xsl:with-param    name = "orgAddressFID"
                                select = "$orgAddressFID"/>
              </xsl:call-template>
             </xsl:for-each>
            </xsl:otherwise>
           </xsl:choose>
          </xsl:when>

          <!-- 
          This applies for myScope = SpecificPerson 
          ========================================= -->
          <xsl:otherwise>
           <xsl:for-each        select = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]">
            <xsl:call-template    name = "getPostalAddress">
             <xsl:with-param      name = "orgAddressFID"
                                select = "$orgAddressFID"/>
            </xsl:call-template>
           </xsl:for-each>

           <!-- 
           If a SpecificPhone/SpecificEmail exists we do not denormalize 
           in order to get a phone number from the person or org record.
           The SpecificPhone is overwriting any other phone information. 
           Note:  The schema doesn't allow for SpecificTollFreePhone 
                                                          (VE, 07/24/03)
           ============================================================= -->
           <xsl:choose>         
            <xsl:when             test = "SpecificPhone">
             <Phone>
              <xsl:value-of     select = "SpecificPhone"/>
             </Phone>
            </xsl:when>

            <!-- 
            The ProtocolSpecific phones do not exist, i.e pick up 
            elsewhere 
            ===================================================== -->
            <xsl:otherwise>
             <!--
             When no SpecificPhone exists we get the phone number 
             from the person record
             ========================================================= -->
             <xsl:for-each      select = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]">
              <xsl:call-template  name = "getPersonOrgPhone">
               <xsl:with-param    name = "orgAddressFID"
                                select = "$orgAddressFID"/>
              </xsl:call-template>
              <xsl:call-template  name = "getPersonOrgTollFreePhone">
               <xsl:with-param    name = "orgAddressFID"
                                select = "$orgAddressFID"/>
              </xsl:call-template>
             </xsl:for-each>
            </xsl:otherwise>
           </xsl:choose>

           <xsl:for-each        select = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]">
            <xsl:choose>
             <xsl:when            test = "../../../SpecificEmail">
              <Email>
               <xsl:apply-templates 
                                select = "../../../SpecificEmail/@Public"/>
               <xsl:value-of    select = "../../../SpecificEmail"/>
              </Email>
             </xsl:when>
             <xsl:otherwise>
              <xsl:call-template  name = "getPersonOrgEmail">
               <xsl:with-param    name = "orgAddressFID"
                                select = "$orgAddressFID"/>
              </xsl:call-template>
             </xsl:otherwise>
            </xsl:choose>

            <xsl:call-template    name = "getPersonOrgWebSite">
             <xsl:with-param      name = "orgAddressFID"
                                select = "$orgAddressFID"/>
            </xsl:call-template>
           </xsl:for-each>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:otherwise>
       </xsl:choose>
      </ContactDetail>
     </Contact>
    </xsl:when>
    <!--
    Collect the person information for ExternalSitePIID nodes.
    If no ExternalSiteAddress information exists we're getting the
    information from the org record.
    ================================================================= -->
    <xsl:otherwise>
     <xsl:if                      test = "not(../../ExternalSiteContact/
                                                 ExternalSiteContactName)
                                          and
                                          not(../../ExternalSiteContact/
                                                 ExternalSiteContactTitle)">
      <Contact>
       <ContactDetail>
        <xsl:choose>
         <xsl:when                 test = "../../ExternalSiteAddress">
          <xsl:for-each           select = "../../ExternalSiteAddress">
           <xsl:call-template       name = "getExternalAddress"/>
          </xsl:for-each>
         </xsl:when>
         <xsl:otherwise>
          <xsl:for-each           select = "../../ExternalSiteOrg/
                                             ExternalSiteOrgID/
                                             Organization/
                                             OrganizationLocations/
                                             OrganizationLocation/
                                             Location
                                               [@cdr:id = ../../CIPSContact]/
                                             PostalAddress">
           <xsl:call-template       name = "getExternalAddress"/>
          </xsl:for-each>
         </xsl:otherwise>
        </xsl:choose>
        <xsl:choose>
         <!-- 
         Let's first see if a CTO Contact exists since this would 
         overwrite an existing ExternalSiteContactPhone
         ================================================================ -->
         <xsl:when                test = "../../ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact">
          <Phone>
           <xsl:value-of        select = "../../ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactPhone"/>
          </Phone>
         </xsl:when>
         <xsl:when                test = "../../ExternalSiteContact/
                                             ExternalSiteContactPhone">
          <Phone>
           <xsl:value-of        select =  "../../ExternalSiteContact/
                                              ExternalSiteContactPhone"/>
          </Phone>
         </xsl:when>
         <xsl:otherwise>
          <!--
          This covers the situation when an ExternalSitePI has been 
          submitted with an empty phone number.
          We have to pick up the phone and/or toll free phone from 
          the organization location fragment that is been 
          identified as the CIPSContact address of the organization.  
          However, if a clinical trials office phone exists we will
          pick this up instead of the organization phone number.
          Note: In the event that the "institution" specified in 
                the ExternalSiteOrgID is a person instead of an
                organization we will have to pick up the 
                SpecificPhone of the person record or the linked
                ClinicalTrialsOfficePhone or Phone of the org.
          ========================================================= -->
          <xsl:choose>
           <xsl:when              test = "../ExternalSitePIPhone">
            <xsl:for-each       select = "../ExternalSitePIPhone">
             <Phone>
              <xsl:call-template  name = "convertPhoneNumber"/>
             </Phone>
            </xsl:for-each> 
           </xsl:when>
           <xsl:otherwise>
            <xsl:choose>
             <xsl:when            test = "../../
                                          ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization">

              <!--
              If a ClinicalTrialsOffice exists for the organization use its
              phone number rather then the fragment phone number
              ============================================================= -->
              <xsl:for-each     select = "../../
                                          ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization">
               <xsl:call-template name = "rssGetPhoneFromOrgID"/>
              </xsl:for-each>
             </xsl:when>
             <!-- 
             Here we are dealing with the special (strange) case that the 
             ExternalSiteOrgID is actually pointing to a Person record.
             For a missing ExternalSitePIPhone number we will have to 
             pick up the phone from the Person record (SpecialPhone of 
             the CIPSContact fragment) or - if this doesn't exist - 
             from the linked organization record (this could be either
             the ClinicalTrialsOfficePhone or the Phone/TollFreePhone.
             Note: You would assume that there should always exist a 
                   Phone number (SpecialPhone) for the Person since this
                   would be his/her PrivatePracticeLocation or HomeOffice
                   Location but you can never know with the data coming
                   from outside sources.
             ============================================================ -->
             <xsl:otherwise>
              <xsl:for-each     select = "../../
                                          ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Person">
               <xsl:call-template name = "rssGetPhoneFromPIID"/>
              </xsl:for-each>
             </xsl:otherwise>
            </xsl:choose>
           </xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </ContactDetail>
      </Contact>
     </xsl:if>
    </xsl:otherwise>
   </xsl:choose>
  </ProtPerson>
 </xsl:template>


 <!--
 ====================================================================
 Put together the information for one participating organization.
 The ProtocolSites are only populated if the CurrentProtocolStatus
 is Active.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolSites">

 <!-- Do not display this ProtocolSite if its parent is not 
      active as well                                                  -->
  <xsl:if                         test = "(../LeadOrgProtocolStatuses/
                                           CurrentOrgStatus
                                           [StatusName = 'Active'])">
   <xsl:for-each                select = "OrgSiteID/Organization">
    <!-- 
    Only display OrgSite with OrgSiteStatus Active irrespective of the
    status of the organization itself 
    ================================================================== -->
    <xsl:if                       test = "../OrgSiteStatus = 'Active'">
     <ProtocolSite>
      <xsl:attribute              name = "ref">
       <xsl:value-of            select = "@cdr:ref"/>
      </xsl:attribute>
      <xsl:attribute              name = "sitetype">
       <xsl:value-of            select = "'Organization'"/>
      </xsl:attribute>

      <xsl:choose>
       <xsl:when                  test = "../../@SuppressContactInformation
                                          or
                                          ../@SuppressContactInformation">
        <xsl:attribute            name = "SuppressContactInformation">
         <xsl:value-of          select = "../../@SuppressContactInformation |
                                          ../@SuppressContactInformation"/>
        </xsl:attribute>
        <xsl:attribute            name = "contactinfo">
         <xsl:value-of          select = "../../@SuppressContactInformation |
                                          ../@SuppressContactInformation"/>
        </xsl:attribute>
       </xsl:when>
       <xsl:otherwise>
        <xsl:attribute            name = "contactinfo">
         <xsl:value-of          select = "'No'"/>
        </xsl:attribute>
       </xsl:otherwise>
      </xsl:choose>

      <SiteName>
       <xsl:apply-templates     select = "OrganizationNameInformation/
                                          OfficialName/Name"/>
      </SiteName>

      <!-- Begin: Create ProtPerson Element in Vendor Output -->
      <xsl:apply-templates      select = "../OrgSiteContact/
                                          SpecificPerson |
                                          ../OrgSiteContact/
                                          GenericPerson |
                                          ../OrgSiteContact/
                                          ClinicalTrialOffice"/>
      <!-- End:   Create ProtPerson Element in Vendor Output -->

     </ProtocolSite>
    </xsl:if>
   </xsl:for-each>

   <!-- Added code to pick up private practice sites.  RMK 2002-09-06.      -->
   <xsl:for-each                select = "PrivatePracticeSiteID">
    <!-- Only display active PrivatePracticeSite                            -->
    <xsl:if                       test = "PrivatePracticeSiteStatus = 'Active'">
     <ProtocolSite>
      <xsl:attribute              name = "ref">
       <xsl:value-of            select = "substring-before(
                                            concat(PrivatePracticePerson/
                                                   Person/
                                                   @cdr:ref, '#'),'#')"/>
      </xsl:attribute>
      <xsl:attribute              name = "sitetype">
       <xsl:value-of            select = "'Person'"/>
      </xsl:attribute>

      <xsl:choose>
       <xsl:when                  test = "../@SuppressContactInformation 
                                          or
                                          @SuppressContactInformation">
        <xsl:attribute            name = "SuppressContactInformation">
         <xsl:value-of          select = "../@SuppressContactInformation |
                                          @SuppressContactInformation"/>
        </xsl:attribute>
        <xsl:attribute            name = "contactinfo">
         <xsl:value-of          select = "../@SuppressContactInformation |
                                          @SuppressContactInformation"/>
        </xsl:attribute>
       </xsl:when>
       <xsl:otherwise>
        <xsl:attribute            name = "contactinfo">
         <xsl:value-of          select = "'No'"/>
        </xsl:attribute>
       </xsl:otherwise>
      </xsl:choose>

      <xsl:apply-templates      select = "PrivatePracticePerson"/>
     </ProtocolSite>
    </xsl:if>
   </xsl:for-each>
  </xsl:if>
 </xsl:template>


 <!--
 ======================================================================
 Put together the information for one participating organization
 from the list of ExternalSites.
 The ExternalSites are only populated if the CurrentProtocolStatus
 is Active.  However, since the RSS does not keep track of 
 participanting organization status all organizations will be displayed
 The last sentence is still correct, however, we are now receiving 
 external site information from outside sources other then RSS.  We 
 needed to modify the template to only select sites with a status of 
 Active or Approved.
 ====================================================================== -->
 <xsl:template                   match = "ExternalSites">
  <xsl:for-each                 select = "ExternalSite
                                            [ExternalSiteRegStatus = 'Active'] |
                                          ExternalSite
                                            [ExternalSiteRegStatus
                                                                 = 'Approved']">
   <ProtocolSite>
    <!--
    Display ProtocolSite attributes and SiteName element:
    If the ExternalSiteOrgID exists, we are using the denormalized 
    Organization information to display the name from the CDR, 
    otherwise display the ExternalSiteName provided from the RSS
    Information.
    =============================================================== -->
    <xsl:choose>
     <!-- 
     Yes, the ExternalSiteOrgID exists
     ================================= -->     
     <xsl:when                    test = "ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization
                                          or
                                          ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Person">

      <xsl:for-each             select = "ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization        |
                                          ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Person">
       <xsl:attribute             name = "ref">
        <xsl:value-of           select = "@cdr:ref"/>
       </xsl:attribute>
       <xsl:choose>
        <xsl:when                 test = "OrganizationNameInformation/
                                          OfficialName/
                                          Name">
         <xsl:attribute           name = "sitetype">
          <xsl:value-of         select = "'Organization'"/>
         </xsl:attribute>
        </xsl:when>
        <xsl:otherwise>
         <xsl:attribute           name = "sitetype">
          <xsl:value-of         select = "'Person'"/>
         </xsl:attribute>
        </xsl:otherwise>
       </xsl:choose>

       <!-- 
       For sitetype = "Person" don't display the SiteName element
       ========================================================== -->
       <xsl:if                    test = "OrganizationNameInformation/
                                          OfficialName/
                                          Name">
        <SiteName>
         <xsl:apply-templates   select = "OrganizationNameInformation/
                                          OfficialName/
                                          Name"/>
        </SiteName>
       </xsl:if>
      </xsl:for-each>
     </xsl:when>
     <!-- 
     No, the ExternalSiteOrgID does not exists
     ========================================= -->     
     <xsl:otherwise>
      <SiteName>
       <xsl:apply-templates     select = "ExternalSiteOrg/
                                          ExternalSiteName"/>
      </SiteName>
     </xsl:otherwise>
    </xsl:choose>

    <!--
    If the ExternalSiteOrgID[Org] exists and the org has CTO 
    information, we are using this information rather then the RSS
    info.  Without the CTO info we are using the RSS info.
    =============================================================== -->
    <xsl:choose>
     <xsl:when                    test = "ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact">
      <ProtPerson>
       <PersonRole>
        <xsl:choose>
         <xsl:when                test = "ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactName">
          <xsl:value-of         select = "ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactName"/>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of         select = "'Clinical Trials Office'"/>
         </xsl:otherwise>
        </xsl:choose>
       </PersonRole>

       <Contact>
        <ContactDetail>
         <xsl:for-each          select = "ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization/
                                          OrganizationLocations/
                                          OrganizationLocation/
                                          Location[@cdr:id = ../../CIPSContact]/
                                          PostalAddress">
          <!-- 
          We are reusing the getExternalAddress template here even though
          this section has nothing to do with the External Sites!    
          =============================================================== -->
          <xsl:call-template      name = "getExternalAddress"/>
         </xsl:for-each>
         <Phone>
          <xsl:for-each         select = "ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactPhone">
           <xsl:value-of        select = "."/>
           <xsl:if                test = "position() != last()">
            <xsl:text>; </xsl:text>
           </xsl:if>
          </xsl:for-each>
         </Phone>

         <xsl:if                  test = "ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactEmail">
          <Email>
           <xsl:value-of        select = "ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactEmail"/>
          </Email>
         </xsl:if>
        </ContactDetail>
       </Contact>
      </ProtPerson>
     </xsl:when>
     <!--
     There isn't any CTO information available and we will have to 
     create the ProtPerson record from what is provided by RSS
     ============================================================== -->
     <xsl:otherwise>
      <!--
      If the ExternalSitePIID exists, we are using the denormalized 
      Person information to display the name from the CDR, otherwise 
      display the ExternalSitePIName as provided.
      =============================================================== -->
      <xsl:choose>
       <!-- 
       Yes, the ExternalSitePIID exists
       ================================ -->          
       <xsl:when                  test = "ExternalSitePI/
                                          ExternalSitePIID/
                                          Person">
        <xsl:apply-templates    select = "ExternalSitePI/
                                          ExternalSitePIID"/>
       </xsl:when>
       <!-- 
       No, the ExternalSitePIID does not exists
       ======================================== -->     
       <xsl:otherwise>
        <xsl:choose>
         <xsl:when                test = "ExternalSitePI
                                          and
                                          not(ExternalSitePI/
                                          ExternalSitePIName/
                                          PersonLastName = '')">
          <ProtPerson>
           <xsl:choose>

            <xsl:when             test = "ExternalSiteContact/
                                          ExternalSiteContactName
                                          or
                                          ExternalSiteContact/
                                          ExternalSiteContactTitle">
             <xsl:call-template   name = "rssClinicalTrialsOffice"/>
            </xsl:when>
            <xsl:otherwise>
             <PersonNameInformation>
              <xsl:if             test = "ExternalSitePI/
                                          ExternalSitePIName/
                                          PersonFirstName">
               <GivenName>
                <xsl:value-of   select = "ExternalSitePI/
                                          ExternalSitePIName/
                                          PersonFirstName"/>
               </GivenName>
              </xsl:if>
              <xsl:if             test = "ExternalSitePI/
                                          ExternalSitePIName/
                                          PersonMiddleName">
               <MiddleInitial>
                <xsl:value-of   select = "ExternalSitePI/
                                          ExternalSitePIName/
                                          PersonMiddleName"/>
               </MiddleInitial>
              </xsl:if>
              <SurName>
               <xsl:value-of    select = "ExternalSitePI/
                                          ExternalSitePIName/
                                          PersonLastName"/>
              </SurName>
              <xsl:if             test = "ExternalSitePI/
                                          ExternalSitePIName/
                                          PersonSuffix">
               <ProfessionalSuffix>
                <xsl:value-of   select = "ExternalSitePI/
                                          ExternalSitePIName/
                                          PersonSuffix"/>
               </ProfessionalSuffix>
              </xsl:if>
             </PersonNameInformation>
             <xsl:apply-templates select = "Person/PersonNameInformation"/>
             <PersonRole>
              <xsl:text>Principal investigator</xsl:text>
             </PersonRole>
             <!--
             The address is always taken from the RSS information as is
             but in case it doesn't exist but an org address does we're
             taking this org address.
             ==========================================================  -->
             <Contact>
              <ContactDetail>
               <xsl:choose>
                <xsl:when            test = "ExternalSiteAddress">
                 <xsl:for-each     select = "ExternalSiteAddress">
                  <xsl:call-template name = "getExternalAddress"/>
                 </xsl:for-each>
                </xsl:when>
                <xsl:otherwise>
                 <xsl:for-each     select = "ExternalSiteOrg/
                                             ExternalSiteOrgID/
                                             Organization/
                                             OrganizationLocations/
                                             OrganizationLocation/
                                             Location
                                               [@cdr:id = ../../CIPSContact]/
                                             PostalAddress">
                 <xsl:call-template  name = "getExternalAddress"/>
                </xsl:for-each>
                </xsl:otherwise>
               </xsl:choose>

               <xsl:choose>
                <xsl:when          test = "../ExternalSiteContact/
                                             ExternalSiteContactPhone
                                          and 
                                          not(../ExternalSiteContact/
                                                 ExternalSiteContactName)
                                          and
                                          not(../ExternalSiteContact/
                                                 ExternalSiteContactTitle)">
                 <Phone>
                  <xsl:value-of  select = "../ExternalSiteContact/
                                              ExternalSiteContactPhone"/>
                 </Phone>
                </xsl:when>
                <xsl:when          test = "ExternalSitePI/
                                           ExternalSitePIPhone">
                 <xsl:for-each   select = "ExternalSitePI/
                                           ExternalSitePIPhone">
                  <Phone>
                   <xsl:call-template name = "convertPhoneNumber"/>
                  </Phone>
                 </xsl:for-each> 
                </xsl:when>
                <!--
                If we cannot find a phone number as part of the external
                site information (CTO or SitePIPhone information) we 
                will need to denormalize and pick up a phone from the 
                org document.
                ======================================================== -->
                <xsl:otherwise>
                 <xsl:for-each  select = "ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization">
                  <xsl:call-template name = "rssGetPhoneFromOrgID"/>
                 </xsl:for-each>
                </xsl:otherwise>
               </xsl:choose>
              </ContactDetail>
             </Contact>
            </xsl:otherwise>
           </xsl:choose>
          </ProtPerson>
         </xsl:when>
         <xsl:otherwise>
          <!-- 
          The ExternalSitePIID doesn't exist so we have to create the 
          ProtPerson element just like the GenericPerson and OverallContact
          ================================================================= -->
          <ProtPerson>
           <PersonRole>
            <xsl:text>Contact Person</xsl:text>
           </PersonRole>
           <Contact>
            <ContactName>
             <xsl:value-of     select = "ExternalSiteOrg/
                                           ExternalSiteName"/>
            </ContactName>
            <ContactDetail>
             <xsl:for-each               select = "ExternalSiteAddress">
              <xsl:call-template           name = "getExternalAddress"/>
             </xsl:for-each>

             <!--
             Pick up the phone number from the Organization since it is 
             not provided for the PI.
             ============================================================= -->
             <xsl:for-each      select = "ExternalSiteOrg/
                                          ExternalSiteOrgID/
                                          Organization">
              <xsl:call-template  name = "rssGetPhoneFromOrgID"/>
             </xsl:for-each>
            </ContactDetail>
           </Contact>
          </ProtPerson>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>
   </ProtocolSite>
  </xsl:for-each>

  <!-- Added code to pick up private practice sites.  RMK 2002-09-06.      -->
  <xsl:for-each                 select = "PrivatePracticeSiteID">
   <!-- Only display active PrivatePracticeSite                            -->
   <xsl:if                        test = "PrivatePracticeSiteStatus = 'Active'">
    <ProtocolSite>
     <xsl:attribute               name = "ref">
      <xsl:value-of             select = "substring-before(
                                            concat(PrivatePracticePerson/Person/
                                                   @cdr:ref, '#'),'#')"/>
     </xsl:attribute>
     <xsl:attribute               name = "sitetype">
      <xsl:value-of             select = "'Person'"/>
     </xsl:attribute>
     <xsl:choose>
     <xsl:when                    test = "../@SuppressContactInformation 
                                          or
                                          @SuppressContactInformation">
      <xsl:attribute              name = "SuppressContactInformation">
       <xsl:value-of            select = "../@SuppressContactInformation |
                                          @SuppressContactInformation"/>
      </xsl:attribute>
      <xsl:attribute              name = "contactinfo">
       <xsl:value-of            select = "../@SuppressContactInformation |
                                          @SuppressContactInformation"/>
      </xsl:attribute>
     </xsl:when>
     <xsl:otherwise>
      <xsl:attribute              name = "contactinfo">
       <xsl:value-of            select = "'No'"/>
      </xsl:attribute>
     </xsl:otherwise>
     </xsl:choose>

     <xsl:apply-templates       select = "PrivatePracticePerson"/>
    </ProtocolSite>
   </xsl:if>
  </xsl:for-each>
 </xsl:template>


 <!--
 ====================================================================
 Assemble the output for a specific person identified as the 
 contact for a participating organization.
 ==================================================================== -->
 <xsl:template                   match = "GenericPerson |
                                          OverallContact">
  <ProtPerson>
   <PersonRole>
    <xsl:value-of               select = "PersonTitle"/>
   </PersonRole>
   <Contact>
    <xsl:apply-templates        select = "GenericPersonContact/
                                          ContactName"
                                  mode = "copy"/>

    <ContactDetail>

     <!-- Added at Lakshmi's request RMK 2002-09-08. -->
     <xsl:for-each              select = "OrganizationAddressNames/
                                          OrganizationName">
      <OrganizationName>
       <xsl:value-of            select = "."/>
      </OrganizationName>
     </xsl:for-each>

     <xsl:apply-templates       select = "GenericPersonContact/
                                          ContactDetail/
                                          PostalAddress"/>

     <xsl:apply-templates       select = "GenericPersonContact/
                                          ContactDetail/
                                          Phone"/>
     <xsl:apply-templates       select = "GenericPersonContact/
                                          ContactDetail/
                                          TollFreePhone"/>
     <xsl:apply-templates       select = "GenericPersonContact/
                                          ContactDetail/
                                          Email"/>
     <xsl:apply-templates       select = "GenericPersonContact/
                                          ContactDetail/
                                          WebSite"/>
    </ContactDetail>
   </Contact>
  </ProtPerson>
 </xsl:template>


 <!--
 ====================================================================
 Assemble the output for the ClinicalTrialOffice information to be
 displayed as a ProtPerson element.  The only possible entries are
 the PersonRole, ContactName, Phone, and Email.
 Since the ClinicalTrialOffice address block does not display the 
 Street information create a ctOffice attribute allowing the vendor
 cleanup filter to remove the Street element for the vendor output.
 ==================================================================== -->
 <xsl:template                   match = "ClinicalTrialOffice">
  <xsl:variable                   name = "cipsID"
                                select = "Organization/
                                          OrganizationLocations/
                                          CIPSContact"/>

  <ProtPerson>
   <PersonRole>
    <xsl:choose>
     <xsl:when                    test = "Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactName">
      <xsl:value-of             select = "Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactName"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "'Clinical Trials Office'"/>
     </xsl:otherwise>
    </xsl:choose>
   </PersonRole>

   <Contact>
    <xsl:attribute                name = "ctOffice">
     <xsl:text>Yes</xsl:text>
    </xsl:attribute>

    <ContactDetail>
     <xsl:apply-templates       select = "Organization/
                                          OrganizationLocations/
                                          OrganizationLocation/
                                          Location[@cdr:id = $cipsID]/
                                          PostalAddress"/>

     <Phone>
      <xsl:for-each             select = "Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactPhone">
       <xsl:value-of            select = "."/>
       <xsl:if                    test = "position() != last()">
        <xsl:text>; </xsl:text>
       </xsl:if>
      </xsl:for-each>
     </Phone>

     <xsl:if                      test = "Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactEmail">
      <Email>
       <xsl:value-of            select = "Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactEmail"/>
      </Email>
     </xsl:if>

    </ContactDetail>
   </Contact>
  </ProtPerson>
 </xsl:template>


 <!--
 ====================================================================
 Template to create RegistryInfo block
 ==================================================================== -->
 <xsl:template                    name = "createRegistryInfo">
  <RegistryInfo>
   <xsl:apply-templates         select = "ProtocolTitle[@Type='Original']"
                                  mode = "original"/>
   <DateSubmittedtoPDQ>
    <xsl:choose>
     <xsl:when                    test = "ProtocolSources/
                                          ProtocolSource/
                                          DateSubmissionComplete">
      <xsl:value-of             select = "ProtocolSources/
                                          ProtocolSource/
                                          DateSubmissionComplete"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "ProtocolSources/
                                          ProtocolSource/
                                          DateReceived"/>
     </xsl:otherwise>
    </xsl:choose>
   </DateSubmittedtoPDQ>
   <ClinicalTrialsGovID>
    <xsl:attribute                name = "xref">
     <xsl:text>http://clinicaltrials.gov/ct/show/</xsl:text>
    <xsl:apply-templates        select = "ProtocolIDs/
                                          OtherID/
                                          IDType"
                                  mode = "reginfo"/>
    </xsl:attribute>
    <xsl:apply-templates        select = "ProtocolIDs/
                                          OtherID/
                                          IDType"
                                  mode = "reginfo"/>
   </ClinicalTrialsGovID>
  </RegistryInfo>
 </xsl:template>


 <!--
 ====================================================================
 Template to create IDString element
 ==================================================================== -->
 <xsl:template                   match = "IDType"
                                  mode = "reginfo">
  <xsl:if                         test = ". = 'ClinicalTrials.gov ID'">
   <xsl:value-of                select = "../IDString"/>
  </xsl:if>
 </xsl:template>


 <!--
 ====================================================================
 Named Templates
 ==================================================================== -->
 <!--
 ====================================================================
 Add the preferred Name of Terms to the output tree 
 ==================================================================== -->
 <xsl:template                    name = "getTerm">
  <xsl:param                      name = "elementName"/>

  <xsl:element                    name = "{$elementName}">
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "Term[1]/@cdr:ref"/>
   </xsl:attribute>
   <xsl:apply-templates         select = "Term/PreferredName[1]"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Convert the format of the phone numbers provided by RSS from the 
 form "(123) 456-7890" to the form "123-456-7890"
 ==================================================================== -->
 <xsl:template                    name = "convertPhoneNumber">
  <xsl:value-of                 select = "translate(
                                           translate(., '()', ' -'), ' ', '')"/>
 </xsl:template>


 <!--
 ====================================================================
 Convert the format of the phone numbers provided by RSS from the 
 form "(123) 456-7890" to the form "123-456-7890"
 ==================================================================== -->
 <xsl:template                   match = "VerificationDateCalculated">
  <DateLastVerified>
   <xsl:value-of                select = "."/>
  </DateLastVerified>
 </xsl:template>


 <!--
 =====================================================================
 Display the RSS provided Address information
 ===================================================================== -->
 <xsl:template                    name = "getExternalAddress">
  <PostalAddress>
   <!--
   The Street information is not being displayed for RSS organizations
   =================================================================== -->
<!--
   <xsl:if                        test = "Street">
    <xsl:for-each               select = "Street">
     <Street>
      <xsl:value-of              select = "."/>
     </Street>
    </xsl:for-each>
   </xsl:if>
-->

   <City>
    <xsl:value-of               select = "City"/>
   </City>

   <xsl:if                        test = "Street
                                          and
                                          CitySuffix">
    <CitySuffix>
     <xsl:value-of              select = "CitySuffix"/>
    </CitySuffix>
   </xsl:if>

   <xsl:apply-templates         select = "PoliticalSubUnit_State"/>
   <xsl:apply-templates         select = "Country"/>

   <xsl:if                        test = "PostalCode_ZIP">
    <PostalCode_ZIP>
     <xsl:value-of              select = "PostalCode_ZIP"/>
    </PostalCode_ZIP>
   </xsl:if>

   <xsl:apply-templates         select = "Country/PostalCodePosition"
                                  mode = "copy"/>
  </PostalAddress>
 </xsl:template>


 <!--
 ====================================================================
 Assemble the output for the ClinicalTrialOffice information to be
 displayed as a ProtPerson element.  The only possible entries are
 the PersonRole, ContactName, Phone, and Email.
 Since the ClinicalTrialOffice address block does not display the 
 Street information create a ctOffice attribute allowing the vendor
 cleanup filter to remove the Street element for the vendor output.
 ==================================================================== -->
 <xsl:template                    name = "rssClinicalTrialsOffice">
  <PersonRole>
   <xsl:text>Clinical Trials Office</xsl:text>
  </PersonRole>

  <Contact>
   <ContactDetail>
    <xsl:for-each               select = "ExternalSiteAddress">
     <xsl:call-template           name = "getExternalAddress"/>
    </xsl:for-each>

    <Phone>
     <xsl:for-each              select = "ExternalSiteContact/
                                          ExternalSiteContactPhone">
      <xsl:call-template          name = "convertPhoneNumber"/>
      <xsl:if                     test = "position() != last()">
       <xsl:text>; </xsl:text>
      </xsl:if>
     </xsl:for-each>
    </Phone>

   </ContactDetail>
  </Contact>
 </xsl:template>


 <!--
 ====================================================================
 Template to populate a missing PI phone number of an ExternalSite 
 with the phone number from the organization of this site.
 ==================================================================== -->
 <xsl:template                    name = "rssGetPhoneFromOrgID">
  <!--
  If a ClinicalTrialsOffice exists for the organization use its
  phone number rather then the fragment phone number
  ============================================================= -->
  <xsl:choose>
   <xsl:when                      test = "OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactPhone">
    <Phone>
     <xsl:value-of              select = "OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactPhone"/>
    </Phone>
   </xsl:when>
   <xsl:otherwise>
    <xsl:if                       test = "OrganizationLocations/
                                          OrganizationLocation/
                                          Location
                                             [@cdr:id = ../../CIPSContact]/
                                          Phone">
     <xsl:for-each              select = "OrganizationLocations/
                                          OrganizationLocation/
                                          Location
                                             [@cdr:id = ../../CIPSContact]/
                                          Phone">
      <xsl:copy-of              select = "."/>
     </xsl:for-each>
    </xsl:if>
    <xsl:if                       test = "OrganizationLocations/
                                          OrganizationLocation/
                                          Location
                                             [@cdr:id = ../../CIPSContact]/
                                          TollFreePhone">
     <xsl:for-each              select = "OrganizationLocations/
                                          OrganizationLocation/
                                          Location
                                             [@cdr:id = ../../CIPSContact]/
                                          TollFreePhone">
      <xsl:copy-of              select = "."/>
     </xsl:for-each>
    </xsl:if>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 ====================================================================
 Template to populate a missing PI phone number of an ExternalSite 
 with the phone number from the person listed under OrgID.
 ==================================================================== -->
 <xsl:template                    name = "rssGetPhoneFromPIID">
  <xsl:choose>
   <xsl:when                      test = "PersonLocations/
                                          Home[@cdr:id = ../CIPSContact]/
                                          Phone">
    <xsl:copy-of                select = "PersonLocations/
                                          Home[@cdr:id = ../CIPSContact]/
                                          Phone"/>
   </xsl:when>
   <xsl:when                      test = "PersonLocations/
                                          PrivatePractice/
                                          PrivatePracticeLocation
                                             [@cdr:id = ../CIPSContact]/
                                          Phone">
    <xsl:copy-of                select = "PersonLocations/
                                          PrivatePractice/
                                          PrivatePracticeLocation
                                             [@cdr:id = ../CIPSContact]/
                                          Phone"/>
   </xsl:when>
   <xsl:when                      test = "PersonLocations/
                                          OtherPracticeLocation
                                             [@cdr:id = ../CIPSContact]/
                                          SpecificPhone">
    <Phone>
     <xsl:value-of              select = "PersonLocations/
                                          OtherPracticeLocation
                                             [@cdr:id = ../CIPSContact]/
                                          SpecificPhone"/>
    </Phone>
   </xsl:when>
   <xsl:when                      test = "PersonLocations/
                                          OtherPracticeLocation
                                             [@cdr:id = ../CIPSContact]/
                                          SpecificTollFreePhone">
    <TollFreePhone>
     <xsl:value-of              select = "PersonLocations/
                                          OtherPracticeLocation
                                             [@cdr:id = ../CIPSContact]/
                                          SpecificTollFreePhone"/>
    </TollFreePhone>
   </xsl:when>
   <!--
   If a ClinicalTrialsOffice exists for the organization use its
   phone number rather then the fragment phone number
   ============================================================= -->
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                    test = "PersonLocations/
                                          OtherPracticeLocation
                                             [@cdr:id = ../CIPSContact]/
                                          OrganizationLocation/
                                          Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactPhone">
      <Phone>
       <xsl:value-of            select = "PersonLocations/
                                          OtherPracticeLocation
                                             [@cdr:id = ../CIPSContact]/
                                          OrganizationLocation/
                                          Organization/
                                          OrganizationLocations/
                                          ClinicalTrialsOfficeContact/
                                          ClinicalTrialsOfficeContactPhone"/>
      </Phone>
     </xsl:when>
     <xsl:otherwise>
      <Phone>
       <xsl:value-of            select = "PersonLocations/
                                          OtherPracticeLocation
                                             [@cdr:id = ../CIPSContact]/
                                          OrganizationLocation/
                                          Organization/
                                          OrganizationLocations/
                                          OrganizationLocation/
                                          Location
                                             [@cdr:id = ../../CIPSContact]/
                                          Phone"/>
      </Phone>
      <xsl:if                     test = "PersonLocations/
                                          OtherPracticeLocation
                                             [@cdr:id = ../CIPSContact]/
                                          OrganizationLocation/
                                          Organization/
                                          OrganizationLocations/
                                          OrganizationLocation/
                                          Location
                                             [@cdr:id = ../../CIPSContact]/
                                          TollFreePhone">
       <TollFreePhone>
        <xsl:value-of           select = "PersonLocations/
                                          OtherPracticeLocation
                                             [@cdr:id = ../CIPSContact]/
                                          OrganizationLocation/
                                          Organization/
                                          OrganizationLocations/
                                          OrganizationLocation/
                                          Location
                                             [@cdr:id = ../../CIPSContact]/
                                          TollFreePhone"/>
       </TollFreePhone>
      </xsl:if>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>                                 
 </xsl:template>


 <!--
 ====================================================================
 Templates for elements that are being used for denormalization
 ==================================================================== -->
 <!--
 ====================================================================
 Add the parents of the Terms to the output tree
 ==================================================================== -->
 <xsl:template                   match = "Term">
  <xsl:param                      name = "parentName"/>
  <xsl:element                    name = "{$parentName}">
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "@cdr:ref"/>
   </xsl:attribute>
   <xsl:apply-templates         select = "PreferredName"/>
  </xsl:element>

  <xsl:apply-templates          select = "Term">
   <xsl:with-param                name = "parentName"
                                select = "$parentName"/>
  </xsl:apply-templates>
 </xsl:template>


 <!--
 ====================================================================
 Templates for elements that are being dropped or globally 
 renaming attribute names.
 ==================================================================== -->
 <!--
 ====================================================================
 Drop Comment with and without mode = "copy".
 It doesn't appear to be used without mode="copy" but it's safe to do.
 ==================================================================== -->
 <xsl:template                   match = "Comment"/>
 <xsl:template                   match = "Comment"
                                  mode = "copy"/>


 <!--

 ====================================================================
 Drop PdqKey with and withoiut mode = "copy".
 It doesn't appear to be used without mode="copy" but it's safe to do.
 ==================================================================== -->
 <xsl:template                   match = "@PdqKey"/>
 <xsl:template                   match = "@PdqKey"
                                  mode = "copy"/>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:id with mode = "copy".
 ==================================================================== -->
 <xsl:template                   match = "@cdr:id"
                                  mode = "copy">
  <xsl:attribute                  name = "id">
   <xsl:value-of                select = "."/>
  </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:ref with mode = "copy".
 ==================================================================== -->
 <xsl:template                   match = "@cdr:ref"
                                  mode = "copy">
  <xsl:attribute                  name = "ref">
   <xsl:value-of                select = "."/>
  </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:href with mode = "copy".
 ==================================================================== -->
 <xsl:template                   match = "@cdr:href"
                                  mode = "copy">
  <xsl:attribute                  name = "href">
   <xsl:value-of                select = "."/>
  </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Rename the Protocol Title Type attribute to Audience.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolTitle/@Type"
                                  mode = "copy">
  <xsl:attribute                  name = "Audience">
   <xsl:value-of                select = "."/>
  </xsl:attribute>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Temporarily drop @Compact until June, 2003.
 ==================================================================== -->
 <xsl:template                   match = "OrderedList/@Compact"
                                  mode = "copy"/>


 <!--
 ======================================================================
 Template to add (Public = No) to the display
 ====================================================================== -->
 <xsl:template                   match = "@Public">
  <xsl:attribute                  name = "Public">
   <xsl:value-of                select = "'No'"/>
  </xsl:attribute>
 </xsl:template>
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>