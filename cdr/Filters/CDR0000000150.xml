<CdrDoc Type='Filter' Id='CDR0000000150'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Vendor Filter: InScopeProtocol</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
<xsl:transform           xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                         xmlns:cdr = "cips.nci.nih.gov/cdr"
           exclude-result-prefixes = "cdr"
                           version = "1.0">

 <xsl:output                method = "xml"
              omit-xml-declaration = "no"
                          encoding = "UTF-8"
                            indent = 'yes'/>
  
  <xsl:include href = "cdr:name:Module: Global Filter Templates"/>
  <xsl:include href = "cdr:name:Module: Citation Formatting"/>
  <xsl:include href = "cdr:name:Module: Vendor Phone Templates"/>
  <xsl:include href = "cdr:name:Module: Vendor Address Templates"/>
  <!-- xsl:include href = "cdr:name:Module: Vendor Cleanup Templates"/ -->

  
  <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
  <xsl:param                      name = "DateFirstPub"
                                select = "''"/> 

  <!-- For the purpose of output layout. This is fine only when used with
       indent='yes'. -->
  <xsl:strip-space        elements = "*"/>

 <!-- *
 ====================================================================
 Root element.
 ==================================================================== -->
 <xsl:template               match = "*">
  <xsl:apply-templates/>
 </xsl:template>

 <!-- xsl:template               match = "/">
  <xsl:text disable-output-escaping="yes">&lt;!DOCTYPE Protocol &gt;</xsl:text>
  <xsl:apply-templates      select = "InScopeProtocol"/>
 </xsl:template -->

 <!-- *
 ====================================================================
 Document element.
 ==================================================================== -->
 <xsl:template               match = "InScopeProtocol">

  <Protocol>
   <xsl:attribute             name = "id">
    <xsl:value-of           select = "DocId"/>
   </xsl:attribute>
   <xsl:attribute             name = "LegacyPDQID">
    <xsl:value-of           select = "PdqKey"/>
   </xsl:attribute>

   <xsl:apply-templates     select = "ProtocolIDs"/>
   <xsl:apply-templates     select = "FundingInfo"/>
   <xsl:apply-templates     select = "ProtocolSponsors"/>
   <xsl:apply-templates     select = "ProtocolApproval"/>

   <!-- 
   ==========================================================
   Output only the Professional and Patient title
   The Type attribute is being renamed to Audience elsewhere. 
   ========================================================== -->
   <xsl:apply-templates     select = "ProtocolTitle[@Type='Professional']"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProtocolTitle[@Type='Patient']"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProtocolTitle[@Type='Original']"
                              mode = "copy"/>
 
   <xsl:apply-templates     select = "ProtocolAbstract"/>
   <xsl:apply-templates     select = "ProtocolDetail"/>
   <xsl:apply-templates     select = "Eligibility"/>
   <xsl:apply-templates     select = "ProtocolRelatedLinks"/>
   <xsl:apply-templates     select = "PublishedResults"/>
   <xsl:apply-templates     select = "ProtocolPhase"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProtocolDesign"
                              mode = "copy"/>

   <xsl:apply-templates     select = "ProtocolSpecialCategory"/>

   <xsl:apply-templates     select = "ProtocolAdminInfo"/>

<!-- ===================================================================
            Copy Date First Published and Date Last Modified
     ================================================================== -->
  <xsl:choose>
    <xsl:when                 test = "CdrDocCtl/FirstPub/Date">
      <DateFirstPublished>
      <xsl:value-of         select = "substring-before(CdrDocCtl/
                                            FirstPub/Date,'T')"/>
      </DateFirstPublished>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template      name = "getDateFirstPub">
        <xsl:with-param       name = "date"
                            select = "$DateFirstPub"/>
      </xsl:call-template>    
    </xsl:otherwise>
  </xsl:choose>

   <xsl:apply-templates     select = "DateLastModified"
                              mode = "copy"/>
  </Protocol>
 </xsl:template>


 <!-- *
 ====================================================================
 Display the ProtocolIDs element wrapper for other IDs
 ==================================================================== -->
 <xsl:template               match = "ProtocolIDs">
  <xsl:element                name = "{name()}">
   <xsl:apply-templates     select = "PrimaryID"/>
   <xsl:apply-templates     select = "OtherID"/>
  </xsl:element>
 </xsl:template>


 <!-- *
 ====================================================================
 Display the Primary and Other protocolIDs
 ==================================================================== -->
 <xsl:template               match = "PrimaryID | OtherID">
  <xsl:element                name = "{name()}">
   <xsl:apply-templates     select = "IDType"
                              mode = "copy"/>
   <xsl:apply-templates     select = "IDString"
                              mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!-- *
 ====================================================================
 Funding template to display NIHGrantContract or OtherGrantContractInfo 
 elements
 Comment element will be filtered out globally.
 ==================================================================== -->
 <xsl:template               match = "FundingInfo">
  <xsl:element                name = "{name()}">
   <xsl:for-each            select = "NIHGrantContract">
      <xsl:apply-templates  select = "."
                              mode = "copy"/>
    </xsl:for-each>
    <xsl:for-each           select = "OtherGrantContractInfo">
      <xsl:apply-templates  select = "."
                              mode = "copy"/>
    </xsl:for-each>
   </xsl:element>
 </xsl:template>


 <!-- *
 ====================================================================
 Rename the element ProtocolSponsors to ProtocolSponsor and eliminate
 the SponsorName child element.
 ==================================================================== -->
 <xsl:template               match = "ProtocolSponsors">
  <xsl:for-each             select = "SponsorName">
   <ProtocolSponsor>
    <xsl:apply-templates    select = "."/>
   </ProtocolSponsor>
  </xsl:for-each>
 </xsl:template>


 <!-- *
 ====================================================================
 Rename the element ReimbursementApprovalType to ReimbursementApproval
 Only the ReimbursementApprovalType element is being picked up from 
 the ProtocolApproval fragment.
 ==================================================================== -->
 <xsl:template               match = "ProtocolApproval">
  <!-- 
  NOTE:
  The schema allows multiple values here but currently only one value 
  is allowed.  The code will need to be modified to separate multiple
  values with a space, comma, etc. if more values get added in the future
  ======================================================================= -->
  <xsl:for-each             select = "ReimbursementApprovalType">
   <ReimbursementApproval>
    <xsl:value-of           select = "."/>
   </ReimbursementApproval>
  </xsl:for-each>
 </xsl:template>



 <!-- *
 ====================================================================
 Protocols have two flavors of abstracts: Professional and Patient.
 ==================================================================== -->
 <xsl:template               match = "ProtocolAbstract">
  <xsl:element                name = "{name()}">
   <xsl:apply-templates     select = "Professional"/>
   <xsl:apply-templates     select = "Patient"/>
  </xsl:element>
 </xsl:template>


 <!-- *
 ====================================================================
 Assemble the Professional abstract.
 ==================================================================== -->
 <xsl:template               match = "Professional">
  <xsl:element                name = "{name()}">
   <xsl:apply-templates     select = "Objectives"
                              mode = "copy"/>
   <xsl:apply-templates     select = "Outline"
                              mode = "copy"/>
   <xsl:apply-templates     select = "EntryCriteria"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProjectedAccrual"
                              mode = "copy"/>

 <!-- Commented out only for testing the diff
  Put back in production when testing completed, VE, 6/16/03

   <xsl:apply-templates     select = "EndPoints"
                              mode = "copy"/>
   <xsl:apply-templates     select = "Stratification"
                              mode = "copy"/>
   <xsl:apply-templates     select = "SpecialStudyParameters"
                              mode = "copy"/>
   <xsl:apply-templates     select = "DoseSchedule"
                              mode = "copy"/>
   <xsl:apply-templates     select = "DosageForm"
                              mode = "copy"/ -->
   <xsl:apply-templates     select = "ProfessionalDisclaimer"/>
  </xsl:element>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the Patient abstract.
 ==================================================================== -->
 <xsl:template               match = "Patient">
  <xsl:element                name = "{name()}">
   <xsl:apply-templates     select = "Rationale"
                              mode = "copy"/>
   <xsl:apply-templates     select = "Purpose"
                              mode = "copy"/>
   <xsl:apply-templates     select = "EligibilityText"
                              mode = "copy"/>
   <xsl:apply-templates     select = "TreatmentIntervention"
                              mode = "copy"/>
   <xsl:apply-templates     select = "PatientDisclaimer"
                              mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Add the default Professional disclaimer and an additional disclaimer
 for NCI supported clinical trials.
 ==================================================================== -->
 <xsl:template               match = "ProfessionalDisclaimer">
  <xsl:element                name = "{name()}">
   <xsl:apply-templates       mode = "copy"/>

   <xsl:if                    test = "/InScopeProtocol/ProtocolAdminInfo/
                                       ProtocolLeadOrg/LeadOrganizationID/
                                       Organization/OrganizationType = 
                                       'NCI-supported clinical trials group'">
    <xsl:variable             name = "miscDoc1" 
                            select = "document(concat('cdr:name:',
                                      'Cooperative Group Disclaimer;',
                                      'Protocol site disclaimer',
                                      '/lastp'))"/>
    <xsl:apply-templates    select = "$miscDoc1/MiscellaneousDocument/
                                       MiscellaneousDocumentText/
                                       Section/Para"
                              mode = "nciDisclaimer"/>
    </xsl:if>
  </xsl:element>
 </xsl:template>


 <!--
 ====================================================================
 Template to create the Para element for the NCI supported clinical 
 trials Disclaimer and modify the Para id.
 ==================================================================== -->
 <xsl:template               match = "Para"
                              mode = "nciDisclaimer">
  <Para>
   <xsl:attribute             name = "id">
    <xsl:text>_ProtNCIDisclaimer</xsl:text>
    <xsl:value-of           select = "@cdr:id"/>
   </xsl:attribute>

   <xsl:apply-templates       mode = "copy"/>
  </Para>
 </xsl:template>



 <!-- *
 ====================================================================
 Assemble the Protocol detail section.
 ==================================================================== -->
 <xsl:template               match = "ProtocolDetail">
  <xsl:element                name = "{name()}">
   <xsl:apply-templates     select = "StudyType"
                              mode = "copy"/>
   <xsl:apply-templates     select = "StudyCategory"/>
   <xsl:apply-templates     select = "Condition"/>
   <xsl:apply-templates     select = "Gene"/>
  </xsl:element>
 </xsl:template>


 <!-- *
 ====================================================================
 Add citation IDs as attributes
 ==================================================================== -->
 <xsl:template               match = "StudyCategory">
   <xsl:element               name = "{name()}">
    <xsl:apply-templates    select = "StudyCategoryName"
                              mode = "copy"/>

    <xsl:for-each           select = "Intervention">
     <xsl:if                  test = "InterventionType">
      <Intervention>
       <xsl:apply-templates select = "InterventionType"/>
       <xsl:apply-templates select = "InterventionNameLink"/>
      </Intervention>
     </xsl:if>
    </xsl:for-each>

   </xsl:element>
 </xsl:template>


 <!-- *
 ====================================================================
 Add Intervention term type to output tree
 ==================================================================== -->
 <xsl:template               match = "InterventionType">
  <xsl:call-template          name = "getTerm">
   <xsl:with-param            name = "elementName"
                            select = "'InterventionType'"/>
  </xsl:call-template>

  <xsl:apply-templates      select = "Term/Term">
   <xsl:with-param            name = "parentName"
                            select = "'InterventionTypeParent'"/>
  </xsl:apply-templates>
 </xsl:template>


 <!-- *
 ====================================================================
 Add Intervention term type to output tree
 ==================================================================== -->
 <xsl:template               match = "InterventionNameLink">
  <xsl:call-template          name = "getTerm">
   <xsl:with-param            name = "elementName"
                            select = "'InterventionNameLink'"/>
  </xsl:call-template>
 </xsl:template>


 <!-- *
 ====================================================================
 Add Condition term type to output tree 
 ==================================================================== -->
 <xsl:template               match = "Condition">
  <StudyCondition>
   <xsl:call-template         name = "getTerm">
    <xsl:with-param           name = "elementName"
                            select = "'SpecificCondition'"/>
   </xsl:call-template>
   <xsl:apply-templates     select = "Term/Term">
    <xsl:with-param           name = "parentName"
                            select = "'ConditionParent'"/>
   </xsl:apply-templates>
  </StudyCondition>
 </xsl:template>


 <!-- *
 ====================================================================
 Add the parents of the Terms to the output tree
 ==================================================================== -->
 <xsl:template              match = "Gene">
  <xsl:element               name = "{name()}">
   <xsl:call-template        name = "getTerm">
    <xsl:with-param          name = "elementName"
                           select = "'SpecificGene'"/>
   </xsl:call-template>
  </xsl:element>

 </xsl:template>


 <!-- *
 ====================================================================
 Assemble the Eligibility section.
 ==================================================================== -->
 <xsl:template               match = "Eligibility">
  <xsl:element               name = "{name()}">
   <xsl:apply-templates     select = "HealthyVolunteers"
                              mode = "copy"/>
   <xsl:apply-templates     select = "LowAge"
                              mode = "copy"/>
   <xsl:apply-templates     select = "HighAge"
                              mode = "copy"/>
   <xsl:apply-templates     select = "AgeText"
                              mode = "copy"/>
   <xsl:apply-templates     select = "Diagnosis"/>
   <xsl:apply-templates     select = "ExclusionCriteria"/>
  </xsl:element>
 </xsl:template>


 <!-- *
 ====================================================================
 Add Condition term type to output tree 
 ==================================================================== -->
 <xsl:template               match = "Diagnosis">
  <xsl:element                name = "{name()}">
   <xsl:call-template         name = "getTerm">
    <xsl:with-param           name = "elementName"
                            select = "'SpecificDiagnosis'"/>
   </xsl:call-template>
   <xsl:apply-templates     select = "Term/Term">
    <xsl:with-param           name = "parentName"
                            select = "'DiagnosisParent'"/>
   </xsl:apply-templates>
  </xsl:element>
 </xsl:template>



 <!-- *
 ====================================================================
 Add Condition term type to output tree 
 ==================================================================== -->
 <xsl:template               match = "ExclusionCriteria">
   <xsl:call-template         name = "getTerm">
    <xsl:with-param           name = "elementName"
                            select = "'ExclusionCriteria'"/>
   </xsl:call-template>
 </xsl:template>



 <!-- *
 ====================================================================
 Filter the ProtocolRelatedLinks information for the vendors
 Only the RelatedProtocols and RelatedWebsites elements are valid.
 Also, ensure that the ProtocolRelatedLinks element is not copied to 
 the output tree if none of the protocols are publishable.
 ==================================================================== -->
 <xsl:template               match = "ProtocolRelatedLinks">
  <xsl:if                     test = "RelatedProtocols | RelatedWebsites">
   <xsl:if                    test = "count(RelatedProtocols/
                                      InScopeProtocol) &gt;
                                      count(RelatedProtocols/
                                      InScopeProtocol/@Publishable)">
    <xsl:element              name = "{name()}">
     <xsl:apply-templates   select = "RelatedProtocols | RelatedWebsites"/>
    </xsl:element>
   </xsl:if>
  </xsl:if>
 </xsl:template>


 <!-- *
 ====================================================================
 Filter the ProtocolRelatedLinks information for the vendors
 Only the RelatedProtocols without a Publishable attribute and 
 RelatedWebsites elements are valid.
 ==================================================================== -->
 <xsl:template               match = "RelatedProtocols">
  <xsl:if                     test = "not(InScopeProtocol
                                                     [@Publishable])">
   <xsl:element               name = "{name()}">
    <xsl:attribute            name = "ref">
     <xsl:value-of          select = "InScopeProtocol/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of           select = "InScopeProtocol/ProtocolIDs/
                                      PrimaryID/IDString"/>
   </xsl:element>
   </xsl:if>
 </xsl:template>


 <!-- *
 ====================================================================
 Filter the ProtocolRelatedLinks information for the vendors
 Only the RelatedProtocols and RelatedWebsites elements are valid.
 ==================================================================== -->
 <xsl:template               match = "RelatedWebsites">
  <xsl:element                name = "{name()}">
   <xsl:attribute             name = "href">
    <xsl:value-of           select = "@cdr:href"/>
   </xsl:attribute>
   <xsl:apply-templates     select = "."/>
  </xsl:element>
 </xsl:template>



 <!-- *
 ====================================================================
 Add citation IDs as attributes
 ==================================================================== -->
 <xsl:template               match = "PublishedResults">
  <xsl:element                name = "{name()}">
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "./Citation/@cdr:ref"/>
   </xsl:attribute> 
   <xsl:apply-templates     select = "./Citation"/>
  </xsl:element>
 </xsl:template>



 <!-- *
 ====================================================================
 Include the ProtocolSpecialCategory element in the output
 ==================================================================== -->
 <xsl:template               match = "ProtocolSpecialCategory">
   <xsl:element               name = "{name()}">
    <xsl:value-of           select = "SpecialCategory"/>
   </xsl:element>
 </xsl:template>



 <!--
 ====================================================================
 Assemble the Protocol admin info.
 NOTE: This logic discards the relationship between the individual
       lead organizations for the protocol and the protocol sites
       associated with each of the lead organizations!
 ==================================================================== -->
 <xsl:template               match = "ProtocolAdminInfo">
  <xsl:element                name = "{name()}">
   <xsl:apply-templates     select = "CurrentProtocolStatus"
                              mode = "copy"/>

   <!-- Only display the LeadOrg if the Status is not Withdrawn       -->
   <!-- 2003-06-26 RMK: No longer true; implement this logic downstream -->
   <xsl:apply-templates     select = "ProtocolLeadOrg"/>
   <!--
                                        [LeadOrgProtocolStatuses/
                                         CurrentOrgStatus/
                                         StatusName != 'Withdrawn']"/>
   -->

   <!-- Only display the ProtocolSites for Active Protocols           -->
   <xsl:if                    test = "(/InScopeProtocol/ProtocolAdminInfo/
                                      CurrentProtocolStatus = 
                                      'Active')">

 <!-- Only create the ProtocolSites element if Active Sites exist and only
      if its parents LeadOrgProtocolStatus is active as well or if the 
      PrivateProtocolSite is active
      Note:  This IF only controls the ProtocolSites element tag.  The 
             sites to be picked up will be identified within the 
             ProtocolSites template.
      ==================================================================== -->
    <xsl:if                   test = "(ProtocolLeadOrg
                                            [LeadOrgProtocolStatuses/
                                             CurrentOrgStatus/
                                             StatusName = 'Active']/
                                         ProtocolSites/
                                         OrgSiteID/
                                         Organization/
                                         Status[CurrentStatus = 'Active'])    |
                                      (ProtocolLeadOrg
                                            [LeadOrgProtocolStatuses/
                                             CurrentOrgStatus/
                                             StatusName = 'Active']/
                                         ProtocolSites/
                                         PrivatePracticeSiteID
                                       [PrivatePracticeSiteStatus = 'Active'])">
     <ProtocolSites>
      <xsl:apply-templates  select = "ProtocolLeadOrg/ProtocolSites"/>
     </ProtocolSites>
    </xsl:if>
   </xsl:if>
  </xsl:element>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the information for one lead organization.  Don't pick up
 the protocol sites linked to this lead organization.  They get lumped
 together in one amorphous pile following the lead organizations.
 ==================================================================== -->
 <xsl:template               match = "ProtocolLeadOrg">
  <xsl:element                name = "{name()}">
   <LeadOrgName>
    <xsl:attribute            name = "ref">
     <xsl:value-of          select = "LeadOrganizationID/
                                      Organization/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of           select = "LeadOrganizationID/
                                      Organization/OrganizationNameInformation/
                                      OfficialName/Name"/>
   </LeadOrgName>
   <xsl:apply-templates     select = "LeadOrgRole"
                              mode = "copy"/>
   <xsl:apply-templates     select = "LeadOrgProtocolID"
                              mode = "copy"/>
   <LeadOrgProtocolStatus>
    <xsl:apply-templates    select = "LeadOrgProtocolStatuses/
                                      CurrentOrgStatus/StatusName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "LeadOrgProtocolStatuses/
                                      CurrentOrgStatus/StatusDate"
                              mode = "copy"/>
   </LeadOrgProtocolStatus>


   <!-- 
   LeadOrgPersonnel with Public=No attribute is not to be published
   [2003-06-26 RMK: no longer true; needed for protocol abstract
    mailers, so this logic must be applied further downstream.]
   ================================================================ -->
   <LeadOrgPersonnel>
    <xsl:apply-templates    select = "LeadOrgPersonnel"/>
   </LeadOrgPersonnel>
  </xsl:element>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the information for one lead org person.
 Note that in the licensee DTD LeadOrgPersonnel refers to the 
 collection of persons for the lead org, while in the CDR Schema,
 each person has his/her own LeadOrgPersonnel element.

 The Person is only to be displayed if the person's only role is not
 that of an Update person

 [RMK 2003-06-26: Need all lead org personnel for protocol abstract
  mailers; implement this logic further downstream.]
 ==================================================================== -->
 <xsl:template               match = "LeadOrgPersonnel">
  <xsl:apply-templates      select = "Person"/>
 </xsl:template>

 <!--
 ====================================================================
 Create a ProtPerson element for a lead org or participating org
 person.
 ==================================================================== -->
 <xsl:template               match = "Person | 
                                      SpecificPerson |
                                      PrivatePracticePerson">
  <xsl:variable               name = "myScope"
                            select = "name()"/>

  <ProtPerson>

   <!-- These will be stripped before the vendors get the data. -->
   <xsl:if                    test = "$myScope = 'Person'">
    <xsl:if                   test = "../@Public = 'No'">
     <xsl:attribute           name = "Public">
      <xsl:value-of         select = "'No'"/>
     </xsl:attribute>
    </xsl:if>
    <xsl:if                   test = "../@cdr:id = ../../MailAbstractTo">
     <xsl:attribute           name = "MailAbstractTo">
      <xsl:value-of         select = "'Y'"/>
     </xsl:attribute>
    </xsl:if>
   </xsl:if>

   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "Person/@cdr:ref"/>
   </xsl:attribute>

   <xsl:variable              name = "contactFID"
                            select = "substring-after(Person/@cdr:ref, '#')"/>
   <xsl:variable              name = "orgAddressFID"
                            select = "substring-after(
                                       Person/PersonLocations/
                                       OtherPracticeLocation
                                        [@cdr:id = $contactFID]/
                                       OrganizationLocation/
                                       Organization/@cdr:ref, '#')"/>
                                        
   <!-- 
   If the status attribute exists the person's status is inactive
   and a special note has to be displayed as an attribute to this
   effect.        
   =============================================================== -->
   <xsl:choose>
    <xsl:when                 test = "Person/
                                       Status[CurrentStatus = 'Inactive']">
     <xsl:attribute           name = "status">
      <xsl:text>Contact information may not be current</xsl:text>
     </xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:for-each          select = "Person/PersonLocations/ 
                                        OtherPracticeLocation
                                        [@cdr:id = $contactFID]">
      <xsl:if                 test = "@PreviousLocation = 'Yes'">
       <xsl:attribute         name = "status">
        <xsl:text>Contact information may not be current</xsl:text>
       </xsl:attribute>
      </xsl:if>
     </xsl:for-each>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates     select = "Person/PersonNameInformation"/>

   <!-- 
   Display the PersonRole of the LeadOrg Person element
   and display the Role element of the ProtocolSite person
   as PersonRole element.
   Note: The PersonRole of Update Person is CIPS internal information
         and not intended for the vendors
   [RMK 2003-06-26: Need all roles for the protocol abstract mailers;
    apply this logic further downstream.]
   ================================================================== -->
   <xsl:choose>
    <xsl:when                 test = "$myScope = 'Person'">
     <xsl:for-each          select = "../PersonRole">
       <xsl:apply-templates select = "."
                              mode = "copy"/>
     </xsl:for-each>
    </xsl:when>
    <xsl:when                 test = "$myScope = 'PrivatePracticePerson'">
     <xsl:for-each          select = "../Role">
      <PersonRole>
       <xsl:value-of        select = "."/>
      </PersonRole>
     </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
     <xsl:for-each          select = "Role">
      <PersonRole>
       <xsl:value-of        select = "."/>
      </PersonRole>
     </xsl:for-each>
    </xsl:otherwise>
   </xsl:choose>

   <Contact>
    <ContactDetail>
     <xsl:choose>
      <!-- 
      Handle Persons with PrivatePractice contact     
      ============================================================== -->
      <xsl:when               test = "Person/PersonLocations/
                                      PrivatePractice/
                                      PrivatePracticeLocation
                                       [@cdr:id = $contactFID] |
                                      Person/PersonLocations/
                                      Home
                                       [@cdr:id = $contactFID]">
       <xsl:for-each        select = "Person/PersonLocations/
                                      PrivatePractice/
                                      PrivatePracticeLocation
                                       [@cdr:id = $contactFID] |
                                      Person/PersonLocations/
                                      Home
                                       [@cdr:id = $contactFID]">
        <xsl:call-template    name = "getHomePrivatePractice"/>
       </xsl:for-each>
      </xsl:when>
      <xsl:otherwise>
       <OrganizationName>
        <!--
        Add the OrderParentNameFirst attribute to the OrganizationName
        element.  This will be picked up with a following filter that
        will revert the sort of the OrganizationName element based on 
        its existence
        ============================================================== -->
        <xsl:if               test = "Person/PersonLocations/
                                      OtherPracticeLocation
                                       [@cdr:id = $contactFID]/
                                      OrganizationLocation/
                                      Organization/
                                      OrganizationLocations/
                                      OrganizationLocation/
                                      @OrderParentNameFirst">
         <xsl:attribute       name = "OrderParentNameFirst">
          <xsl:value-of     select = "Person/PersonLocations/
                                      OtherPracticeLocation
                                       [@cdr:id = $contactFID]/
                                      OrganizationLocation/
                                      Organization/
                                      OrganizationLocations/
                                      OrganizationLocation/
                                      @OrderParentNameFirst"/>
         </xsl:attribute>
        </xsl:if>

        <xsl:value-of       select = "Person/PersonLocations/
                                      OtherPracticeLocation
                                       [@cdr:id = $contactFID]/
                                      OrganizationLocation/
                                      Organization/
                                      OrganizationNameInformation/
                                      OfficialName/Name"/>
       </OrganizationName>

       <!-- Call a template to collect all parent names for the address
            block display                                               -->
       <xsl:if                test = "Person/PersonLocations/
                                      OtherPracticeLocation
                                       [@cdr:id = $contactFID]/
                                      OrganizationLocation/
                                      Organization/
                                      OrganizationLocations/
                                      OrganizationLocation/@IncludeParentName">
        <xsl:for-each       select = "Person/PersonLocations/
                                      OtherPracticeLocation
                                       [@cdr:id = $contactFID]/
                                      OrganizationLocation/
                                      Organization/
                                      ParentOrganization">
         <xsl:call-template   name = "getParentName"/>
        </xsl:for-each>
       </xsl:if>
                                      
       <!-- 
       Pick up Specific Info if exists or Organization Info  
       (Note:  The for-each loop exists merely to set the scope for the 
               getPostalAddress, getPersonOrgPhone, ... templates)    
       ================================================================= -->
       <!-- 
       If ProtocolSpecific Phone numbers exists we do NOT want to 
       pick up missing information from the Person/Organization
       record
       This only needs to be considered for the LeadOrgPersonnel
       (i.e. when the template is called as the Person template)
       ========================================================== -->
       <xsl:choose>
        <xsl:when             test = "$myScope = 'Person'">
         <xsl:choose>
          <xsl:when           test = "../ProtocolSpecificContact/
                                         PostalAddress">
           <PostalAddress>
            <xsl:apply-templates select = "../ProtocolSpecificContact/
                                           PostalAddress"/>
           </PostalAddress>
          </xsl:when>
          <xsl:otherwise>
           <xsl:for-each         select = "Person/PersonLocations/
                                          OtherPracticeLocation
                                           [@cdr:id = $contactFID]">
            <xsl:call-template     name = "getPostalAddress">
             <xsl:with-param       name = "orgAddressFID"
                                 select = "$orgAddressFID"/>
            </xsl:call-template>
           </xsl:for-each>
          </xsl:otherwise>
         </xsl:choose>

         <!-- If either the Phone or TollFreePhone exists we do not
              display another phone number from the Person record. -->
         <xsl:choose>         
          <xsl:when                test = "../ProtocolSpecificContact/
                                              TollFreePhone
                                           or
                                           ../ProtocolSpecificContact/
                                              Phone">
           <xsl:if                 test = "../ProtocolSpecificContact/
                                              Phone">
            <Phone>
             <xsl:value-of       select = "../ProtocolSpecificContact/
                                              Phone"/>
            </Phone>
           </xsl:if>
           <xsl:if                 test = "../ProtocolSpecificContact/
                                              TollFreePhone">
            <TollFreePhone>
             <xsl:value-of       select = "../ProtocolSpecificContact/
                                              TollFreePhone"/>
            </TollFreePhone>
           </xsl:if>
          </xsl:when>
         <!-- The ProtocolSpecific phones do not exist, i.e pick up elsewhere-->
          <xsl:otherwise>
           <xsl:for-each         select = "Person/PersonLocations/
                                           OtherPracticeLocation
                                            [@cdr:id = $contactFID]">
            <xsl:call-template     name = "getPersonOrgPhone">
             <xsl:with-param       name = "orgAddressFID"
                                 select = "$orgAddressFID"/>
            </xsl:call-template>
            <xsl:call-template     name = "getPersonOrgTollFreePhone">
             <xsl:with-param       name = "orgAddressFID"
                                 select = "$orgAddressFID"/>
            </xsl:call-template>
           </xsl:for-each>
          </xsl:otherwise>
         </xsl:choose>

         <xsl:choose>
          <xsl:when                test = "../ProtocolSpecificContact/
                                              Email">
           <Email>
            <xsl:apply-templates select = "../ProtocolSpecificContact/
                                              Email"/>
           </Email>
          </xsl:when>
          <xsl:otherwise>
           <xsl:for-each         select = "Person/PersonLocations/
                                           OtherPracticeLocation
                                            [@cdr:id = $contactFID]">
            <xsl:call-template     name = "getPersonOrgEmail">
             <xsl:with-param       name = "orgAddressFID"
                                 select = "$orgAddressFID"/>
            </xsl:call-template>
           </xsl:for-each>
          </xsl:otherwise>
         </xsl:choose>

         <xsl:choose>
          <xsl:when                test = "../ProtocolSpecificContact/
                                              WebSite">
           <WebSite>
            <xsl:apply-templates select = "../ProtocolSpecificContact/
                                              WebSite"/>
           </WebSite>
          </xsl:when>
          <xsl:otherwise>
           <xsl:for-each         select = "Person/PersonLocations/
                                           OtherPracticeLocation
                                            [@cdr:id = $contactFID]">
            <xsl:call-template     name = "getPersonOrgWebSite">
             <xsl:with-param       name = "orgAddressFID"
                                 select = "$orgAddressFID"/>
            </xsl:call-template>
           </xsl:for-each>
          </xsl:otherwise>
         </xsl:choose>
        </xsl:when>

        <!-- This applies for myScope = SpecificPerson -->
        <xsl:otherwise>
         <xsl:for-each           select = "Person/PersonLocations/
                                           OtherPracticeLocation
                                            [@cdr:id = $contactFID]">
          <xsl:call-template       name = "getPostalAddress">
           <xsl:with-param         name = "orgAddressFID"
                                 select = "$orgAddressFID"/>
          </xsl:call-template>

          <xsl:call-template       name = "getPersonOrgPhone">
           <xsl:with-param         name = "orgAddressFID"
                                 select = "$orgAddressFID"/>
          </xsl:call-template>
          <xsl:call-template       name = "getPersonOrgTollFreePhone">
           <xsl:with-param         name = "orgAddressFID"
                                 select = "$orgAddressFID"/>
          </xsl:call-template>
          <xsl:call-template       name = "getPersonOrgEmail">
           <xsl:with-param         name = "orgAddressFID"
                                 select = "$orgAddressFID"/>
          </xsl:call-template>
          <xsl:call-template       name = "getPersonOrgWebSite">
           <xsl:with-param         name = "orgAddressFID"
                                 select = "$orgAddressFID"/>
          </xsl:call-template>
         </xsl:for-each>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </ContactDetail>
   </Contact>
  </ProtPerson>
 </xsl:template>


 <!--
 ====================================================================
 Put together the information for one participating organization.
 The ProtocolSites are only populated if the CurrentProtocolStatus
 is Active.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolSites">

 <!-- Do not display this ProtocolSite if its parent is not 
      active as well                                                  -->
  <xsl:if                         test = "(../LeadOrgProtocolStatuses/
                                           CurrentOrgStatus
                                           [StatusName = 'Active'])">
   <xsl:for-each                select = "OrgSiteID/Organization">
    <!-- 
    Only display OrgSite with OrgSiteStatus Active irrespective of the
    status of the organization itself 
    ================================================================== -->
    <xsl:if                       test = "../OrgSiteStatus = 'Active'">
     <ProtocolSite>
      <xsl:attribute              name = "ref">
       <xsl:value-of            select = "@cdr:ref"/>
      </xsl:attribute>
      <xsl:attribute              name = "sitetype">
       <xsl:value-of            select = "'Organization'"/>
      </xsl:attribute>

      <SiteName>
       <xsl:apply-templates     select = "OrganizationNameInformation/
                                          OfficialName/Name"/>
      </SiteName>

      <!-- Begin: Create ProtPerson Element in Vendor Output -->
      <xsl:apply-templates      select = "../OrgSiteContact/
                                          SpecificPerson |
                                          ../OrgSiteContact/
                                          GenericPerson"/>
      <!-- End:   Create ProtPerson Element in Vendor Output -->

     </ProtocolSite>
    </xsl:if>
   </xsl:for-each>

  <!-- Added code to pick up private practice sites.  RMK 2002-09-06.      -->
  <xsl:for-each                 select = "PrivatePracticeSiteID">
   <!-- Only display active PrivatePracticeSite                            -->
   <xsl:if                        test = "PrivatePracticeSiteStatus = 'Active'">
    <ProtocolSite>
     <xsl:attribute               name = "ref">
      <xsl:value-of             select = "substring-before(
                                            concat(PrivatePracticePerson/Person/
                                                   @cdr:ref, '#'),'#')"/>
     </xsl:attribute>
     <xsl:attribute               name = "sitetype">
      <xsl:value-of             select = "'Person'"/>
     </xsl:attribute>

     <xsl:apply-templates       select = "PrivatePracticePerson"/>
    </ProtocolSite>
   </xsl:if>
  </xsl:for-each>
  </xsl:if>
 </xsl:template>


 <!-- *
 ====================================================================
 Assemble the output for a specific person identified as the 
 contact for a participating organization.
 ==================================================================== -->
 <xsl:template               match = "GenericPerson">
  <ProtPerson>
   <PersonRole>
    <xsl:value-of           select = "PersonTitle"/>
   </PersonRole>
   <Contact>
     <xsl:apply-templates   select = "GenericPersonContact/ContactName"
                              mode = "copy"/>

    <ContactDetail>

     <!-- Added at Lakshmi's request RMK 2002-09-08. -->
     <xsl:for-each          select = "OrganizationAddressNames/
                                      OrganizationName">
      <OrganizationName>
       <xsl:value-of        select = "."/>
      </OrganizationName>
     </xsl:for-each>

     <xsl:apply-templates   select = "GenericPersonContact/ContactDetail/
                                      PostalAddress"/>

     <xsl:apply-templates   select = "GenericPersonContact/ContactDetail/
                                      Phone"/>
     <xsl:apply-templates   select = "GenericPersonContact/ContactDetail/
                                      TollFreePhone"/>
     <xsl:apply-templates   select = "GenericPersonContact/ContactDetail/
                                      Email"/>
     <xsl:apply-templates   select = "GenericPersonContact/ContactDetail/
                                      WebSite"/>
    </ContactDetail>
   </Contact>
  </ProtPerson>
 </xsl:template>




 <!--
 ====================================================================
 Named Templates
 ==================================================================== -->
 <!-- *
 ====================================================================
 Add the preferred Name of Terms to the output tree 
 ==================================================================== -->
 <xsl:template               name = "getTerm">
  <xsl:param                 name = "elementName"/>
  <xsl:element               name = "{$elementName}">
    <xsl:attribute           name = "ref">
     <xsl:value-of         select = "Term[1]/@cdr:ref"/>
    </xsl:attribute>
    <xsl:apply-templates   select = "Term/PreferredName[1]"/>
  </xsl:element>
 </xsl:template>



 <!--
 ====================================================================
 Templates for elements that are being used for denormalization
 ==================================================================== -->
 <!-- *
 ====================================================================
 Add the parents of the Terms to the output tree
 ==================================================================== -->
 <xsl:template              match = "Term">
  <xsl:param                 name = "parentName"/>
  <xsl:element               name = "{$parentName}">
    <xsl:attribute           name = "ref">
     <xsl:value-of         select = "@cdr:ref"/>
    </xsl:attribute>
    <xsl:apply-templates   select = "PreferredName"/>
  </xsl:element>

  <xsl:apply-templates     select = "Term">
   <xsl:with-param           name = "parentName"
                           select = "$parentName"/>
  </xsl:apply-templates>
 </xsl:template>





 <!--
 ====================================================================
 Templates for elements that are being dropped or globally 
 renaming attribute names.
 ==================================================================== -->
 <!--
 ====================================================================
 Drop Comment with and without mode = "copy".
 It doesn't appear to be used without mode="copy" but it's safe to do.
 ==================================================================== -->
 <xsl:template               match = "Comment"/>
 <xsl:template               match = "Comment"
                              mode = "copy"/>


 <!--
 ====================================================================
 Drop PdqKey with and withoiut mode = "copy".
 It doesn't appear to be used without mode="copy" but it's safe to do.
 ==================================================================== -->
 <xsl:template               match = "@PdqKey"/>
 <xsl:template               match = "@PdqKey"
                              mode = "copy"/>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:id with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:id"
                              mode = "copy">
  <xsl:attribute              name = "id">
   <xsl:value-of            select = "."/>
  </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:ref with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:ref"
                              mode = "copy">
  <xsl:attribute              name = "ref">
   <xsl:value-of            select = "."/>
  </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:href with mode = "copy".
 ==================================================================== -->
 <xsl:template               match = "@cdr:href"
                              mode = "copy">
  <xsl:attribute              name = "href">
   <xsl:value-of            select = "."/>
  </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Rename the Protocol Title Type attribute to Audience.
 ==================================================================== -->
 <xsl:template               match = "ProtocolTitle/@Type"
                              mode = "copy">
  <xsl:attribute              name = "Audience">
   <xsl:value-of            select = "."/>
  </xsl:attribute>
 </xsl:template>


<!-- ==================================================================== 
     Temporarily drop @Compact until June, 2003.
     ==================================================================== -->
  <xsl:template              match = "OrderedList/@Compact"
                              mode = "copy"/>
    
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>