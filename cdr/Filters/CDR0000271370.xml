<CdrDoc Type='Filter' Id='CDR0000271370'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Module: Vendor Filter Templates</DocTitle>
<DocComment>CVS-V1.15</DocComment><ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml      version = "1.0"?>
<!--
 ===========================================================================
 $Id: CDR0000271370.xml,v 1.31 2007-08-31 18:40:24 venglisc Exp $

 Filter including misc Vendor filter templates.

 $Log: not supported by cvs2svn $
 ===========================================================================
-->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr"
                               version = "1.0">

 <xsl:output                    method = "xml" 
                  omit-xml-declaration = "no"
                              encoding = "UTF-8"/>

 <xsl:include href = "cdr:name:Module: Global Filter Templates"/>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:xref with mode = "copy".
 ==================================================================== -->
 <xsl:template                   match = "@cdr:xref"
                                  mode = "copy">
   <xsl:attribute                 name = "xref">
    <xsl:value-of               select = "."/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Identify if a ProtocolRef element points to a non-publishable
 document.  If it does remove the element tags and display a warning
 message.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolRef"
                                  mode = "copy">
  <xsl:variable                   name = "pubVersion"
                                select = "document(concat
                                                    ('cdrutil:/get-pv-num/',
                                                      @cdr:href))"/>
  <xsl:choose>
   <xsl:when                      test = "$pubVersion = 0">
    <xsl:message             terminate = "no">
     <xsl:text>Publishable Version of Protocol document </xsl:text>
     <xsl:value-of              select = "@cdr:href"/>
     <xsl:text> does not exist.&lt;BR/&gt;</xsl:text>
    </xsl:message> 
    <xsl:value-of               select = "concat(' ', .)"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                  name = "ProtocolRef">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "@cdr:href"/>
     </xsl:attribute>
     <xsl:apply-templates         mode = "copy"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>

 </xsl:template>


 <!--
 =========================================================================
 Template for MediaLink element (used by Summary and GlossaryTerm)
 ========================================================================= -->
 <xsl:template                   match = "MediaLink">

  <!--
  This block is for a GlossaryTerm document with a MediaLink element 
  shared between the English and Spanish version like the "chest x-ray"
  ======================================================================= -->
  <xsl:choose>
   <xsl:when                      test = "$whoAmI = 'GlossaryTerm'
                                          and
                                          name(..) = 'GlossaryTerm'">
    <xsl:variable                 name = "mediaCdrRef"
                                select = "MediaID/@cdr:ref"/>

    <xsl:variable                 name = "mediaLinkAlt"
                                select = "@AlternativeText"/>
    <xsl:variable                 name = "mediaLinkInline"
                                select = "@Inline"/>
    <xsl:variable                 name = "mediaLinkMinWidth"
                                select = "@MinWidth"/>
    <xsl:variable                 name = "mediaLinkUseCaption"
                                select = "@UseCaption"/>
    <xsl:variable                 name = "mediaLinkId"
                                select = "@cdr:id"/>
    <xsl:variable                 name = "mediaLinkSize"
                                select = "@size"/>
    <xsl:variable                 name = "mediaLinkThumb"
                                select = "@thumb"/>

    <xsl:for-each               select = "MediaID/
                                          Media/
                                          MediaContent/
                                          Captions/
                                          MediaCaption">
     <xsl:call-template           name = "createMediaLink">
      <xsl:with-param             name = "mediaRef"
                                select = "$mediaCdrRef"/>

      <xsl:with-param             name = "mediaAlt"
                                select = "$mediaLinkAlt"/>
      <xsl:with-param             name = "mediaInline"
                                select = "$mediaLinkInline"/>
      <xsl:with-param             name = "mediaMinWidth"
                                select = "$mediaLinkMinWidth"/>
      <xsl:with-param             name = "mediaUseCaption"
                                select = "$mediaLinkUseCaption"/>
      <xsl:with-param             name = "mediaId"
                                select = "$mediaLinkId"/>
      <xsl:with-param             name = "mediaSize"
                                select = "$mediaLinkSize"/>
      <xsl:with-param             name = "mediaThumb"
                                select = "$mediaLinkThumb"/>
     </xsl:call-template>
    </xsl:for-each>
   </xsl:when>
   <xsl:otherwise>
    <!-- 
    Create MediaLink element for Summary and GlossaryTerm (the
    MediaLink element is NOT shared between the English and Spanish
    version)
    ===============================================================
    Define language variable to select the caption and alt text
    Note:  This only applies for summary document and GlossaryTerm
           document with a MediaLink child element of the 
           TermDefinition or SpanishTermDefinition
    =============================================================== --> 
    <xsl:variable                 name = "docLanguage">
     <xsl:choose>
      <xsl:when                   test = "/Summary/
                                          SummaryMetaData/
                                          SummaryLanguage = 'Spanish'
                                          or
                                          name(..) = 'SpanishTermDefinition'">
       <xsl:text>es</xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>en</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:variable>

    <!-- 
    Define audience variable to select the alt text
    =============================================== -->     
    <xsl:variable                 name = "docAudience">
     <xsl:choose>
      <xsl:when                   test = "/Summary/
                                          SummaryMetaData/
                                          SummaryAudience 
                                            = 'Health professionals'
                                          or
                                          ../Audience 
                                            = 'Health professional'">
       <xsl:text>Health_professionals</xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>Patients</xsl:text>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:variable>

    <!--
    Create MediaLink Element and attributes

    For the GlossaryTerm we will either have one MediaLink that is
    shared between the English and Spanish version or two distinct
    MediaLink elements, one for the English and one for the Spanish
    version.  
    It is an error to have a MediaLink element for the 
    English version and a MediaLink element for the Spanish version
    when both are pointing to the same Media document.  The filter
    should fail to have the problem corrected. 
                                     per LG/MB, 2006-11-15, VE.
    =============================================================== -->
    <xsl:if                       test = "not(MediaID/
                                              Media/
                                              MediaContent/
                                              Captions/
                                              MediaCaption[@language = 
                                                           $docLanguage])
                                          and
                                          UseCaption = 'Yes'">

     <xsl:message           terminate = "yes">
      <xsl:value-of            select = "name()"/>
      <xsl:text> (</xsl:text>
      <xsl:value-of            select = "MediaID/@cdr:ref"/>
      <xsl:text>) </xsl:text>
      <xsl:text>Caption for specified language missing: </xsl:text>
      <xsl:value-of            select = "$docLanguage"/>
     </xsl:message>
    </xsl:if>

    <xsl:element                    name = "MediaLink">
     <xsl:attribute                 name = "ref">
      <xsl:value-of               select = "MediaID/@cdr:ref"/>
     </xsl:attribute>

     <!--
     alt text is taken from summary AlternativeText attribute or
     from the Media Content description matching the audience and
     language of the document type
     ============================================================ -->
     <xsl:choose>
      <xsl:when                   test = "@AlternativeText">
       <xsl:attribute             name = "alt">
        <xsl:value-of           select = "@AlternativeText"/>
       </xsl:attribute>
      </xsl:when>
      <xsl:otherwise>
       <xsl:attribute             name = "alt">
        <xsl:value-of           select = "MediaID/Media/
                                          MediaContent/
                                          ContentDescriptions/
                                          ContentDescription
                                            [@language=$docLanguage
                                             and
                                             @audience=$docAudience]"/>
       </xsl:attribute>
      </xsl:otherwise>
     </xsl:choose>

     <!--
     The language attribute is being added only if the Media document
     specifies a different language then that of the document type
     i.e. if an image with English labels is being displayed in a 
          Spanish summary
     By default, the MediaLanguage element will not be specified.

     The above decision has been revised per request from Cancer.gov.
     The language attribute will always be displayed.
     =================================================================== -->
     <xsl:attribute               name = "language">
      <xsl:value-of             select = "$docLanguage"/>
     </xsl:attribute>

     <!--
     If the thumb attribute is set to 'No' display it.
     Additionally, per request from Cancer.gov the thumb attribute will 
     always be set to a default of thumb='Yes' if it has not been specified.
     Additionally, we were asked to set thumb='No' if the specified size of 
     the image is equal or greater then the actual size of the image so 
     that making the image clickable wouldn't result in a larger image size.
     ======================================================================= -->
     <xsl:choose>
      <xsl:when                   test = "@thumb = 'No'">
       <xsl:attribute             name = "thumb">
        <xsl:value-of           select = "@thumb"/>
       </xsl:attribute>
      </xsl:when>
      <xsl:otherwise>
       <xsl:variable              name = "displaySize">
        <xsl:choose>
         <xsl:when                test = "@size = 'full'">
          <xsl:text>571</xsl:text>
         </xsl:when>
         <xsl:when                test = "@size = 'half'">
          <xsl:text>274</xsl:text>
         </xsl:when>
         <xsl:when                test = "@size = 'third'">
          <xsl:text>179</xsl:text>
         </xsl:when>
         <xsl:when                test = "@size = 'quarter'">
          <xsl:text>131</xsl:text>
         </xsl:when>
         <xsl:when                test = "@size = 'fifth'">
          <xsl:text>103</xsl:text>
         </xsl:when>
         <xsl:when                test = "@size = 'sixth'">
          <xsl:text>84</xsl:text>
         </xsl:when>
         <xsl:when                test = "@size = 'as-is'">
          <xsl:text>99999</xsl:text>
         </xsl:when>
         <xsl:otherwise>
         <!--
         If no size attribute has been specified the default size is
            - summaries is half=274
         ============================================================ -->
          <xsl:if                 test = "/Summary">
           <xsl:text>274</xsl:text>
          </xsl:if>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:variable>

       <xsl:choose>
        <xsl:when                 test = "MediaID/Media/
                                          PhysicalMedia/
                                          ImageData/
                                          ImageDimensions/
                                          WidthPixels &lt; $displaySize">
         <xsl:attribute           name = "thumb">
          <xsl:value-of         select = "'No'"/>
         </xsl:attribute>
        </xsl:when>
        <xsl:otherwise>
         <xsl:attribute           name = "thumb">
          <xsl:value-of         select = "'Yes'"/>
         </xsl:attribute>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>

     <!-- Optional Attributes -->
     <xsl:if                      test = "@cdr:id">
      <xsl:attribute              name = "id">
       <xsl:value-of            select = "@cdr:id"/>
      </xsl:attribute>
     </xsl:if>

     <xsl:if                      test = "@Inline">
      <xsl:attribute              name = "inline">
       <xsl:value-of            select = "@Inline"/>
      </xsl:attribute>
     </xsl:if>

     <!-- 
     The MinWidth attribute in the Summary document trumps the 
     MinWidthPixels element in the Media document
     ========================================================= -->
     <xsl:choose>
      <xsl:when                   test = "@MinWidth">
       <xsl:attribute             name = "MinWidth">
        <xsl:value-of           select = "@MinWidth"/>
       </xsl:attribute>
      </xsl:when>
      <xsl:when                   test = "PhysicalMedia/
                                           ImageData/
                                           ImageDimensions/MinWidthPixels">
       <xsl:attribute             name = "MinWidth">
        <xsl:value-of           select = "PhysicalMedia/
                                           ImageData/
                                           ImageDimensions/MinWidthPixels"/>
       </xsl:attribute>
      </xsl:when>
     </xsl:choose>

     <xsl:if                      test = "@size">
      <xsl:attribute              name = "size">
       <xsl:value-of            select = "@size"/>
      </xsl:attribute>
     </xsl:if>

     <!-- 
     The UseCaption attibute turns existing captions on or off
     No UseCaption attribute defaults to UseCaption = 'Yes'
     ========================================================= -->
     <xsl:if                      test = "not(@UseCaption)
                                          or 
                                          @UseCaption = 'Yes'">
      <xsl:choose>
       <xsl:when                  test = "Caption">
        <xsl:apply-templates    select = "Caption">
         <xsl:with-param          name = "capLanguage"
                                select = "$docLanguage"/>
        </xsl:apply-templates>
       </xsl:when>
       <xsl:otherwise>
<!--
      <xsl:apply-templates      select = "MediaID/Media/
                                          MediaContent/
                                          Captions/
                                          MediaCaption
                                            [@language = $docLanguage
                                             and
                                             @audience = $docAudience]"/>
-->
        <xsl:apply-templates    select = "MediaID/Media/
                                          MediaContent/
                                          Captions/
                                          MediaCaption
                                            [@audience = $docAudience
                                             and
                                             @language = $docLanguage]"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:if>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!--
 =========================================================================
 Template for Caption and MediaCaption elements
 ========================================================================= -->
 <xsl:template                   match = "Caption |
                                          MediaCaption">
  <xsl:param                      name = "capLanguage"/>

  <xsl:element                    name = "Caption">
   <xsl:choose>
    <xsl:when                     test = "@language">
     <xsl:attribute               name = "language">
      <xsl:value-of             select = "@language"/>
     </xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:attribute               name = "language">
      <xsl:value-of             select = "$capLanguage"/>
     </xsl:attribute>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates/>

  </xsl:element>
 </xsl:template>


 <!--
 ======================================================================
 Named template to create the media captions for GlossaryTerm documents
 ====================================================================== -->
 <xsl:template                    name = "createMediaLink">
  <xsl:param                      name = "mediaRef"/>
  <xsl:param                      name = "mediaAlt"/>
  <xsl:param                      name = "mediaInline"/>
  <xsl:param                      name = "mediaMinWidth"/>
  <xsl:param                      name = "mediaUseCaption"/>
  <xsl:param                      name = "mediaId"/>
  <xsl:param                      name = "mediaSize"/>
  <xsl:param                      name = "mediaThumb"/>

  <xsl:variable                   name = "capLanguage"
                                select = "@language"/>
  <xsl:variable                   name = "capAudience"
                                select = "@audience"/>

  <!--
  Create MediaLink Element and attributes
  ======================================== -->
  <xsl:if                         test = "$capLanguage = 'en' 
                                          or
                                          $capLanguage = 'es'
                                          and 
                                          /GlossaryTerm/
                                           SpanishTermDefinition">

  <xsl:element                    name = "MediaLink">
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "$mediaRef"/>
   </xsl:attribute>

   <!--
   alt text is taken from summary AlternativeText attribute or
   from the Media Content description matching the audience and
   language of the document type
   ============================================================ -->
   <xsl:choose>
    <xsl:when                     test = "$mediaAlt">
     <xsl:attribute               name = "alt">
      <xsl:value-of             select = "$mediaAlt"/>
     </xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:if                      test = "not(../../
                                          ContentDescriptions/
                                          ContentDescription
                                            [@language=$capLanguage
                                             and
                                             @audience=$capAudience])">
      <xsl:message         terminate = "yes">
       <xsl:text>&lt;LI class="error"&gt;</xsl:text>
       <xsl:value-of          select = "name()"/>
       <xsl:text> (</xsl:text>
       <xsl:value-of          select = "concat('CDR', number(
                                        substring-after($docID, 'CDR')))"/>
       <xsl:text>)&lt;BR/&gt;</xsl:text>
       <xsl:text>Error </xsl:text>
       <xsl:text>does not exist.&lt;BR/&gt;&lt;/LI&gt;</xsl:text>
      </xsl:message> 
     </xsl:if>
     <xsl:attribute               name = "alt">
      <xsl:value-of             select = "../../
                                          ContentDescriptions/
                                          ContentDescription
                                            [@language=$capLanguage
                                             and
                                             @audience=$capAudience]"/>
     </xsl:attribute>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:attribute                 name = "language">
    <xsl:value-of               select = "$capLanguage"/>
   </xsl:attribute>

   <!--
   Per request from Cancer.gov the thumb attribute will always be set to
   a default of thumb=Yes if it has not been specified.
   Additionally, we were asked to set thumb=No if the specified size of 
   the image is equal or greater then the actual size of the image so 
   that making the image clickable wouldn't result in a larger image size.
   ======================================================================= -->
   <xsl:choose>
    <xsl:when                     test = "$mediaThumb = 'No'">
     <xsl:attribute               name = "thumb">
      <xsl:value-of             select = "$mediaThumb"/>
     </xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:variable                name = "displaySize">
      <xsl:choose>
       <xsl:when                  test = "$mediaSize = 'full'">
        <xsl:text>571</xsl:text>
       </xsl:when>
       <xsl:when                  test = "$mediaSize = 'half'">
        <xsl:text>274</xsl:text>
       </xsl:when>
       <xsl:when                  test = "$mediaSize = 'third'">
        <xsl:text>179</xsl:text>
       </xsl:when>
       <xsl:when                  test = "$mediaSize = 'quarter'">
        <xsl:text>131</xsl:text>
       </xsl:when>
       <xsl:when                  test = "$mediaSize = 'fifth'">
        <xsl:text>103</xsl:text>
       </xsl:when>
       <xsl:when                  test = "$mediaSize = 'sixth'">
        <xsl:text>84</xsl:text>
       </xsl:when>
       <xsl:when                  test = "$mediaSize = 'as-is'">
        <xsl:text>99999</xsl:text>
       </xsl:when>
       <xsl:otherwise>
       <!--
       If no size attribute has been specified the default size is
          - summaries is half=274
       ============================================================ -->
        <xsl:if                   test = "/Summary">
         <xsl:text>274</xsl:text>
        </xsl:if>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:variable>
     
     <xsl:choose>
      <xsl:when                   test = "../../../
                                          PhysicalMedia/
                                          ImageData/
                                          ImageDimensions/
                                          WidthPixels &lt; $displaySize">
       <xsl:attribute             name = "thumb">
        <xsl:value-of           select = "'No'"/>
       </xsl:attribute>
      </xsl:when>
      <xsl:otherwise>
       <xsl:attribute             name = "thumb">
        <xsl:value-of           select = "'Yes'"/>
       </xsl:attribute>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>

   <!-- Optional Attributes -->
   <xsl:if                        test = "$mediaId">
    <xsl:attribute                name = "id">
     <xsl:value-of              select = "$mediaId"/>
    <xsl:text>.</xsl:text>
    <xsl:number                  level = "any"
                                 count = "MediaCaption"/>
    </xsl:attribute>

   </xsl:if>

   <xsl:if                        test = "$mediaInline">
    <xsl:attribute                name = "inline">
     <xsl:value-of              select = "$mediaInline"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:if                        test = "$mediaSize">
    <xsl:attribute                name = "size">
     <xsl:value-of              select = "$mediaSize"/>
    </xsl:attribute>
   </xsl:if>


   <!-- 
   The UseCaption attibute turns existing captions on or off
   No UseCaption attribute defaults to UseCaption = 'Yes'
   ========================================================= -->
   <xsl:if                        test = "not($mediaUseCaption)
                                          or 
                                          $mediaUseCaption = 'Yes'">
    <xsl:choose>
     <xsl:when                    test = "Caption">
      <xsl:apply-templates      select = "Caption">
       <xsl:with-param            name = "capLanguage"
                                select = "$docLanguage"/>
      </xsl:apply-templates>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates      select = "."/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:if>

  </xsl:element>
  </xsl:if>
 </xsl:template>


 <!-- 
 ==================================================================
 Cleaning up the xref value of the SummaryURL element
 - replace 'http://www.cancer.gov' with 'http://cancer.gov' 
 - remove trailing '/' from URL
 Note:  It is expected that a normalized string is being passed.
 ================================================================== -->  
 <xsl:template                    name = "getSummaryURL">
  <xsl:param                      name = "url"
                                select = "''"/>
  <xsl:choose>
   <xsl:when                      test = "substring($url, 
                                           string-length($url)) = '/'">
    <xsl:choose>
     <xsl:when                    test = "contains($url, 
                                                  'http://www.cancer.gov')">

      <xsl:value-of             select = "concat(
                                          'http://cancer.gov',
                                          substring-after(
                                            substring($url, 1, 
                                              string-length($url) - 1),
                                              '.gov'))"/>

     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "substring($url, 1, 
                                              string-length($url) - 1)"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                    test = "contains($url, 
                                                  'http://www.cancer.gov')">
      <xsl:value-of             select = "concat(
                                           'http://cancer.gov',
                                           substring-after(
                                             $url, '.gov'))"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of             select = "$url"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ======================================================================
 Suppress Comment nodes with or without copy mode.
 ====================================================================== -->
 <xsl:template                   match = "Comment | PdqKey"/>  
  
 <xsl:template                   match = "Comment | PdqKey"
                                  mode = "copy"/>
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>