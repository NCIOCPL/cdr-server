<CdrDoc Type='Filter' Id='CDR0000271370'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Module: Vendor Filter Templates</DocTitle>
<DocComment>CVS-V1.15</DocComment><ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml      version = "1.0"?>
<!--
 ===========================================================================
 $Id: CDR0000271370.xml,v 1.17 2004-12-07 19:42:00 venglisc Exp $

 Filter including misc Vendor filter templates.

 $Log: not supported by cvs2svn $
 ===========================================================================
-->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr"
                               version = "1.0">

 <xsl:output                    method = "xml" 
                  omit-xml-declaration = "no"
                              encoding = "UTF-8"/>

 <xsl:include href = "cdr:name:Module: Global Filter Templates"/>


 <!--
 ====================================================================
 Drop the cdr namespace in cdr:xref with mode = "copy".
 ==================================================================== -->
 <xsl:template                   match = "@cdr:xref"
                                  mode = "copy">
   <xsl:attribute                 name = "xref">
    <xsl:value-of               select = "."/>
   </xsl:attribute>
 </xsl:template>


 <!--
 ====================================================================
 Identify if a ProtocolRef element points to a non-publishable
 document.  If it does remove the element tags and display a warning
 message.
 ==================================================================== -->
 <xsl:template                   match = "ProtocolRef"
                                  mode = "copy">
  <xsl:variable                   name = "pubVersion"
                                select = "document(concat
                                                    ('cdrutil:/get-pv-num/',
                                                      @cdr:href))"/>
  <xsl:choose>
   <xsl:when                      test = "$pubVersion = 0">
    <xsl:message             terminate = "no">
     <xsl:text>Publishable Version of Protocol document </xsl:text>
     <xsl:value-of              select = "@cdr:href"/>
     <xsl:text> does not exist.&lt;BR/&gt;</xsl:text>
    </xsl:message> 
    <xsl:value-of               select = "concat(' ', .)"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element                  name = "ProtocolRef">
     <xsl:attribute               name = "href">
      <xsl:value-of             select = "@cdr:href"/>
     </xsl:attribute>
     <xsl:apply-templates         mode = "copy"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>

 </xsl:template>


 <!--
 =========================================================================
 Template for MediaLink element (used by Summary and GlossaryTerm)
 ========================================================================= -->
 <xsl:template                   match = "MediaLink">
  <!-- 
  Define language variable to select the caption
  =============================================== -->     
  <xsl:variable                   name = "docLanguage">
   <xsl:choose>
    <xsl:when                     test = "/Summary/
                                          SummaryMetaData/
                                          SummaryLanguage = 'Spanish'
                                          or
                                          name(..) = 'SpanishTermDefinition'">
     <xsl:text>es</xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>en</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>

  <!--
  Create MediaLink Element and attributes
  ======================================== -->
  <xsl:element                    name = "MediaLink">
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "MediaID/@cdr:ref"/>
   </xsl:attribute>
   <xsl:attribute                 name = "alt">
    <xsl:value-of               select = "@AlternativeText"/>
   </xsl:attribute>

   <!-- Optional Attributes -->
   <xsl:if                        test = "@cdr:id">
    <xsl:attribute                name = "id">
     <xsl:value-of              select = "@cdr:id"/>
    </xsl:attribute>
   </xsl:if>

   <!--
   The language attribute is being added based on the summary language
   =================================================================== -->
   <xsl:attribute                 name = "language">
    <xsl:value-of               select = "$docLanguage"/>
   </xsl:attribute>

   <xsl:if                        test = "@Inline">
    <xsl:attribute                name = "inline">
     <xsl:value-of              select = "@Inline"/>
    </xsl:attribute>
   </xsl:if>

   <!-- 
   The MinWidth attribute in the Summary document trumps the 
   MinWidthPixels element in the Media document
   ========================================================= -->
   <xsl:choose>
    <xsl:when                     test = "@MinWidth">
     <xsl:attribute               name = "MinWidth">
      <xsl:value-of             select = "@MinWidth"/>
     </xsl:attribute>
    </xsl:when>
    <xsl:when                     test = "PhysicalMedia/
                                           ImageData/
                                           ImageDimensions/MinWidthPixels">
     <xsl:attribute               name = "MinWidth">
      <xsl:value-of             select = "PhysicalMedia/
                                           ImageData/
                                           ImageDimensions/MinWidthPixels"/>
     </xsl:attribute>
    </xsl:when>
   </xsl:choose>

   <xsl:if                        test = "@size">
    <xsl:attribute                name = "size">
     <xsl:value-of              select = "@size"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "@thumb">
    <xsl:attribute                name = "thumb">
     <xsl:value-of              select = "@thumb"/>
    </xsl:attribute>
   </xsl:if>

   <!-- 
   The UseCaption attibute turns existing captions on or off
   No UseCaption attribute defaults to UseCaption = 'Yes'
   ========================================================= -->
   <xsl:if                        test = "not(@UseCaption)
                                          or 
                                          @UseCaption = 'Yes'">
    <xsl:choose>
     <xsl:when                    test = "Caption">
      <xsl:apply-templates      select = "Caption"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates      select = "MediaID/Media/
                                          MediaContent/
                                          Captions/
                                          MediaCaption
                                            [@language=$docLanguage]"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:if>
  </xsl:element>
 </xsl:template>


 <!--
 =========================================================================
 Template for Caption and MediaCaption elements
 ========================================================================= -->
 <xsl:template                   match = "Caption|MediaCaption">
  <xsl:element                    name = "Caption">
   <xsl:if                        test = "@language">
    <xsl:attribute                name = "language">
     <xsl:value-of              select = "@language"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>


 <!-- 
 ======================================================================
 Suppress Comment nodes with or without copy mode.
 ====================================================================== -->
 <xsl:template                   match = "Comment | PdqKey"/>  
  
 <xsl:template                   match = "Comment | PdqKey"
                                  mode = "copy"/>
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>