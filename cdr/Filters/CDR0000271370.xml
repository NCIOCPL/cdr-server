<CdrDoc Type='Filter' Id='CDR0000271370'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Module: Vendor Filter Templates</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
  <xsl:transform             xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr"
                               version = "1.0">
  <xsl:output                   method = "xml"/>   


<!-- ======================================================================
        Generate DateFirstPublished element only if the passed-in value
        for parameter date is non-empty.
     ===================================================================== -->
  <xsl:template                   name = "getDateFirstPub">         
    <xsl:param                    name = "date"/> 
        
    <xsl:if                       test = "$date">
      <DateFirstPublished>
        <xsl:value-of           select = "$date"/>
      </DateFirstPublished>
    </xsl:if>    
  </xsl:template>

<!-- ======================================================================
     Drop white space node between 2 consecutive CitationLink/ProtocolLink
     elements.
     ===================================================================== -->
  <xsl:template                   name = "stripSpaceNode"> 
    <xsl:variable                 name = "prev"
                                select = "preceding-sibling::*[position()=1]"/>
    <xsl:variable                 name = "next"
                                select = "following-sibling::*[position()=1]"/>
           
    <xsl:if                       test = "(name($prev) != 'CitationLink' 
                                           and name($prev) != 'ProtocolLink') 
                                       or (name($next) != 'CitationLink' 
                                           and name($next) != 'ProtocolLink')"> 
      <xsl:value-of    select = "."/>                           
    </xsl:if>
  </xsl:template>


 <!--
 ====================================================================
 Identify if a ProtocolRef element points to a non-publishable
 document.  If it does remove the element tags and display a warning
 message.
 ==================================================================== -->
 <xsl:template               match = "ProtocolRef"
                              mode = "copy">
  <xsl:variable               name = "pubVersion"
                            select = "document(concat('cdrutil:/get-pv-num/',
                                                       @cdr:href))"/>
  <xsl:choose>
   <xsl:when                  test = "$pubVersion = 0">
    <xsl:message         terminate = "no">
     <xsl:text>Publishable Version of Protocol document </xsl:text>
     <xsl:value-of         select = "@cdr:href"/>
     <xsl:text> does not exist.&lt;BR/&gt;</xsl:text>
    </xsl:message> 
    <xsl:value-of           select = "."/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:element              name = "ProtocolRef">
     <xsl:attribute           name = "href">
      <xsl:value-of         select = "@cdr:href"/>
     </xsl:attribute>
     <xsl:apply-templates     mode = "copy"/>
    </xsl:element>
   </xsl:otherwise>
  </xsl:choose>

 </xsl:template>

<!-- ======================================================================
     Template rule used to do XML to XML transformations which
     copies any attribute node, or node that is child of of something 
     ===================================================================== -->
  <xsl:template                  match = "@*"
                                  mode = "copy">
    <xsl:copy/>
  </xsl:template>

  <xsl:template                  match = "*"
                                  mode = "copy">
    <xsl:element                  name = "{name()}">
      <xsl:apply-templates      select = "@*"
                                  mode = "copy"/>
      <xsl:apply-templates        mode = "copy"/> 
    </xsl:element>
  </xsl:template>

<!-- ======================================================================
     Suppress Comment nodes with or without copy mode.
     ===================================================================== -->
  <xsl:template                  match = "Comment | PdqKey"/>  
  
  <xsl:template                  match = "Comment | PdqKey"
                                  mode = "copy"/>

  </xsl:transform>]]>
</CdrDocXml>
</CdrDoc>
