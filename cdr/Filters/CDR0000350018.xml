<CdrDoc Type='Filter' Id='CDR0000350018'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Module: Denormalize and Upcode Protocol Terminology</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>

<!--
 Call the server based cached denormalizeTerm function to 
 denormalize and, if required, upcode terminology in an 
 InScopeProtocol.
 
 The server based cdrutil:denormalizeTerm function retrieves
 the preferred name, "upcoded" terms (names of broader terms in
 the terminology tree), and associated id and PdqKey attributes
 for each controlled vocabulary term in the document, returning 
 them in an XML string suitable for inclusion in the vendor 
 output version of the protocol document.

 Denormalization is done for all terms.  Upcoding is only done
 for some of the terms.  A parameter to the C++ function tells
 it to upcode if necessary.

                                    Author: Alan Meyer

    $Id: CDR0000350018.xml,v 1.2 2004-06-30 19:35:29 ameyer Exp $

    $Log: not supported by cvs2svn $
    Revision 1.1  2003/12/16 20:59:17  bkline
    Custom scripting for terminology upcoding support.
  -->

<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
                               version = "1.0">

 <xsl:output                    method = "xml" 
                  omit-xml-declaration = "no"
                              encoding = "UTF-8"/> 

 
 <!--                                          
 ==============================================================
 Template for all elements that need denormalization and upcoding
 ============================================================== -->
 <xsl:template                   match = "Intervention/InterventionType |
                                          Intervention/InterventionNameLink |
                                          ProtocolDetail/Condition |
                                          Eligibility/Diagnosis">
  <!-- Create element for the term -->
  <xsl:element                    name = "{name()}">

    <!-- Get the term's id -->
    <xsl:variable                 name = "termId" 
                                select = "@cdr:ref"/>

    <!-- Create a URI for a C++ callback -->
    <xsl:variable                 name = "uriFunc"
                                select = "concat('cdrutil:/denormalizeTerm/',
                                                 $termId)"/>

      <!-- Invoke C++ denormalization and upcode callback -->
      <xsl:copy-of              select = "document($uriFunc)"/>

  </xsl:element>
 </xsl:template>

 <!--                                          
 ==============================================================
 Template for all elements that need denormalization only
 ============================================================== -->
 <xsl:template                   match = "ExclusionCriteria | Gene">

  <!-- Create element for the term -->
  <xsl:element                    name = "{name()}">

    <!-- Get the term's id -->
    <xsl:variable                 name = "termId" 
                                select = "@cdr:ref"/>

    <!-- Create a URI for a C++ callback, without upcode=Yes parameter -->
    <xsl:variable                 name = "uriFunc"
                                select = "concat('cdrutil:/denormalizeTerm/',
                                            concat($termId, '/No'))"/>

      <!-- Invoke C++ denormalization and upcode callback -->
      <xsl:copy-of              select = "document($uriFunc)"/>

  </xsl:element>
 </xsl:template>

 <!--
 =========================================================================
 Generic pass-through copy action - called on everything else
 ========================================================================= -->
 <xsl:template                   match = "node() | @*">
  <xsl:copy>
   <xsl:apply-templates         select = "@* | node()" />
  </xsl:copy>
 </xsl:template>
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>