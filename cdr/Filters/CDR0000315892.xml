<CdrDoc Type='Filter' Id='CDR0000315892'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Clean up Insertion and Deletion</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
  <xsl:transform             version = "1.0" 
                           xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                           xmlns:cdr = "cips.nci.nih.gov/cdr"
             exclude-result-prefixes = "cdr">

    <xsl:output               method = "xml" 
                            encoding = "utf-8"/>

<!-- =================================================================
       Drive the copy processing logic.
     ================================================================== -->  
    <xsl:template              match = "@* | node()">
     <xsl:copy>
      <xsl:apply-templates    select = "@* | node()"/>
     </xsl:copy> 
    </xsl:template>

<!-- =================================================================
       For QC reports, we keep Deletion/Insertion tags of any given 
       RevisonLevel only around text node.
     ================================================================== --> 
    <xsl:template              match = "Insertion | Deletion">

     <!-- Does this node have any element descendant other than 
          Insertion/Deletion? In other words, are we hitting a 
          wrapper of any text node? -->
     <xsl:variable              name = "hasOtherDescendants"
                              select = "descendant::*[
                                            name() != 'Insertion' and
                                            name() != 'Deletion' 
                                                     ]"/>
     <xsl:choose>               
      <xsl:when                 test = "$hasOtherDescendants"> 
       <xsl:apply-templates/>
      </xsl:when>
      <xsl:otherwise>
       <xsl:element               name = "{name()}">
        <xsl:apply-templates    select = "@*"/>
        <xsl:apply-templates/>
       </xsl:element>      
      </xsl:otherwise>
     </xsl:choose>

    </xsl:template>

  </xsl:transform>]]>
</CdrDocXml>
</CdrDoc>