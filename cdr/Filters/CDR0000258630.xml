<CdrDoc Type='Filter' Id='CDR0000258630'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Module: Citation Formatting</DocTitle>
<DocComment>CVS-V1.15: Adding New Schema Elements (Bug 1648)</DocComment><ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
 
<xsl:transform           xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                         xmlns:cdr = "cips.nci.nih.gov/cdr"
           exclude-result-prefixes = "cdr"
                           version = "1.0">

 <xsl:output                method = "xml" 
              omit-xml-declaration = "no"
                          encoding = "UTF-8"/>

 <!-- 
 ======================================================================
 Filter to create properly formatted Citation elements for publication.
 This filter has been based on Filter CDR46 of the Summary 
 Denomalization filter set but has been adjusted for the 
 InScopeProtocol citations.
 ====================================================================== -->
 <xsl:template               match = "PublishedResults/Citation">
 
  <xsl:apply-templates      select = "./PDQCitation | ./PubmedArticle"/>

 </xsl:template>     

 
 <!-- 
 ================================================================
 A)  CancerLit/PDQ Citation Formatting
 ================================================================ -->
 <xsl:template               match = "PDQCitation">
  <xsl:apply-templates      select = "AuthorList"/>
  <xsl:apply-templates      select = "CitationTitle"/>
  <xsl:apply-templates      select = "CitationType">
   <xsl:with-param            name = "citType"
                            select = "CitationType"/>
  </xsl:apply-templates>
  <xsl:apply-templates      select = "PublicationDetails/
                                      PublishedIn">
   <xsl:with-param            name = "citType"
                            select = "CitationType"/>
  </xsl:apply-templates>
  <xsl:apply-templates      select = "PublicationDetails/
                                      OtherPublicationInformation"/>
 </xsl:template>


 <!-- 
 ===================================================================
 B)  PubMed Record Citation Formatting
 =================================================================== -->
 <xsl:template               match = "PubmedArticle">
  <xsl:if                     test = "MedlineCitation/MedlineID">
   <xsl:attribute             name = "MedlineID">
    <xsl:value-of           select = "MedlineCitation/MedlineID"/>
   </xsl:attribute>
  </xsl:if>

  <xsl:if                     test = "MedlineCitation/PMID">
   <xsl:attribute             name = "PMID">
    <xsl:value-of           select = "MedlineCitation/PMID"/>
   </xsl:attribute>
  </xsl:if>

  <xsl:apply-templates      select = "MedlineCitation/Article/AuthorList"/>
  <xsl:apply-templates      select = "MedlineCitation/Article/ArticleTitle">
   <xsl:with-param            name = "period"
                            select = "'No'"/>
  </xsl:apply-templates>
  <xsl:apply-templates      select = "MedlineCitation/
                                      MedlineJournalInfo/MedlineTA"/>
  <xsl:apply-templates      select = "MedlineCitation/Article/
                                      Journal/JournalIssue"/>
 </xsl:template>


 <!-- 
 ===============================================================
 C) Protocol Citation Formatting
 =============================================================== -->
 <xsl:template               match = "ProtocolLink">
  <Citation>
  <xsl:attribute              name = "cdr:ref">
   <xsl:value-of            select = "@cdr:ref"/>
  </xsl:attribute>
  <xsl:attribute              name = "ProtocolID">
   <xsl:value-of            select = "@cdr:ref"/>
  </xsl:attribute>
  <xsl:if                     test = "@InsertionOrDeletion">
   <xsl:attribute             name = "InsertionOrDeletion">
    <xsl:value-of           select = "@InsertionOrDeletion"/>
   </xsl:attribute>
  </xsl:if>   

  <!-- 
  Display the "Protocol Author List" based on the following rules:
  - find the primary organization
  - display the Protocol chair, if it is listed as public
  - if no public PC exists display the Protocol co-chair, if it is 
    listed as public
  - if no public PC or Protocol co-chair exist display the Principle
    investigator, if it is listed as public
  - if no public PC, Protocol co-chair, or Principle investigator exist
    display the Study coordinator and Research coordinator that are 
    listed as public
  - if none of the above exist do not display any name.
  - if more then three persons are listed display the first three and
    add "et al."
  ===================================================================== -->
  <xsl:choose>   <!-- Check for Protocol chair -->
   <xsl:when                      test = "ProtocolLeadOrg
                                            [LeadOrgRole = 'Primary']/
                                          LeadOrgPersonnel
                                            [PersonRole = 'Protocol chair'
                                             and
                                             not(@Public)]">
    <xsl:for-each               select = "ProtocolLeadOrg
                                            [LeadOrgRole = 'Primary']/
                                          LeadOrgPersonnel
                                            [PersonRole = 'Protocol chair'
                                             and
                                             not(@Public)]">
     <xsl:call-template           name = "getPersonName"/>
    </xsl:for-each>
   </xsl:when>
   <xsl:otherwise>
    <xsl:choose>   <!-- Check for Protocol co-chair -->
     <xsl:when                    test = "ProtocolLeadOrg
                                            [LeadOrgRole = 'Primary']/
                                          LeadOrgPersonnel
                                            [PersonRole = 'Protocol co-chair'
                                             and
                                             not(@Public)]">
      <xsl:for-each             select = "ProtocolLeadOrg
                                            [LeadOrgRole = 'Primary']/
                                          LeadOrgPersonnel
                                            [PersonRole = 'Protocol co-chair'
                                             and
                                             not(@Public)]">
       <xsl:call-template         name = "getPersonName"/>
      </xsl:for-each>
     </xsl:when>
     <xsl:otherwise>
      <xsl:choose>   <!-- Check for Principle investigator -->
       <xsl:when                  test = "ProtocolLeadOrg
                                            [LeadOrgRole = 'Primary']/
                                          LeadOrgPersonnel
                                            [PersonRole = 
                                                    'Principal investigator'
                                             and
                                             not(@Public)]">
        <xsl:for-each           select = "ProtocolLeadOrg
                                            [LeadOrgRole = 'Primary']/
                                          LeadOrgPersonnel
                                            [PersonRole = 
                                                    'Principal investigator'
                                             and
                                             not(@Public)]">
         <xsl:call-template       name = "getPersonName"/>
        </xsl:for-each>
       </xsl:when>
       <xsl:otherwise>
        <xsl:choose>   <!-- Check for Study/Research coordinator -->
         <xsl:when                test = "ProtocolLeadOrg
                                            [LeadOrgRole = 'Primary']/
                                          LeadOrgPersonnel
                                            [PersonRole = 'Study coordinator'
                                             or
                                             PersonRole = 
                                                      'Research coordinator']">
          <xsl:for-each         select = "ProtocolLeadOrg
                                            [LeadOrgRole = 'Primary']/
                                          LeadOrgPersonnel
                                            [PersonRole = 'Study coordinator'
                                             and 
                                             not(@Public)
                                             or
                                             PersonRole = 
                                                      'Research coordinator'
                                             and
                                             not(@Public)]">
           <xsl:call-template     name = "getPersonName"/>
          </xsl:for-each>
         </xsl:when>
        </xsl:choose>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  </xsl:choose>

  <!-- 
  Format the Organization Name
  ======================================================================== -->
  <xsl:for-each                  select = "ProtocolLeadOrg">
   <xsl:if                       test   = "LeadOrgRole = 'Primary'">
    <xsl:value-of                select = "Organization/
                                           OrganizationNameInformation/
                                           OfficialName/Name"/>
    <xsl:text>:</xsl:text>
   </xsl:if>
  </xsl:for-each>

  <xsl:text> </xsl:text>
  <xsl:variable                    name = "protTitle"
                                 select = "normalize-space(ProtocolTitle)"/>
  <xsl:choose>
   <xsl:when                       test = "substring($protTitle, 
                                                string-length($protTitle), 1)
                                                                       = ' '">
    <xsl:value-of                select = "substring($protTitle, 1,
                                                string-length($protTitle)-1)"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:value-of                select = "$protTitle"/>
   </xsl:otherwise>
  </xsl:choose>
  <!-- xsl:value-of                  select = "ProtocolTitle"/ -->
  <xsl:text>, </xsl:text>
  <xsl:value-of                  select = "ProtocolIDs/PrimaryID/IDString"/>
  <xsl:text>, </xsl:text>
  <xsl:value-of                  select = "StudyType"/>
  <xsl:text>, </xsl:text>
  <xsl:value-of                  select = "CurrentProtocolStatus"/>
  <xsl:text>.</xsl:text>
 </Citation>
 </xsl:template>


 <!--
 ====================================================================
 Template to create Author Names for Protocol Citations
 ==================================================================== -->
 <xsl:template                name = "getPersonName">
  <xsl:if                     test = "position() &lt; 4">
   <!-- 
   If the first name field contains the middle initial try to extract
   it and display both initials.
   ====================================================================== -->
   <xsl:variable              name = "Gname" 
                            select = "substring-after(Person/
                                      PersonNameInformation/GivenName,' ')"/>
   <xsl:variable              name = "mInit"
                            select = "Person/
                                      PersonNameInformation/MiddleInitial"/>

   <xsl:value-of            select = "Person/PersonNameInformation/SurName"/>
   <xsl:text> </xsl:text>
   <xsl:value-of            select = "substring(Person/
                                      PersonNameInformation/GivenName,1,1)"/>

   <!-- If the middle initial is part of the first name concatenate it -->
   <xsl:choose>
    <xsl:when                 test = "not(contains($Gname,'.'))">
     <xsl:value-of          select = "substring($Gname,1,1)"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of          select = "translate($Gname,'.','')"/>
    </xsl:otherwise>
   </xsl:choose>

   <!-- If the middle initial is in the middle initial field concatenate it -->
   <xsl:choose>
    <xsl:when                 test = "not(contains($mInit,'.'))">
     <xsl:value-of          select = "substring($mInit,1,1)"/>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of          select = "translate($mInit,'.','')"/>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:choose>
    <xsl:when                 test = "position() = 3
                                      and
                                      last() &gt; 3">
     <xsl:text>, et al.</xsl:text>
    </xsl:when>
   </xsl:choose>

   <xsl:text>, </xsl:text>
  </xsl:if>
 </xsl:template>


 <!-- 
 ====================================================================
 Template to create AuthorList
 If Authors AND CollectiveNames exist always display a total of three
 elements (3 Authors, 2 Auth + 1 Coll, 1 Auth + 2 Coll, 3 Coll) and
 at 'et. al.' if more then 3 elements exist.
 Authors are displayed first, if exist.
 ==================================================================== -->
 <xsl:template               match = "AuthorList">
  <xsl:variable               name = "Authors" 
                            select = "Author"/>
  <xsl:variable               name = "nAuthor" 
                            select = "count(Author)"/>
  <xsl:variable               name = "nCollective" 
                            select = "count(Author/CollectiveName)"/>
  <xsl:variable               name = "nLastName" 
                            select = "count(Author/LastName)"/>

  <xsl:choose>
   <xsl:when                  test = "contains($Authors,'null')">
    <xsl:text></xsl:text>
   </xsl:when>
   <xsl:otherwise>
    <xsl:for-each           select = "Author[not(CollectiveName)]">
     <xsl:if                  test = "position() &lt; 4">
      <xsl:value-of         select = "LastName"/>

      <!-- Very rare but sometimes an author does not have a FirstName
           (or Initials respectively) -->
      <xsl:if                 test = "FirstName | Initials">
       <xsl:text> </xsl:text>
       <!-- Remove trailing blank space from FirstName  -->
       <xsl:if                test = "not(Initials)">
        <xsl:variable         name = "firstName"
                            select = "normalize-space(FirstName)"/>
        <xsl:choose>
         <xsl:when            test = "substring($firstName, 
                                                string-length($firstName), 1)
                                                                       = ' '">
          <xsl:value-of     select = "substring($firstName, 1,
                                                string-length($firstName)-1)"/>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of     select = "$firstName"/>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:if>

       <xsl:value-of        select = "Initials"/>
       <xsl:if                test = "Suffix">
        <xsl:text> </xsl:text>
        <xsl:value-of       select = "Suffix"/>
       </xsl:if>
      </xsl:if>

      <!-- 
      Separate AuthorNames by comma
      ================================ -->
      <xsl:if                 test = "position() != last()
                                      and 
                                      position() != $nLastName
                                      and
                                      position() != 3">
       <xsl:text>, </xsl:text>
      </xsl:if>
     </xsl:if>
    </xsl:for-each>

    <!-- 
    Separate AuthorName list from CollectiveName list and display
    CollectiveName list if less then three Authors exist.
    ============================================================= -->
    <xsl:if                   test = "$nLastName &lt; 3
                                      and
                                      $nCollective &gt; 0">
     <xsl:if                  test = "$nLastName &gt; 0">
      <xsl:text>; </xsl:text>
     </xsl:if>

     <xsl:for-each          select = "Author[CollectiveName]">
      <xsl:if                 test = "position() &lt; 4">

       <!-- 
       In case a collective name already ends in a period the
       final period has to be suppressed
       ====================================================== -->
       <xsl:value-of        select = "CollectiveName"/>
       <xsl:choose>
        <xsl:when             test = "substring(
                                       normalize-space(CollectiveName), 
                                       string-length(
                                         normalize-space(CollectiveName)), 1) 
                                                                         = '.'">
         <xsl:text></xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>.</xsl:text>
        </xsl:otherwise>
       </xsl:choose>

       <!-- 
       Separate AuthorNames by comma but do not print comma if three or
       more AuthorNames/CollectiveNames exist since the last comma is
       being provided along with the et.al.
       ================================================================ -->
       <xsl:if                    test = "position() != last() 
                                          and 
                                          position() != $nLastName
                                          and 
                                          position() != 3">
        <xsl:text>, </xsl:text>
       </xsl:if>
      </xsl:if>
     </xsl:for-each>
    </xsl:if>

    <!-- 
    Indicate that more then three authors exist 
    =========================================== -->
    <xsl:choose>
     <xsl:when                test = "@Complete = 'No' 
                                      or
                                      $nAuthor &gt; 3">
      <xsl:text>, et al.</xsl:text>
     </xsl:when>
    </xsl:choose>

    <!-- 
    Add the Eds. at the end if this is a book with editors
    ====================================================== -->
    <xsl:choose>
     <xsl:when                test = "@Editors = 'Yes' 
                                      and
                                      $nAuthor = 1">
      <xsl:text>, ed.: </xsl:text>
     </xsl:when>
     <xsl:when                test = "@Editors = 'Yes'
                                      and
                                      $nAuthor &gt; 1">
      <xsl:text>, eds.: </xsl:text>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>: </xsl:text>
     </xsl:otherwise>
    </xsl:choose>

   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ====================================================================
 Template to create AuthorList
 If Authors AND CollectiveNames exist always display a total of three
 elements (3 Authors, 2 Auth + 1 Coll, 1 Auth + 2 Coll, 3 Coll) and
 at 'et. al.' if more then 3 elements exist.
 Authors are displayed first, if exist.
 ==================================================================== -->
<xsl:template                match = "XXXAuthorList_Orig">
 <xsl:variable                name = "Authors" 
                            select = "Author"/>
 <xsl:variable                name = "nAuthor" 
                            select = "count(Author)"/>
 <xsl:variable                name = "nCollective" 
                            select = "count(Author/CollectiveName)"/>
 <xsl:variable                name = "nLastName" 
                            select = "count(Author/LastName)"/>

 <xsl:choose>
  <xsl:when                  test = "contains($Authors,'null')">
   <xsl:text></xsl:text>
  </xsl:when>
  <xsl:when                   test   = "Author/CollectiveName">
   <xsl:value-of              select = "$nAuthor"/>AA
   <xsl:value-of              select = "$nLastName"/>LL
   <xsl:value-of              select = "$nCollective"/>CC
   <xsl:text>: </xsl:text>
  </xsl:when>
  <xsl:otherwise>
   <xsl:for-each              select = "Author">
    <xsl:if                     test = "position() &lt; 4">
     <xsl:value-of            select = "LastName"/>
     <xsl:text> </xsl:text>
     <xsl:value-of            select = "FirstName | Initials"/>
     <xsl:if                    test = "Suffix">
      <xsl:text> </xsl:text>
      <xsl:value-of           select = "Suffix"/>
     </xsl:if>

     <xsl:if                   test   = "position() != last() and 
                                        position() != 3">
      <xsl:text>, </xsl:text>
     </xsl:if>

     <xsl:if                   test   = "position() = last() or
                                        position() = 3">
      <xsl:if                  test   = "not(../@Editors = 'Yes')">
       <xsl:choose>
        <xsl:when               test   = "../@Complete = 'No' or
                                         $nAuthor &gt; 3">
         <xsl:text>, et al.: </xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text>: </xsl:text>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:if>

      <xsl:if                  test   = "../@Editors='Yes'">
       <xsl:choose>
        <xsl:when               test   = "../@Complete='No'">
         <xsl:text>, et al.</xsl:text>
        </xsl:when>
        <xsl:otherwise>
         <xsl:text></xsl:text>  <!-- Removed space for (1,2,5) -->
        </xsl:otherwise>
       </xsl:choose>
       <xsl:if                  test  = "position() &gt; 1">
        <xsl:choose>
         <xsl:when           test  = "../@Complete='No'">
          <xsl:text>, eds.: </xsl:text>
         </xsl:when>
         <xsl:otherwise>
          <xsl:text>, eds.: </xsl:text>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:if>

       <xsl:if                  test  = "position() &lt; 2">
        <xsl:text>, ed.: </xsl:text>
       </xsl:if>
      </xsl:if>
     </xsl:if>
    </xsl:if>
   </xsl:for-each>
  </xsl:otherwise>
 </xsl:choose>
</xsl:template>


 <!-- 
 ====================================================================
 Template to create CitationTitle
 ==================================================================== -->
<xsl:template                match = "CitationTitle | ArticleTitle">
 <xsl:param                   name = "period"
                            select = "'Yes'"/>
 <xsl:value-of              select = "."/>
 <xsl:choose>
  <xsl:when                   test = "$period = 'Yes'">
   <!-- 
   In case a title ends in a question mark or exclamation mark the
   final period has to be suppressed
   =============================================================== -->
   <xsl:choose>
    <xsl:when                 test = "substring(
                                       normalize-space(.), 
                                       string-length(normalize-space(.)), 1) 
                                                                         = '?'
                                      or
                                      substring(
                                       normalize-space(.), 
                                       string-length(normalize-space(.)), 1) 
                                                                         = '!'">
     <xsl:text> </xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>. </xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:when>
  <xsl:otherwise>
   <xsl:text> </xsl:text>
  </xsl:otherwise>
 </xsl:choose>
</xsl:template>


 <!-- 
 ====================================================================
 Template to handle different CitationType elements such as
 ==================================================================== -->
<xsl:template                match = "CitationType">
 <xsl:param                   name = "citType"
                            select = "'Null'"/>
 <xsl:choose>
  <xsl:when                   test = "$citType = 'Abstract'">
   <xsl:text>[Abstract] </xsl:text>
  </xsl:when>
  <xsl:when                   test = "$citType = 'Abstract [Internet]'">
   <xsl:text>[Internet] </xsl:text>
  </xsl:when>
  <xsl:when                   test = "$citType = 'Book chapter'
                                      or
                                      $citType = 'Book chapter [Internet]'
                                      or
                                      $citType = 'Meeting Paper'
                                      or
                                      $citType = 'Meeting Paper [Internet]'">
   <xsl:text>In: </xsl:text>
   <xsl:apply-templates     select = "../PublicationDetails/
                                      PublishedIn/Citation//AuthorList"/>
  </xsl:when>
 </xsl:choose>
</xsl:template>


 <!-- 
 ====================================================================
 Template to create MedlineTA
 ==================================================================== -->
<xsl:template                match = "MedlineTA">
 <xsl:apply-templates       select = "node()"/>
 <xsl:text> </xsl:text>
</xsl:template>


 <!-- 
 ====================================================================
 Template to create JournalIssue
 ==================================================================== -->
<xsl:template                match = "JournalIssue">
 <xsl:choose>
  <!-- Citation contains Volume and Issue information -->
  <xsl:when                   test = "Issue">
   <xsl:value-of            select = "concat(Volume,' ','(',Issue,')',': ')"/>
  </xsl:when>
  <xsl:otherwise>
   <xsl:choose>
    <!-- Citation contains Supplement information in the Volume element -->
    <xsl:when                 test = "contains(Volume, 'Suppl')">
     <xsl:value-of          select = "substring-before(Volume, ' ')"/>
     <xsl:text> (</xsl:text>
     <xsl:value-of          select = "substring-after(Volume, ' ')"/>
     <xsl:text>)</xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of          select = "Volume"/>
    </xsl:otherwise>
   </xsl:choose>

   <xsl:text>: </xsl:text>
  </xsl:otherwise>
 </xsl:choose>

 <xsl:value-of              select = "../../Pagination/MedlinePgn"/>
 <xsl:text>, </xsl:text>

 <xsl:if                      test = "PubDate/MedlineDate">
  <xsl:value-of             select = "PubDate/MedlineDate"/>
  <xsl:text>.</xsl:text>
 </xsl:if> 
 <xsl:if                      test = "PubDate/Year">
  <xsl:value-of              select = "PubDate/Year"/>
  <xsl:text>.</xsl:text>
 </xsl:if>
</xsl:template>


 <!-- 
 ====================================================================
 Template to create PublishedIn
 ==================================================================== -->
<xsl:template                match = "PublishedIn">
 <xsl:param                   name = "citType"
                            select = "'Null'"/>
 
 <xsl:choose>
  <xsl:when                   test = "$citType = 'Abstract'">
   <xsl:apply-templates     select = "Citation//CitationTitle">
    <xsl:with-param           name = "period"
                            select = "'No'"/>
   </xsl:apply-templates>
   <xsl:text> </xsl:text>
  </xsl:when>
  <xsl:when                   test = "$citType = 'Book chapter'
                                      or
                                      $citType = 'Book chapter [Internet]'">
   <xsl:apply-templates     select = "Citation//CitationTitle">
    <xsl:with-param           name = "period"
                            select = "'Yes'"/>
   </xsl:apply-templates>
   <xsl:apply-templates     select = "Citation//OtherPublicationInformation"/>
   <xsl:text>, </xsl:text>
  </xsl:when>
  <xsl:when                   test = "$citType = 'Meeting Paper'
                                      or
                                      $citType = 'Meeting Paper [Internet]'">
   <xsl:apply-templates     select = "Citation//CitationTitle">
    <xsl:with-param           name = "period"
                            select = "'Yes'"/>
   </xsl:apply-templates>
   <xsl:if                    test = "Citation//OtherPublicationInformation">
    <xsl:apply-templates    select = "Citation//OtherPublicationInformation"/>
    <xsl:text>, </xsl:text>
   </xsl:if>
  </xsl:when>
  <xsl:otherwise>
   <xsl:apply-templates     select = "Citation//CitationTitle">
    <xsl:with-param           name = "period"
                            select = "'No'"/>
   </xsl:apply-templates>
   <xsl:text> </xsl:text>
  </xsl:otherwise>   
 </xsl:choose>
</xsl:template>


 <!-- 
 ====================================================================
 Template to create OtherPublicationInformation
 ==================================================================== -->
 <xsl:template                   match = "OtherPublicationInformation">
  <xsl:apply-templates          select = "PublicationInformation"/>

  <xsl:apply-templates          select = "InternetInformation"/>
 </xsl:template>


 <!-- 
 ====================================================================
 Template to create InternetInformation 
 This is design so that the "Also available online" text and link is
 not going to be displayed for a citation referencing the current
 citation.
 ==================================================================== -->
 <xsl:template                   match = "InternetInformation">
  <xsl:choose>
   <xsl:when                      test = "not(ancestor::PublishedIn)">
    <xsl:text> </xsl:text>
    <xsl:apply-templates/>
    <xsl:text>.</xsl:text>
   </xsl:when>
   <xsl:otherwise>
    <!-- Suppress the display of the InternetInformation content
         for the parent of the citation -->
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>