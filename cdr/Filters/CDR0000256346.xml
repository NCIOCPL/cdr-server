<CdrDoc Type='Filter' Id='CDR0000256346'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">InLine Markup Formatter</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
<xsl:transform             xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             version = "1.0"
                           xmlns:cdr = "cips.nci.nih.gov/cdr"
             exclude-result-prefixes = "cdr">
  
<!-- ======================================================================
      Display a Summary Reference, SummaryFragmentRef or LOEFragmentRef or 
      ProtocolRef
     ====================================================================== -->
    <xsl:template              match = "SummaryRef | ProtocolRef |
                                        SummaryFragmentRef | 
                                        LOEFragmentRef">
     <u><xsl:value-of         select = "."/></u>
    </xsl:template>

<!-- ======================================================================
                       Link to glossaryTermRefs 
     ====================================================================== -->
    <xsl:template              match = "GlossaryTermRef | LOERef">
     <a>
      <xsl:attribute            name = "href">
       <xsl:value-of          select = "concat('/cgi-bin/cdr/Filter.py?',
                                               'DocId=', @cdr:href,
                                               '&amp;Filter=name:Glossary',
                                               '+Term+Display+for+Patient',
                                               '+Summaries')"/>
      </xsl:attribute>
      <xsl:value-of           select = "."/>
     </a>
    </xsl:template>

<!-- =====================================================================
                Display Itemized Lists for KeyPoints
     ===================================================================== -->
   <xsl:template              match = "KeyPointsList[@Style='bullet'] |
                                       KeyPointsList[@Style='dash']">
     <ul>
     <xsl:for-each            select = "ListItem">
      <li>
      <xsl:choose>
       <xsl:when                test = "../@Style='bullet'">
        <xsl:attribute          name = "type">
         <xsl:text>disc</xsl:text>
        </xsl:attribute>
       </xsl:when>
       <xsl:when                test = "../@Style='dash'">
        <xsl:attribute          name = "type">
         <xsl:text>square</xsl:text>
        </xsl:attribute>
       </xsl:when>
      </xsl:choose>                               
      <xsl:apply-templates/>
      </li>
     </xsl:for-each>
     </ul>
    </xsl:template>
                       
<!-- =====================================================================
                Display an itemized list
     ===================================================================== -->
   <xsl:template              match = "ItemizedList">   
  
     <xsl:apply-templates     select = "ListTitle"/>
 
     <!-- Handle ListItem now. -->
     <ul>
     <xsl:for-each            select = "ListItem"> 
      <xsl:call-template        name = "ItemizedListItem"/>
    
      <!-- Take care of extra attributes. -->
      <xsl:if                   test = "position() != last()">      
       <xsl:choose>
        <xsl:when               test = "@compact = 'No'">
         <br />
         <br />
        </xsl:when>
        <xsl:when               test = "not(@Style = 'dash')">
         <br />
        </xsl:when>
       </xsl:choose>
      </xsl:if>

     </xsl:for-each>    
     </ul>  
    </xsl:template>  
 
<!-- =====================================================================
                       Display an ordered list 
     ===================================================================== -->
    <xsl:template              match = "OrderedList">     
   
     <xsl:apply-templates     select = "ListTitle"/>     

     <!-- Handle ListItem now. -->
     <ol>
     <xsl:for-each            select = "ListItem">
      <xsl:call-template        name = "OrderedListItem"/> 
     
      <!-- Take care of extra attribute compact. -->
      <xsl:if                   test = "position() != last() and
                                        @Compact = 'No'">
       <br />        
      </xsl:if>   
     </xsl:for-each>
     </ol>
    </xsl:template>        
 
<!-- =====================================================================
                     Display a Subscript 
     ===================================================================== -->
    <xsl:template              match = "Subscript">
     <sub><xsl:apply-templates/></sub>
    </xsl:template>

<!-- =====================================================================
                     Display a Superscript 
     ===================================================================== -->
    <xsl:template              match = "Superscript">
     <sup><xsl:apply-templates/></sup>
    </xsl:template>

<!-- =====================================================================
                     Display Strong 
     ===================================================================== -->
    <xsl:template              match = "Strong">
     <b><xsl:apply-templates/></b>
    </xsl:template>

<!-- =====================================================================
       Display Emphasis, ScientificName, ForeignWord, GeneName
     ===================================================================== -->
    <xsl:template              match = "Emphasis | ScientificName |
                                        ForeignWord | GeneName">
     <i><xsl:apply-templates/></i>
    </xsl:template>

<!-- =====================================================================
                         Display a note        
     ===================================================================== -->
    <xsl:template              match = "Note">
     <i>
     <xsl:text>&#xa0;[</xsl:text>
     <xsl:choose>
      <xsl:when                 test = "//SummaryLanguage ='Spanish'"> 
       <xsl:text>Nota: </xsl:text>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>Note: </xsl:text>
      </xsl:otherwise>
     </xsl:choose>
     <xsl:value-of            select = "."/>
     <xsl:text>]</xsl:text>
     </i>
    </xsl:template>

<!-- ======================================================================
        Template handling ListTitle
     ====================================================================== -->
    <xsl:template              match = "ListTitle">    
     <br/>
     <b><i>
     <xsl:apply-templates /> 
     </i></b>      
    </xsl:template>

<!-- =====================================================================
        Template handling ListItem in OrderedList
     ===================================================================== -->  
    <xsl:template               name = "OrderedListItem">
   
     <li>      
      <!-- No attribute for Arabic; it is the default. -->
      <xsl:choose>
       <xsl:when                test = "../@Style = 'UAlpha'">
        <xsl:attribute          name = "type">
         <xsl:text>A</xsl:text>
        </xsl:attribute>
       </xsl:when>
       <xsl:when                test = ".../@Style = 'LAlpha'">
        <xsl:attribute          name = "type">
         <xsl:text>a</xsl:text>
        </xsl:attribute>
       </xsl:when>
       <xsl:when                test = "../@Style = 'URoman'">
        <xsl:attribute          name = "type">
         <xsl:text>I</xsl:text>
        </xsl:attribute>
       </xsl:when>
       <xsl:when                test = "../@Style = 'LRoman'">
        <xsl:attribute          name = "type">
         <xsl:text>i</xsl:text>
        </xsl:attribute>
       </xsl:when>
      </xsl:choose>
      <xsl:apply-templates />
     </li>
     <br />
    </xsl:template>

<!-- =====================================================================
        Template handling ListItem in ItemizedList
     ===================================================================== -->  
    <xsl:template               name = "ItemizedListItem">
    
     <li> 
     <xsl:attribute             name = "type">
      <xsl:choose>
       <xsl:when                test = "../@Style = 'bullet'">        
        <xsl:text>disc</xsl:text>    
       </xsl:when>
       <xsl:when                test = "../@Style = 'dash'">
        <xsl:text>square</xsl:text>      
       </xsl:when>
       <xsl:when                test = "../@Style = 'simple'">
        <xsl:text>lnone</xsl:text>     
       </xsl:when> 
      </xsl:choose> 
     </xsl:attribute>
     <xsl:apply-templates />
     </li>
    </xsl:template>

<!-- =====================================================================
         Display TOC Summary Title with Deletion and Insertion
     ===================================================================== -->
    <xsl:template              match = "SummaryTitle"
                                mode = "TOC">
     <h2>
     <xsl:apply-templates />
     </h2>
    </xsl:template> 

<!-- =====================================================================
           Display summary titles in TOC.
     ===================================================================== -->
    <xsl:template              match = "Title" 
                                mode = "TOC">
     <xsl:apply-templates/>
    </xsl:template>

<!-- =====================================================================
           Display SummarySection in TOC.
     ===================================================================== -->
    <xsl:template               name = "TocSummarySection">
     <xsl:param                 name = "level"/> 

     <dt>
      <xsl:apply-templates    select = "Title"
                                mode = "TOC"/>
     </dt>
   
     <xsl:if                    test = "SummarySection and
                                        $level &lt; 3">
      <dl>
      <xsl:for-each           select = "SummarySection">
       <xsl:call-template       name = "TocSummarySection">
        <xsl:with-param         name = "level"
                              select = "$level + 1"/>
       </xsl:call-template>
      </xsl:for-each>
      </dl>
     </xsl:if>

    </xsl:template>

<!-- =====================================================================
        Display a summary section title depending on how many 
        SummarySection in its ancestors. We may have to use
        a mode here to avoid unintended usage in documents that
        are not summaries, but with Title.
     ===================================================================== -->
    <xsl:template              match = "Title">
     <xsl:variable              name = "ancestors"
                              select = "ancestor::SummarySection"/>
     <xsl:variable              name = "heading">
      <xsl:choose>
       <xsl:when                test = "count($ancestors) &lt; 4">
        <xsl:value-of         select = "count($ancestors)+1"/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:value-of         select = "4"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:variable>
    
     <xsl:text disable-output-escaping="yes">&lt;h</xsl:text>
     <xsl:value-of            select = "$heading"/>
     <xsl:text disable-output-escaping="yes">&gt;</xsl:text>    
     <xsl:apply-templates/>
     <xsl:text disable-output-escaping="yes">&lt;/h</xsl:text>
     <xsl:value-of            select = "$heading"/> 
     <xsl:text disable-output-escaping="yes">&gt;</xsl:text>   

    </xsl:template>

<!-- =====================================================================
       Display Paragraphs 
     ===================================================================== -->
    <xsl:template              match = "Para">
     <p>
     <xsl:apply-templates/>
     </p>
    </xsl:template>

<!-- =====================================================================
      Display tables in old format
     ===================================================================== -->
    <xsl:template              match = "TT">
     <pre>
     <xsl:apply-templates/>
     </pre>
    </xsl:template>

<!-- =====================================================================
       Create a link to another document or website 
     ===================================================================== -->
    <xsl:template              match = "ExternalRef">
     <xsl:variable              name = "nlink" 
                              select = "@cdr:xref"/>
     <a href="{$nlink}">
     <xsl:apply-templates/>
     </a>
    </xsl:template>

<!-- =====================================================================
       Display references 
     ===================================================================== -->
    <xsl:template              match = "ReferenceList">
     <xsl:if                    test = "Reference">
      <xsl:choose>
       <xsl:when                test = "//SummaryLanguage='Spanish'">        
        <h3>Referencias:</h3>
       </xsl:when>
       <xsl:otherwise>
        <h3>References:</h3>        
       </xsl:otherwise>     
      </xsl:choose>
      
      <ol>
      <xsl:for-each           select = "Reference">
       <p><li>
       <xsl:apply-templates select="."/>
       </li></p>
      </xsl:for-each>
      </ol>
     </xsl:if>
    </xsl:template>

</xsl:transform>]]>
</CdrDocXml>
</CdrDoc>