<CdrDoc Type='Filter' Id='CDR0000256346'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">InLine Markup Formatter</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
               exclude-result-prefixes = "cdr">
  
<!-- ======================================================================
      Display a Summary Reference, SummaryFragmentRef or LOEFragmentRef or 
      ProtocolRef
     ===================================================================== -->
  <xsl:template                  match = "SummaryRef | ProtocolRef |
                                          SummaryFragmentRef | 
                                          LOEFragmentRef">
    <u><xsl:value-of            select = "."/></u>
  </xsl:template>

<!-- ======================================================================
                       Link to glossaryTermRefs 
     ===================================================================== -->
  <xsl:template                  match = "GlossaryTermRef">
    <a>
      <xsl:attribute              name = "href">
        <xsl:value-of           select = "concat('/cgi-bin/cdr/Filter.py?',
                                                 'DocId=', @cdr:href,
                                                 '&amp;Filter=name:Glossary',
                                                 '+Term+Display+for+Patient',
                                                 '+Summaries')"/>
      </xsl:attribute>
      <xsl:value-of             select = "."/>
    </a>
  </xsl:template>

<!-- ======================================================================
                       Display an ordered list 
     ===================================================================== -->
  <xsl:template                   name = "OrderedList">
    <xsl:param                    name = "markup"/>
     
    <xsl:variable                 name = "compact"
                                select = "@Compact"/> 
    <xsl:variable                 name = "style"
                                select = "@Style"/> 
                                
    <!-- Handle ListTitle first. -->
    <xsl:for-each               select = "Insertion/ListTitle |
                                          Deletion/ListTitle |
                                          ListTitle">
      <xsl:choose>
        <xsl:when                 test = "name(..) = 'Deletion'">
          <xsl:if                 test = "$markup = 'Redline'">
            <strike>             
            <xsl:apply-templates 
                                select = "."/>                                        
            </strike>
          </xsl:if>
        </xsl:when>
        <xsl:when                 test = "name(..) = 'Insertion'">
          <xsl:if                 test = "$markup = 'Redline'">
            <font color="#FF0000">
            <xsl:apply-templates 
                                select = "."/>  
            </font>
          </xsl:if>
          <xsl:if                 test = "$markup = 'BoldUnderline'">
            <u><b>
            <xsl:apply-templates 
                                select = "."/>
            </b></u>
          </xsl:if>
        </xsl:when> 
        <xsl:otherwise>                                           
          <xsl:apply-templates  select = "."/> 
        </xsl:otherwise> 
      </xsl:choose> 
    </xsl:for-each> 

    <!-- Handle ListItem now. -->
    <ol>
    <xsl:for-each               select = "Insertion/ListItem |
                                          Deletion/ListItem |
                                          ListItem"> 
      <xsl:choose>
        <xsl:when                 test = "name(..) = 'Deletion'">
          <xsl:if                 test = "$markup = 'Redline'">
            <strike>             
            <xsl:call-template    name = "OrderedListItem">  
              <xsl:with-param     name = "style"
                                select = "$style"/>
            </xsl:call-template>           
            </strike>
          </xsl:if>
        </xsl:when>
        <xsl:when                 test = "name(..) = 'Insertion'">
          <xsl:if                 test = "$markup = 'Redline'">
            <font color="#FF0000">
            <xsl:call-template    name = "OrderedListItem">  
              <xsl:with-param     name = "style"
                                select = "$style"/>
            </xsl:call-template> 
            </font>
          </xsl:if>
          <xsl:if                 test = "$markup = 'BoldUnderline'">
            <u><b>
            <xsl:call-template    name = "OrderedListItem">  
              <xsl:with-param     name = "style"
                                select = "$style"/>
            </xsl:call-template>
            </b></u>
          </xsl:if>
        </xsl:when> 
        <xsl:otherwise>                                           
          <xsl:call-template    name = "OrderedListItem">  
            <xsl:with-param     name = "style"
                              select = "$style"/>
          </xsl:call-template>
        </xsl:otherwise> 
      </xsl:choose> 

      <!-- Take care of extra attribute compact. -->
      <xsl:if                     test = "position() != last() and
                                          $compact = 'No'">
        <br />        
      </xsl:if>
   
    </xsl:for-each>
    </ol>
  </xsl:template>
    
<!-- ======================================================================
                Display Itemized Lists for KeyPoints
     ===================================================================== -->    
  <xsl:template                  match = "KeyPointsList[@Style='bullet'] |
                                          KeyPointsList[@Style='dash']">
    <ul>
    <xsl:for-each               select = "ListItem">
      <li>
      <xsl:choose>
        <xsl:when                 test = "../@Style='bullet'">
          <xsl:attribute          name = "type">
            <xsl:text>disc</xsl:text>
          </xsl:attribute>
        </xsl:when>
        <xsl:when                 test = "../@Style='dash'">
          <xsl:attribute          name = "type">
            <xsl:text>square</xsl:text>
          </xsl:attribute>
        </xsl:when>
      </xsl:choose>                               
      <xsl:apply-templates/>
     </li>
    </xsl:for-each>
    </ul>
  </xsl:template>
                       
<!-- =====================================================================
                Display an itemized list
     ==================================================================== -->               
  <xsl:template                   name = "ItemizedList">
    <xsl:param                    name = "markup"/>

    <xsl:variable                 name = "compact"
                                select = "@Compact"/>
    <xsl:variable                 name = "style"
                                select = "@Style"/> 
     
    <!-- Handle ListTitle first. -->
    <xsl:for-each               select = "Insertion/ListTitle |
                                          Deletion/ListTitle |
                                          ListTitle">
      <xsl:choose>
        <xsl:when                 test = "name(..) = 'Deletion'">
          <xsl:if                 test = "$markup = 'Redline'">
            <strike>             
            <xsl:apply-templates 
                                select = "."/>                                        
            </strike>
          </xsl:if>
        </xsl:when>
        <xsl:when                 test = "name(..) = 'Insertion'">
          <xsl:if                 test = "$markup = 'Redline'">
            <font color="#FF0000">
            <xsl:apply-templates 
                                select = "."/>  
            </font>
          </xsl:if>
          <xsl:if                 test = "$markup = 'BoldUnderline'">
            <u><b>
            <xsl:apply-templates 
                                select = "."/>
            </b></u>
          </xsl:if>
        </xsl:when> 
        <xsl:otherwise>                                           
          <xsl:apply-templates  select = "."/> 
        </xsl:otherwise> 
      </xsl:choose> 
    </xsl:for-each> 

    <!-- Handle ListItem now. -->
    <ul>
    <xsl:for-each               select = "Insertion/ListItem |
                                          Deletion/ListItem |
                                          ListItem"> 
                                      
      <xsl:choose>
        <xsl:when                 test = "name(..) = 'Deletion'">
          <xsl:if                 test = "$markup = 'Redline'">
            <strike>             
            <xsl:call-template    name = "ItemizedListItem">  
              <xsl:with-param     name = "style"
                                select = "$style"/>
            </xsl:call-template>           
            </strike>
          </xsl:if>
        </xsl:when>
        <xsl:when                 test = "name(..) = 'Insertion'">
          <xsl:if                 test = "$markup = 'Redline'">            
            <font color="#FF0000">
            <xsl:call-template    name = "ItemizedListItem">  
              <xsl:with-param     name = "style"
                                select = "$style"/>
            </xsl:call-template> 
            </font>
          </xsl:if>
          <xsl:if                 test = "$markup = 'BoldUnderline'">
            <u><b>
            <xsl:call-template    name = "ItemizedListItem">  
              <xsl:with-param     name = "style"
                                select = "$style"/>
            </xsl:call-template>
            </b></u>
          </xsl:if>
        </xsl:when> 
        <xsl:otherwise>                                
          <xsl:call-template    name = "ItemizedListItem">  
            <xsl:with-param     name = "style"
                              select = "$style"/>
          </xsl:call-template>
        </xsl:otherwise> 
      </xsl:choose> 
      
      <!-- Take care of extra attributes. -->
      <xsl:if                     test = "position() != last()">      
        <xsl:choose>
          <xsl:when               test = "$compact = 'No'">
            <br />
            <br />
          </xsl:when>
          <xsl:when               test = "not($style = 'dash')">
            <br />
          </xsl:when>
        </xsl:choose>
      </xsl:if>

    </xsl:for-each>    
    </ul>  
  </xsl:template>          
 
<!-- ======================================================================
                     Display a Subscript 
     ===================================================================== -->   
  <xsl:template match="Subscript">
    <sub><xsl:apply-templates/></sub>
  </xsl:template>

<!-- ======================================================================
                     Display a Superscript 
     ===================================================================== -->
  <xsl:template match="Superscript">
    <sup><xsl:apply-templates/></sup>
  </xsl:template>

<!-- ======================================================================
                     Display Strong 
     ===================================================================== -->
  <xsl:template match="Strong">
    <b><xsl:apply-templates/></b>
  </xsl:template>

<!-- ======================================================================
       Display Emphasis, ScientificName, ForeignWord, GeneName
     ===================================================================== -->
  <xsl:template                  match = "Emphasis | ScientificName | 
                                           ForeignWord | GeneName">
                                          
    <i><xsl:apply-templates/></i>
  </xsl:template>

<!-- ======================================================================
                         Display a note        
     ===================================================================== -->
  <xsl:template                  match = "Note">
    <i>
    <xsl:text>&#xa0;[</xsl:text>
    <xsl:choose>
      <xsl:when                   test = "/Summary/SummaryMetaData
                                          /SummaryLanguage ='Spanish'">                   
        <xsl:text>Nota: </xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>Note: </xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:value-of               select = "."/>
    <xsl:text>]</xsl:text>
    </i>
  </xsl:template>

<!-- ======================================================================
        Template handling ListTitle
     ===================================================================== -->  
  <xsl:template                  match = "ListTitle">    
    <br />
    <b><i>
    <xsl:apply-templates /> 
    </i></b>      
  </xsl:template>

<!-- ======================================================================
        Template handling ListItem in OrderedList
     ===================================================================== -->  
  <xsl:template                   name = "OrderedListItem">                                 
    <xsl:param                    name = "style"/> 
        
    <li>      
      <!-- No attribute for Arabic; it is the default. -->
      <xsl:choose>
        <xsl:when                 test = "$style = 'UAlpha'">
          <xsl:attribute          name = "type">
            <xsl:text>A</xsl:text>
          </xsl:attribute>
        </xsl:when>
        <xsl:when                 test = "$style = 'LAlpha'">
          <xsl:attribute          name = "type">
            <xsl:text>a</xsl:text>
          </xsl:attribute>
        </xsl:when>
        <xsl:when                 test = "$style = 'URoman'">
          <xsl:attribute          name = "type">
            <xsl:text>I</xsl:text>
          </xsl:attribute>
        </xsl:when>
        <xsl:when                 test = "$style = 'LRoman'">
          <xsl:attribute          name = "type">
            <xsl:text>i</xsl:text>
          </xsl:attribute>
        </xsl:when>
      </xsl:choose>
      <xsl:apply-templates />
    </li>
    <br />
  </xsl:template>

<!-- ======================================================================
        Template handling ListItem in ItemizedList
     ===================================================================== -->  
  <xsl:template                   name = "ItemizedListItem">                                 
    <xsl:param                    name = "style"/> 
        
    <li> 
      <xsl:choose>
        <xsl:when                 test = "$style = 'bullet'">
          <xsl:attribute          name = "type">
            <xsl:text>disc</xsl:text>
          </xsl:attribute>
        </xsl:when>
        <xsl:when                 test = "$style = 'dash'">
          <xsl:attribute          name = "type">
            <xsl:text>square</xsl:text>
          </xsl:attribute>
        </xsl:when>
        <xsl:when                 test = "$style = 'simple'">
          <xsl:attribute          name = "class">
            <xsl:text>lnone</xsl:text>
          </xsl:attribute>
        </xsl:when>       
        <xsl:when                 test = "not($style)">
          <xsl:attribute          name = "class">
            <xsl:text>lnone</xsl:text>
          </xsl:attribute>
        </xsl:when>
      </xsl:choose>                               
      <xsl:apply-templates />
    </li>
  </xsl:template>

<!--=====================================================================
         Display Content Summary Title with Deletion and Insertion
    ==================================================================== -->
  <xsl:template                  match = "SummaryTitle"
                                  mode = "ContentTitle">
    <h2>
    <xsl:apply-templates />
    </h2>
  </xsl:template> 

</xsl:transform>]]>
</CdrDocXml>
</CdrDoc>