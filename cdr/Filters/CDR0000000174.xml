<CdrDoc Type='Filter' Id='CDR0000000174'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Test Denormalization Filter (4/5): Summary</DocTitle>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
<xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0"
               xmlns:cdr="cips.nci.nih.gov/cdr">
  <xsl:output method="xml" omit-xml-declaration="no"/>
<!-- ====================================================================
    This filter adds the same attribute assigned to the citation link at
    the end of the summary section to the matching citation link in the 
    the summary section text 
    ==================================================================== -->   
<!-- Written by Cheryl Burg 8-2-2001 -->
<!-- ========================================================================
     Select data elements to be copied and add tags when an incomplete
     node is copied 
     copy summary data elements generated from previous filter 
    ======================================================================= -->
  
  <xsl:template match="*">
    <xsl:copy>
      <xsl:apply-templates/>
    </xsl:copy>
  </xsl:template>
<!-- ====================================================================
               add refidx to CitationReference elements 
     ===================================================================== -->

  <xsl:template              match = "CitationLink | ProtocolLink">
    <xsl:variable             name = "ref">
      <xsl:value-of         select = "@cdr:ref"/>
    </xsl:variable>
   [<xsl:if                   test = "not(local-name(following-sibling::node())
                                          = 'CitationLink | ProtocolLink')">
     <xsl:value-of           select = "@refidx"/>
      <xsl:if                    test = "local-name(following-sibling::node()) 
                                        = 'CitationLink'">
    
        <xsl:text>, </xsl:text>
        <xsl:value-of           select = "following-sibling::node()/@refidx"/>
      </xsl:if>
    </xsl:if>]
    
  </xsl:template>

                       
<!--copy summary meta data, and title
<xsl:apply-templates select="SummaryMetaData" mode="copy"/>
<xsl:apply-templates select="SummaryTitle" mode="copy"/>
copy summary sections and add references at the end of each section 
<xsl:for-each select="SummarySection">
<SummarySection>
<xsl:apply-templates select="SectMetaData" mode="copy"/>
<xsl:apply-templates select="Title" mode="copy"/>
<xsl:apply-templates select="Para | OrderedList |ItemizedList/ListItem | SummarySection"  mode="copy"/>
<xsl:apply-templates select="PdqKey" mode="copy"/>
<xsl:if test="Reference">
<ReferenceList>
<xsl:apply-templates select=".//Reference"/>
<xsl:attribute name="refidx">
<xsl:value-of select="1+count(preceding-sibling::Reference)"/>
</xsl:attribute>
</ReferenceList>
</xsl:if>
<xsl:apply-templates mode="copy"/>

</SummarySection>
</xsl:for-each>
</xsl:copy>   
</xsl:template>-->

<!-- ===================================================================

        Template rule used to do XML to XML transformations which
        copies any attribute node, or node that is child of of something 
    ====================================================================== -->

   <xsl:template match="@*|node()">
     <xsl:copy>
     <xsl:apply-templates select="@*"/>
     <xsl:apply-templates/>
     </xsl:copy> 
     </xsl:template>

</xsl:transform>]]>
</CdrDocXml>
</CdrDoc>