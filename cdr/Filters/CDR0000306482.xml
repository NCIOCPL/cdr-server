<CdrDoc Type='Filter' Id='CDR0000306482'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Module: Global Filter Templates</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>
<xsl:transform           xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                         xmlns:cdr = "cips.nci.nih.gov/cdr"
           exclude-result-prefixes = "cdr"
                           version = "1.0">

  <xsl:output               method = "xml" 
              omit-xml-declaration = "no"
                          encoding = "UTF-8"/>


 <!-- *
 ====================================================================
 Assemble the PersonNameInformation for a person.
 (Eliminating the StandardProfessionalSuffix element)
 ==================================================================== -->
 <xsl:template               match = "PersonNameInformation">
   <PersonNameInformation>
    <xsl:apply-templates    select = "GivenName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "MiddleInitial"
                              mode = "copy"/>
    <xsl:apply-templates    select = "SurName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Prefix"
                              mode = "copy"/>
    <xsl:apply-templates    select = "GenerationSuffix"
                              mode = "copy"/>

    <!-- 
    If the ProfessionalSuffix element is prepared for the vendor output
    it's created from the Standard/Custom-ProfessionalSuffix elements
    (when clause).
    However, if the ProfessionalSuffic element is only to be copied -
    because it's the second pass of this filter module - the element 
    only needs to be copied as is (otherwise clause).
    ==================================================================== -->
    <xsl:choose>
     <xsl:when                test = "ProfessionalSuffix/
                                        StandardProfessionalSuffix |
                                      ProfessionalSuffix/
                                        CustomProfessionalSuffix">
      <ProfessionalSuffix>
       <xsl:for-each        select = "ProfessionalSuffix/
                                        StandardProfessionalSuffix |
                                      ProfessionalSuffix/
                                        CustomProfessionalSuffix">
        <!-- Clean up the periods of the Custom Prof Suffix  -->
        <xsl:choose>
         <xsl:when            test = "name() = 'CustomProfessionalSuffix'">
          <xsl:value-of     select = "translate(node(), '.', '')"/>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of     select = "."/>
         </xsl:otherwise>
        </xsl:choose>
        <xsl:if               test = "position() != last()">
         <xsl:text>, </xsl:text>
        </xsl:if>
       </xsl:for-each>
      </ProfessionalSuffix>
     </xsl:when>
     <xsl:otherwise>
      <xsl:apply-templates  select = "ProfessionalSuffix"
                              mode = "copy"/>
     </xsl:otherwise>
    </xsl:choose>

    <xsl:apply-templates    select = "Comment"
                              mode = "copy"/>
    <xsl:apply-templates    select = "NameFormat"
                              mode = "copy"/>
   </PersonNameInformation>
 </xsl:template>


<!-- ======================================================================
        Generate DateFirstPublished element only if the passed-in value
        for parameter date is non-empty.
     ===================================================================== -->
  <xsl:template                   name = "getDateFirstPub">         
    <xsl:param                    name = "date"/> 
        
    <xsl:if                       test = "$date">
      <DateFirstPublished>
        <xsl:value-of           select = "$date"/>
      </DateFirstPublished>
    </xsl:if>    
  </xsl:template>

<!-- ======================================================================
     Drop white space node between 2 consecutive CitationLink/ProtocolLink
     elements.
     ===================================================================== -->
  <xsl:template                   name = "stripSpaceNode"> 
    <xsl:variable                 name = "prev"
                                select = "preceding-sibling::*[position()=1]"/>
    <xsl:variable                 name = "next"
                                select = "following-sibling::*[position()=1]"/>
           
    <xsl:if                       test = "(name($prev) != 'CitationLink' 
                                           and name($prev) != 'ProtocolLink') 
                                       or (name($next) != 'CitationLink' 
                                           and name($next) != 'ProtocolLink')"> 
      <xsl:value-of    select = "."/>                           
    </xsl:if>
  </xsl:template>

<!-- ======================================================================
     Template rule used to do XML to XML transformations which
     copies any attribute node, or node that is child of of something 
     ===================================================================== -->
  <xsl:template                  match = "@*"
                                  mode = "copy">
    <xsl:copy/>
  </xsl:template>

  <xsl:template                  match = "*"
                                  mode = "copy">
    <xsl:element                  name = "{name()}">
      <xsl:apply-templates      select = "@*"
                                  mode = "copy"/>
      <xsl:apply-templates        mode = "copy"/> 
    </xsl:element>
  </xsl:template>

</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>