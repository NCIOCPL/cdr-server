<CdrDoc Type='Filter' Id='CDR0000000134'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Vendor Filter: Term</DocTitle>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>

<!-- ===================================================================
       Filter to create the vendor Terminology XML 
     =================================================================== -->

  <xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                    version="1.0"
                 xmlns:cdr="cips.nci.nih.gov/cdr"
                   exclude-result-prefixes="cdr">
        <xsl:output method="xml" omit-xml-declaration="no" indent="yes"/>

                

<!-- ======================================================================
      Copy DocId, PreferredName, OtherTermName, OtherNameType
     ==================================================================== -->

<xsl:template match="Term">

<xsl:text disable-output-escaping="yes">&lt;!DOCTYPE Term &gt;</xsl:text>

<xsl:element name='{name()}'>   
<xsl:for-each select="DocId">
<xsl:attribute name="id">
<xsl:value-of select="."/>
</xsl:attribute>
</xsl:for-each>
<xsl:if test="PdqKey">
<xsl:attribute name="LegacyPDQID">
<xsl:value-of select="PdqKey"/>
</xsl:attribute>
</xsl:if>  
<xsl:apply-templates   select="PreferredName" mode="copy"/>

<xsl:if test="OtherName">
<xsl:for-each select="OtherName">
<OtherName>
<OtherTermName><xsl:value-of   select="OtherTermName"/></OtherTermName>
<OtherNameType><xsl:value-of select="OtherNameType"/></OtherNameType>
</OtherName>
</xsl:for-each>
</xsl:if>

<!-- =====================================================================
     Copy SourceInformation, VocabularySource, DefinitionSource
     ===================================================================== -->

<xsl:if test="SourceInformation">
<xsl:apply-templates   select="SourceInformation" mode="copy"/>
</xsl:if>

<xsl:if test="VocabularySource">
<xsl:apply-templates   select="VocabularySource" mode="copy"/>
</xsl:if>

<xsl:if test="DefinitionSource">
<xsl:apply-templates   select="DefinitionSource" mode="copy"/>
</xsl:if>

<!-- ===================================================================
                    Copy TermType,SemanticTypeText
      code needs to be updated when ref is added to XML records
     ================================================================== -->  
<xsl:for-each select="TermType">
<xsl:for-each select="TermTypeName">
<xsl:if test=".='Protocol selection criteria'">
<TermTypeName><xsl:apply-templates select="."/></TermTypeName>
</xsl:if>
<xsl:if test=".='Obsolete term'">
<TermTypeName><xsl:apply-templates select="."/></TermTypeName>
</xsl:if>
<xsl:if test=".='Header term'">
<TermTypeName><xsl:apply-templates select="."/></TermTypeName>
</xsl:if>
<xsl:if test=".='Semantic type'">
<TermTypeName><xsl:apply-templates select="."/></TermTypeName>
</xsl:if>

</xsl:for-each>
</xsl:for-each>

<xsl:for-each select="SemanticType">
<xsl:variable name="ref" select="@ref"/>
<SemanticType ref="{$ref}"><xsl:value-of select="."/></SemanticType>
</xsl:for-each>

<!-- =================================================================
        Copy Term Relationship (Parent TermId,PreferredName,ParentType
     ================================================================== -->
               <xsl:if test="TermRelationship">
               <TermRelationship>
               <xsl:for-each select="TermRelationship">
               <xsl:for-each select="ParentTerm">
               <ParentTerm>
               <ParentTermName>
                <xsl:attribute name="ref">
                <xsl:value-of select="@cdr:ref"/>
                </xsl:attribute>
                <xsl:for-each select="PreferredName">
                <xsl:value-of select="."/>
                </xsl:for-each>
                </ParentTermName>
                <xsl:apply-templates select="ParentType" mode="copy"/>
                </ParentTerm>
                </xsl:for-each>
                 <xsl:for-each select="RelatedTerm">
               <RelatedTerm>
               <RelatedTermName>
                <xsl:attribute name="ref">
                <xsl:value-of select="@cdr:ref"/>
                </xsl:attribute>
                <xsl:for-each select="PreferredName">
                <xsl:value-of select="."/>
                </xsl:for-each>
                </RelatedTermName>
                <xsl:apply-templates select="RelationshipType" mode="copy"/>
                </RelatedTerm>
                </xsl:for-each>
                </xsl:for-each>
                </TermRelationship>
                </xsl:if>
               
<!-- ===================================================================
            Copy Date First Published and Date Last Modified
     ================================================================== -->
     <xsl:if test="DateFirstPublished">
     <xsl:apply-templates select="DateFirstPublished" mode="copy"/>
     </xsl:if>
     <xsl:if test="DateLastModified">
     <xsl:apply-templates select="DateLastModified" mode="copy"/>
     </xsl:if>
  </xsl:element>
  </xsl:template>



 <!-- ==================================================================
       Template rule used to do XML to XML transformations which
       copies any attribute node, or node that is child of of something 
      =================================================================== -->

  <!-- <xsl:template match="@*|node()" mode="copy">
       <xsl:copy>
       <xsl:apply-templates select="@*" mode="copy"/>
       <xsl:apply-templates mode="copy"/>
       </xsl:copy> 
    </xsl:template>-->

   <xsl:template                  match = "@*"
                                 mode = "copy">
  <xsl:copy/>
 </xsl:template>

 <xsl:template                  match = "*"
                                 mode = "copy">
  <xsl:element                   name = "{name()}">
   <xsl:apply-templates        select = "@*"
                                 mode = "copy"/>
   <xsl:apply-templates          mode = "copy"/> 
  </xsl:element>
 </xsl:template>

 <!--
 =======================================================================
 Suppress Comment nodes.
 ======================================================================= -->
 <xsl:template                  match = "Comment"/>

</xsl:transform>]]>
</CdrDocXml>
</CdrDoc>