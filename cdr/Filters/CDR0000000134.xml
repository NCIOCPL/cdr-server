<CdrDoc Type='Filter' Id='CDR0000000134'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Vendor Filter: Term</DocTitle>
<DocComment>CVS-V1.30: Case Insensitive Diff (Bug 2086)</DocComment><ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml  version = "1.0"?>
<!-- 
===================================================================
Filter to create the vendor Terminology XML 
=================================================================== -->
<xsl:transform               xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                             xmlns:cdr = "cips.nci.nih.gov/cdr"
                               version = "1.0">
    
 <xsl:output                    method = "xml" 
                  omit-xml-declaration = "no"/>

 <xsl:include  href = "cdr:name:Module: Vendor Filter Templates"/>
   
 <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
 <xsl:param                       name = "DateFirstPub"
                                select = "''"/> 
 <xsl:variable                    name = "whoAmI"
                                select = "'Term'"/>

 <!-- *
 ====================================================================
 Root element.
 ==================================================================== -->
 <xsl:template                   match = "*">
  <xsl:apply-templates/>
 </xsl:template>


 <!-- 
 ======================================================================
 Copy DocId, PreferredName, OtherTermName, OtherNameType
 ====================================================================== -->
 <xsl:template                   match = "Term">
  <xsl:element                    name = '{name()}'>   
   <xsl:attribute                 name = "id">
    <xsl:value-of               select = "DocId"/>
   </xsl:attribute>
   <xsl:attribute                 name = "LegacyPDQID">
    <xsl:value-of               select = "PdqKey"/>
   </xsl:attribute>
   <xsl:if                        test = "OtherName/
                                           SourceInformation/
                                           VocabularySource/
                                           SourceCode = 'NCI Thesaurus'
                                          and
                                          OtherName/
                                           SourceInformation/
                                           VocabularySource/
                                           SourceTermType = 'PT'">
    <xsl:attribute                name = "NCIThesaurusConceptID">
     <xsl:value-of              select = "normalize-space(
                                            OtherName/
                                            SourceInformation/
                                            VocabularySource/
                                            SourceTermId)"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates         select = "PreferredName" 
                                  mode = "copy"/>
   <xsl:apply-templates         select = "OtherName"/>
   <xsl:apply-templates         select = "Definition"/>
   <xsl:apply-templates         select = "TermType/TermTypeName"/>
   <xsl:apply-templates         select = "SemanticType"/>
   <xsl:copy-of                 select = "CTGovInterventionType"/>
   <xsl:apply-templates         select = "TermRelationship"/>
   <xsl:if                        test = "TermType/TermTypeName != 
                                                 'Obsolete term'">
    <xsl:apply-templates         select = "MenuInformation"/>
   </xsl:if>
               
   <!-- 
   ===================================================================
   Copy Date First Published and Date Last Modified
   =================================================================== -->
   <xsl:choose>
    <xsl:when                     test = "CdrDocCtl/FirstPub/Date">
     <DateFirstPublished>
      <xsl:value-of             select = "substring-before(CdrDocCtl/
                                            FirstPub/Date,'T')"/>
     </DateFirstPublished>
    </xsl:when>
    <xsl:otherwise>
     <xsl:call-template           name = "getDateFirstPub">
      <xsl:with-param             name = "date"
                                select = "$DateFirstPub"/>
     </xsl:call-template>    
    </xsl:otherwise>
   </xsl:choose>
 
   <xsl:apply-templates         select = "DateLastModified" 
                                  mode = "copy"/>
  </xsl:element>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the OtherName elements.
 Only display the other name if it is not identical to the Preferred
 Name.
 =================================================================== -->
 <xsl:template                   match = "OtherName">
  <xsl:if                         test = "translate(OtherTermName, 
                                             'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                                             'abcdefghijklmnopqrstuvwxyz') != 
                                          translate(../PreferredName,
                                             'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                                             'abcdefghijklmnopqrstuvwxyz')">
   <OtherName>
    <OtherTermName>
     <xsl:value-of              select = "normalize-space(OtherTermName)"/>
    </OtherTermName>
    <OtherNameType>
     <xsl:value-of              select = "OtherNameType"/>
    </OtherNameType>
   </OtherName>
  </xsl:if>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the Definition node but only if the 
 ReviewStatus is "Reviewed".
 =================================================================== -->
 <xsl:template                   match = "Definition">
  <xsl:if                         test = "ReviewStatus = 'Reviewed'">
   <xsl:copy>
    <xsl:apply-templates        select = "DefinitionText"/>
    <DefinitionType>
     <xsl:value-of              select = "DefinitionType"/>
    </DefinitionType>
   </xsl:copy>
  </xsl:if>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the DefinitionText node (without attributes) 
 and add three external Ref attributes.  
 Two attributes are contructed to display a clinical trials query
 listing documents either active or closed documents using this drug.
 The third external Ref lists the NCI Thesaurus entry for the given 
 concept ID
 =================================================================== -->
 <xsl:template                   match = "DefinitionText">
  <xsl:copy>
   <xsl:apply-templates           mode = "copy"/>

   <!--
   Conctruct the URL for NCI active trials using this drug
   ======================================================== -->
   <xsl:text> Check for </xsl:text>

   <xsl:element                   name = "ExternalRef">
    <xsl:attribute                name = "xref">
     <xsl:text>http://www.cancer.gov/Search/</xsl:text>
     <xsl:text>ClinicalTrialsLink.aspx?id=</xsl:text>
     <xsl:value-of              select = "number(
                                            substring-after
                                              (/Term/DocId, 'CDR'))"/>
     <xsl:text>&#x26;idtype=1</xsl:text>
    </xsl:attribute>
    <xsl:text>active clinical trials</xsl:text>
   </xsl:element>

   <!--
   Conctruct the URL for NCI closed trials using this drug
   ======================================================== -->
   <xsl:text> or </xsl:text>

   <xsl:element                   name = "ExternalRef">
    <xsl:attribute                name = "xref">
     <xsl:text>http://www.cancer.gov/Search/</xsl:text>
     <xsl:text>ClinicalTrialsLink.aspx?id=</xsl:text>
     <xsl:value-of              select = "number(
                                            substring-after
                                              (/Term/DocId, 'CDR'))"/>
     <xsl:text>&#x26;idtype=1&#x26;closed=1</xsl:text>
    </xsl:attribute>
    <xsl:text>closed clinical trials</xsl:text>
   </xsl:element>

   <xsl:text> using this agent.</xsl:text>

   <!--
   Conctruct the URL for NCI concept ID
   ======================================================== -->
   <xsl:text> (</xsl:text>
   <xsl:element                  name = "ExternalRef">
    <xsl:attribute               name = "xref">
     <xsl:text>http://ncit.nci.nih.gov/</xsl:text>
     <xsl:text>ncitbrowser/ConceptReport.jsp?</xsl:text>
     <xsl:text>dictionary=NCI%20Thesaurus&#x26;code=</xsl:text> 
     <xsl:value-of             select = "normalize-space(
                                            ../../OtherName/
                                            SourceInformation/
                                            VocabularySource/
                                            SourceTermId)"/>
    </xsl:attribute>
    <xsl:value-of              select = "../DefinitionSource/
                                          DefinitionSourceName"/>
   </xsl:element>
   <xsl:text>)</xsl:text>
  </xsl:copy>
 </xsl:template>


 <!--
 ===================================================================
 Template for TermTypeName
 =================================================================== -->
 <xsl:template                   match = "TermTypeName">
  <xsl:if                         test = ". = 
                                             'Protocol selection criteria' or
                                          . = 
                                             'Obsolete term'               or
                                          . = 
                                             'Header term'                or
                                          . = 
                                             'Semantic type'">

  <TermTypeName>
   <xsl:value-of                select = "."/>
  </TermTypeName>
  </xsl:if>
 </xsl:template>


 <!--
 ===================================================================
 =================================================================== -->
 <xsl:template                   match = "SemanticType">
  <SemanticType>
   <xsl:attribute                 name = "ref">
    <xsl:value-of               select = "Term/@cdr:ref"/>
   </xsl:attribute>
   <xsl:value-of                select = "Term/PreferredName"/>
  </SemanticType>
 </xsl:template>


 <!--
 ===================================================================
 Copy Term Relationship (Parent TermId,PreferredName,ParentType
 =================================================================== -->
 <xsl:template                   match = "TermRelationship">
  <TermRelationship>
   <xsl:apply-templates         select = "ParentTerm | RelatedTerm"/>
  </TermRelationship>
 </xsl:template>


 <!--
 ===================================================================
 Copy Term Relationship (Parent TermId,PreferredName,ParentType
 =================================================================== -->
 <xsl:template                   match = "ParentTerm">
  <ParentTerm>
   <ParentTermName>
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "TermId/Term/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "TermId/Term/PreferredName"/>
   </ParentTermName>
 
   <xsl:apply-templates         select = "ParentType" 
                                  mode = "copy"/>
  </ParentTerm>
 </xsl:template>


 <!--
 ===================================================================
 Copy Term Relationship (Parent TermId,PreferredName,ParentType
 =================================================================== -->
 <xsl:template                   match = "RelatedTerm">
  <RelatedTerm>
   <RelatedTermName>
    <xsl:attribute                name = "ref">
     <xsl:value-of              select = "TermId/Term/@cdr:ref"/>
    </xsl:attribute>
    <xsl:value-of               select = "TermId/Term/PreferredName"/>
   </RelatedTermName>
   <xsl:apply-templates         select = "RelationshipType" 
                                  mode = "copy"/>
  </RelatedTerm>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the MenuInformation element
 =================================================================== -->
 <xsl:template                   match = "MenuInformation">
  <!--
  Testing if a MenuStatus = 'Online' child element exists and if the 
  number of Public menuitems is not zero in order to determine if we will
  need the MenuInformation wrapper element.
  ======================================================================= -->
  <xsl:if                         test = "MenuItem[MenuStatus = 'Online']
                                          and
                                          count(MenuItem) &gt; 
                                           count(MenuItem[@Public])">
  <MenuInformation>
   <xsl:apply-templates         select = "MenuItem[MenuStatus = 'Online']"/>
  </MenuInformation>
  </xsl:if>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the MenuItem element as long as it is public.
 =================================================================== -->
 <xsl:template                   match = "MenuItem">
  <xsl:if                         test = "not(@Public)">
   <MenuItem>
    <xsl:if                       test = "@SortOrder">
     <xsl:attribute               name = "SortOrder">
      <xsl:value-of             select = "@SortOrder"/>
     </xsl:attribute>
    </xsl:if>

    <xsl:apply-templates        select = "MenuType" 
                                  mode = "copy"/>
    <xsl:apply-templates        select = "MenuParent"/>
    <xsl:apply-templates        select = "DisplayName" 
                                  mode = "copy"/>
   </MenuItem>
  </xsl:if>
 </xsl:template>


 <!--
 ===================================================================
 Template to display the MenuParent element
 =================================================================== -->
 <xsl:template                   match = "MenuParent">
  <MenuParent>
   <xsl:attribute name = "ref">
    <xsl:value-of select = "Term/@cdr:ref"/>
   </xsl:attribute>

   <xsl:apply-templates select = "Term/PreferredName"/>
  </MenuParent>
 </xsl:template>
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>