<CdrDoc Type='Filter' Id='CDR0000000134'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Vendor Filter: Term</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>

<!-- ===================================================================
       Filter to create the vendor Terminology XML 
     =================================================================== -->
  <xsl:transform             xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                               version = "1.0"
                             xmlns:cdr = "cips.nci.nih.gov/cdr" 
               exclude-result-prefixes = "cdr">
    
   <xsl:include href = "cdr:name:Module: Vendor Filter Templates"/>
   
   <xsl:output                   method = "xml" 
                  omit-xml-declaration = "no" 
                                indent = "yes"/>

  <!-- Stylesheet level parameter DateFirstPub, passed in from the caller -->
  <xsl:param                      name = "DateFirstPub"
                                select = "''"/> 

<!-- ======================================================================
      Copy DocId, PreferredName, OtherTermName, OtherNameType
     ==================================================================== -->

<xsl:template match="Term">

<xsl:text disable-output-escaping="yes">&lt;!DOCTYPE Term &gt;</xsl:text>

<xsl:element name='{name()}'>   
<xsl:for-each select="DocId">
<xsl:attribute name="id">
<xsl:value-of select="."/>
</xsl:attribute>
</xsl:for-each>
<xsl:if test="PdqKey">
<xsl:attribute name="LegacyPDQID">
<xsl:value-of select="PdqKey"/>
</xsl:attribute>
</xsl:if>  
<xsl:apply-templates   select="PreferredName" mode="copy"/>

<xsl:if test="OtherName">
<xsl:for-each select="OtherName">
<OtherName>
<OtherTermName><xsl:value-of   select="OtherTermName"/></OtherTermName>
<OtherNameType><xsl:value-of select="OtherNameType"/></OtherNameType>
</OtherName>
</xsl:for-each>
</xsl:if>

<xsl:for-each select="Definition">
<Definition>
<xsl:apply-templates  select="DefinitionText" mode="copy"/>
<DefinitionType><xsl:value-of  select="DefinitionType"/></DefinitionType>
</Definition>
</xsl:for-each>


      

<!-- ===================================================================
                    Copy TermType,SemanticTypeText
      code needs to be updated when ref is added to XML records
     ================================================================== -->  
<xsl:for-each select="TermType">
<xsl:for-each select="TermTypeName">
<xsl:if test=".='Protocol selection criteria'">
<TermTypeName><xsl:apply-templates select="."/></TermTypeName>
</xsl:if>
<xsl:if test=".='Obsolete term'">
<TermTypeName><xsl:apply-templates select="."/></TermTypeName>
</xsl:if>
<xsl:if test=".='Header term'">
<TermTypeName><xsl:apply-templates select="."/></TermTypeName>
</xsl:if>
<xsl:if test=".='Semantic type'">
<TermTypeName><xsl:apply-templates select="."/></TermTypeName>
</xsl:if>

</xsl:for-each>
</xsl:for-each>

<xsl:for-each select="SemanticType">
<xsl:variable name="ref" select="@ref"/>
<SemanticType ref="{$ref}"><xsl:value-of select="."/></SemanticType>
</xsl:for-each>

<!-- =================================================================
        Copy Term Relationship (Parent TermId,PreferredName,ParentType
     ================================================================== -->
               <xsl:if test="TermRelationship">
               <TermRelationship>
               <xsl:for-each select="TermRelationship">
               <xsl:for-each select="ParentTerm">
               <ParentTerm>
               <ParentTermName>
                <xsl:attribute name="ref">
                <xsl:value-of select="@cdr:ref"/>
                </xsl:attribute>
                <xsl:for-each select="PreferredName">
                <xsl:value-of select="."/>
                </xsl:for-each>
                </ParentTermName>
                <xsl:apply-templates select="ParentType" mode="copy"/>
                </ParentTerm>
                </xsl:for-each>
                 <xsl:for-each select="RelatedTerm">
               <RelatedTerm>
               <RelatedTermName>
                <xsl:attribute name="ref">
                <xsl:value-of select="@cdr:ref"/>
                </xsl:attribute>
                <xsl:for-each select="PreferredName">
                <xsl:value-of select="."/>
                </xsl:for-each>
                </RelatedTermName>
                <xsl:apply-templates select="RelationshipType" mode="copy"/>
                </RelatedTerm>
                </xsl:for-each>
                </xsl:for-each>
                </TermRelationship>
                </xsl:if>

        <!-- not to be implemented until June release of data 
          <xsl:if test="MenuInformation !=''">
          <MenuInformation>
          <xsl:for-each select="MenuInformation/MenuItem">
          <MenuItem>
          <xsl:if test="@SortOrder">
          <xsl:attribute name="SortOrder">
          <xsl:value-of select="@SortOrder"/>
          </xsl:attribute>
          </xsl:if>
          <xsl:apply-templates select="MenuType" mode="copy"/>
         <xsl:if test="MenuParent/@cdr:ref">
         <xsl:for-each select="MenuParent">
         <MenuParent>
         <xsl:attribute name="ref">
          <xsl:value-of select="@cdr:ref"/>
          </xsl:attribute>
          <xsl:apply-templates select="DisplayName"/>
          </MenuParent>
          </xsl:for-each>
          </xsl:if>
          <xsl:apply-templates select="DisplayName" mode="copy"/>
          </MenuItem>
          </xsl:for-each>
          </MenuInformation>
          </xsl:if>-->
               
<!-- ===================================================================
            Copy Date First Published and Date Last Modified
     ================================================================== -->
  <xsl:choose>
    <xsl:when                     test = "CdrDocCtl/FirstPub/Date">
      <DateFirstPublished>
      <xsl:value-of             select = "substring-before(CdrDocCtl/
                                            FirstPub/Date,'T')"/>
      </DateFirstPublished>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template          name = "getDateFirstPub">
        <xsl:with-param           name = "date"
                                select = "$DateFirstPub"/>
      </xsl:call-template>    
    </xsl:otherwise>
  </xsl:choose>

    
     <xsl:apply-templates select="DateLastModified" mode="copy"/>
     
  </xsl:element>
  </xsl:template>

</xsl:transform>]]>
</CdrDocXml>
</CdrDoc>