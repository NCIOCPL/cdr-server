<?xml version="1.0"?>

<!--myTitle>Protocol Denormalization Filter (InScope)</myTitle-->

<xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
               xmlns:cdr="cips.nci.nih.gov/cdr"
               version="1.0">

<xsl:output method="xml" 
            omit-xml-declaration="no"/>
  <xsl:template match="InScopeProtocol">
    <xsl:copy>

<!-- Copy second tier fields not containing reference links 
     ======================================================= -->
      <xsl:apply-templates 
             select="ProtocolIDs" 
             mode="copy"/>
      <xsl:apply-templates 
             select="FundingInfo" 
             mode="copy"/>
      <xsl:apply-templates 
             select="ProtocolSources" 
             mode="copy"/>
      <xsl:apply-templates 
             select="ProtocolApproval" 
             mode="copy"/>
      <xsl:apply-templates 
             select="ProtocolSponsors" 
             mode="copy"/>
      <xsl:apply-templates 
             select="ProtocolTitle" 
             mode="copy"/>

<!-- Copy second tier Protocol Abstract section by paragraph  
     since the glossary term refs need to be resolved within  
     ======================================================= -->
      <ProtocolAbstract>
      <xsl:apply-templates 
             select="ProtocolAbstract/Professional" 
             mode="copy"/>

      <Patient>
<!-- Resolve Glossary Term References and retrieve term definition, etc.
     in Rationale section
     =================================================================== -->
      <Rationale>
      <xsl:apply-templates 
             select="ProtocolAbstract/Patient/Rationale/Para" mode="copy"/>

      <xsl:for-each 
             select="ProtocolAbstract/Patient/Rationale/Para/GlossaryTermRef">
        <xsl:if test="contains(@cdr:href,'CDR')">
          <xsl:variable name="GlossID" select="@cdr:href"/>
          <xsl:variable name="GlossInfo" 
               select="document(concat('cdr:',$GlossID))"/>
          <GlossaryTerm>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermName" 
               mode="copy"/>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermPronunciation" 
               mode="copy"/>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermDefinition" 
               mode="copy"/>
          </GlossaryTerm>
        </xsl:if>
      </xsl:for-each>
      </Rationale>

<!-- Resolve Glossary Term References and retrieve term definition, etc.
     in Purpose section
     =================================================================== -->
      <Purpose>
      <xsl:apply-templates 
           select="ProtocolAbstract/Patient/Purpose/Para" 
           mode="copy"/>

      <xsl:for-each 
           select="ProtocolAbstract/Patient/Purpose/Para/GlossaryTermRef">
        <xsl:if test="contains(@cdr:href,'CDR')">
          <xsl:variable name="GlossID" select="@cdr:href"/>
          <xsl:variable name="GlossInfo" 
               select="document(concat('cdr:',$GlossID))"/>
          <GlossaryTerm>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermName" 
               mode="copy"/>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermPronunciation" 
               mode="copy"/>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermDefinition" 
               mode="copy"/>
          </GlossaryTerm>
        </xsl:if>
      </xsl:for-each>
      </Purpose>

<!-- Resolve Glossary Term References and retrieve term definition, etc.
     in EligibilityText section
     =================================================================== -->
      <EligibilityText>
      <xsl:apply-templates 
           select="ProtocolAbstract/Patient/EligibilityText/ItemizedList" 
           mode="copy"/>

      <xsl:for-each select="ProtocolAbstract/Patient/EligibilityText/ItemizedList/ListItem/GlossaryTermRef">
        <xsl:if test="contains(@cdr:href,'CDR')">
          <xsl:variable name="GlossID" select="@cdr:href"/>
          <xsl:variable name="GlossInfo" 
               select="document(concat('cdr:',$GlossID))"/>
          <GlossaryTerm>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermName" 
               mode="copy"/>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermPronunciation" 
               mode="copy"/>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermDefinition" 
               mode="copy"/>
          </GlossaryTerm>
        </xsl:if>
      </xsl:for-each>
      </EligibilityText>

<!-- Resolve Glossary Term References and retrieve term definition, etc.
     in TreatmentIntervention section
     =================================================================== -->
      <TreatmentIntervention>
      <xsl:apply-templates 
           select="ProtocolAbstract/Patient/TreatmentIntervention/Para" 
           mode="copy"/>

      <xsl:for-each select="ProtocolAbstract/Patient/TreatmentIntervention/Para/GlossaryTermRef">
        <xsl:if test="contains(@cdr:href,'CDR')">
          <xsl:variable name="GlossID" select="@cdr:href"/>
          <xsl:variable name="GlossInfo" 
               select="document(concat('cdr:',$GlossID))"/>
          <GlossaryTerm>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermName" 
               mode="copy"/>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermPronunciation" 
               mode="copy"/>
          <xsl:apply-templates 
               select="$GlossInfo/GlossaryTerm/TermDefinition" 
               mode="copy"/>
          </GlossaryTerm>
        </xsl:if>
      </xsl:for-each>
      </TreatmentIntervention>
          
      <xsl:apply-templates 
           select="ProtocolAbstract/Patient/EnteredBy" 
           mode="copy"/>
      <xsl:apply-templates 
           select="ProtocolAbstract/Patient/EntryDate" 
           mode="copy"/>

      </Patient>
      </ProtocolAbstract>

      <xsl:apply-templates 
           select="ProtocolPhase" 
           mode="copy"/>

      <ProtocolDetail>
      <xsl:for-each select="ProtocolDetail">
        <xsl:apply-templates 
             select="StudyType" 
             mode="copy"/>
      </xsl:for-each>

      <StudyCategory>
      <xsl:for-each select="ProtocolDetail">
        <xsl:for-each select="StudyCategory">
          
          <xsl:apply-templates 
               select="StudyCategoryType" 
               mode="copy"/>
          <xsl:apply-templates 
               select="StudyCategoryName" 
               mode="copy"/>
          <xsl:apply-templates 
               select="StudyFocus" 
               mode="copy"/>
                       
          <xsl:for-each select="Intervention">
            <Intervention>
            <xsl:if test="contains(InterventionType/@cdr:ref,'CDR')">
              <InterventionType>
              <xsl:variable name="IntervenID" 
                   select="InterventionType/@cdr:ref"/>

<!-- Check if Term document exists and create Doc Error element if it does
     not exist (to be detected via DocError Filter).
     ===================================================================== -->
              <xsl:choose>
                <xsl:when test="contains($IntervenID, 'CDR0000000000')">
                  <DocError>
                  <xsl:value-of select="$IntervenID"/>  
                  </DocError>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="IntervenInfo" 
                       select="document(concat('cdr:',$IntervenID))"/>
                  <xsl:apply-templates 
                       select="$IntervenInfo/Term/PreferredName"
                       mode="copy"/>
                </xsl:otherwise>
              </xsl:choose>
              </InterventionType>
            </xsl:if>

            <xsl:if test="contains(InterventionNameLink/@cdr:ref,'CDR')">
              <InterventionNameLink>
              <xsl:variable name="IntervenNameID"
                   select="InterventionNameLink/@cdr:ref"/>
              <xsl:variable name="IntervenNameInfo" select="document(concat('cdr:',$IntervenNameID))"/>
              <xsl:apply-templates 
                   select="$IntervenNameInfo/Term/PreferredName"
                   mode="copy"/>
              </InterventionNameLink>
            </xsl:if>
            </Intervention>
          </xsl:for-each>
        </xsl:for-each>   
      </xsl:for-each>
      </StudyCategory>
       
      <xsl:apply-templates 
           select="ProtocolDetail/EnteredBy" 
           mode="copy"/>
      <xsl:apply-templates 
           select="ProtocolDetail/EntryDate" 
           mode="copy"/>
      </ProtocolDetail>
       
      <xsl:apply-templates 
           select="Eligibility" 
           mode="copy"/>


<!-- Display citations for published results 
     ======================================= -->
      <xsl:if test="PublishedResults/Citation">
        <PublishedResults>
        <xsl:for-each 
             select="PublishedResults/Citation">
          <xsl:variable name="PubCit" 
               select="@cdr:ref"/>
          <xsl:variable name="CitInfo" 
               select="document(concat('cdr:',$PubCit))"/>

          <xsl:if test="$CitInfo/Citation/PDQCitation">
            <Citation>
            <CitationText>
            <xsl:for-each select="$CitInfo/Citation/PDQCitation">
              <xsl:for-each select="AuthorList/Author">
                <xsl:value-of select="concat(LastName,' ',FirstName)"/>
                <xsl:if test="position() !=last()">, </xsl:if>
              </xsl:for-each>

<!-- If the attribute Complete=No exists the author list text
     has to be added with et. al 
     ======================================================== -->
              <xsl:choose>
                <xsl:when test="contains(AuthorList/@Complete,'No')">
                  <xsl:text>, et.al.:</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>: </xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <xsl:value-of select="CitationTitle"/>.
              <xsl:text>&#xa;</xsl:text>
              <xsl:value-of select="PublicationDetails/PublishedIn"/>.
              <xsl:value-of 
                   select="PublicationDetails/OtherPublicationInformation"/>.
            </xsl:for-each>
            </CitationText>

            <!--xsl:apply-templates 
                 select="$CitInfo/Citation/PDQCitation/CancerLitID"
                 mode="copy"/-->
            <xsl:apply-templates 
                 select="$CitInfo/Citation/PDQCitation/CancerLitAbstract/AbstractText"
                 mode="copy"/>

            </Citation>
          </xsl:if>


<!-- test to determine if citation reference is a pubmed record -->
<!-- ========================================================== -->
          <xsl:if test="$CitInfo/Citation/PubmedArticle">
            <Citation>
            <xsl:if 
                  test="$CitInfo/Citation/PubmedArticle/MedlineCitation/Article/AuthorList">

              <xsl:for-each 
select="$CitInfo/Citation/PubmedArticle/MedlineCitation/Article/AuthorList/Author">
                <xsl:if test="position() &lt; 4">
                  <xsl:value-of select="concat(LastName,' ',Initials)"/>
                  <xsl:if test="position()!=3">,</xsl:if>
                  <xsl:text>&#xa;</xsl:text>
                </xsl:if>
              </xsl:for-each>

              <xsl:text> et al.:&#xa0;</xsl:text>
            </xsl:if>
            </Citation>
          </xsl:if>

          <xsl:for-each 
               select="$CitInfo/Citation/PubmedArticle/MedlineCitation/Article">
            <xsl:value-of select="ArticleTitle"/>
            <xsl:text>&#xa;</xsl:text>
          </xsl:for-each>

          <xsl:for-each 
   select="$CitInfo/Citation/PubmedArticle/MedlineCitation/MedlineJournalInfo/MedlineTA">
            <xsl:value-of select="."/>
            <xsl:text>&#xa;</xsl:text>
          </xsl:for-each>

          <xsl:for-each  
               select="$CitInfo/Citation/PubmedArticle/MedlineCitation/Article/Journal/JournalIssue">
            <xsl:text>&#xa;</xsl:text>
            <xsl:value-of select="concat(Volume,'(',Issue,')',': ')"/>
          </xsl:for-each>

          <xsl:for-each 
                select="$CitInfo/Citation/PubmedArticle/MedlineCitation/Article/Pagination">
            <xsl:value-of select="concat(MedlinePgn,', ')"/>
          </xsl:for-each>

          <xsl:for-each   
               select="$CitInfo/Citation/PubmedArticle/PubmedData/History/PubMedPubDate[1]/Year">
            <xsl:value-of select="."/>
            <xsl:text>.&#xa;</xsl:text>
          </xsl:for-each>
        </xsl:for-each>
        </PublishedResults>
      </xsl:if>


      <ProtocolAdminInfo>
      <xsl:apply-templates 
           select="ProtocolAdminInfo/CurrentProtocolStatus" 
           mode="copy"/>

      <ProtocolLeadOrg>
      <xsl:for-each 
           select="ProtocolAdminInfo/ProtocolLeadOrg/LeadOrganizationID">
         
        <xsl:if test="contains(@cdr:ref,'CDR')">
          <xsl:variable name="OrgID" 
               select="@cdr:ref"/>
          <xsl:variable name="OrgInfo" 
               select="document(concat('cdr:',$OrgID))"/>

          <xsl:apply-templates 
         select="$OrgInfo/Organization/OrganizationNameInformation/OfficialName"
               mode="copy"/>
          <xsl:apply-templates 
            select="$OrgInfo/Organization/OrganizationNameInformation/ShortName"
               mode="copy"/>
        </xsl:if>
      </xsl:for-each>

      <xsl:apply-templates 
           select="ProtocolAdminInfo/ProtocolLeadOrg/LeadOrgRole" 
           mode="copy"/>
      <xsl:apply-templates 
           select="ProtocolAdminInfo/ProtocolLeadOrg/LeadOrgProtocolID" 
           mode="copy"/>
      <xsl:apply-templates 
           select="ProtocolAdminInfo/ProtocolLeadOrg/LeadOrgProtocolStatuses" 
           mode="copy"/>

<!-- If the person does not have an address listed we need to retrieve
     the organization address instead.
     ================================================================= -->
      <xsl:for-each
           select="ProtocolAdminInfo/ProtocolLeadOrg/LeadOrgPersonnel/Person">
        <LeadOrgPersonnel>
        <Person>
        <xsl:if test="contains(@cdr:ref,'CDR')">
          <xsl:variable name="PersonID" 
               select="substring-before(@cdr:ref, '#')"/>
          <xsl:variable name="CIPSContact" 
               select="substring-after(@cdr:ref, '#')"/>
          <xsl:variable name="PersonInfo" 
               select="document(concat('cdrx:',$PersonID))"/>
          <xsl:value-of select="$PersonID"/>
          <xsl:value-of select="$CIPSContact"/>
          <xsl:if test="$PersonInfo='CDR000019823'">
            <xsl:message terminate="yes">
              <xsl:text>PersonInfo = $PersonInfo</xsl:text>
            </xsl:message>
          </xsl:if>
          <!--xsl:apply-templates 
               select="$PersonInfo/Person/PersonNameInformation"
               mode="copy"/-->


<!-- Person Address     START -->
<!-- ======================== -->
<!-- If the person does not have a specific address (a.k.a street) pick up 
     the address from the organization instead.  
     ===================================================================== -->
          <!-- xsl:choose>
            <xsl:when 
               test="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/SpecificPostalAddress/Street">

              <xsl:apply-templates 
                   select="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/SpecificPostalAddress/Street"
                   mode="copy"/>
              <xsl:apply-templates 
                   select="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/SpecificPostalAddress/City"
                   mode="copy"/>
            </xsl:when-->
<!--            <xsl:otherwise>
              <xsl:for-each 
                 select="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/OrganizationLocation">
                <xsl:if test="contains(@cdr:ref,'CDR')">
                  <xsl:variable name="OrgAddressID" 
                       select="substring-before(@cdr:ref, '#')"/>
                  <xsl:variable name="OrgAddressSub" 
                       select="substring-after(@cdr:ref, '#')"/>
                  <xsl:variable name="OrgAddressInfo" 
                       select="document(concat('cdr:',$OrgAddressID))"/>
                  <xsl:apply-templates 
                    select="$OrgAddressInfo/Organization/OrganizationLocations/OrganizationLocation/Location[@cdr:id=$OrgAddressSub]/PostalAddress/Street"
                       mode="copy"/>
                  <xsl:apply-templates 
                    select="$OrgAddressInfo/Organization/OrganizationLocations/OrganizationLocation/Location[@cdr:id=$OrgAddressSub]/PostalAddress/City"
                       mode="copy"/>

                  <!X- Resolve State Information X->
                  <xsl:for-each 
               select="$OrgAddressInfo/Organization/OrganizationLocations/OrganizationLocation/Location[@cdr:id=$OrgAddressSub]/PostalAddress/PoliticalSubUnit_State">
                    <xsl:if test="contains(@cdr:ref,'CDR')">
                      <xsl:variable name="StateAddressID" 
                           select="@cdr:ref"/>
                      <xsl:variable name="StateAddressInfo" 
                           select="document(concat('cdr:',$StateAddressID))"/>
                      <xsl:apply-templates 
             select="$StateAddressInfo/PoliticalSubUnit/PoliticalSubUnitFullName"
                           mode="copy"/>
                      <xsl:apply-templates 
            select="$StateAddressInfo/PoliticalSubUnit/PoliticalSubUnitShortName"
                           mode="copy"/>
                    </xsl:if>
                  </xsl:for-each>

                  <xsl:apply-templates 
                    select="$OrgAddressInfo/Organization/OrganizationLocations/OrganizationLocation/Location[@cdr:id=$OrgAddressSub]/PostalAddress/PostalCode_ZIP"
                       mode="copy"/>

                  <!X- Resolve Country X->
                  <xsl:for-each select="$OrgAddressInfo/Organization/OrganizationLocations/OrganizationLocation/Location[@cdr:id=$OrgAddressSub]/PostalAddress/Country">
                    <xsl:if test="contains(@cdr:ref,'CDR')">
                      <xsl:variable name="CountryAddressID" 
                           select="@cdr:ref"/>
                      <xsl:variable name="CountryAddressInfo" 
                           select="document(concat('cdr:',$CountryAddressID))"/>
                      <xsl:apply-templates 
                          select="$CountryAddressInfo/Country/PostalCodePosition"
                           mode="copy"/>
                      <xsl:apply-templates 
                           select="$CountryAddressInfo/Country/CountryFullName"
                           mode="copy"/>
                      <xsl:apply-templates 
                           select="$CountryAddressInfo/Country/CountryShortName"
                           mode="copy"/>
                    </xsl:if>
                  </xsl:for-each>
                </xsl:if>
              </xsl:for-each>
            </xsl:otherwise>
          </xsl:choose-->
<!-- Person Address     END   -->
<!-- ======================== -->


<!-- Get the country and resolve link by retrieving FullName, 
     Short Name, and ZIP Position from Country record 
     ======================================================== -->
          <xsl:for-each select="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/SpecificPostalAddress/PoliticalSubUnit_State">
            <xsl:if test="contains(@cdr:ref,'CDR')">
              <xsl:variable name="StateID" 
                   select="@cdr:ref"/>
              <xsl:variable name="StateInfo" 
                   select="document(concat('cdr:',$StateID))"/>
              <xsl:apply-templates 
                   select="$StateInfo/PoliticalSubUnit/PoliticalSubUnitFullName"
                   mode="copy"/>
              <xsl:apply-templates 
                   select="$StateInfo/PoliticalSubUnit/PoliticalSubUnitShortName"
                   mode="copy"/>
            </xsl:if>
          </xsl:for-each>

          <xsl:apply-templates 
               select="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/SpecificPostalAddress/PostalCode_ZIP"
               mode="copy"/>
<!--xsl:apply-templates 
        select="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/SpecificPostalAddress/Country" mode="copy"/-->

<!-- Get the country and resolve link by retrieving FullName, 
     Short Name, and ZIP Position from Country record 
     ======================================================== -->
          <xsl:for-each select="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/SpecificPostalAddress/Country">
            <xsl:if test="contains(@cdr:ref,'CDR')">
              <xsl:variable name="CountryID" 
                   select="@cdr:ref"/>
              <xsl:variable name="CountryInfo" 
                   select="document(concat('cdr:',$CountryID))"/>
              <xsl:apply-templates 
                   select="$CountryInfo/Country/PostalCodePosition"
                   mode="copy"/>
              <xsl:apply-templates 
                   select="$CountryInfo/Country/CountryFullName"
                   mode="copy"/>
              <xsl:apply-templates 
                   select="$CountryInfo/Country/CountryShortName"
                   mode="copy"/>
            </xsl:if>
          </xsl:for-each>

<!-- If the person does have a phone we want to pick up this phone.
     otherwise retrieve the organization phone
     ========================================================== -->
          <xsl:choose>
            <xsl:when 
                 test="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/SpecificPhone">
              <Phone>
              <xsl:apply-templates
                select="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/SpecificPhone"/>
              </Phone>
            </xsl:when>
            <xsl:otherwise>
              <xsl:for-each 
                 select="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/OrganizationLocation">
                <xsl:if test="contains(@cdr:ref,'CDR')">
                  <xsl:variable name="OrgID" 
                       select="substring-before(@cdr:ref, '#')"/>
                  <xsl:variable name="OrgSub" 
                       select="substring-after(@cdr:ref, '#')"/>
                  <xsl:variable name="OrgInfo" 
                       select="document(concat('cdr:',$OrgID))"/>
                  <xsl:apply-templates 
                    select="$OrgInfo/Organization/OrganizationLocations/OrganizationLocation/Location[@cdr:id=$OrgSub]/Phone"
                       mode="copy"/>
                  <xsl:apply-templates 
                    select="$OrgInfo/Organization/OrganizationLocations/OrganizationLocation/Location[@cdr:id=$OrgSub]/TollFreePhone"
                       mode="copy"/>
                  <xsl:apply-templates 
                    select="$OrgInfo/Organization/OrganizationLocations/OrganizationLocation/Location[@cdr:id=$OrgSub]/Fax"
                       mode="copy"/>
                </xsl:if>
              </xsl:for-each>
            </xsl:otherwise>
          </xsl:choose>

          <xsl:apply-templates 
               select="$PersonInfo/Person/PersonLocations/OtherPracticeLocation[@cdr:id=$CIPSContact]/SpecificEmail"
               mode="copy"/>
        </xsl:if>       
        </Person>

        <PersonRole>
        <xsl:apply-templates select="../PersonRole"/>
        </PersonRole>

        </LeadOrgPersonnel>
       
      </xsl:for-each>
      </ProtocolLeadOrg>

      </ProtocolAdminInfo>
       
      <xsl:apply-templates 
           select="DateLastModified" 
           mode="copy"/>
      <xsl:apply-templates 
           select="PdqKey" 
           mode="copy"/>
    </xsl:copy>
  </xsl:template>


<!-- Template rule used to do XML to XML transformations which
     copies any attribute node, or node that is child of of something 
     ================================================================ -->
  <xsl:template match="@*|node()" mode="copy">
    <xsl:copy>
      <xsl:apply-templates select="@*" mode="copy"/>
      <xsl:apply-templates mode="copy"/>
    </xsl:copy>
  </xsl:template>
</xsl:transform>

