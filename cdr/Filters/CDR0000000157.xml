<CdrDoc Type='Filter' Id='CDR0000000157'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Vendor Filter: Summary</DocTitle>
<DocComment>CVS-V1.37: New Summary Denormalization (Bug 767)</DocComment><ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml     version = "1.0"?>
<!--
================================================================
$Id: CDR0000000157.xml,v 1.53 2007-03-13 18:50:44 venglisc Exp $

Filter to create summary vendor output data.
   Written by Volker Englisch, 2003-08-12

$Log: not supported by cvs2svn $
================================================================ -->
<xsl:transform              xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                            xmlns:cdr = "cips.nci.nih.gov/cdr"
                              version = "1.0">

 <xsl:output                   method = "xml" 
                 omit-xml-declaration = "no"
                             encoding = "UTF-8"/>

 <xsl:include href = "cdr:name:Module: Vendor Filter Templates"/>

 <!-- 
 Stylesheet level parameter DateFirstPub, passed in from the caller
 ================================================================== -->
 <xsl:param                      name = "DateFirstPub" 
                               select = "''"/>
 <xsl:variable                    name = "whoAmI"
                                select = "'Summary'"/>

 <!--
 Variables needed to identify display of certain misc documents based on 
 document type
 ======================================================================= -->
 <xsl:variable                   name = "language"
                               select = "/Summary/
                                          SummaryMetaData/
                                          SummaryLanguage"/>
 <xsl:variable                   name = "sumType"
                               select = "/Summary/
                                          SummaryMetaData/
                                          SummaryType"/>
 <xsl:variable                   name = "sumId" 
                               select = "/Summary/
                                          DocId"/>
 <xsl:variable                   name = "ageGroup">
  <xsl:choose>
   <xsl:when                     test = "contains(/Summary/
                                                   SummaryMetaData/
                                                   PDQBoard/
                                                   Board, 'Pediatric')">
    <xsl:text>Pediatric</xsl:text>
   </xsl:when>
   <xsl:otherwise>
    <xsl:text>Adult</xsl:text>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:variable>

 <!-- 
 ===========================================================
 Root element
 =========================================================== -->
 <xsl:template                  match = "*" >
  <xsl:apply-templates/>
 </xsl:template>

 <!-- 
 ===========================================================
 Document element.
 =========================================================== -->
 <xsl:template                  match = "Summary">
  <xsl:variable                  name = "camBoard" 
                               select = "concat('PDQ Cancer Complementary ', 
                                                  'and Alternative Medicine ',
                                                  'Editorial Board')"/>
  <!-- 
  Creating Document Element and adding Doc ID as attribute
  ======================================================== -->
  <Summary>
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "DocId"/>
   </xsl:attribute>

   <!-- 
   LegacyPDQID should not be displayed for CAM summaries 
   ===================================================== -->
   <xsl:if                       test = "not(SummaryMetaData/PDQBoard/
                                                        Board = $camBoard)">
    <xsl:attribute               name = "LegacyPDQID">
     <xsl:value-of             select = "PdqKey"/>
    </xsl:attribute>
   </xsl:if>

   <!-- 
   If multiple ReplacementFor elements exist, the CDR Doc IDs will
   need to be displayed space separated.                        
   =============================================================== -->
   <xsl:if                       test = "ReplacementFor">
    <xsl:attribute               name = "ReplacementFor">
     <xsl:for-each             select = "ReplacementFor">
      <xsl:value-of            select = "@cdr:ref"/>
      <xsl:if                    test = "position() != last()">
       <xsl:text> </xsl:text>
      </xsl:if>
     </xsl:for-each>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates        select = "SummaryMetaData"/>
   <xsl:apply-templates        select = "SummaryTitle"
                                 mode = "copy"/>

   <!-- 
   Display all of the SummarySection elements and attach the 
   "More Information" misc documents based on the summary type. 
   ============================================================== -->
   <xsl:apply-templates        select = "SummarySection"/>

   <!-- 
   =============================================================
   Display the About PDQ and To Learn More misc documents
   based on the entries of 
   Language        - English, Spanish
   SummaryAudience - Patient (only Patient summaries get this)
   SummaryType     - Treatment, CAM, etc...
   EditorialBoard  - Pediatric, Adult  
   ============================================================= -->   
   <xsl:choose>
    <xsl:when                    test = "SummaryMetaData/
                                         SummaryAudience = 'Patients'">
     <!--
     The ContactUs template is only being applied to Supportive Care,
     Screening, and Prevention summaries (Patient and HP version).
     ================================================================ -->
     <xsl:call-template          name = "ContactUs"/>

     <xsl:choose>
      <xsl:when                  test = "SummaryMetaData/
                                         SummaryType = 
                                           concat('Complementary and ',
                                                  'alternative medicine')">
       <!--
       We add the misc. documents to all CAM patient summaries except for 
       the two Overview summaries (English and Spanish)
       ================================================================== -->
       <xsl:if                   test = "$sumId != 'CDR0000446574'
                                         and
                                         $sumId != 'CDR0000448614'">

<!--    NOTE  *** NOTE *** NOTE *** NOTE *** NOTE *** NOTE *** NOTE *** NOTE
        You must replace the IDs of the two CAM Patient Overview summaries 
        to reflect the BACH IDs before versioning !!!
        CAM Patient IDs on MAHLER
                                         $sumId = 'CDR0000437936')
                                         $sumId = 'CDR0000437936')
        CAM Patient IDs on BACH
                                         $sumId = 'CDR0000446574')
                                         $sumId = 'CDR0000448614')
        This comment can be removed after the next refresh of the CDR database
        on MAHLER.  VE, 2005-09-22
        NOTE  *** NOTE *** NOTE *** NOTE *** NOTE *** NOTE *** NOTE *** NOTE
-->
        <xsl:choose>
         <xsl:when               test = "SummaryMetaData/
                                         SummaryLanguage = 'English'">
          <xsl:call-template     name = "AboutPdqEnglish"/>
         </xsl:when>
         <xsl:otherwise>
          <xsl:call-template     name = "AboutPdqSpanish"/>
         </xsl:otherwise>
        </xsl:choose>

        <!--
        The CAM patient summaries receive two additional misc documents
        =============================================================== -->
        <xsl:call-template       name = "QandACAM"/>
        <xsl:call-template       name = "ToLearnMore"/>
       </xsl:if>
      </xsl:when>
      <xsl:otherwise>
       <xsl:call-template        name = "ToLearnMore"/>

       <xsl:choose>
        <xsl:when                test = "SummaryMetaData/
                                         SummaryLanguage = 'English'">
         <xsl:call-template      name = "AboutPdqEnglish"/>
        </xsl:when>
        <xsl:otherwise>
         <xsl:call-template      name = "AboutPdqSpanish"/>
        </xsl:otherwise>
       </xsl:choose>

      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <!-- HP Summaries -->
    <xsl:otherwise>
     <!--
     The ContactUs template is only being applied to Supportive Care,
     Screening, and Prevention summaries (Patient and HP version).
     ================================================================ -->
     <xsl:call-template          name = "ContactUs"/>

     <xsl:call-template          name = "MoreInformation"/>

    </xsl:otherwise>
   </xsl:choose>
   <!-- HP Summaries End-->

   <xsl:if                       test = "TranslationOf">
    <TranslationOf>
     <xsl:attribute              name = "ref">
      <xsl:value-of            select = "TranslationOf/@cdr:ref"/>
     </xsl:attribute>
    </TranslationOf>
   </xsl:if>

   <xsl:if                       test = "PatientVersionOf">
    <PatientVersionOf>
     <xsl:attribute              name = "ref">
      <xsl:value-of            select = "PatientVersionOf/@cdr:ref"/>
     </xsl:attribute>
    </PatientVersionOf>
   </xsl:if>

   <!-- 
   ===================================================================
   Copy Date First Published and Date Last Modified
   =================================================================== -->
   <xsl:variable                 name = "CtrlBlk" 
                               select = "document('cdr:/*/CdrCtl')"/>
   <xsl:choose>
    <xsl:when                    test = "$CtrlBlk/CdrDocCtl/FirstPub/Date">
     <DateFirstPublished>
      <xsl:value-of            select = "substring-before($CtrlBlk/
                                            CdrDocCtl/FirstPub/Date,'T')"/>
     </DateFirstPublished>
    </xsl:when>
    <xsl:otherwise>
     <xsl:call-template          name = "getDateFirstPub">
      <xsl:with-param            name = "date"
                               select = "$DateFirstPub"/>
     </xsl:call-template>    
    </xsl:otherwise>
   </xsl:choose>

   <xsl:apply-templates        select = "DateLastModified"
                               mode   = "copy"/>
  </Summary>
 </xsl:template>


 <!-- 
 ==================================================================
 SummarySection Template
 ================================================================== -->  
 <xsl:template                  match = "SummarySection">
  <SummarySection>
   <xsl:if                       test = "./@cdr:id">
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "./@cdr:id"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>
  </SummarySection>
 </xsl:template>


 <!-- 
 ==================================================================
 SectMetaData Template
 ================================================================== -->  
 <xsl:template                  match = "SectMetaData">
  <SectMetaData>
   <xsl:apply-templates        select = "Diagnosis"/>
   <xsl:apply-templates        select = "SectionType"
                                 mode = "copy"/>
  </SectMetaData>
 </xsl:template>


 <!-- 
 ==================================================================
 SpecificDiagnosis Template
 ================================================================== -->  
 <xsl:template                  match = "Diagnosis">
  <SpecificDiagnosis>
   <xsl:attribute                name = "ref">
    <xsl:value-of              select = "@cdr:ref"/>
   </xsl:attribute> 

   <xsl:value-of               select = "."/>
  </SpecificDiagnosis>
 </xsl:template>


 <!-- 
 ==================================================================
 Template to create the Reference Section for each SummarySection
 ================================================================== -->  
 <xsl:template                  match = "ReferenceList">
  <!-- 
  Create the Reference Section of the summary section
  =================================================== -->
  <ReferenceSection>
   <xsl:for-each               select = "Citation">
    <Citation>
     <xsl:attribute              name = "idx">
      <xsl:value-of            select = "./@refidx"/>
     </xsl:attribute>
     <xsl:if                     test = "./@PMID">
      <xsl:attribute             name = "PMID">
       <xsl:value-of           select = "./@PMID"/>
      </xsl:attribute>
     </xsl:if>
     <xsl:if                     test = "./@MedlineID">
      <xsl:attribute             name = "MedlineID">
       <xsl:value-of           select = "./@MedlineID"/>
      </xsl:attribute>
     </xsl:if>
     <xsl:if                     test = "./@ProtocolID">
      <xsl:attribute             name = "ProtocolID">
       <xsl:value-of           select = "./@ProtocolID"/>
      </xsl:attribute>
     </xsl:if>
     <xsl:apply-templates/>
    </Citation>
   </xsl:for-each>
  </ReferenceSection>
 </xsl:template>


 <!-- 
 ===================================================================
 Template for extracting Summary Ref Definition
 Note:  The SummaryFragmentRef and LOEFragmentRef elements do 
        not exist in the vendor DTD.  These elements are 
        therefore mapped to the SummaryRef/LOERef elements instead.
 =================================================================== -->
 <xsl:template                  match = "SummaryRef | SummaryFragmentRef |
                                         LOERef     | LOEFragmentRef">
  <xsl:choose>
   <xsl:when                     test = "(name() = 'SummaryRef') or
                                         (name() = 'SummaryFragmentRef')">
    <SummaryRef>
     <xsl:attribute              name = "href">
      <xsl:value-of            select = "@cdr:href"/>
     </xsl:attribute>
     <xsl:apply-templates/>
    </SummaryRef>
   </xsl:when>
   <xsl:otherwise>
    <LOERef>
     <xsl:attribute              name = "href">
      <xsl:value-of            select = "@cdr:href"/>
     </xsl:attribute>
     <xsl:apply-templates/>
    </LOERef>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ==================================================================
 SummaryMetaData Template
 ================================================================== -->  
 <xsl:template                  match = "SummaryMetaData">
  <SummaryMetaData>
   <xsl:apply-templates        select = "SummaryType"
                                 mode = "copy"/>
   <xsl:apply-templates        select = "SummaryAudience"
                                 mode = "copy"/>
   <xsl:apply-templates        select = "SummaryLanguage"
                                 mode = "copy"/>
   <xsl:apply-templates        select = "SummaryDescription"
                                 mode = "copy"/>
   <xsl:apply-templates        select = "SummaryURL"
                                 mode = "copy"/>
   <xsl:apply-templates        select = "MainTopics"/>
   <xsl:apply-templates        select = "SecondaryTopics"/>
  </SummaryMetaData>
 </xsl:template>


 <!-- 
 ============================================================= 
 Create the Para template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ============================================================= -->
 <xsl:template                  match = "MainTopics">
  <MainTopics>
   <xsl:apply-templates        select = "Term"/>
  </MainTopics>
 </xsl:template>
    

 <!-- 
 ============================================================= 
 Create the Para template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ============================================================= -->
 <xsl:template                  match = "SecondaryTopics">
  <SecondaryTopics>
   <xsl:apply-templates        select = "Term"/>
  </SecondaryTopics>
 </xsl:template>
   

 <!-- 
 ============================================================= 
 Create the Para template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ============================================================= -->
 <xsl:template                  match = "Term">
   <TermRef>
    <xsl:attribute               name = "ref">
     <xsl:value-of             select = "@cdr:ref"/>
    </xsl:attribute>

    <xsl:value-of              select = "."/>
   </TermRef>
 </xsl:template>
    


 <!-- 
 ============================================================= 
 Create the Para template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ============================================================= -->
 <xsl:template                  match = "Para">
  <xsl:if                        test = "normalize-space(.)">
   <Para>
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "./@cdr:id"/>
    </xsl:attribute>
    <xsl:apply-templates/>
   </Para>
  </xsl:if>
 </xsl:template>
    

 <!-- 
 ============================================================= 
 Create the Para template including the renamed attribute for 
 the paragraph IDs.
 Displaying by default the 'To Learn More' misc document.
 ============================================================= -->
 <xsl:template                  match = "Para"
                                 mode = "MiscText">
  <xsl:param                     name = "miscDocId"/>
  <Para>
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "concat($miscDocId, ./@cdr:id)"/>
   </xsl:attribute>
   <xsl:apply-templates        select = "Para" 
                                 mode = "copy"/>
   <xsl:apply-templates/>
  </Para>
 </xsl:template>
    

 <!-- 
 ============================================================= 
 Create the Title template 
 ============================================================= -->
 <xsl:template                  match = "Title   | AltTitle">
  <xsl:element                   name = "{name()}">
   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>
    

 <!-- 
 ============================================================= 
 Create the Title template for the Misc Text section
 ============================================================= -->
 <xsl:template                  match = "Title"
                                 mode = "MiscText">
  <xsl:apply-templates         select = "." 
                                 mode = "copy"/>
 </xsl:template>
    

 <!-- 
 ==================================================================== 
 Create the ItemizedList template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ==================================================================== -->
 <xsl:template                  match = "ItemizedList">
  <xsl:param                     name = "miscDocId"/>

  <ItemizedList>
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "concat($miscDocId, ./@cdr:id)"/>
   </xsl:attribute>
   <xsl:if                       test = "./@Style">
    <xsl:attribute               name = "Style">
     <xsl:value-of             select = "./@Style"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                       test = "./@Compact">
    <xsl:attribute               name = "Compact">
     <xsl:value-of             select = "./@Compact"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates/>
  </ItemizedList>
 </xsl:template>
    

 <!-- 
 ==================================================================== 
 Create the ItemizedList template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ==================================================================== -->
 <xsl:template                  match = "ItemizedList"
                                 mode = "MiscText">
  <xsl:param                     name = "miscDocId"/>

   <ItemizedList>
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "concat($miscDocId, ./@cdr:id)"/>
    </xsl:attribute>
    <xsl:if                      test = "./@Style">
     <xsl:attribute              name = "Style">
      <xsl:value-of            select = "./@Style"/>
     </xsl:attribute>
    </xsl:if>
    <xsl:if                      test = "./@Compact">
     <xsl:attribute              name = "Compact">
      <xsl:value-of            select = "./@Compact"/>
     </xsl:attribute>
    </xsl:if>
    <xsl:apply-templates/>
   </ItemizedList>
 </xsl:template>
    

 <!-- 
 ==================================================================== 
 Create the OrderedList template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ==================================================================== -->
 <xsl:template                  match = "OrderedList">
  <OrderedList>
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "./@cdr:id"/>
   </xsl:attribute>
   <xsl:if                       test = "./@Style">
    <xsl:attribute               name = "Style">
     <xsl:value-of             select = "./@Style"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                       test = "./@Compact">
    <xsl:attribute               name = "Compact">
     <xsl:value-of             select = "./@Compact"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates/>
  </OrderedList>
 </xsl:template>
    

 <!-- 
 ==================================================================== 
 Create the ListTitle
 ==================================================================== -->
 <xsl:template                  match = "ListTitle">
  <ListTitle>
   <xsl:apply-templates/>
  </ListTitle>
 </xsl:template>
    

 <!-- 
 ==================================================================== 
 Create the OrderedList template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ==================================================================== -->
 <xsl:template                  match = "ListItem">
  <xsl:if                        test = "not(translate(., ' ', '') = '')">
   <ListItem>
    <xsl:apply-templates/>
   </ListItem>
  </xsl:if>
 </xsl:template>
    

 <!-- 
 ================================================================ 
 Create the KeyPoint template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ================================================================ -->
 <xsl:template                  match = "KeyPoint">
  <KeyPoint>
   <xsl:attribute          name = "id">
    <xsl:value-of       select = "./@cdr:id"/>
   </xsl:attribute>

   <xsl:apply-templates/>

  </KeyPoint>
 </xsl:template>
    

 <!-- 
 ============================================================= 
 Create the Citation template including the renamed attribute 
 for the Citation ref.
 The template displayes the refidx entries embedded within the 
 text.
 ============================================================= -->
 <xsl:template                  match = "Citation">
  <xsl:if                      test = "not(name(..) = 'ReferenceList')">
   <Reference>
    <xsl:attribute              name = "refidx">
     <xsl:value-of            select = "./@refidx"/>
    </xsl:attribute>
   </Reference>
  </xsl:if>
 </xsl:template>


 <!-- 
 ============================================================= 
 Create the GlossaryTermRef template and rename the attribute 
 (cdr:href ID needs to be renamed to href).
 ============================================================= -->
 <xsl:template                  match = "GlossaryTermRef |
                                         MediaRef">
    <xsl:element              name = "{name()}">
      <xsl:attribute          name = "href">
        <xsl:value-of       select = "./@cdr:href"/>
      </xsl:attribute>
      <xsl:value-of         select = "."/>
    </xsl:element>
 </xsl:template>


 <!-- 
 ==============================================================
 Template for TT tag
 ============================================================== -->
 <xsl:template                  match = "TT">
  <TT>
   <xsl:if                       test = "./@cdr:id">
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "./@cdr:id"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:apply-templates/>
  </TT>
 </xsl:template>


 <!-- 
 ==================================================================
 Create the QandAEntry template including the renamed attribute for 
 the paragraph IDs. (cdr:ref ID needs to be renamed to id).
 ================================================================== -->
 <xsl:template                  match = "QandAEntry">
   <QandAEntry>
    <xsl:attribute               name = "id">
     <xsl:value-of             select = "./@cdr:id"/>
    </xsl:attribute>
    <xsl:apply-templates/>
   </QandAEntry>
 </xsl:template>
    

 <!-- 
 =========================================================================
 Template for in-line mark-up
 ========================================================================= -->
 <xsl:template                  match = "Emphasis       | Strong         |
                                         Subscript      | Superscript    |
                                         GeneName       | ScientificName |
                                         ForeignName    | Note           |
                                         QandASet       | 
                                         QandADiv       | MarkedUpTitle  |
                                         Question       | Answer">
  <xsl:element                   name = "{name()}">
   <xsl:apply-templates/>
  </xsl:element>
 </xsl:template>


 <!-- 
 ====================================================================
 Templats needed for Table display
 ==================================================================== -->
 <!-- 
 ==================================================================== 
 Create the Table template including the renamed attribute for 
 the attribute ID. (cdr:ref ID needs to be renamed to id).
 ==================================================================== -->
 <xsl:template                  match = "Table">
  <Table>
   <xsl:attribute                name = "id">
    <xsl:value-of              select = "./@cdr:id"/>
   </xsl:attribute>
   <xsl:if                       test = "./@ColSep">
    <xsl:attribute               name = "ColSep">
      <xsl:value-of            select = "./@ColSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                       test = "./@Frame">
    <xsl:attribute               name = "Frame">
     <xsl:value-of             select = "./@Frame"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                       test = "./@RowSep">
    <xsl:attribute               name = "RowSep">
     <xsl:value-of             select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                       test = "./@TabStyle">
    <xsl:attribute               name = "TabStyle">
     <xsl:value-of             select = "./@TabStyle"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </Table>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "TitleAbbrev">
  <xsl:apply-templates/>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "TGroup">
  <TGroup>
   <xsl:if                        test = "./@Char">
    <xsl:attribute                name = "Char">
     <xsl:value-of              select = "./@Char"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Charoff">
    <xsl:attribute                name = "Charoff">
     <xsl:value-of              select = "./@Charoff"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColSep">
    <xsl:attribute                name = "ColSep">
     <xsl:value-of              select = "./@ColSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Cols">
    <xsl:attribute                name = "Cols">
     <xsl:value-of              select = "./@Cols"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@RowSep">
    <xsl:attribute                name = "RowSep">
     <xsl:value-of              select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@TGroupStyle">
    <xsl:attribute                name = "TGroupStyle">
     <xsl:value-of              select = "./@TGroupStyle"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </TGroup>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "ColSpec">
  <ColSpec>
   <xsl:if                        test = "./@Align">
    <xsl:attribute                name = "Align">
     <xsl:value-of              select = "./@Align"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Char">
    <xsl:attribute                name = "Char">
     <xsl:value-of              select = "./@Char"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Charoff">
    <xsl:attribute                name = "Charoff">
     <xsl:value-of              select = "./@Charoff"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColName">
    <xsl:attribute                name = "ColName">
     <xsl:value-of              select = "./@ColName"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColNum">
    <xsl:attribute                name = "ColNum">
     <xsl:value-of              select = "./@ColNum"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColSep">
    <xsl:attribute                name = "ColSep">
     <xsl:value-of              select = "./@ColSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColWidth">
    <xsl:attribute                name = "ColWidth">
     <xsl:value-of              select = "./@ColWidth"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@RowSep">
    <xsl:attribute                name = "RowSep">
     <xsl:value-of              select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </ColSpec>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "SpanSpec">
  <SpanSpec>
   <xsl:if                        test = "./@Align">
    <xsl:attribute                name = "Align">
     <xsl:value-of              select = "./@Align"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Char">
    <xsl:attribute                name = "Char">
     <xsl:value-of              select = "./@Char"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Charoff">
    <xsl:attribute                name = "Charoff">
     <xsl:value-of              select = "./@Charoff"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@CosSep">
    <xsl:attribute                name = "ColSep">
     <xsl:value-of              select = "./@ColSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@NameEnd">
    <xsl:attribute                name = "NameEnd">
     <xsl:value-of              select = "./@NameEnd"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@NameSt">
    <xsl:attribute                name = "NameSt">
     <xsl:value-of              select = "./@NameSt"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@RowSep">
    <xsl:attribute                name = "RowSep">
     <xsl:value-of              select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@SpanName">
    <xsl:attribute                name = "SpanName">
     <xsl:value-of              select = "./@SpanName"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </SpanSpec>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "entry">
  <entry>
   <xsl:if                        test = "./@Align">
    <xsl:attribute                name = "Align">
     <xsl:value-of              select = "./@Align"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Char">
    <xsl:attribute                name = "Char">
     <xsl:value-of              select = "./@Char"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Charoff">
    <xsl:attribute                name = "Charoff">
     <xsl:value-of              select = "./@Charoff"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@ColSep">
    <xsl:attribute                name = "ColSep">
     <xsl:value-of              select = "./@ColSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Cols">
    <xsl:attribute                name = "Cols">
     <xsl:value-of              select = "./@Cols"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@MoreRows">
    <xsl:attribute                name = "MoreRows">
     <xsl:value-of              select = "./@MoreRows"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@NameEnd">
    <xsl:attribute                name = "NameEnd">
     <xsl:value-of              select = "./@NameEnd"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@NameSt">
    <xsl:attribute                name = "NameSt">
     <xsl:value-of              select = "./@NameSt"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@RowSep">
    <xsl:attribute                name = "RowSep">
     <xsl:value-of              select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@SpanName">
    <xsl:attribute                name = "SpanName">
     <xsl:value-of              select = "./@SpanName"/>
    </xsl:attribute>
   </xsl:if>
   <xsl:if                        test = "./@Valign">
    <xsl:attribute                name = "Valign">
     <xsl:value-of              select = "./@Valign"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </entry>
 </xsl:template>



 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "THead">
  <THead>
   <xsl:if                        test = "./@Valign">
    <xsl:attribute                name = "Valign">
     <xsl:value-of              select = "./@Valign"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </THead>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "TFoot">
  <TFoot>
   <xsl:if                        test = "./@Valign">
    <xsl:attribute                name = "Valign">
     <xsl:value-of              select = "./@Valign"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </TFoot>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "TBody">
  <TBody>
   <xsl:if                        test = "./@Valign">
    <xsl:attribute                name = "Valign">
     <xsl:value-of              select = "./@Valign"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </TBody>
 </xsl:template>


 <!-- 
 ==================================================================== 
 Create the table element templates
 ==================================================================== -->
 <xsl:template                   match = "Row">
  <Row>
   <xsl:if                        test = "./@RowSep">
    <xsl:attribute                name = "RowSep">
     <xsl:value-of              select = "./@RowSep"/>
    </xsl:attribute>
   </xsl:if>

   <xsl:apply-templates/>

  </Row>
 </xsl:template>


 <!-- 
 ==============================================================
 Templates to remove elements from Vendor/Mailer Output
 ============================================================== -->
 <xsl:template                   match = "Comment           | 
                                          ResponseToComment | 
                                          PdqKey"/>
 <xsl:template                   match = "Comment           | 
                                          ResponseToComment |
                                          PdqKey"
                                  mode = "copy"/>


 <!-- 
 =========================================================================
 Named Templates:
 ========================================================================= -->
 <!-- 
 =========================================================================

 Template to add the "Contact Us" misc. document to the Supportive Care
 summaries.  This gets added to the patient and HP version.
 ========================================================================= -->
 <xsl:template                   name = "ContactUs">
  <xsl:if                        test = "SummaryMetaData/
                                         SummaryType = 'Supportive care'
                                         or
                                         SummaryMetaData/
                                         SummaryType = 'Screening'
                                         or
                                         SummaryMetaData/
                                         SummaryType = 'Prevention'">
   <xsl:choose>
    <xsl:when                    test = "SummaryMetaData/
                                         SummaryLanguage = 'English'">

     <xsl:variable               name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000353162',
                                                         '/lastp'))"/>

     <xsl:apply-templates      select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
      <xsl:with-param            name = "miscDocId"
                               select = "'_ContactUs'"/>
     </xsl:apply-templates>
    </xsl:when>
    <!-- English, Patient, Contact Us Section End-->
        
    <!-- Spanish, Patient, Contact Us Section -->
    <xsl:otherwise>
         
     <xsl:variable               name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000353206',
                                                         '/lastp'))"/>
     <xsl:apply-templates      select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
      <xsl:with-param            name = "miscDocId"
                               select = "'_ContactUs'"/>
     </xsl:apply-templates>

    </xsl:otherwise>
   <!-- Spanish To Learn More Section End-->
   </xsl:choose>
  </xsl:if>
 </xsl:template>


 <!-- 
 =========================================================================
 Template to add the "More Information" misc. document to the summaries.
 Need to add the document in its appropriate language (English/Spanish).
 ========================================================================= -->
 <xsl:template                   name = "MoreInformation">

  <xsl:variable                  name = "miscDoc">
   <xsl:choose>
    <xsl:when                    test = "SummaryMetaData/SummaryType =
                                           concat('Complementary and ',
                                                  'alternative medicine')">
     <xsl:choose>
      <xsl:when                  test = "$language = 'English'">
       <xsl:copy-of            select = "document(concat('cdr:CDR0000256925',
                                                         '/lastp'))"/>
      </xsl:when>
      <xsl:otherwise>
       <!-- Spanish HP CAM summaries currently don't exist -->
       <xsl:copy-of            select = "document(concat('cdr:CDR0000256925',
                                                         '/lastp'))"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
     <xsl:choose>
      <xsl:when                  test = "$language = 'English'">
       <xsl:copy-of            select = "document
                                        (concat('cdr:name:More Information',
                                                ';For more information - ',
                                                'Health professional summary',
                                                '/lastp'))"/>
      </xsl:when>
      <xsl:otherwise>
       <xsl:copy-of            select = "document
                                        (concat('cdr:name:Informaci&#xF3;n ', 
                                                'adicional;For more ', 
                                                'information - Health ', 
                                                'professional summary;Spanish',
                                                '/lastp'))"/>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>

  <xsl:apply-templates         select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
   <xsl:with-param               name = "miscDocId"
                               select = "'_ForMoreInfo'"/>
  </xsl:apply-templates>
 </xsl:template>


 <!-- 
 =========================================================================
 Template to add the "To Learn More" misc. document to the summaries.
 This gets only attached to the patient versions.
 ========================================================================= -->
 <xsl:template                   name = "ToLearnMore">
  <xsl:choose>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryLanguage = 'English'">
    <xsl:choose>
     <xsl:when                   test = "SummaryMetaData/
                                         SummaryType =
                                           concat('Complementary and ',
                                                  'alternative medicine')">
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000445623',
                                                         '/lastp'))"/>
<!-- NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
Remove this section after MAHLER has been refreshed.  2005-09-22, VE
MAHLER ID:
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000437912',
                                                         '/lastp'))"/>
BACH ID:
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000445623',
                                                         '/lastp'))"/>
     NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
-->
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_ToLearnMore'"/>
      </xsl:apply-templates>
                                 <!-- mode = "MiscText" -->
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000367',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_ToLearnMore'"/>
      </xsl:apply-templates>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
  <!-- English To Learn More Section End-->
        
  <!-- Spanish, Patient, To Learn More Section -->
   <xsl:otherwise>
    <xsl:choose>
     <xsl:when                   test = "SummaryMetaData/
                                         SummaryType =
                                           concat('Complementary and ',
                                                  'alternative medicine')">
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000446984',
                                                         '/lastp'))"/>
<!-- NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
Remove this section after MAHLER has been refreshed.  2005-09-22, VE
MAHLER ID:
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000437917',
                                                         '/lastp'))"/>
BACH ID:
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000446984',
                                                         '/lastp'))"/>
     NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
-->
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_ToLearnMore'"/>
      </xsl:apply-templates>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000256873',
                                                         '/lastp'))"/>
<!-- XXX -->
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_ToLearnMore'"/>
      </xsl:apply-templates>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:otherwise>
  <!-- Spanish To Learn More Section End-->
  </xsl:choose>  
 </xsl:template>


 <!-- 
 =========================================================================
 Template to add the English "About PDQ" misc. document to the summaries.
 This gets only attached to the patient versions.
 ========================================================================= -->
 <xsl:template                   name = "AboutPdqEnglish">
  <!-- 
  English Summaries, Patient, Treatment 
  ===================================== -->
  <xsl:choose>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType = 'Treatment'">
    <!-- 
    English Summaries, Patient, Treatment, Pediatric, About PDQ 
    =========================================================== -->
    <xsl:choose>
     <xsl:when                   test = "contains(SummaryMetaData/
                                                  PDQBoard/
                                                  Board, 'Pediatric')">
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000372',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_AboutPDQ'"/>
      </xsl:apply-templates>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000366',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_AboutPDQ'"/>
      </xsl:apply-templates>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType = 'Screening'">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000374',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType = 'Prevention'">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000373',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType = 'Supportive care'">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000000371',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType =
                                           concat('Complementary and ',
                                                  'alternative medicine')">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000445621',
                                                         '/lastp'))"/>
<!-- NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
Remove this section after MAHLER has been refreshed.  2005-09-22, VE
MAHLER ID:
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000437910',
                                                         '/lastp'))"/>
BACH ID:
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000445621',
                                                         '/lastp'))"/>
     NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
-->
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
   <!-- English Summaries, Patient, Genetics End -->
  </xsl:choose>
 </xsl:template>


 <!-- 
 =========================================================================
 Template to add the Spanish "About PDQ" misc. document to the summaries.
 This gets only attached to the patient versions.
 ========================================================================= -->
 <xsl:template                   name = "AboutPdqSpanish">
  <!-- 
  Since no Spanish boards exist the information if a treatment summary
  is a pediatric study or not has to be extracted from the English
  version of the document
  ==================================================================== -->
  <xsl:variable                  name = "englishID"  
                               select = "TranslationOf/@cdr:ref"/>
  <xsl:variable                  name = "englishDoc"
                               select = "document(concat('cdr:', $englishID, 
                                                         '/lastp'))"/>
  <xsl:choose>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType = 'Treatment'">
    <xsl:choose>
     <xsl:when                   test = "contains($englishDoc/
                                                  Summary/
                                                  SummaryMetaData/
                                                  PDQBoard/Board, 'Pediatric')">
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000257146',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_AboutPDQ'"/>
      </xsl:apply-templates>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable              name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000256974',
                                                         '/lastp'))"/>
      <xsl:apply-templates     select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
       <xsl:with-param           name = "miscDocId"
                               select = "'_AboutPDQ'"/>
      </xsl:apply-templates>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
   <xsl:when                   test   = "SummaryMetaData/
                                         SummaryType = 'Supportive care'">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000257147',
                                                         '/lastp'))"/>
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryType =
                                           concat('Complementary and ',
                                                  'alternative medicine')">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000446985',
                                                         '/lastp'))"/>
<!-- NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
Remove this section after MAHLER has been refreshed.  2005-09-22, VE    
MAHLER ID:
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000437915',
                                                         '/lastp'))"/>
BACH ID
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000446985',
                                                         '/lastp'))"/>
     NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
-->
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_AboutPDQ'"/>
    </xsl:apply-templates>
   </xsl:when>
  </xsl:choose>
 </xsl:template>


 <!-- 
 =========================================================================
 Template to add the Q and A misc. document to CAM Patient Summaries
 ========================================================================= -->
 <xsl:template                   name = "QandACAM">
  <xsl:choose>
   <xsl:when                     test = "SummaryMetaData/
                                         SummaryLanguage = 'English'">
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000445622',
                                                         '/lastp'))"/>
<!-- NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
Remove this section after MAHLER has been refreshed.  2005-09-22, VE
MAHLER ID:
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000437911',
                                                         '/lastp'))"/>
BACH ID:
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000445622',
                                                         '/lastp'))"/>
     NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
-->
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_QandA'"/>
    </xsl:apply-templates>
   </xsl:when>
   <xsl:otherwise>
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000446986',
                                                         '/lastp'))"/>
<!-- NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
Remove this section after MAHLER has been refreshed.  2005-09-22, VE
MAHLER ID:
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000437916',
                                                         '/lastp'))"/>
BACH ID:
    <xsl:variable                name = "miscDoc" 
                               select = "document(concat('cdr:CDR0000446986',
                                                         '/lastp'))"/>
     NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE ** NOTE
-->
    <xsl:apply-templates       select = "$miscDoc/MiscellaneousDocument/
                                                  MiscellaneousDocumentText">
     <xsl:with-param             name = "miscDocId"
                               select = "'_QandA'"/>
    </xsl:apply-templates>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>


 <!-- 
 ==================================================================
 Main MiscellaneousDocumentText Template
 ================================================================== -->  
 <xsl:template                  match = "MiscellaneousDocumentText">
  <xsl:param                     name = "miscDocId"/>
  <xsl:apply-templates>
   <xsl:with-param               name = "miscDocId" 
                               select = "$miscDocId"/>
  </xsl:apply-templates>
 </xsl:template>


 <!-- 
 ==================================================================
 Section Template for Misc Docs
 Need to pass the parameter of the CDR Doc ID to set the ID 
 attribute properly.  The misc doc can be either the 'To Learn More'
 or the 'About PDQ' section.
 ================================================================== -->  
 <xsl:template                  match = "Section">
  <xsl:param                     name = "miscDocId"/>

  <SummarySection>
   <xsl:choose>
    <xsl:when                    test = "$miscDocId">
     <xsl:if                     test = "./@cdr:id">
      <xsl:attribute             name = "id">
       <xsl:value-of           select = "$miscDocId"/>
       <xsl:value-of           select = "./@cdr:id"/>
      </xsl:attribute>
     </xsl:if>
    </xsl:when>
    <xsl:otherwise>
     <xsl:if                     test = "./@cdr:id">
      <xsl:attribute             name = "id">
       <xsl:value-of           select = "./@cdr:id"/>
      </xsl:attribute>
     </xsl:if>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:apply-templates          mode = "MiscText">
    <xsl:with-param              name = "miscDocId" 
                               select = "$miscDocId"/>
   </xsl:apply-templates>
  </SummarySection>
 </xsl:template>


 <!-- 
 ==============================================================
 Template for extracting External Ref Definition
 ============================================================== -->
 <xsl:template                  match = "ExternalRef">
  <ExternalRef>
   <xsl:attribute                name = "xref">
    <xsl:value-of              select = "@cdr:xref"/>
   </xsl:attribute>
   <xsl:apply-templates/>
  </ExternalRef>
 </xsl:template>
</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>