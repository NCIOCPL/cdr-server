<?xml version="1.0"?>

<xsl:transform           xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                         xmlns:cdr = "cips.nci.nih.gov/cdr"
           exclude-result-prefixes = "cdr"
                           version = "1.0">

 <xsl:output                method = "xml" 
              omit-xml-declaration = "no"
                    doctype-system = "http://mmdb2.nci.nih.gov/dtds/PDQ.dtd"
                          encoding = "UTF-8"/>

 <!--
 ====================================================================
 Root element.
 ==================================================================== -->
 <xsl:template               match = "/">
  <xsl:apply-templates      select = "InScopeProtocol"/>
 </xsl:template>

 <!--
 ====================================================================
 Document element.
 ==================================================================== -->
 <xsl:template               match = "InScopeProtocol">

  <Protocol>
  <xsl:attribute              name = "id">
    <xsl:value-of           select = "DocId"/>
  </xsl:attribute>

<!-- Uncomment this attribute once it has been added to the DTD
     ========================================================== -->
  <!-- xsl:attribute              name = "LegacyPdqKey">
    <xsl:value-of           select =  "PdqKey"/>
  </xsl:attribute-->

   <ProtocolIDs>
     <xsl:apply-templates     select = "ProtocolIDs/PrimaryID"/>
     <xsl:apply-templates     select = "ProtocolIDs/OtherID"/>
   </ProtocolIDs>

   <!-- Use generic copy templates for these. -->
   <xsl:apply-templates     select = "FundingInfo"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ReimbursementApproval"
                              mode = "copy"/>

   <!-- Rename the ProtocolTitle Type attribute to Audience. -->
   <xsl:if                    test = "ProtocolTitle[@Type='Professional']">
    <ProtocolTitle        Audience = "Professional">
     <xsl:value-of          select = "ProtocolTitle[@Type='Professional']"/>
    </ProtocolTitle>
   </xsl:if>
   <xsl:if                    test = "ProtocolTitle[@Type='Patient']">
    <ProtocolTitle        Audience = "Patient">
     <xsl:value-of          select = "ProtocolTitle[@Type='Patient']"/>
    </ProtocolTitle>
   </xsl:if>
 
   <!-- Use custom templates for these. -->
   <xsl:apply-templates     select = "ProtocolAbstract"/>
   <xsl:apply-templates     select = "ProtocolDetail"/>
 
   <!-- Use generic copy templates for these. -->
   <xsl:apply-templates     select = "Eligibility"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProtocolRelatedLinks"
                              mode = "copy"/>
   <xsl:apply-templates     select = "PublishedResults"/>
   <xsl:apply-templates     select = "ProtocolPhase"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProtocolSpecialCategory"
                              mode = "copy"/>

   <!-- Use custom templates for these. -->
   <xsl:apply-templates     select = "ProtocolAdminInfo"/>

   <!-- Use generic copy templates for these. -->
   <xsl:apply-templates     select = "DateFirstPublished"
                              mode = "copy"/>
   <xsl:apply-templates     select = "DateLastModified"
                              mode = "copy"/>
  </Protocol>
 </xsl:template>

 <!--
 ====================================================================
 Protocols have two flavors of abstracts: Professional and Patient.
 ==================================================================== -->
 <xsl:template               match = "ProtocolAbstract">
  <ProtocolAbstract>
   <xsl:apply-templates     select = "Professional"
                              mode = "abstract"/>
   <xsl:apply-templates     select = "Patient"
                              mode = "abstract"/>
  </ProtocolAbstract>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the Professional abstract.
 ==================================================================== -->
 <xsl:template               match = "Professional"
                              mode = "abstract">
  <Professional>
   <xsl:apply-templates     select = "Objectives"
                              mode = "copy"/>
   <xsl:apply-templates     select = "Outline"
                              mode = "copy"/>
   <xsl:apply-templates     select = "EntryCriteria"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProjectedAccrual"
                              mode = "copy"/>
   <xsl:apply-templates     select = "EndPoints"
                              mode = "copy"/>
   <xsl:apply-templates     select = "Stratification"
                              mode = "copy"/>
   <xsl:apply-templates     select = "SpecialStudyParameters"
                              mode = "copy"/>
   <xsl:apply-templates     select = "DoseSchedule"
                              mode = "copy"/>
   <xsl:apply-templates     select = "DosageForm"
                              mode = "copy"/>
 
   <xsl:apply-templates     select = "ProfessionalDisclaimer"
                              mode = "copy"/>
  </Professional>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the Patient abstract.
 ==================================================================== -->
 <xsl:template               match = "Patient"
                              mode = "abstract">
  <Patient>
   <Rationale>
    <xsl:apply-templates    select = "Rationale"/>
   </Rationale>
   <Purpose>
    <xsl:apply-templates    select = "Purpose"/>
   </Purpose>
   <EligibilityText>
    <xsl:apply-templates    select = "EligibilityText"/>
   </EligibilityText>
   <TreatmentIntervention>
    <xsl:apply-templates    select = "TreatmentIntervention"/>
   </TreatmentIntervention>
   <xsl:apply-templates     select = "PatientDisclaimer"
                              mode = "copy"/>
  </Patient>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the Protocol detail section.
 ==================================================================== -->
 <xsl:template               match = "Rationale       |
                                      Purpose         |
                                      EligibilityText |
                                      TreatmentIntervention">
   <xsl:apply-templates     select = "Para|ItemizedList"
                              mode = "copy"/>
   <!-- xsl:apply-templates     select = "Para"
                              mode = "copy"/-->
 </xsl:template>




 <!--
 ====================================================================
 Assemble the Protocol detail section.
 ==================================================================== -->
 <xsl:template               match = "ProtocolDetail">
  <ProtocolDetail>
   <xsl:apply-templates     select = "StudyType"
                              mode = "copy"/>
   <StudyCategory>
    <xsl:apply-templates    select = "StudyCategory/StudyCategoryName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "StudyCategory/Intervention"
                              mode = "copy"/>
   </StudyCategory>
   <xsl:apply-templates     select = "StudyCondition"
                              mode = "copy"/>
   <xsl:apply-templates     select = "Gene"
                              mode = "copy"/>
  </ProtocolDetail>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the Protocol admin info.
 NOTE: This logic discards the relationship between the individual
       lead organizations for the protocol and the protocol sites
       associated with each of the lead organizations!
 ==================================================================== -->
 <xsl:template               match = "ProtocolAdminInfo">
  <ProtocolAdminInfo>
   <xsl:apply-templates     select = "CurrentProtocolStatus"
                              mode = "copy"/>
   <xsl:apply-templates     select = "ProtocolLeadOrg"/>
   
   <ProtocolSites>
     <xsl:apply-templates     select = "ProtocolLeadOrg/ProtocolSites"/>
   </ProtocolSites>
  </ProtocolAdminInfo>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the information for one lead organization.  Don't pick up
 the protocol sites linked to this lead organization.  They get lumped
 together in one amorphous pile following the lead organizations.
 ==================================================================== -->
 <xsl:template               match = "ProtocolLeadOrg">
  <ProtocolLeadOrg>
   <LeadOrgName>
    <xsl:attribute            name = "ref">
     <xsl:value-of          select = "@ref"/>
    </xsl:attribute>
    <xsl:value-of           select = "OfficialName/Name"/>
   </LeadOrgName>
   <xsl:apply-templates     select = "LeadOrgRole"
                              mode = "copy"/>
   <xsl:apply-templates     select = "LeadOrgProtocolID"
                              mode = "copy"/>
   <LeadOrgProtocolStatus>
    <xsl:apply-templates    select = "LeadOrgProtocolStatuses/
                                      CurrentOrgStatus/StatusName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "LeadOrgProtocolStatuses/
                                      CurrentOrgStatus/StatusDate"
                              mode = "copy"/>
   </LeadOrgProtocolStatus>

   <!-- LeadOrgPersonnel with Public=No attribute is not to be published
        ================================================================ -->
   <xsl:if                    test = "not(LeadOrgPersonnel/@Public = 'No')">
     <LeadOrgPersonnel>
      <xsl:apply-templates    select = "LeadOrgPersonnel"/>
     </LeadOrgPersonnel>
   </xsl:if>

  </ProtocolLeadOrg>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the information for one lead org person.
 Note that in the licensee DTD LeadOrgPersonnel refers to the 
 collection of persons for the lead org, while in the CDR Schema,
 each person has his/her own LeadOrgPersonnel element.

 The Person is only to be displayed if the person's only role is not
 that of an Update person
 ==================================================================== -->
 <xsl:template               match = "LeadOrgPersonnel">
  <xsl:if                     test = "not(PersonRole='Update person') or
                                         (PersonRole='Update person'
                                          and count(PersonRole) &gt; 1)">
  <ProtPerson>
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "Person/@ref"/>
   </xsl:attribute>
   <xsl:apply-templates     select = "Person/PersonNameInformation"/>
   <!-- PersonNameInformation>
    <xsl:apply-templates    select = "Person/PersonNameInformation/
                                      GivenName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Person/PersonNameInformation/
                                      MiddleInitial"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Person/PersonNameInformation/
                                      SurName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Person/PersonNameInformation/
                                      Prefix"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Person/PersonNameInformation/
                                      GenerationSuffix"
                              mode = "copy"/>
    <ProfessionalSuffix>
     <xsl:value-of          select = "Person/PersonNameInformation/
                                      ProfessionalSuffix/
                                      StandardProfessionalSuffix"/>
    </ProfessionalSuffix>
    <xsl:apply-templates    select = "Person/PersonNameInformation/
                                      NameFormat"
                              mode = "copy"/>
   </PersonNameInformation-->

   <!-- The PersonRole of Update Person is CIPS internal information
        and not intended for the vendors
        ============================================================ -->
   <xsl:for-each            select = "PersonRole">
    <xsl:if                   test = "not(.='Update person')">
     <xsl:apply-templates   select = "."
                              mode = "copy"/>
    </xsl:if>
   </xsl:for-each>
   <Contact>

    <!-- XXX This is optional in the DTD, and I think it's probably
             meant for generic person elements, so I'm omitting it here.
             We've already got the PersonNameInformation, after all.
    <ContactName/>
    -->

    <ContactDetail>

     <PostalAddress>
      <xsl:apply-templates  select = "Person/Street"
                              mode = "copy"/>
      <xsl:apply-templates  select = "Person/City"
                              mode = "copy"/>
      <xsl:apply-templates  select = "Person/CitySuffix"
                              mode = "copy"/>
      <xsl:apply-templates  select = "Person/PoliticalSubUnit_State"/>
      <xsl:apply-templates  select = "Person/Country"/>
      <xsl:apply-templates  select = "Person/PostalCode_ZIP"
                              mode = "copy"/>
      <xsl:apply-templates  select = "Person/PostalCodePosition"
                              mode = "copy"/>
     </PostalAddress>

     <!-- Volker's original had these outside the ContactDetail
          element, but that didn't seem right after looking at
          the DTD. -->
     <!-- Phone with Public=No attribute is not to be published -->
     <!-- ===================================================== -->
     <xsl:if                  test = "not(PersonPhone/@Public = 'No')">
       <xsl:apply-templates select = "PersonPhone"
                              mode = "copy"/>
     </xsl:if>
     <xsl:apply-templates   select = "Person/TollFreePhone"
                              mode = "copy"/>
     <!-- xsl:apply-templates   select = "Person/Fax"
                              mode = "copy"/-->

     <!-- Email with Public=No attribute is not to be published -->
     <!-- ===================================================== -->
     <xsl:if                  test = "not(Person/Email/@Public = 'No')">
       <xsl:apply-templates select = "Person/Email"
                              mode = "copy"/>
     </xsl:if>
     <xsl:apply-templates   select = "Person/WebSite"
                              mode = "copy"/>

    </ContactDetail>
   </Contact>
  </ProtPerson>
  </xsl:if>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the state element.  This template collapses two element
 layers into one, combining the 'ref' attribute from the parent
 PoliticalSubUnit_State element with the text content of the child
 PoliticalSubUnitFullName element, using a new PoliticalSubUnitName
 name for the combo element.
 ==================================================================== -->
 <xsl:template               match = "PoliticalSubUnit_State">
  <PoliticalSubUnitName>
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "@ref"/>
   </xsl:attribute>
   <xsl:value-of            select = "PoliticalSubUnitFullName"/>
  </PoliticalSubUnitName>
 </xsl:template>

 <!--
 ====================================================================
 Put together the Country element.
 ==================================================================== -->
 <xsl:template               match = "Country">
  <CountryName>
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "@ref"/>
   </xsl:attribute>
   <xsl:value-of            select = "CountryFullName"/>
  </CountryName>
 </xsl:template>

 <!--
 ====================================================================
 Put together the information for one participating organization.
 The ProtocolSites are only populated if the CurrentProtocolStatus
 is Active.
 ==================================================================== -->
 <xsl:template               match = "ProtocolSites">
  <xsl:if                     test = "/InScopeProtocol/ProtocolAdminInfo/
                                      CurrentProtocolStatus = 'Active'">
    <xsl:for-each           select = "OrgSite">
     <ProtocolSite>
      <SiteName>
       <xsl:attribute         name = "ref">
        <xsl:value-of       select = "@ref"/>
       </xsl:attribute>
       <xsl:value-of        select = "OfficialName/Name"/>
      </SiteName>

      <!-- Original filter added a 'ref' attribute to this element, but
           such an attribute isn't specified in the DTD. -->
      <!-- XX SiteContact-->
       <xsl:apply-templates select = "OrgSiteContact/SpecificPerson|
                                     OrgSiteContact/GenericPerson"/>
      <!-- XX /SiteContact-->

     </ProtocolSite>
    </xsl:for-each>
  </xsl:if>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the output for a specific person identified as the 
 contact for a participating organization.
 ==================================================================== -->
 <xsl:template               match = "SpecificPerson">
  <ProtPerson>
   <xsl:attribute             name = "ref">
    <xsl:value-of           select = "@ref"/>
   </xsl:attribute>
   <xsl:apply-templates     select = "PersonNameInformation"/>
   <PersonRole>
    <xsl:value-of           select = "Role"/>
   </PersonRole>
   <Contact>

    <ContactDetail>
     <PostalAddress>
      <xsl:apply-templates  select = "Street"
                              mode = "copy"/>
      <xsl:apply-templates  select = "City"
                              mode = "copy"/>
      <xsl:apply-templates  select = "CitySuffix"
                              mode = "copy"/>
      <xsl:apply-templates  select = "PoliticalSubUnit_State"/>
      <xsl:apply-templates  select = "Country"/>
      <xsl:apply-templates  select = "PostalCode_ZIP"
                              mode = "copy"/>
      <xsl:apply-templates  select = "PostalCodePosition"
                              mode = "copy"/>
     </PostalAddress>

     <!-- Phone with Public=No attribute is not to be published -->
     <!-- ===================================================== -->
     <xsl:if                  test = "not(Phone/@Public = 'No')">
       <xsl:apply-templates select = "Phone"
                              mode = "copy"/>
     </xsl:if>
     <xsl:apply-templates   select = "TollFreePhone"
                              mode = "copy"/>
     <!-- xsl:apply-templates   select = "Fax"
                              mode = "copy"/-->
     <!-- Email with Public=No attribute is not to be published -->
     <!-- ===================================================== -->
     <xsl:if                  test = "not(Email/@Public = 'No')">
       <xsl:apply-templates select = "Email"
                              mode = "copy"/>
     </xsl:if>
     <xsl:apply-templates   select = "WebSite"
                              mode = "copy"/>

    </ContactDetail>

   </Contact>
  </ProtPerson>
 </xsl:template>

 <!--
 ====================================================================
 Assemble the output for a specific person identified as the 
 contact for a participating organization.
 ==================================================================== -->
 <xsl:template               match = "GenericPerson">
  <ProtPerson>
   <!-- Can we use PersonTitle for this? -->
   <PersonRole>XXX Don't have this in the denormalized document!</PersonRole>
   <Contact>
    <ContactName>
     <xsl:value-of          select = "ContactName"/>
    </ContactName>
    <ContactDetail>
     <PostalAddress>
      <xsl:apply-templates  select = "Street"
                              mode = "copy"/>
      <xsl:apply-templates  select = "City"
                              mode = "copy"/>
      <xsl:apply-templates  select = "CitySuffix"
                              mode = "copy"/>
      <xsl:apply-templates  select = "PoliticalSubUnit_State"/>
      <xsl:apply-templates  select = "Country"/>
      <xsl:apply-templates  select = "PostalCode_ZIP"
                              mode = "copy"/>
      <xsl:apply-templates  select = "PostalCodePosition"
                              mode = "copy"/>
     </PostalAddress>

     <!-- Phone with Public=No attribute is not to be published -->
     <!-- ===================================================== -->
     <xsl:if                  test = "not(Phone/@Public = 'No')">
       <xsl:apply-templates select = "Phone"
                              mode = "copy"/>
     </xsl:if>
     <xsl:apply-templates   select = "TollFreePhone"
                              mode = "copy"/>
     <!-- xsl:apply-templates   select = "Fax"
                              mode = "copy"/-->

     <!-- Email with Public=No attribute is not to be published -->
     <!-- ===================================================== -->
     <xsl:if                  test = "not(Email/@Public = 'No')">
       <xsl:apply-templates select = "Email"
                              mode = "copy"/>
     </xsl:if>
     <xsl:apply-templates   select = "WebSite"
                              mode = "copy"/>
    </ContactDetail>
   </Contact>
  </ProtPerson>
 </xsl:template>


 <!--
 ====================================================================
 Assemble the PersonNameInformation for a person.
 (Eliminating the StandardProfessionalSuffix element)
 ==================================================================== -->
 <xsl:template               match = "PersonNameInformation">
   <PersonNameInformation>
    <xsl:apply-templates    select = "GivenName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "MiddleInitial"
                              mode = "copy"/>
    <xsl:apply-templates    select = "SurName"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Prefix"
                              mode = "copy"/>
    <xsl:apply-templates    select = "GenerationSuffix"
                              mode = "copy"/>
    <ProfessionalSuffix>
     <xsl:value-of          select = "ProfessionalSuffix/
                                      StandardProfessionalSuffix"/>
    </ProfessionalSuffix>
    <xsl:apply-templates    select = "NameFormat"
                              mode = "copy"/>
   </PersonNameInformation>
 </xsl:template>


 <!--
 ====================================================================
 Add citation IDs as attributes
 ==================================================================== -->
 <xsl:template               match = "PublishedResults">
    <xsl:apply-templates    select = "Citation"/>
 </xsl:template>


 <!--
 ====================================================================
 Remove any comments from the output
 ==================================================================== -->
 <xsl:template               match = "PrimaryID | OtherID">
   <xsl:copy>
    <xsl:apply-templates    select = "IDType"
                              mode = "copy"/>
    <xsl:apply-templates    select = "IDString"
                              mode = "copy"/>
    <xsl:apply-templates    select = "Comment"/>
   </xsl:copy>
 </xsl:template>


 <!--
 ====================================================================
 Remove any comments from the output
 ==================================================================== -->
 <xsl:template               match = "Comment">
    <!-- Do Nothing -->
 </xsl:template>



 <!--
 ====================================================================
 Add citation IDs as attributes
 ==================================================================== -->
 <xsl:template               match = "Citation">
  <PublishedResults>
    <xsl:if                   test = "MedlineID">
     <xsl:attribute           name = "MedlineID">
      <xsl:value-of         select = "MedlineID"/>
     </xsl:attribute>
    </xsl:if>
    <xsl:if                   test = "PMID">
     <xsl:attribute           name = "PMID">
      <xsl:value-of         select = "PMID"/>
     </xsl:attribute>
    </xsl:if>
    <xsl:if                   test = "CancerLitID">
     <xsl:attribute           name = "CancerLitID">
      <xsl:value-of         select = "CancerLitID"/>
     </xsl:attribute>
    </xsl:if>
    <xsl:value-of           select = "CitationText"/>
  </PublishedResults>
 </xsl:template>


 <!--
 ====================================================================
 Template rule used to do XML to XML transformations which
 copies any attribute node, or node that is child of of something 
 ==================================================================== -->
 <xsl:template               match = "@*|node()"
                              mode = "copy">
  <xsl:copy>
   <xsl:apply-templates     select = "@*" 
                              mode = "copy"/>
   <xsl:apply-templates       mode = "copy"/>
  </xsl:copy>
 </xsl:template>

</xsl:transform>
