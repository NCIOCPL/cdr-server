<CdrDoc Type='Filter' Id='CDR0000000052'>
<CdrDocCtl>
<DocValStatus readonly="yes">U</DocValStatus>
<DocActiveStatus readonly="yes">A</DocActiveStatus>
<DocTitle readonly="yes">Person Address Fragment With Name</DocTitle>
<ReadyForReview readonly="yes">N</ReadyForReview>
</CdrDocCtl>
<CdrDocXml><![CDATA[<?xml version="1.0"?>

 <!--
 ===========================================================================
 Get personal address address information; used by the mailers.
 Modified (RMK 2002-10-07) to accomodate radical changes users requested
 in personalized address information.
 =========================================================================== -->
<xsl:transform             xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"
                           xmlns:cdr = "cips.nci.nih.gov/cdr"
                             version = "1.0">

 <!--
 ===========================================================================
 Passed in by the caller.  This is used to identify which of several
 addresses the caller wants extracted.  Example: "F1".
 =========================================================================== -->
 <xsl:param                     name = "fragId"/>

 <!--
 ===========================================================================
 Start at the top.  Get all the personal name info and one address.
 =========================================================================== -->
 <xsl:template                 match = "/">
  <AddressElements>
   <xsl:apply-templates       select = "/Person/PersonNameInformation"/>
   <xsl:apply-templates       select = "/Person/PersonLocations"/>
  </AddressElements>
 </xsl:template>

 <!--
 ===========================================================================
 Just get the location which matches the fragment ID.  According to Lakshmi,
 we should only use PrivatePractice or OtherPracticeLocation elements.
 2003-03-03: Sheri doesn't like this approach (see issue #610).  Adding
 home addresses at her request.
 =========================================================================== -->
 <xsl:template                 match = "PersonLocations">
  <xsl:apply-templates        select = "PrivatePractice/
                                        PrivatePracticeLocation
                                        [@cdr:id = $fragId]"/>
  <xsl:apply-templates        select = "OtherPracticeLocation
                                        [@cdr:id = $fragId]"/>
  <xsl:apply-templates        select = "Home[@cdr:id = $fragId]"/>
 </xsl:template>

 <!--
 ===========================================================================
 Handle the easy case: a private practice or home location.
 =========================================================================== -->
 <xsl:template                 match = "PrivatePracticeLocation | Home">
  <xsl:apply-templates        select = "PostalAddress"/>
 </xsl:template>

 <!--
 ===========================================================================
 Other practice locations are considerably trickier.
 =========================================================================== -->
 <xsl:template                 match = "OtherPracticeLocation">
  <xsl:variable                 name = "fragLink"
                              select = "OrganizationLocation/@cdr:ref"/>
  <xsl:variable                 name = "fragId"
                              select = "substring-after($fragLink, '#')"/>
  <xsl:variable                 name = "orgUri"
                              select = "concat('cdrx:', $fragLink, '/last')"/>
  <xsl:variable                 name = "org"
                              select = "document($orgUri)"/>
  <xsl:variable                 name = "orgName"
                              select = "$org/Organization/
                                        OrganizationNameInformation/
                                        OfficialName/Name"/>
  <xsl:variable                 name = "orgLoc"
                              select = "$org/Organization/
                                        OrganizationLocations/
                                        OrganizationLocation
                                        [Location/@cdr:id = $fragId]"/>

  <PersonTitle>
   <xsl:value-of              select = "PersonTitle"/>
  </PersonTitle>
  <OrgName>
   <xsl:value-of              select = "$orgName"/>
  </OrgName>
  <xsl:if                       test = "$orgLoc/@IncludeParentName = 'Yes'">
   <ParentNames>
    <xsl:attribute              name = "OrderParentNameFirst">
     <xsl:value-of            select = "$orgLoc/@OrderParentNameFirst"/>
    </xsl:attribute>
    <xsl:call-template          name = "getParent">
     <xsl:with-param            name = "org"
                              select = "$org"/>
    </xsl:call-template>
   </ParentNames>
  </xsl:if>
  <xsl:choose>
   <xsl:when                    test = "SpecificPostalAddress">
    <PostalAddress>
     <xsl:apply-templates     select = "SpecificPostalAddress/*"/>
    </PostalAddress>
   </xsl:when>
   <xsl:otherwise>
    <xsl:apply-templates      select = "$orgLoc/Location/PostalAddress"/>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>

 <!--
 ===========================================================================
 Recursively collect all the parents of an organizations.
 =========================================================================== -->
 <xsl:template                  name = "getParent">
  <xsl:param                    name = "org"/>
  <xsl:variable                 name = "parentId"
                              select = "$org/Organization/
                                         OrganizationParent/
                                         ParentOrganization/@cdr:ref"/>
  <xsl:variable                 name = "parentUri"
                              select = "concat('cdrx:', $parentId, '/last')"/>
  <xsl:variable                 name = "parentDoc"
                              select = "document($parentUri)"/>
  <xsl:variable                 name = "parentName"
                              select = "$parentDoc/Organization/
                                        OrganizationNameInformation/
                                        OfficialName/Name"/>
  <xsl:if                       test = "$parentName">
   <ParentName>
    <xsl:value-of             select = "$parentName"/>
   </ParentName>
   <xsl:call-template           name = "getParent">
    <xsl:with-param             name = "org"
                              select = "$parentDoc"/>
   </xsl:call-template>
  </xsl:if>                                    
 </xsl:template>

 <!--
 ===========================================================================
 Identity rule, copies everything to the output tree.
 =========================================================================== -->
 <xsl:template                 match = "@*|node()">
  <xsl:copy>
   <xsl:apply-templates       select = "@*|node()"/>
  </xsl:copy>
 </xsl:template>

 <!--
 ===========================================================================
 Grab everything here (well, all the elements anyway).
 =========================================================================== -->
 <xsl:template                 match = "PersonNameInformation">
  <PersonName>
   <xsl:apply-templates       select = "node()"/>
  </PersonName>
 </xsl:template>

 <!--
 ===========================================================================
 Get the country name(s) for the country document.
 =========================================================================== -->
 <xsl:template                 match = "Country">
  <xsl:variable                 name = "docId"
                              select = "@cdr:ref"/>
  <xsl:variable                 name = "uri"
                              select = "concat('cdrx:', $docId)"/>
  <xsl:variable                 name = "doc"
                              select = "document($uri)"/>
  <xsl:choose>
   <xsl:when                    test = "$doc/Country/CountryShortName">
    <Country>
     <xsl:value-of            select = "$doc/Country/CountryShortName"/>
    </Country>
   </xsl:when>
   <xsl:when                    test = "$doc/Country/CountryFullName">
    <Country>
     <xsl:value-of            select = "$doc/Country/CountryFullName"/>
    </Country>
   </xsl:when>
  </xsl:choose>
 </xsl:template>

 <!--
 ===========================================================================
 Ditto for the state.
 =========================================================================== -->
 <xsl:template                 match = "PoliticalSubUnit_State">
  <xsl:variable                 name = "docId"
                              select = "@cdr:ref"/>
  <xsl:variable                 name = "uri"
                              select = "concat('cdrx:', $docId)"/>
  <xsl:variable                 name = "doc"
                              select = "document($uri)"/>
  <xsl:choose>
   <xsl:when                    test = "$doc/PoliticalSubUnit
                                            /PoliticalSubUnitShortName">
    <State>
     <xsl:value-of            select = "$doc/PoliticalSubUnit
                                            /PoliticalSubUnitShortName"/>
    </State>
   </xsl:when>
   <xsl:when                    test = "$doc/PoliticalSubUnit
                                            /PoliticalSubUnitFullName">
    <State>
     <xsl:value-of            select = "$doc/PoliticalSubUnit
                                            /PoliticalSubUnitFullName"/>
    </State>
   </xsl:when>
  </xsl:choose>
 </xsl:template>

</xsl:transform>
]]>
</CdrDocXml>
</CdrDoc>