<?xml                version = "1.0"
                        encoding = "UTF-8"?>

 <!--
    ============================================================

    PublishingSystem.xml

    This schema is used to create publishing/extraction
    control specifications for the individual CDR Publishing
    Systems.

    2015-07-11: added optional ParmInfoSet block (RMK)

    ============================================================ -->

<xsd:schema            xmlns:xsd = "http://www.w3.org/2001/XMLSchema"
                       xmlns:cdr = "cips.nci.nih.gov/cdr">

 <xsd:include     schemaLocation = "CdrCommonSchema.xml"/>

 <xsd:element               name = "PublishingSystem"
                            type = "PublishingSystem"/>

 <!--
    ============================================================
    Each publishing system has a required name and description,
    with one or more publishing system subsets.  Each publication
    job is invoked using exactly one of the available subsets.
    ============================================================ -->

 <xsd:complexType           name = "PublishingSystem">
  <xsd:sequence>
   <xsd:element             name = "SystemName"
                            type = "NotEmptyString"/>
   <xsd:element             name = "SystemDescription"
                            type = "NotEmptyString"/>
   <xsd:element             name = "SystemSubset"
                            type = "SystemSubset"
                       maxOccurs = "unbounded" />
   <xsd:element             name = "ParmInfoSet"
                            type = "ParmInfoSet"
                       minOccurs = "0"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    Each publishing system subset has a required name and
    description.

    The subset can optionally have a set of named parameters
    which can be used to control the processing of a particular
    publication event.  Typically, the parameters are passed
    to the server by the program submitting the job request,
    but the parameters are listed in this control document as
    well, in order to:
            1. allow the control document to supply defaults;
            2. allow user programs to populate dialogs interfaces
               at runtime with controls for specifying parameter
               values without knowing in advance the names of
               parameters expected for different publishing
               system subsets; and
            3. enable the CDR server to verify that parameters
               submitted for a given publication job are expected
               for the type of job requested.

    If an optional SubsetActionName is submitted, the server
    will verify that the user whose session has submitted the
    request for the publication job has the requisite permissions
    to make this request.  Otherwise, no check is made for
    permission to invoke the publication event.

    A subset will either be associated with an external script,
    using the ProcessScript element (in which case all processing
    of the publication job will be handled by the script named
    by the element's value), or will have one or more sets of
    selection and filter specifications, in which case the
    decisions about how to select documents and how to process
    them will have been provided in this control document.

    Finally, a subset can have a number of named options.  In
    contrast to subset parameters, which as described above are
    specified as part of the request for a specific job, subset
    options are fixed in the publication control document for
    all jobs associated with the subset.

    Added Spring 2016: a subset can have document type-specific
    thresholds for errors.
    ============================================================ -->

 <xsd:complexType           name = "SystemSubset">
  <xsd:sequence>
   <xsd:element             name = "SubsetName"
                            type = "NotEmptyString"/>
   <xsd:element             name = "SubsetDescription"
                            type = "NotEmptyString"/>
   <xsd:element             name = "SubsetParameters"
                            type = "SubsetParameters"
                       minOccurs = "0"/>
   <xsd:element             name = "SubsetActionName"
                            type = "NotEmptyString"
                       minOccurs = "0"/>
   <xsd:choice>
    <xsd:element            name = "ProcessScript"
                            type = "NotEmptyString"/>
    <xsd:element            name = "SubsetSpecifications"
                            type = "SubsetSpecifications"
                       maxOccurs = "unbounded"/>
   </xsd:choice>
   <xsd:element             name = "SubsetOptions"
                            type = "SubsetOptions"
                       minOccurs = "0"/>
   <xsd:element             name = "PerDoctypeErrorThresholds"
                            type = "PerDoctypeErrorThresholds"
                       minOccurs = "0"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    A set of one or more named parameter values to be applied
    to a particular invocation of the CDR Publishing System
    Subset.
    ============================================================ -->

 <xsd:complexType           name = "SubsetParameters">
  <xsd:sequence>
    <xsd:element            name = "SubsetParameter"
                            type = "SubsetParameter"
                       maxOccurs = "unbounded"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    A named parameter value to be applied to a particular
    invocation of a CDR publishing job.  If a string for an SQL
    query, an XQL query, or a SubsetFilterParm/ParmValue contains
    the string of the form ?parm-name?, where parm-name matches
    the name of one of the subset parameters passed to a publishing
    job (or set to the default value specified here when not passed
    in by the job request), then that string is replaced by the
    corresponding parameter value.

    A ParmValue element containing the string "$CurDate" is
    replaced at runtime by the string corresponding to the
    current date and time (local to the CDR Server) in the
    standard ISO format YYYY-MM-DDThh:mm:ss; for example:
    2002-09-01T14:26:01.  Other value strings may be reserved
    in future versions of the Publishing Module for similar
    special meanings.  In order to specify a value which
    begins with the dollar sign, prefix the dollar sign with
    a backslash character, which will guarantee that the value
    will be passed in unaltered and without any special
    interpretation.
    ============================================================ -->

 <xsd:complexType           name = "SubsetParameter">
  <xsd:sequence>
   <xsd:element             name = "ParmName"
                            type = "NotEmptyString"/>
   <xsd:element             name = "ParmValue"
                            type = "NotEmptyString"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    A CDR Publishing System Subset can have multiple occurences
    of the SubsetSpecification element.  This allows a single
    publishing job to process more than one set of documents,
    with a different series of XSL/T filters (or the same series,
    but with different parameters passed to the filters) applied
    to each of the sets of documents.
    ============================================================ -->

 <xsd:complexType           name = "SubsetSpecifications">
  <xsd:sequence>
   <xsd:element             name = "SubsetSpecification"
                            type = "SubsetSpecification"
                       maxOccurs = "unbounded"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    A SubsetSpecification provides a mechanism for selecting a
    set of documents (with a user-specified list, SQL queries,
    XQL queries, or any combination of these) and applying a
    series of XSL/T filters to each of the documents in the set.
    ============================================================ -->

 <xsd:complexType           name = "SubsetSpecification">
  <xsd:sequence>
   <xsd:element             name = "SubsetSelection"
                            type = "SubsetSelection"/>
   <xsd:element             name = "SubsetFilters"
                            type = "SubsetFilters"
                       maxOccurs = "unbounded"/>
   <xsd:element             name = "Subdirectory"
                            type = "NotEmptyString"
                       minOccurs = "0"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    A SubsetSelection allows for two general approaches to
    identifying documents to be published.  If the optional
    UserSelect element is present, publishing requests can
    include a list of IDs in order to "hand select" one or
    more documents.  The other approach, which is the more
    commonly used of the two, uses queries stored as part
    of the publishing control document.

    Each SubsetSelection produces a possibly empty set of
    unique document identifiers.  If two queries in a
    SubsetSelection both find the same document, or a query
    finds a document also identified by a user-supplied list,
    the set only contains the document ID once.  Furthermore,
    no document is selected more than once for a given pub-
    lishing job, so if a document appeared in the set for one
    SubsetSpecification processed for the job, it will be
    dropped from the sets produced by any subsequent
    SubsetSpecifications.  Finally, a user-supplied list is
    "selected" before XQL or SQL queries are run.  As an
    illustration of this principle, consider the following
    contrived example:

    A job is invoked for a publishing system subset which
    has three SubsetSpecification elements.  The first
    SubsetSpecification contains XQL query Q1 and filter F1.
    The second SubsetSpecification has no queries, allows
    the user to list documents of type InScopeProtocol, and
    specifies filter F2.  The third SubsetSpecification also
    has no queries, allows the user to list documents of type
    OutOfScopeProtocol, and specifies filter F3.  The job
    request lists two documents, an InScopeProtocol and an
    OutOfScopeProtocol.  Query Q1 selects three documents,
    including the two appearing on the user-supplied list.
    Filter F2 will be applied to the user-listed InScopeProtocol
    document, filter F3 will be applied to the user-listed
    OutOfScopeProtocol document, and filter F1 will be applied
    to the remaining document.

    SQL queries must return a column with the name 'id'
    representing the CDR document ID.  Optionally, a second
    column named 'version' may be returned specifying the
    version of the document to be published.  When the query
    returns the document version, the publishing module
    verifies that the version specified exists and is marked
    publishable.  Otherwise, the publishing module selects
    the latest publishable version.

    Within the string for a SubsetXQL or SubsetSQL element,
    any occurrence of ?name? which matches the name of a
    subset parameter will be substituted with the corresponding
    value of that parameter for the current invocation of
    the publication job.
    ============================================================ -->

 <xsd:complexType           name = "SubsetSelection">
  <xsd:sequence>
   <xsd:element             name = "UserSelect"
                            type = "UserSelect"
                       minOccurs = "0"/>
   <xsd:choice         minOccurs = "0"
                       maxOccurs = "unbounded">
    <xsd:element            name = "SubsetXQL"
                            type = "NotEmptyString"/>
    <xsd:element            name = "SubsetSQL"
                            type = "NotEmptyString"/>
   </xsd:choice>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    The presence of the UserSelect element indicates that the
    job invocation is allowed to supply a list of hand-picked
    documents, selected by some means outside the publishing
    system.  If one or more of the optional child element
    UserSelectDoctype are present, then only documents of
    the types named can appear on the user-supplied list.
    Otherwise, there are no restrictions on the types of the
    documents which can be explicitly listed.
    ============================================================ -->

 <xsd:complexType           name = "UserSelect">
  <xsd:sequence>
   <xsd:element             name = "UserSelectDoctype"
                            type = "NotEmptyString"
                       minOccurs = "0"
                       maxOccurs = "unbounded"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    List of XSL/T filters to be applied to a set of documents,
    in the order given in this element, together with a possibly
    empty set of parameters to be fed to each of the filters.
    ============================================================ -->

 <xsd:complexType           name = "SubsetFilters">
  <xsd:sequence>
   <xsd:element             name = "SubsetFilter"
                            type = "SubsetFilter"
                       maxOccurs = "unbounded"/>
   <xsd:element             name = "SubsetFilterParm"
                            type = "SubsetFilterParm"
                       minOccurs = "0"
                       maxOccurs = "unbounded"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    Identification of an XSL/T filter, either by document ID or
    by filter name.
    ============================================================ -->

 <xsd:complexType           name = "SubsetFilter">
  <xsd:sequence>
   <xsd:choice>
    <xsd:element            name = "SubsetFilterName"
                            type = "NotEmptyString"/>
    <xsd:element            name = "SubsetFilterId"
                            type = "DocId"/>
   </xsd:choice>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    Named parameter to be passed to an XSL/T filter.  Within the
    string for a ParmValue element any occurrences of ?name?
    whose name matches that of a subset parameter will be
    replaced by the value for that parameter.
    ============================================================ -->

 <xsd:complexType           name = "SubsetFilterParm">
  <xsd:sequence>
   <xsd:element             name = "ParmName"
                            type = "NotEmptyString"/>
   <xsd:element             name = "ParmValue"
                            type = "NotEmptyString"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    List of one or more named options associated with a CDR
    Publishing System Subset.
    ============================================================ -->

 <xsd:complexType           name = "SubsetOptions">
  <xsd:sequence>
   <xsd:element             name = "SubsetOption"
                            type = "SubsetOption"
                       maxOccurs = "unbounded"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    Named option applied to publishing jobs run against a
    specific CDR Publishing System Subset.  Cannot be overridden
    in the job invocation.  The standard CDR Publishing System
    supports the following options:

            Name                  Value   Meaning
            __________________    _____   __________________________

            SaveInPublishTable    Yes     Record items published in
                                          the CDR Publishing tables.
                                  No      Do not record jobs of this
                                          type.
            PublishIfWarnings     Yes     Publish even if there are
                                          warnings.
                                  No      Do not publish if there are
                                          warnings.
                                  Ask     Hold the job for user
                                          confirmation before proceeding
                                          with processing if warnings
                                          are generated.
            AbortOnError          No      If there is an error, do not
                                          publish the document being
                                          filtered and treat as warning.
                                  Yes     Abort publishing on error.
                              <xsd:num>   Treat as Yes, but do not abort
                                          until <num> errors have been
                                          encountered.
            Destination           <name>  Name of directory to contain
                                          published data.
            DestinationType       File    Output single file containing all
                                          XML concatenated together, using
                                          the filename given by the option
                                          DestinationFileName.
                                  Doc     Output one file/document, using
                                          the name <documentid>.xml.
                                  DocType One file per document type, using
                                          the name <doctype>.xml where
                                      <xsd:doctype> is the name of the
                                          document type.
            DestinationFileName   <name>  Filename to use when the value of
                                          the DestinationType option is File.

    Other named options can be specified with semantics known
    to the software which publishes jobs for the subset.  These
    would typically be used by subsets associated with an
    external script.
    ============================================================ -->

 <xsd:complexType           name = "SubsetOption">
  <xsd:sequence>
   <xsd:element             name = "OptionName"
                            type = "NotEmptyString"/>
   <xsd:element             name = "OptionValue"
                            type = "NotEmptyString"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    Common block of information about subset parameters, including
    help text to explain how the parameter is used (to be displayed
    on the web pages for initiating a publishing job) as well as
    validation support.
    ============================================================ -->
 <xsd:complexType           name = "ParmInfoSet">
  <xsd:sequence>
   <xsd:element             name = "ParmInfo"
                            type = "ParmInfo"
                       maxOccurs = "unbounded"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    Each parameter block has a name, a help string, and a way to
    validate whether the supplied value is acceptable. The options
    are:
             * a regular expression string (ParmInfoPattern)
             * a sequence of valid values (ParmInfoValidValues)
             * a validation method name (ParmInfoMethod)
    Make sure any method named in a ParmInfoMethod element is
    implemented in the CGI publishing.py script.

    This support was added in response to security vulnerabilities
    uncovered in the original publishing.py script.
    ============================================================ -->
 <xsd:complexType           name = "ParmInfo">
  <xsd:sequence>
   <xsd:element             name = "ParmInfoName"
                            type = "xsd:string"/>
   <xsd:element             name = "ParmInfoHelp"
                            type = "xsd:string"/>
   <xsd:choice>
    <xsd:element            name = "ParmInfoPattern"
                            type = "xsd:string"/>
    <xsd:element            name = "ParmInfoMethod"
                            type = "xsd:string"/>
    <xsd:element            name = "ParmInfoValidValues"
                            type = "ParmInfoValidValues"/>
   </xsd:choice>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    Values are check with case sensitivity turned on.
    ============================================================ -->
 <xsd:complexType           name = "ParmInfoValidValues">
  <xsd:sequence>
   <xsd:element             name = "ParmInfoValidValue"
                            type = "xsd:string"
                       maxOccurs = "unbounded"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    Optional block of per document type error thresholds.
    ============================================================ -->
 <xsd:complexType           name = "PerDoctypeErrorThresholds">
  <xsd:sequence>
   <xsd:element             name = "PerDoctypeErrorThreshold"
                            type = "PerDoctypeErrorThreshold"
                       maxOccurs = "unbounded"/>
  </xsd:sequence>
 </xsd:complexType>

 <!--
    ============================================================
    Limit on the number of failures for documents of a specific
    document type which can be encountered without marking the
    entire job as having failed. If such a threshold is exceeded,
    the job will be allowed to run to completion (unless the
    general error threshold has been reached) so that all of the
    errors can be reported and corrected at the same time. After
    the job has completed, the job will then be marked as having
    failed. (OCECDR-3951)
    ============================================================ -->
 <xsd:complexType           name = "PerDoctypeErrorThreshold">
  <xsd:sequence>
   <xsd:element             name = "Doctype"
                            type = "xsd:string"/>
   <xsd:element             name = "MaxErrors"
                            type = "xsd:integer"/>
  </xsd:sequence>
 </xsd:complexType>

</xsd:schema>
