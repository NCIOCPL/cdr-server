<?xml version="1.0" encoding="UTF-8" ?>

<!-- CdrCommonBase.xml

     BZIssue::860
     BZIssue::1126
     BZIssue::1385
     BZIssue::1818
     BZIssue::1934
     BZIssue::1970
     BZIssue::2604
     BZIssue::2964
     BZIssue::3100
     BZIssue::3332
     BZIssue::4524
     BZIssue::4849
     BZIssue::4862
     BZIssue::5016
     BZIssue::5025
     BZIssue::5088
     BZIssue::5122
     JIRA::OCECDR-3657
     JIRA::OCECDR-3840
     JIRA::OCECDR-3924 - remove Compact attribute from list elements
     JIRA::OCECDR-4020 - restore Compact attribute

 -->

<xsd:schema              xmlns:xsd       = 'http://www.w3.org/2001/XMLSchema'>

 <xsd:annotation>
  <xsd:appinfo>
   <pattern>
    <rule context = 'PostalAddress|SpecificPostalAddress'>
     <assert>
      <test><![CDATA[
@AddressType != "US" or
                                        document(concat("cdrutil:/valid-zip/",
                                                        PostalCode_ZIP)) != ""
]]>
      </test>
      <message><![CDATA[
U.S. address must have valid ZIP code
]]>
      </message>
     </assert>
     <assert>
      <test><![CDATA[
@AddressType != "US" or
                                        PoliticalSubUnit_State
]]>
      </test>
      <message><![CDATA[
U.S. address must have PoliticalSubUnit_State element
]]>
      </message>
     </assert>
     <assert>
      <test><![CDATA[
@AddressType != "US" or
                    string(number(substring(Country/@cdr-ref,4))) =
                      document("cdrutil:/sql-query/
                    SELECT doc_id
                      FROM query_term
                     WHERE path = '/Country/CountryFullName'
                       AND value = 'U.S.A.'")
                       /SqlResult/row/col[@name="doc_id"]
]]>
      </test>
      <message><![CDATA[
AddressType is US but Country is not U.S.A.
]]>
      </message>
     </assert>
     <assert>
      <test><![CDATA[
@AddressType = "US" or
                    string(number(substring(Country/@cdr-ref,4))) !=
                      document("cdrutil:/sql-query/
                    SELECT doc_id
                      FROM query_term
                     WHERE path = '/Country/CountryFullName'
                       AND value = 'U.S.A.'")
                       /SqlResult/row/col[@name="doc_id"]
]]>
      </test>
      <message><![CDATA[
AddressType is Non-US but Country=U.S.A.
]]>
      </message>
     </assert>
    </rule>
   </pattern>

   <!-- Separated out to suppress zip validation for external addresses. -->
   <pattern>
    <rule context = 'ExternalSiteAddress'>
     <assert>
      <test><![CDATA[
@AddressType != "US" or
                                        PoliticalSubUnit_State
]]>
      </test>
      <message><![CDATA[
U.S. address must have PoliticalSubUnit_State element
]]>
      </message>
     </assert>
     <assert>
      <test><![CDATA[
@AddressType != "US" or
                    string(number(substring(Country/@cdr-ref,4))) =
                      document("cdrutil:/sql-query/
                    SELECT doc_id
                      FROM query_term
                     WHERE path = '/Country/CountryFullName'
                       AND value = 'U.S.A.'")
                       /SqlResult/row/col[@name="doc_id"]
]]>
      </test>
      <message><![CDATA[
AddressType is US but Country is not U.S.A.
]]>
      </message>
     </assert>
     <assert>
      <test><![CDATA[
@AddressType = "US" or
                    string(number(substring(Country/@cdr-ref,4))) !=
                      document("cdrutil:/sql-query/
                    SELECT doc_id
                      FROM query_term
                     WHERE path = '/Country/CountryFullName'
                       AND value = 'U.S.A.'")
                       /SqlResult/row/col[@name="doc_id"]
]]>
      </test>
      <message><![CDATA[
AddressType is Non-US but Country=U.S.A.
]]>
      </message>
     </assert>
    </rule>
   </pattern>

   <!-- This one tests all three kinds of addresses -->
   <!-- Oops! can't have multiple blocks of rules for the same context.
        The two assertions below have been propogated to the rule sets
        above.
   <pattern>
    <rule context = 'PostalAddress|SpecificPostalAddress|
                                        ExternalSiteAddress'>
     <assert>
      <test><![CDATA[
@AddressType != "US" or
                    string(number(substring(Country/@cdr-ref,4))) =
                      document("cdrutil:/sql-query/
                    SELECT doc_id
                      FROM query_term
                     WHERE path = '/Country/CountryFullName'
                       AND value = 'U.S.A.'")
                       /SqlResult/row/col[@name="doc_id"]
]]>
      </test>
      <message><![CDATA[
AddressType is US but Country is not U.S.A.
]]>
      </message>
     </assert>
     <assert>
      <test><![CDATA[
@AddressType = "US" or
                    string(number(substring(Country/@cdr-ref,4))) !=
                      document("cdrutil:/sql-query/
                    SELECT doc_id
                      FROM query_term
                     WHERE path = '/Country/CountryFullName'
                       AND value = 'U.S.A.'")
                       /SqlResult/row/col[@name="doc_id"]
]]>
      </test>
      <message><![CDATA[
AddressType is Non-US but Country=U.S.A.
]]>
      </message>
     </assert>
    </rule>
   </pattern>
   <pattern>
      <rule context = 'PoliticalSubUnit_State'>
     <assert>
      <test><![CDATA[
document(concat("cdrutil:/sql-query/
          SELECT value
            FROM query_term_pub
           WHERE path = '/PoliticalSubUnit/Country/@cdr:ref'
             AND doc_id = ?~", substring(@cdr-ref,4))
             )/SqlResult/row/col[@name="value"] = ../Country/@cdr-ref
]]>
      </test>
      <message><![CDATA[
PoliticalSubUnit_State doc links to a different country from this
      address Country link
]]>
      </message>
     </assert>
    </rule>
   </pattern>
  -->
   <pattern>
    <rule context = 'AltTitle'>
     <assert>
      <test><![CDATA[
(@TitleType != "Short" or
                                        string-length() < 65) and
					(@TitleType != "Navlabel" or
					string-length() < 101)
]]>
      </test>
      <message><![CDATA[
AltTitle exceeds allowed length (max 64/Short; 100/Navlabel)
]]>
      </message>
     </assert>
    </rule>
   </pattern>
   <pattern>
    <rule context = 'PoliticalSubUnit_State'>

     <!-- SubUnit doc->Country link matches this address Country link
          That's clear from reading the expression, right? -->
     <assert>
      <test><![CDATA[
document(concat("cdrutil:/sql-query/
          SELECT
              CASE
                WHEN ISNUMERIC('",string(number(substring(@cdr-ref,4))),"') = 1 THEN (
                  SELECT value
                    FROM query_term
                   WHERE path = '/PoliticalSubUnit/Country/@cdr:ref'
                     AND doc_id = ?)
                ELSE ?
              END AS value",
                             "~", string(number(substring(@cdr-ref,4))),
                             "~", ../Country/@cdr-ref)
             )/SqlResult/row/col[@name="value"] = ../Country/@cdr-ref
]]>
      </test>
      <message><![CDATA[
PoliticalSubUnit_State is in different country from this address Country
]]>
      </message>
     </assert>
    </rule>
   </pattern>
  </xsd:appinfo>
 </xsd:annotation>

<!--=================================================================-->
<!--                  TEXT MARKUP ELEMENT GROUPS                     -->
<!--=================================================================-->
  <xsd:group             name            = 'CommonTextElements'>
    <xsd:choice>
      <xsd:element       name            = 'Comment'
                         type            = 'Comment'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'ResponseToComment'
                         type            = 'Comment'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'Section'
                         type            = 'Section'
                         minOccurs       = '0'/>
    </xsd:choice>
  </xsd:group>

  <xsd:group             name            = 'TitleMarkupElements'>
    <xsd:choice>
      <xsd:element       name            = 'Emphasis'
                         type            = 'PhraseLevelWithoutId'/>
      <xsd:element       name            = 'Strong'
                         type            = 'PhraseLevelWithoutId'/>
      <xsd:element       name            = 'Subscript'
                         type            = 'PhraseLevelWithoutId'/>
      <xsd:element       name            = 'Superscript'
                         type            = 'PhraseLevelWithoutId'/>
      <xsd:element       name            = 'TT'
                         type            = 'PhraseLevel'/>
      <xsd:element       name            = 'GeneName'
                         type            = 'PhraseLevelWithoutId'/>
      <xsd:element       name            = 'ScientificName'
                         type            = 'PhraseLevelWithoutId'/>
      <xsd:element       name            = 'ForeignWord'
                         type            = 'PhraseLevelWithoutId'/>
      <xsd:element       name            = 'TableNumber'
                         type            = 'EmptyContent'/>
    </xsd:choice>
  </xsd:group>

  <xsd:group             name            = 'OtherPhraseElements'>
    <xsd:choice>
      <xsd:element       name            = 'LOERef'
                         type            = 'SummaryRef'/>
      <xsd:element       name            = 'LOEFragmentRef'
                         type            = 'SummaryFragmentRef'/>
      <xsd:element       name            = 'LOELink'
                         type            = 'SummaryLink'/>
      <xsd:element       name            = 'LOEFragmentLink'
                         type            = 'SummaryFragmentLink'/>
      <xsd:element       name            = 'CitationLink'
                         type            = 'CitationLink'/>
      <xsd:element       name            = 'CitationRef'
                         type            = 'CitationRef'/>
          <!--
      <xsd:element       name            = 'CitationFragmentLink'
                         type            = 'CitationFragmentLink'/>
      <xsd:element       name            = 'CitationFragmentRef'
                         type            = 'CitationFragmentRef'/>
            -->
      <xsd:element       name            = 'SummaryRef'
                         type            = 'SummaryRef'/>
      <xsd:element       name            = 'DrugSummaryRef'
                         type            = 'DrugSummaryRef'/>
      <xsd:element       name            = 'SummaryFragmentRef'
                         type            = 'SummaryFragmentRef'/>
      <xsd:element       name            = 'SummaryLink'
                         type            = 'SummaryLink'/>
      <xsd:element       name            = 'DrugSummaryLink'
                         type            = 'DrugSummaryLink'/>
      <xsd:element       name            = 'SummaryFragmentLink'
                         type            = 'SummaryFragmentLink'/>
      <xsd:element       name            = 'ProtocolRef'
                         type            = 'ProtocolRef'/>
      <xsd:element       name            = 'ProtocolLink'
                         type            = 'ProtocolLink'/>
      <xsd:element       name            = 'DrugName'
                         type            = 'PhraseLevelWithoutId'/>
      <xsd:element       name            = 'InterventionName'
                         type            = 'PhraseLevelWithoutId'/>
      <xsd:element       name            = 'GlossaryTermRef'
                         type            = 'GlossaryRef'/>
      <xsd:element       name            = 'GlossaryTermLink'
                         type            = 'GlossaryLink'/>
      <xsd:element       name            = 'ExternalRef'
                         type            = 'ExternalRef'/>
      <xsd:element       name            = 'Quote'
                         type            = 'Quote'/>
      <xsd:element       name            = 'Note'
                         type            = 'GeneralText'/>
      <xsd:element       name            = 'StandardWording'
                         type            = 'PhraseLevelWithoutId'/>
      <xsd:element       name            = 'DocumentationLink'
                         type            = 'DocumentationLink'/>
      <xsd:element       name            = 'DocumentationRef'
                         type            = 'DocumentationRef'/>
      <xsd:element       name            = 'DocumentationFragmentLink'
                         type            = 'DocumentationFragmentLink'/>
      <xsd:element       name            = 'DocumentationFragmentRef'
                         type            = 'DocumentationFragmentRef'/>
      <xsd:element       name            = 'MediaLink'
                         type            = 'MediaLink'/>
      <xsd:element       name            = 'MediaRef'
                         type            = 'MediaRef'/>
      <xsd:element       name            = 'MiscellaneousDocLink'
                         type            =
                                         'MiscellaneousLinkWithOptionalFragment'/>
      <xsd:element       name            = 'FigureNumber'
                         type            = 'EmptyContent'/>
      <xsd:element       name            = 'ReferencedTableNumber'
                         type            = 'ReferencedNumber'/>
      <xsd:element       name            = 'ReferencedFigureNumber'
                         type            = 'ReferencedNumber'/>
    </xsd:choice>
  </xsd:group>

  <xsd:group             name            = 'PhraseElements'>
    <xsd:choice>
      <xsd:group         ref             = 'TitleMarkupElements'/>
      <xsd:group         ref             = 'OtherPhraseElements'/>
    </xsd:choice>
  </xsd:group>

  <xsd:group             name            = 'ParaLevelElements'>
    <xsd:choice>
      <xsd:element       name            = 'Para'
                         type            = 'PhraseLevel'/>
      <xsd:element       name            = 'LiteralLayout'
                         type            = 'PhraseLevel'/>
      <xsd:element       name            = 'Table'
                         type            = 'Table'/>
      <xsd:element       name            = 'ItemizedList'
                         type            = 'ItemizedList'/>
      <xsd:element       name            = 'OrderedList'
                         type            = 'OrderedList'/>
      <xsd:element       name            = 'QandASet'
                         type            = 'QandASet'/>
      <xsd:element       name            = 'Contact'
                         type            = 'Contact'/>
      <xsd:element       name            = 'MediaLink'
                         type            = 'MediaLink'/>
      <xsd:element       name            = 'MiscellaneousDocLink'
                         type            =
                                         'MiscellaneousLinkWithOptionalFragment'/>
      <xsd:element       name            = 'PlaceHolder'
                         type            = 'PlaceHolder'/>
      <xsd:element       name            = 'SummaryModuleLink'
                         type            = 'SummaryLink'/>
    </xsd:choice>
  </xsd:group>

  <xsd:group             name            = 'PhraseOrParaElements'>
    <xsd:choice>
      <xsd:group         ref             = 'PhraseElements'/>
      <xsd:group         ref             = 'ParaLevelElements'/>
    </xsd:choice>
  </xsd:group>

<!--=================================================================-->
<!--                  GENERAL TEXT ELEMENT TYPES                     -->
<!--=================================================================-->
  <xsd:complexType       name            = 'Title'
                         mixed           = 'true'>
    <xsd:choice          minOccurs       = '0'
                         maxOccurs       = 'unbounded'>
      <xsd:group         ref             = 'TitleMarkupElements'/>
    </xsd:choice>
  </xsd:complexType>

  <xsd:complexType       name            = 'AltTitle'
                         mixed           = 'true'>
    <xsd:choice          minOccurs       = '0'
                         maxOccurs       = 'unbounded'>
      <xsd:group         ref             = 'TitleMarkupElements'/>
    </xsd:choice>
    <xsd:attribute       name            = 'TitleType'
                         type            = 'AltTitleType'
                         use             = 'required'/>
    <xsd:attribute       name            = 'Usage'
                         type            = 'NotEmptyString'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'PhraseLevel'
                         mixed           = 'true'>
    <xsd:choice          minOccurs       = '0'
                         maxOccurs       = 'unbounded'>
      <xsd:group         ref             = 'PhraseElements'/>
      <xsd:group         ref             = 'CommonTextElements'/>
      <xsd:element       name            = 'PlaceHolder'
                         type            = 'PlaceHolder'/>
    </xsd:choice>
    <xsd:attribute       name            = 'cdr-id'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'IncludedDevices'
                         type            = 'IncludedDevices'/>
    <xsd:attribute       name            = 'ExcludedDevices'
                         type            = 'ExcludedDevices'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'PhraseLevelWithoutId'
                         mixed           = 'true'>
    <xsd:choice          minOccurs       = '0'
                         maxOccurs       = 'unbounded'>
      <xsd:group         ref             = 'PhraseElements'/>
      <xsd:group         ref             = 'CommonTextElements'/>
    </xsd:choice>
  </xsd:complexType>

  <xsd:complexType       name            = 'ParaLevel'>
    <xsd:choice          minOccurs       = '1'
                         maxOccurs       = 'unbounded'>
      <xsd:group         ref             = 'ParaLevelElements'/>
      <xsd:group         ref             = 'CommonTextElements'/>
    </xsd:choice>
  </xsd:complexType>

  <xsd:complexType       name            = 'GeneralText'
                         mixed           = 'true'>
    <xsd:choice          minOccurs       = '0'
                         maxOccurs       = 'unbounded'>
      <xsd:group         ref             = 'PhraseOrParaElements'/>
      <xsd:group         ref             = 'CommonTextElements'/>
    </xsd:choice>
  </xsd:complexType>

  <xsd:complexType       name            = 'Section'>
    <xsd:sequence>
      <xsd:element       name            = 'Title'
                         type            = 'Title'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'AltTitle'
                         type            = 'AltTitle'
                         minOccurs       = '0'
                         maxOccurs       = 'unbounded'/>
      <xsd:element       name            = 'KeyPoint'
                         type            = 'PhraseLevel'
                         minOccurs       = '0'
                         maxOccurs       = 'unbounded'/>
      <xsd:choice        minOccurs       = '0'
                         maxOccurs       = 'unbounded'>
        <xsd:group       ref             = 'ParaLevelElements'/>
      </xsd:choice>
      <xsd:element       name            = 'Section'
                         type            = 'Section'
                         minOccurs       = '0'
                         maxOccurs       = 'unbounded'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'cdr-id'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'Contact'>
    <xsd:sequence>
      <xsd:element       name            = 'ContactName'
                         type            = 'NotEmptyString'
                         minOccurs       = '0'
                         maxOccurs       = 'unbounded'/>
      <xsd:element       name            = 'ContactDetail'
                         type            = 'ContactDetail'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'IncludedDevices'
                         type            = 'IncludedDevices'/>
    <xsd:attribute       name            = 'ExcludedDevices'
                         type            = 'ExcludedDevices'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'ContactDetail'>
    <xsd:sequence>
      <xsd:element       name            = 'PostalAddress'
                         type            = 'PostalAddress'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'Phone'
                         type            = 'Phone'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'TollFreePhone'
                         type            = 'NotEmptyString'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'Fax'
                         type            = 'NotEmptyString'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'Email'
                         type            = 'Email'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'WebSite'
                         type            = 'ExternalRef'
                         minOccurs       = '0'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'cdr-id'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'Email'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'EmailAddress'>
        <xsd:attribute   name            = 'Public'
                         type            = 'No'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'Phone'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'Public'
                         type            = 'No'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'PostalAddress'>
    <xsd:sequence>
      <xsd:element       name            = 'Street'
                         type            = 'NotEmptyString'
                         minOccurs       = '0'
                         maxOccurs       = 'unbounded'/>
      <xsd:element       name            = 'City'
                         type            = 'NotEmptyString'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'CitySuffix'
                         type            = 'NotEmptyString'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'PoliticalSubUnit_State'
                         type            = 'PoliticalSubUnitLink'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'Country'
                         type            = 'CountryLink'/>
      <xsd:element       name            = 'PostalCode_ZIP'
                         type            = 'NotEmptyString'
                         minOccurs       = '0'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'Public'
                         type            = 'No'/>
    <xsd:attribute       name            = 'AddressType'
                         type            = 'AddressType'
                         use             = 'required'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'Quote'>
    <xsd:sequence>
      <xsd:element       name            = 'QuotedText'
                         type            = 'GeneralText'/>
      <xsd:element       name            = 'Source'
                         type            = 'NotEmptyString'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'QuoteAuthor'
                         type            = 'NotEmptyString'
                         minOccurs       = '0'/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType       name            = 'ItemizedList'>
    <xsd:sequence>
      <xsd:element       name            = 'ListTitle'
                         type            = 'Title'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'ListItem'
                         type            = 'GeneralText'
                         maxOccurs       = 'unbounded'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'Style'
                         type            = 'ItemizedListStyle'
                         use             = 'required'/>
    <xsd:attribute       name            = 'cdr-id'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'IncludedDevices'
                         type            = 'IncludedDevices'/>
    <xsd:attribute       name            = 'ExcludedDevices'
                         type            = 'ExcludedDevices'/>
    <xsd:attribute       name            = 'Compact'
                         type            = 'No'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'OrderedList'>
    <xsd:sequence>
      <xsd:element       name            = 'ListTitle'
                         type            = 'Title'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'ListItem'
                         type            = 'GeneralText'
                         maxOccurs       = 'unbounded'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'Style'
                         type            = 'OrderedListStyle'/>
    <xsd:attribute       name            = 'cdr-id'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'IncludedDevices'
                         type            = 'IncludedDevices'/>
    <xsd:attribute       name            = 'ExcludedDevices'
                         type            = 'ExcludedDevices'/>
    <xsd:attribute       name            = 'Compact'
                         type            = 'No'/>
  </xsd:complexType>

  <!-- CdrHref and CdrRef are not currently used but should be left for
           future possible use
    -->

  <xsd:complexType       name            = 'CdrHref'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocId'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'CdrRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'ExternalRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-xref'
                         type            = 'xsd:anyURI'
                         use             = 'required'/>
        <xsd:attribute   name            = 'SourceTitle'
                         type            = 'xsd:string'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'ProtocolLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
        <xsd:attribute   name            = 'comment'
                         type            = 'xsd:string'/>
        <xsd:attribute   name            = 'LastReviewedDate'
                         type            = 'xsd:date'/>
        <xsd:attribute   name            = 'LastReviewedStatus'
                         type            = 'xsd:string'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'ProtocolFragmentLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'ProtocolRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
        <xsd:attribute   name            = 'comment'
                         type            = 'xsd:string'/>
        <xsd:attribute   name            = 'LastReviewedDate'
                         type            = 'xsd:date'/>
        <xsd:attribute   name            = 'LastReviewedStatus'
                         type            = 'xsd:string'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'ProtocolFragmentRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'SummaryLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
        <xsd:attribute   name            = 'IncludedDevices'
                         type            = 'IncludedDevices'/>
        <xsd:attribute   name            = 'ExcludedDevices'
                         type            = 'ExcludedDevices'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'DrugSummaryLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'SummaryFragmentLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'SummaryRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'DrugSummaryRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocId'
                         use             = 'required'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'SummaryFragmentRef'
                         mixed           = 'true'>
    <xsd:choice          minOccurs       = '0'
                         maxOccurs       = 'unbounded'>
      <xsd:element       name            = 'ReferencedTableNumber'
                         type            = 'ReferencedNumber'/>
      <xsd:element       name            = 'ReferencedFigureNumber'
                         type            = 'ReferencedNumber'/>
    </xsd:choice>
    <xsd:attribute       name            = 'cdr-href'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
    <xsd:attribute       name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'ReferencedNumber'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'EmptyContent'>
        <xsd:attribute   name            = 'Target'
                         type            = 'DocIdWithFragment'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'OrganizationLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'OrganizationOrPersonLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'OrganizationFragmentLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'OrganizationRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'OrganizationFragmentRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'OrganizationLinkWithOptionalFragment'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'xsd:string'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocIdWithOptionalFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'xsd:string'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'PersonLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'PersonFragmentLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'PersonRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'PersonFragmentRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'TerminologyLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'TerminologyRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'PoliticalSubUnitLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'CitationLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
        <xsd:attribute   name            = 'comment'
                         type            = 'xsd:string'/>
        <xsd:attribute   name            = 'LastReviewedDate'
                         type            = 'xsd:date'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'CitationFragmentLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'CitationRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
        <xsd:attribute   name            = 'comment'
                         type            = 'xsd:string'/>
        <xsd:attribute   name            = 'LastReviewedDate'
                         type            = 'xsd:date'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'CitationFragmentRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'MiscellaneousLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'MiscellaneousFragmentLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'MiscellaneousLinkWithOptionalFragment'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocIdWithOptionalFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
        <xsd:attribute   name            = 'IncludedDevices'
                         type            = 'IncludedDevices'/>
        <xsd:attribute   name            = 'ExcludedDevices'
                         type            = 'ExcludedDevices'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'MiscellaneousRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'MiscellaneousFragmentRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocIdWithFragment'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'DiagnosisLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'GlossaryLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'GlossaryConceptLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'xsd:string'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'GlossaryNameLink'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'xsd:string'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'GlossaryRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocId'
                         use             = 'required'/>
        <xsd:attribute   name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'QandASet'>
    <xsd:sequence>
      <xsd:element       name            = 'MarkedUpTitle'
                         type            = 'Title'
                         minOccurs       = '0'/>
      <xsd:choice>
        <xsd:element     name            = 'QandADiv'
                         type            = 'QandASet'
                         maxOccurs       = 'unbounded'/>
        <xsd:element     name            = 'QandAEntry'
                         type            = 'QandAEntry'
                         maxOccurs       = 'unbounded'/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute       name            = 'cdr-id'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'IncludedDevices'
                         type            = 'IncludedDevices'/>
    <xsd:attribute       name            = 'ExcludedDevices'
                         type            = 'ExcludedDevices'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'QandAEntry'>
    <xsd:sequence>
      <xsd:element       name            = 'Question'
                         type            = 'GeneralText'/>
      <xsd:element       name            = 'Answer'
                         type            = 'GeneralText'
                         minOccurs       = '0'
                         maxOccurs       = 'unbounded'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'cdr-id'
                         type            = 'NotEmptyString'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'DatedAction'>
    <xsd:sequence>
      <xsd:element       name            = 'ActionDescription'
                         type            = 'NotEmptyString'/>
      <xsd:element       name            = 'ActionDate'
                         type            = 'xsd:date'/>
      <xsd:element       name            = 'Comment'
                         type            = 'Comment'
                         minOccurs       = '0'/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType       name            = 'PlaceHolder'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'EmptyContent'>
        <xsd:attribute   name            = 'name'
                         type            = 'xsd:string'
                         use             = 'required'/>
        <xsd:attribute   name            = 'IncludedDevices'
                         type            = 'IncludedDevices'/>
        <xsd:attribute   name            = 'ExcludedDevices'
                         type            = 'ExcludedDevices'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:simpleType        name            = 'EmptyContent'>
   <xsd:restriction      base            = 'xsd:string'>
    <xsd:maxLength       value           = '0'/>
   </xsd:restriction>
  </xsd:simpleType>

<!--=================================================================-->
<!--                         TABLE TYPES                             -->
<!--=================================================================-->
  <xsd:complexType       name            = 'Table'>
    <xsd:sequence>
      <xsd:element       name            = 'Title'
                         type            = 'Title'/>
      <xsd:element       name            = 'TitleAbbrev'
                         type            = 'Title'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'TGroup'
                         type            = 'TGroup'
                         maxOccurs       = 'unbounded'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'Frame'
                         type            = 'FrameAttrType'/>
    <xsd:attribute       name            = 'RowSep'
                         type            = 'YesOrNo'/>
    <xsd:attribute       name            = 'ColSep'
                         type            = 'YesOrNo'/>
    <xsd:attribute       name            = 'TabStyle'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'cdr-id'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'IncludedDevices'
                         type            = 'IncludedDevices'/>
    <xsd:attribute       name            = 'ExcludedDevices'
                         type            = 'ExcludedDevices'/>
    <xsd:attribute       name            = 'ExcludeFromNumberingSequence'
                         type            = 'Yes'/>
    <xsd:attribute       name            = 'PdqKey'
                         type            = 'NotEmptyString'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'InformalTable'>
    <xsd:sequence>
      <xsd:element       name            = 'TGroup'
                         type            = 'TGroup'
                         maxOccurs       = 'unbounded'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'Frame'
                         type            = 'FrameAttrType'/>
    <xsd:attribute       name            = 'RowSep'
                         type            = 'YesOrNo'/>
    <xsd:attribute       name            = 'ColSep'
                         type            = 'YesOrNo'/>
    <xsd:attribute       name            = 'TabStyle'
                         type            = 'xsd:NMTOKEN'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'TGroup'>
    <xsd:sequence>
      <xsd:element       name            = 'ColSpec'
                         type            = 'ColSpec'
                         minOccurs       = '0'
                         maxOccurs       = 'unbounded'/>
      <xsd:element       name            = 'SpanSpec'
                         type            = 'SpanSpec'
                         minOccurs       = '0'
                         maxOccurs       = 'unbounded'/>
      <xsd:element       name            = 'THead'
                         type            = 'THeadOrFoot'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'TFoot'
                         type            = 'THeadOrFoot'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'TBody'
                         type            = 'TBody'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'RowSep'
                         type            = 'YesOrNo'/>
    <xsd:attribute       name            = 'ColSep'
                         type            = 'YesOrNo'/>
    <xsd:attribute       name            = 'Align'
                         type            = 'Align'/>
    <xsd:attribute       name            = 'Char'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'Charoff'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'Cols'
                         type            = 'xsd:integer'
                         use             = 'required'/>
    <xsd:attribute       name            = 'TGroupStyle'
                         type            = 'xsd:NMTOKEN'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'ColSpec'>
    <xsd:attribute       name            = 'Align'
                         type            = 'Align'/>
    <xsd:attribute       name            = 'Char'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'Charoff'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'ColName'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'ColNum'
                         type            = 'xsd:integer'/>
    <xsd:attribute       name            = 'ColWidth'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'RowSep'
                         type            = 'YesOrNo'/>
    <xsd:attribute       name            = 'ColSep'
                         type            = 'YesOrNo'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'SpanSpec'>
    <xsd:attribute       name            = 'Align'
                         type            = 'Align'/>
    <xsd:attribute       name            = 'Char'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'Charoff'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'SpanName'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'NameSt'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'NameEnd'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'RowSep'
                         type            = 'YesOrNo'/>
    <xsd:attribute       name            = 'ColSep'
                         type            = 'YesOrNo'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'THeadOrFoot'>
    <xsd:sequence>
      <xsd:element       name            = 'ColSpec'
                         type            = 'ColSpec'
                         minOccurs       = '0'
                         maxOccurs       = 'unbounded'/>
      <xsd:element       name            = 'Row'
                         type            = 'Row'
                         maxOccurs       = 'unbounded'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'Valign'
                         type            = 'Valign'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'TBody'>
    <xsd:sequence>
      <xsd:element       name            = 'Row'
                         type            = 'Row'
                         maxOccurs       = 'unbounded'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'Valign'
                         type            = 'Valign'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'Row'>
    <xsd:sequence>
      <xsd:element       name            = 'entry'
                         type            = 'Entry'
                         maxOccurs       = 'unbounded'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'RowSep'
                         type            = 'YesOrNo'/>
    <xsd:attribute       name            = 'Valign'
                         type            = 'Valign'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'Entry'
                         mixed           = 'true'>
    <xsd:choice          minOccurs       = '0'
                         maxOccurs       = 'unbounded'>
      <xsd:group         ref             = 'PhraseElements'/>
      <xsd:element       name            = 'Comment'
                         type            = 'Comment'/>
      <xsd:element       name            = 'ResponseToComment'
                         type            = 'Comment'/>
    </xsd:choice>
    <xsd:attribute       name            = 'RowSep'
                         type            = 'YesOrNo'/>
    <xsd:attribute       name            = 'ColSep'
                         type            = 'YesOrNo'/>
    <xsd:attribute       name            = 'NameSt'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'NameEnd'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'SpanName'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'MoreRows'
                         type            = 'xsd:integer'/>
    <xsd:attribute       name            = 'Align'
                         type            = 'Align'/>
    <xsd:attribute       name            = 'Char'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'Charoff'
                         type            = 'xsd:NMTOKEN'/>
    <xsd:attribute       name            = 'Cols'
                         type            = 'xsd:integer'/>
    <xsd:attribute       name            = 'Valign'
                         type            = 'Valign'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'DocumentationLink'>

   <xsd:simpleContent>

      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'/>
      </xsd:extension>

    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'MediaLink'>
    <xsd:sequence>
      <xsd:element       name            = 'MediaID'
                         type            = 'MediaID'/>
      <xsd:element       name            = 'Caption'
                         type            = 'GeneralText'
                         minOccurs       = '0'
                         maxOccurs       = 'unbounded'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'AlternativeText'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'Inline'
                         type            = 'YesNo'/>
    <xsd:attribute       name            = 'UseCaption'
                         type            = 'YesNo'/>
    <xsd:attribute       name            = 'size'
                         type            = 'MediaSize'/>
    <xsd:attribute       name            = 'placement'
                         type            = 'ImagePlacement'/>
    <xsd:attribute       name            = 'thumb'
                         type            = 'YesNo'/>
    <xsd:attribute       name            = 'MinWidth'
                         type            = 'xsd:integer'/>
    <xsd:attribute       name            = 'cdr-id'
                         type            = 'NotEmptyString'/>
    <xsd:attribute       name            = 'IncludedDevices'
                         type            = 'IncludedDevices'/>
    <xsd:attribute       name            = 'ExcludedDevices'
                         type            = 'ExcludedDevices'/>
    <xsd:attribute       name            = 'ExcludeFromNumberingSequence'
                         type            = 'Yes'/>
  </xsd:complexType>

  <xsd:complexType       name            = 'MediaID'>
   <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:simpleType        name            = 'MediaSize'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'full'/>
      <xsd:enumeration   value           = 'half'/>
      <xsd:enumeration   value           = 'third'/>
      <xsd:enumeration   value           = 'quarter'/>
      <xsd:enumeration   value           = 'fifth'/>
      <xsd:enumeration   value           = 'sixth'/>
      <xsd:enumeration   value           = 'as-is'/>
      <xsd:enumeration   value           = 'three-quarters'/>
    </xsd:restriction>
  </xsd:simpleType>


  <xsd:simpleType        name            = 'ImagePlacement'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'image-center'/>
      <xsd:enumeration   value           = 'image-center-full'/>
      <xsd:enumeration   value           = 'image-center-medium'/>
      <xsd:enumeration   value           = 'image-left-medium'/>
      <xsd:enumeration   value           = 'image-right-medium'/>
      <xsd:enumeration   value           = 'image-left-small'/>
      <xsd:enumeration   value           = 'image-right-small'/>
    </xsd:restriction>
  </xsd:simpleType>


  <xsd:complexType       name            = 'DocumentationFragmentLink'>

   <xsd:simpleContent>

      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocIdWithFragment'/>
      </xsd:extension>

    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'SupplementaryInfoLink'>
   <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-ref'
                         type            = 'DocId'
                         use             = 'required'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'MediaRef'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'FragmentIdWithOptionalDocId'
                         use             = 'required'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name           = 'DocumentationRef'>

   <xsd:simpleContent>

      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocId'/>
      </xsd:extension>

    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'DocumentationFragmentRef'>

   <xsd:simpleContent>

      <xsd:extension     base            = 'NotEmptyString'>
        <xsd:attribute   name            = 'cdr-href'
                         type            = 'DocIdWithFragment'/>
      </xsd:extension>

    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'UpdateMode'>

   <xsd:simpleContent>

      <xsd:extension     base            = 'UpdateModeValidValues'>
        <xsd:attribute   name            = 'MailerType'
                         type            = 'MailerTypeValidValues'
                         use             = 'required'/>
      </xsd:extension>

    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'Comment'>
    <xsd:simpleContent>
      <xsd:extension     base            = 'xsd:string'>
        <xsd:attribute   name            = 'audience'
                         type            = 'CommentAudience'/>
        <xsd:attribute   name            = 'user'
                         type            = 'xsd:string'/>
        <xsd:attribute   name            = 'date'
                         type            = 'xsd:date'/>
        <xsd:attribute   name            = 'duration'
                         type            = 'CommentDuration'/>
        <xsd:attribute   name            = 'source'
                         type            = 'CommentSource'/>
        <xsd:attribute   name            = 'context'
                         type            = 'xsd:string'/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType       name            = 'RelatedDocumentsLinks'>
    <xsd:sequence>
      <xsd:element       name            = 'SupplementaryInfoLink'
                         type            = 'SupplementaryInfoLink'
                         maxOccurs       = 'unbounded'/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- Link to a Media document for a video hosted on YouTube,
           to be embedded in a player UI in the rendered linking
           document. The title, caption, and presentation template
           default values can be overridden here for this specific
           usage. See https://tracker.nci.nih.gov/browse/OCECDR-3558. -->
  <xsd:complexType       name            = 'EmbeddedVideo'>
    <xsd:sequence>
      <xsd:element       name            = 'VideoID'
                         type            = 'MediaID'/>
      <xsd:element       name            = 'SpecificMediaTitle'
                         type            = 'xsd:string'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'SpecificMediaCaption'
                         type            = 'SpecificMediaCaption'
                         minOccurs       = '0'/>
      <xsd:element       name            = 'SpecificVideoPresentationTemplate'
                         type            = 'VideoPresentationTemplate'
                         minOccurs       = '0'/>
    </xsd:sequence>
    <xsd:attribute       name            = 'cdr-id'
                         type            = 'NotEmptyString'/>
  </xsd:complexType>

  <!-- Mirrors the MediaCaption type in Media.xml, but without
           the audience and language attributes. This is used as
           part of an EmbeddedVideo block used in a CDR document
           which links to a Media document for a video. -->
  <xsd:complexType       name            = 'SpecificMediaCaption'
                         mixed           = 'true'>
    <xsd:choice          minOccurs       = '0'
                         maxOccurs       = 'unbounded'>
      <xsd:group         ref             = 'PhraseOrParaElements'/>
      <xsd:group         ref             = 'CommonTextElements'/>
    </xsd:choice>
  </xsd:complexType>

<!--=================================================================-->
<!--                    COMMON SIMPLE TYPES                          -->
<!--=================================================================-->

  <xsd:simpleType        name            = 'CommentAudience'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Internal'/>
      <xsd:enumeration   value           = 'External'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'NotEmptyString'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:minLength     value           = '0'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'NonEmptyString'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:minLength     value           = '1'/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- Fields that are really data, not text.  All whitespace normalized -->
  <xsd:simpleType        name            = 'DataString'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:pattern       value           = '\S+( \S+)*'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'ItemizedListStyle'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'simple'/>
      <xsd:enumeration   value           = 'bullet'/>
      <xsd:enumeration   value           = 'dash'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'OrderedListStyle'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Arabic'/>
      <xsd:enumeration   value           = 'UAlpha'/>
      <xsd:enumeration   value           = 'URoman'/>
      <xsd:enumeration   value           = 'LAlpha'/>
      <xsd:enumeration   value           = 'LRoman'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'YesOrNo'>
    <xsd:restriction     base            = 'xsd:integer'>
    <!--YesOrNo type used in tables only-->
      <xsd:enumeration   value           = '0'/>
      <xsd:enumeration   value           = '1'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'YesNo'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Yes'/>
      <xsd:enumeration   value           = 'No'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'FrameAttrType'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Sides'/>
      <xsd:enumeration   value           = 'Top'/>
      <xsd:enumeration   value           = 'Bottom'/>
      <xsd:enumeration   value           = 'TopBot'/>
      <xsd:enumeration   value           = 'All'/>
      <xsd:enumeration   value           = 'None'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'Align'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Center'/>
      <xsd:enumeration   value           = 'Char'/>
      <xsd:enumeration   value           = 'Justify'/>
      <xsd:enumeration   value           = 'Left'/>
      <xsd:enumeration   value           = 'Right'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'Valign'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Bottom'/>
      <xsd:enumeration   value           = 'Middle'/>
      <xsd:enumeration   value           = 'Top'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'DocId'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:pattern       value           = 'CDR[0-9]{10}'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'DocIdWithFragment'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:pattern       value           = 'CDR[0-9]{10}#[A-Za-z_]\S{0,31}'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'FragmentId'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:pattern       value           = '[A-Za-z_]\S{0,31}'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'AddressType'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'US'/>
    <!--Will enforce (through programming outside schema):
            1. Zip should be required
            2. State should be required
            3. Country=US
            4. Phone should be required
          -->
      <xsd:enumeration   value           = 'Non-US'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'PrimarySecondary'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Primary'/>
      <xsd:enumeration   value           = 'Secondary'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'No'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'No'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'Yes'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Yes'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'YN'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Y'/>
      <xsd:enumeration   value           = 'N'/>
          <!--For possible use in PubMed citations only-->
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'DocIdWithOptionalFragment'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:pattern       value           = 'CDR[0-9]{10}(#[A-Za-z_]\S*)?'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'FragmentIdWithOptionalDocId'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:pattern       value           = '(CDR[0-9]{10})?#[A-Za-z_]\S*'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'FragmentRef'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:pattern       value           = '#[A-Za-z_]\S*'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'MailerTypeValidValues'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Protocol_SandP'/>
      <xsd:enumeration   value           = 'Protocol_Abstract'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'UpdateModeValidValues'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Web-based'/>
      <xsd:enumeration   value           = 'External data file'/>
      <xsd:enumeration   value           = 'RSS'/>
      <xsd:enumeration   value           = 'COG'/>
      <xsd:enumeration   value           = 'Oncore'/>
      <xsd:enumeration   value           = 'NCIC'/>
      <xsd:enumeration   value           = 'Mail'/>
      <xsd:enumeration   value           = 'NCI Liaison Office'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'AltTitleType'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Short'/>
      <xsd:enumeration   value           = 'Display'/>
      <xsd:enumeration   value           = 'Navlabel'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'CommentDuration'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'permanent'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'CommentSource'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'advisory-board'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'EmailAddress'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:pattern       value           = '[^\s@]+@[^\s@]+\.[^\s@]+'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'NMTOKENS'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:pattern       value           = '\S+(\s+\S+)*'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'ExcludedDevices'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'none'/>
      <xsd:enumeration   value           = 'mobile'/>
      <xsd:enumeration   value           = 'screen'/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType        name            = 'IncludedDevices'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'mobile'/>
      <xsd:enumeration   value           = 'screen'/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- Controls three aspects of the embedded video's presentation:
           positioning, size, and whether the title is displayed.
           These are the allowed combinations. See the WCMS documentation
           for further details. -->
  <xsd:simpleType        name            = 'VideoPresentationTemplate'>
    <xsd:restriction     base            = 'xsd:string'>
      <xsd:enumeration   value           = 'Video100NoTitle'/>
      <xsd:enumeration   value           = 'Video100Title'/>
      <xsd:enumeration   value           = 'Video50NoTitle'/>
      <xsd:enumeration   value           = 'Video50NoTitleRight'/>
      <xsd:enumeration   value           = 'Video50TitleRight'/>
      <xsd:enumeration   value           = 'Video75NoTitle'/>
      <xsd:enumeration   value           = 'Video75Title'/>
    </xsd:restriction>
  </xsd:simpleType>

</xsd:schema>
